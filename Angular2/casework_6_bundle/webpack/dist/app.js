webpackJsonp([0,1,2],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar platform_browser_dynamic_1 = __webpack_require__(1);\r\nvar app_module_1 = __webpack_require__(24);\r\nvar platform = platform_browser_dynamic_1.platformBrowserDynamic();\r\nplatform.bootstrapModule(app_module_1.AppModule);\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2FwcC9tYWluLnRzPzk1ODQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGxhdGZvcm1Ccm93c2VyRHluYW1pYyB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYyc7XHJcbmltcG9ydCB7IEFwcE1vZHVsZSB9IGZyb20gJy4vYXBwLW1vZHVsZSc7XHJcbmNvbnN0IHBsYXRmb3JtID0gcGxhdGZvcm1Ccm93c2VyRHluYW1pYygpO1xyXG5wbGF0Zm9ybS5ib290c3RyYXBNb2R1bGUoQXBwTW9kdWxlKTtcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9+L2FuZ3VsYXIyLXRlbXBsYXRlLWxvYWRlciEuL2FwcC9tYWluLnRzXG4gKiovIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * @license Angular v2.0.0-rc.6\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n     true ? factory(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(22)) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/compiler', '@angular/core', '@angular/platform-browser'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}),global.ng.compiler,global.ng.core,global.ng.platformBrowser));\n}(this, function (exports,_angular_compiler,_angular_core,_angular_platformBrowser) { 'use strict';\n\n    var INTERNAL_BROWSER_PLATFORM_PROVIDERS = _angular_platformBrowser.__platform_browser_private__.INTERNAL_BROWSER_PLATFORM_PROVIDERS;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var globalScope;\n    if (typeof window === 'undefined') {\n        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n            globalScope = self;\n        }\n        else {\n            globalScope = global;\n        }\n    }\n    else {\n        globalScope = window;\n    }\n    // Need to declare a new variable for global here since TypeScript\n    // exports the original value of the symbol.\n    var global$1 = globalScope;\n    // TODO: remove calls to assert in production environment\n    // Note: Can't just export this and import in in other files\n    // as `assert` is a reserved keyword in Dart\n    global$1.assert = function assert(condition) {\n        // TODO: to be fixed properly via #2830, noop for now\n    };\n    function isPresent(obj) {\n        return obj !== undefined && obj !== null;\n    }\n    var NumberWrapper = (function () {\n        function NumberWrapper() {\n        }\n        NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };\n        NumberWrapper.equal = function (a, b) { return a === b; };\n        NumberWrapper.parseIntAutoRadix = function (text) {\n            var result = parseInt(text);\n            if (isNaN(result)) {\n                throw new Error('Invalid integer literal when parsing ' + text);\n            }\n            return result;\n        };\n        NumberWrapper.parseInt = function (text, radix) {\n            if (radix == 10) {\n                if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n                    return parseInt(text, radix);\n                }\n            }\n            else if (radix == 16) {\n                if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n                    return parseInt(text, radix);\n                }\n            }\n            else {\n                var result = parseInt(text, radix);\n                if (!isNaN(result)) {\n                    return result;\n                }\n            }\n            throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);\n        };\n        // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.\n        NumberWrapper.parseFloat = function (text) { return parseFloat(text); };\n        Object.defineProperty(NumberWrapper, \"NaN\", {\n            get: function () { return NaN; },\n            enumerable: true,\n            configurable: true\n        });\n        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\n        NumberWrapper.isNaN = function (value) { return isNaN(value); };\n        NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };\n        return NumberWrapper;\n    }());\n\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var ResourceLoaderImpl = (function (_super) {\n        __extends(ResourceLoaderImpl, _super);\n        function ResourceLoaderImpl() {\n            _super.apply(this, arguments);\n        }\n        ResourceLoaderImpl.prototype.get = function (url) {\n            var resolve;\n            var reject;\n            var promise = new Promise(function (res, rej) {\n                resolve = res;\n                reject = rej;\n            });\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', url, true);\n            xhr.responseType = 'text';\n            xhr.onload = function () {\n                // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                // response/responseType properties were introduced in ResourceLoader Level2 spec (supported\n                // by IE10)\n                var response = isPresent(xhr.response) ? xhr.response : xhr.responseText;\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status = xhr.status === 1223 ? 204 : xhr.status;\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = response ? 200 : 0;\n                }\n                if (200 <= status && status <= 300) {\n                    resolve(response);\n                }\n                else {\n                    reject(\"Failed to load \" + url);\n                }\n            };\n            xhr.onerror = function () { reject(\"Failed to load \" + url); };\n            xhr.send();\n            return promise;\n        };\n        ResourceLoaderImpl.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        ResourceLoaderImpl.ctorParameters = [];\n        return ResourceLoaderImpl;\n    }(_angular_compiler.ResourceLoader));\n\n    var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [\n        INTERNAL_BROWSER_PLATFORM_PROVIDERS,\n        {\n            provide: _angular_core.COMPILER_OPTIONS,\n            useValue: { providers: [{ provide: _angular_compiler.ResourceLoader, useClass: ResourceLoaderImpl }] },\n            multi: true\n        },\n    ];\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * An implementation of ResourceLoader that uses a template cache to avoid doing an actual\n     * ResourceLoader.\n     *\n     * The template cache needs to be built and loaded into window.$templateCache\n     * via a separate mechanism.\n     */\n    var CachedResourceLoader = (function (_super) {\n        __extends$1(CachedResourceLoader, _super);\n        function CachedResourceLoader() {\n            _super.call(this);\n            this._cache = global$1.$templateCache;\n            if (this._cache == null) {\n                throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');\n            }\n        }\n        CachedResourceLoader.prototype.get = function (url) {\n            if (this._cache.hasOwnProperty(url)) {\n                return Promise.resolve(this._cache[url]);\n            }\n            else {\n                return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);\n            }\n        };\n        return CachedResourceLoader;\n    }(_angular_compiler.ResourceLoader));\n\n    var __platform_browser_dynamic_private__ = {\n        INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,\n        ResourceLoaderImpl: ResourceLoaderImpl\n    };\n\n    /**\n     * @experimental\n     */\n    var RESOURCE_CACHE_PROVIDER = [{ provide: _angular_compiler.ResourceLoader, useClass: CachedResourceLoader }];\n    /**\n     * @experimental API related to bootstrapping are still under review.\n     */\n    var platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n    exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER;\n    exports.platformBrowserDynamic = platformBrowserDynamic;\n    exports.__platform_browser_dynamic_private__ = __platform_browser_dynamic_private__;\n\n}));\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * @license Angular v2.0.0-rc.6\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n   true ? factory(exports, __webpack_require__(3)) :\n  typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :\n  (factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}),global.ng.core));\n}(this, function (exports,_angular_core) { 'use strict';\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var globalScope;\n  if (typeof window === 'undefined') {\n      if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n          // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n          globalScope = self;\n      }\n      else {\n          globalScope = global;\n      }\n  }\n  else {\n      globalScope = window;\n  }\n  // Need to declare a new variable for global here since TypeScript\n  // exports the original value of the symbol.\n  var global$1 = globalScope;\n  // TODO: remove calls to assert in production environment\n  // Note: Can't just export this and import in in other files\n  // as `assert` is a reserved keyword in Dart\n  global$1.assert = function assert(condition) {\n      // TODO: to be fixed properly via #2830, noop for now\n  };\n  function isPresent(obj) {\n      return obj !== undefined && obj !== null;\n  }\n  function isBlank(obj) {\n      return obj === undefined || obj === null;\n  }\n  function isString(obj) {\n      return typeof obj === 'string';\n  }\n  function isStringMap(obj) {\n      return typeof obj === 'object' && obj !== null;\n  }\n  var STRING_MAP_PROTO = Object.getPrototypeOf({});\n  function isStrictStringMap(obj) {\n      return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;\n  }\n  function isArray(obj) {\n      return Array.isArray(obj);\n  }\n  function stringify(token) {\n      if (typeof token === 'string') {\n          return token;\n      }\n      if (token === undefined || token === null) {\n          return '' + token;\n      }\n      if (token.overriddenName) {\n          return token.overriddenName;\n      }\n      if (token.name) {\n          return token.name;\n      }\n      var res = token.toString();\n      var newLineIndex = res.indexOf('\\n');\n      return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);\n  }\n  var StringWrapper = (function () {\n      function StringWrapper() {\n      }\n      StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };\n      StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };\n      StringWrapper.split = function (s, regExp) { return s.split(regExp); };\n      StringWrapper.equals = function (s, s2) { return s === s2; };\n      StringWrapper.stripLeft = function (s, charVal) {\n          if (s && s.length) {\n              var pos = 0;\n              for (var i = 0; i < s.length; i++) {\n                  if (s[i] != charVal)\n                      break;\n                  pos++;\n              }\n              s = s.substring(pos);\n          }\n          return s;\n      };\n      StringWrapper.stripRight = function (s, charVal) {\n          if (s && s.length) {\n              var pos = s.length;\n              for (var i = s.length - 1; i >= 0; i--) {\n                  if (s[i] != charVal)\n                      break;\n                  pos--;\n              }\n              s = s.substring(0, pos);\n          }\n          return s;\n      };\n      StringWrapper.replace = function (s, from, replace) {\n          return s.replace(from, replace);\n      };\n      StringWrapper.replaceAll = function (s, from, replace) {\n          return s.replace(from, replace);\n      };\n      StringWrapper.slice = function (s, from, to) {\n          if (from === void 0) { from = 0; }\n          if (to === void 0) { to = null; }\n          return s.slice(from, to === null ? undefined : to);\n      };\n      StringWrapper.replaceAllMapped = function (s, from, cb) {\n          return s.replace(from, function () {\n              var matches = [];\n              for (var _i = 0; _i < arguments.length; _i++) {\n                  matches[_i - 0] = arguments[_i];\n              }\n              // Remove offset & string from the result array\n              matches.splice(-2, 2);\n              // The callback receives match, p1, ..., pn\n              return cb(matches);\n          });\n      };\n      StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };\n      StringWrapper.compare = function (a, b) {\n          if (a < b) {\n              return -1;\n          }\n          else if (a > b) {\n              return 1;\n          }\n          else {\n              return 0;\n          }\n      };\n      return StringWrapper;\n  }());\n  var StringJoiner = (function () {\n      function StringJoiner(parts) {\n          if (parts === void 0) { parts = []; }\n          this.parts = parts;\n      }\n      StringJoiner.prototype.add = function (part) { this.parts.push(part); };\n      StringJoiner.prototype.toString = function () { return this.parts.join(''); };\n      return StringJoiner;\n  }());\n  var NumberWrapper = (function () {\n      function NumberWrapper() {\n      }\n      NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };\n      NumberWrapper.equal = function (a, b) { return a === b; };\n      NumberWrapper.parseIntAutoRadix = function (text) {\n          var result = parseInt(text);\n          if (isNaN(result)) {\n              throw new Error('Invalid integer literal when parsing ' + text);\n          }\n          return result;\n      };\n      NumberWrapper.parseInt = function (text, radix) {\n          if (radix == 10) {\n              if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n                  return parseInt(text, radix);\n              }\n          }\n          else if (radix == 16) {\n              if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n                  return parseInt(text, radix);\n              }\n          }\n          else {\n              var result = parseInt(text, radix);\n              if (!isNaN(result)) {\n                  return result;\n              }\n          }\n          throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);\n      };\n      // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.\n      NumberWrapper.parseFloat = function (text) { return parseFloat(text); };\n      Object.defineProperty(NumberWrapper, \"NaN\", {\n          get: function () { return NaN; },\n          enumerable: true,\n          configurable: true\n      });\n      NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\n      NumberWrapper.isNaN = function (value) { return isNaN(value); };\n      NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };\n      return NumberWrapper;\n  }());\n  function normalizeBlank(obj) {\n      return isBlank(obj) ? null : obj;\n  }\n  function normalizeBool(obj) {\n      return isBlank(obj) ? false : obj;\n  }\n  function isJsObject(o) {\n      return o !== null && (typeof o === 'function' || typeof o === 'object');\n  }\n  function evalExpression(sourceUrl, expr, declarations, vars) {\n      var fnBody = declarations + \"\\nreturn \" + expr + \"\\n//# sourceURL=\" + sourceUrl;\n      var fnArgNames = [];\n      var fnArgValues = [];\n      for (var argName in vars) {\n          fnArgNames.push(argName);\n          fnArgValues.push(vars[argName]);\n      }\n      return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);\n  }\n  function isPrimitive(obj) {\n      return !isJsObject(obj);\n  }\n  function escapeRegExp(s) {\n      return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n  }\n\n  /**\n   * A segment of text within the template.\n   */\n  var TextAst = (function () {\n      function TextAst(value, ngContentIndex, sourceSpan) {\n          this.value = value;\n          this.ngContentIndex = ngContentIndex;\n          this.sourceSpan = sourceSpan;\n      }\n      TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };\n      return TextAst;\n  }());\n  /**\n   * A bound expression within the text of a template.\n   */\n  var BoundTextAst = (function () {\n      function BoundTextAst(value, ngContentIndex, sourceSpan) {\n          this.value = value;\n          this.ngContentIndex = ngContentIndex;\n          this.sourceSpan = sourceSpan;\n      }\n      BoundTextAst.prototype.visit = function (visitor, context) {\n          return visitor.visitBoundText(this, context);\n      };\n      return BoundTextAst;\n  }());\n  /**\n   * A plain attribute on an element.\n   */\n  var AttrAst = (function () {\n      function AttrAst(name, value, sourceSpan) {\n          this.name = name;\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };\n      return AttrAst;\n  }());\n  /**\n   * A binding for an element property (e.g. `[property]=\"expression\"`).\n   */\n  var BoundElementPropertyAst = (function () {\n      function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {\n          this.name = name;\n          this.type = type;\n          this.securityContext = securityContext;\n          this.value = value;\n          this.unit = unit;\n          this.sourceSpan = sourceSpan;\n      }\n      BoundElementPropertyAst.prototype.visit = function (visitor, context) {\n          return visitor.visitElementProperty(this, context);\n      };\n      return BoundElementPropertyAst;\n  }());\n  /**\n   * A binding for an element event (e.g. `(event)=\"handler()\"`).\n   */\n  var BoundEventAst = (function () {\n      function BoundEventAst(name, target, handler, sourceSpan) {\n          this.name = name;\n          this.target = target;\n          this.handler = handler;\n          this.sourceSpan = sourceSpan;\n      }\n      BoundEventAst.prototype.visit = function (visitor, context) {\n          return visitor.visitEvent(this, context);\n      };\n      Object.defineProperty(BoundEventAst.prototype, \"fullName\", {\n          get: function () {\n              if (isPresent(this.target)) {\n                  return this.target + \":\" + this.name;\n              }\n              else {\n                  return this.name;\n              }\n          },\n          enumerable: true,\n          configurable: true\n      });\n      return BoundEventAst;\n  }());\n  /**\n   * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n   */\n  var ReferenceAst = (function () {\n      function ReferenceAst(name, value, sourceSpan) {\n          this.name = name;\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      ReferenceAst.prototype.visit = function (visitor, context) {\n          return visitor.visitReference(this, context);\n      };\n      return ReferenceAst;\n  }());\n  /**\n   * A variable declaration on a <template> (e.g. `var-someName=\"someLocalName\"`).\n   */\n  var VariableAst = (function () {\n      function VariableAst(name, value, sourceSpan) {\n          this.name = name;\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      VariableAst.prototype.visit = function (visitor, context) {\n          return visitor.visitVariable(this, context);\n      };\n      return VariableAst;\n  }());\n  /**\n   * An element declaration in a template.\n   */\n  var ElementAst = (function () {\n      function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {\n          this.name = name;\n          this.attrs = attrs;\n          this.inputs = inputs;\n          this.outputs = outputs;\n          this.references = references;\n          this.directives = directives;\n          this.providers = providers;\n          this.hasViewContainer = hasViewContainer;\n          this.children = children;\n          this.ngContentIndex = ngContentIndex;\n          this.sourceSpan = sourceSpan;\n      }\n      ElementAst.prototype.visit = function (visitor, context) {\n          return visitor.visitElement(this, context);\n      };\n      return ElementAst;\n  }());\n  /**\n   * A `<template>` element included in an Angular template.\n   */\n  var EmbeddedTemplateAst = (function () {\n      function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {\n          this.attrs = attrs;\n          this.outputs = outputs;\n          this.references = references;\n          this.variables = variables;\n          this.directives = directives;\n          this.providers = providers;\n          this.hasViewContainer = hasViewContainer;\n          this.children = children;\n          this.ngContentIndex = ngContentIndex;\n          this.sourceSpan = sourceSpan;\n      }\n      EmbeddedTemplateAst.prototype.visit = function (visitor, context) {\n          return visitor.visitEmbeddedTemplate(this, context);\n      };\n      return EmbeddedTemplateAst;\n  }());\n  /**\n   * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n   */\n  var BoundDirectivePropertyAst = (function () {\n      function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {\n          this.directiveName = directiveName;\n          this.templateName = templateName;\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {\n          return visitor.visitDirectiveProperty(this, context);\n      };\n      return BoundDirectivePropertyAst;\n  }());\n  /**\n   * A directive declared on an element.\n   */\n  var DirectiveAst = (function () {\n      function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {\n          this.directive = directive;\n          this.inputs = inputs;\n          this.hostProperties = hostProperties;\n          this.hostEvents = hostEvents;\n          this.sourceSpan = sourceSpan;\n      }\n      DirectiveAst.prototype.visit = function (visitor, context) {\n          return visitor.visitDirective(this, context);\n      };\n      return DirectiveAst;\n  }());\n  /**\n   * A provider declared on an element\n   */\n  var ProviderAst = (function () {\n      function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {\n          this.token = token;\n          this.multiProvider = multiProvider;\n          this.eager = eager;\n          this.providers = providers;\n          this.providerType = providerType;\n          this.lifecycleHooks = lifecycleHooks;\n          this.sourceSpan = sourceSpan;\n      }\n      ProviderAst.prototype.visit = function (visitor, context) {\n          // No visit method in the visitor for now...\n          return null;\n      };\n      return ProviderAst;\n  }());\n  exports.ProviderAstType;\n  (function (ProviderAstType) {\n      ProviderAstType[ProviderAstType[\"PublicService\"] = 0] = \"PublicService\";\n      ProviderAstType[ProviderAstType[\"PrivateService\"] = 1] = \"PrivateService\";\n      ProviderAstType[ProviderAstType[\"Component\"] = 2] = \"Component\";\n      ProviderAstType[ProviderAstType[\"Directive\"] = 3] = \"Directive\";\n      ProviderAstType[ProviderAstType[\"Builtin\"] = 4] = \"Builtin\";\n  })(exports.ProviderAstType || (exports.ProviderAstType = {}));\n  /**\n   * Position where content is to be projected (instance of `<ng-content>` in a template).\n   */\n  var NgContentAst = (function () {\n      function NgContentAst(index, ngContentIndex, sourceSpan) {\n          this.index = index;\n          this.ngContentIndex = ngContentIndex;\n          this.sourceSpan = sourceSpan;\n      }\n      NgContentAst.prototype.visit = function (visitor, context) {\n          return visitor.visitNgContent(this, context);\n      };\n      return NgContentAst;\n  }());\n  /**\n   * Enumeration of types of property bindings.\n   */\n  exports.PropertyBindingType;\n  (function (PropertyBindingType) {\n      /**\n       * A normal binding to a property (e.g. `[property]=\"expression\"`).\n       */\n      PropertyBindingType[PropertyBindingType[\"Property\"] = 0] = \"Property\";\n      /**\n       * A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n       */\n      PropertyBindingType[PropertyBindingType[\"Attribute\"] = 1] = \"Attribute\";\n      /**\n       * A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n       */\n      PropertyBindingType[PropertyBindingType[\"Class\"] = 2] = \"Class\";\n      /**\n       * A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n       */\n      PropertyBindingType[PropertyBindingType[\"Style\"] = 3] = \"Style\";\n      /**\n       * A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n       */\n      PropertyBindingType[PropertyBindingType[\"Animation\"] = 4] = \"Animation\";\n  })(exports.PropertyBindingType || (exports.PropertyBindingType = {}));\n  /**\n   * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.\n   */\n  function templateVisitAll(visitor, asts, context) {\n      if (context === void 0) { context = null; }\n      var result = [];\n      asts.forEach(function (ast) {\n          var astResult = ast.visit(visitor, context);\n          if (isPresent(astResult)) {\n              result.push(astResult);\n          }\n      });\n      return result;\n  }\n\n  var Map$1 = global$1.Map;\n  var Set$1 = global$1.Set;\n  // Safari and Internet Explorer do not support the iterable parameter to the\n  // Map constructor.  We work around that by manually adding the items.\n  var createMapFromPairs = (function () {\n      try {\n          if (new Map$1([[1, 2]]).size === 1) {\n              return function createMapFromPairs(pairs) { return new Map$1(pairs); };\n          }\n      }\n      catch (e) {\n      }\n      return function createMapAndPopulateFromPairs(pairs) {\n          var map = new Map$1();\n          for (var i = 0; i < pairs.length; i++) {\n              var pair = pairs[i];\n              map.set(pair[0], pair[1]);\n          }\n          return map;\n      };\n  })();\n  var createMapFromMap = (function () {\n      try {\n          if (new Map$1(new Map$1())) {\n              return function createMapFromMap(m) { return new Map$1(m); };\n          }\n      }\n      catch (e) {\n      }\n      return function createMapAndPopulateFromMap(m) {\n          var map = new Map$1();\n          m.forEach(function (v, k) { map.set(k, v); });\n          return map;\n      };\n  })();\n  var _clearValues = (function () {\n      if ((new Map$1()).keys().next) {\n          return function _clearValues(m) {\n              var keyIterator = m.keys();\n              var k;\n              while (!((k = keyIterator.next()).done)) {\n                  m.set(k.value, null);\n              }\n          };\n      }\n      else {\n          return function _clearValuesWithForeEach(m) {\n              m.forEach(function (v, k) { m.set(k, null); });\n          };\n      }\n  })();\n  // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from\n  // TODO(mlaval): remove the work around once we have a working polyfill of Array.from\n  var _arrayFromMap = (function () {\n      try {\n          if ((new Map$1()).values().next) {\n              return function createArrayFromMap(m, getValues) {\n                  return getValues ? Array.from(m.values()) : Array.from(m.keys());\n              };\n          }\n      }\n      catch (e) {\n      }\n      return function createArrayFromMapWithForeach(m, getValues) {\n          var res = ListWrapper.createFixedSize(m.size), i = 0;\n          m.forEach(function (v, k) {\n              res[i] = getValues ? v : k;\n              i++;\n          });\n          return res;\n      };\n  })();\n  var MapWrapper = (function () {\n      function MapWrapper() {\n      }\n      MapWrapper.clone = function (m) { return createMapFromMap(m); };\n      MapWrapper.createFromStringMap = function (stringMap) {\n          var result = new Map$1();\n          for (var prop in stringMap) {\n              result.set(prop, stringMap[prop]);\n          }\n          return result;\n      };\n      MapWrapper.toStringMap = function (m) {\n          var r = {};\n          m.forEach(function (v, k) { return r[k] = v; });\n          return r;\n      };\n      MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };\n      MapWrapper.clearValues = function (m) { _clearValues(m); };\n      MapWrapper.iterable = function (m) { return m; };\n      MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };\n      MapWrapper.values = function (m) { return _arrayFromMap(m, true); };\n      return MapWrapper;\n  }());\n  /**\n   * Wraps Javascript Objects\n   */\n  var StringMapWrapper = (function () {\n      function StringMapWrapper() {\n      }\n      StringMapWrapper.create = function () {\n          // Note: We are not using Object.create(null) here due to\n          // performance!\n          // http://jsperf.com/ng2-object-create-null\n          return {};\n      };\n      StringMapWrapper.contains = function (map, key) {\n          return map.hasOwnProperty(key);\n      };\n      StringMapWrapper.get = function (map, key) {\n          return map.hasOwnProperty(key) ? map[key] : undefined;\n      };\n      StringMapWrapper.set = function (map, key, value) { map[key] = value; };\n      StringMapWrapper.keys = function (map) { return Object.keys(map); };\n      StringMapWrapper.values = function (map) {\n          return Object.keys(map).map(function (k) { return map[k]; });\n      };\n      StringMapWrapper.isEmpty = function (map) {\n          for (var prop in map) {\n              return false;\n          }\n          return true;\n      };\n      StringMapWrapper.delete = function (map, key) { delete map[key]; };\n      StringMapWrapper.forEach = function (map, callback) {\n          for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {\n              var k = _a[_i];\n              callback(map[k], k);\n          }\n      };\n      StringMapWrapper.merge = function (m1, m2) {\n          var m = {};\n          for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n              var k = _a[_i];\n              m[k] = m1[k];\n          }\n          for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n              var k = _c[_b];\n              m[k] = m2[k];\n          }\n          return m;\n      };\n      StringMapWrapper.equals = function (m1, m2) {\n          var k1 = Object.keys(m1);\n          var k2 = Object.keys(m2);\n          if (k1.length != k2.length) {\n              return false;\n          }\n          var key;\n          for (var i = 0; i < k1.length; i++) {\n              key = k1[i];\n              if (m1[key] !== m2[key]) {\n                  return false;\n              }\n          }\n          return true;\n      };\n      return StringMapWrapper;\n  }());\n  var ListWrapper = (function () {\n      function ListWrapper() {\n      }\n      // JS has no way to express a statically fixed size list, but dart does so we\n      // keep both methods.\n      ListWrapper.createFixedSize = function (size) { return new Array(size); };\n      ListWrapper.createGrowableSize = function (size) { return new Array(size); };\n      ListWrapper.clone = function (array) { return array.slice(0); };\n      ListWrapper.forEachWithIndex = function (array, fn) {\n          for (var i = 0; i < array.length; i++) {\n              fn(array[i], i);\n          }\n      };\n      ListWrapper.first = function (array) {\n          if (!array)\n              return null;\n          return array[0];\n      };\n      ListWrapper.last = function (array) {\n          if (!array || array.length == 0)\n              return null;\n          return array[array.length - 1];\n      };\n      ListWrapper.indexOf = function (array, value, startIndex) {\n          if (startIndex === void 0) { startIndex = 0; }\n          return array.indexOf(value, startIndex);\n      };\n      ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };\n      ListWrapper.reversed = function (array) {\n          var a = ListWrapper.clone(array);\n          return a.reverse();\n      };\n      ListWrapper.concat = function (a, b) { return a.concat(b); };\n      ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };\n      ListWrapper.removeAt = function (list, index) {\n          var res = list[index];\n          list.splice(index, 1);\n          return res;\n      };\n      ListWrapper.removeAll = function (list, items) {\n          for (var i = 0; i < items.length; ++i) {\n              var index = list.indexOf(items[i]);\n              list.splice(index, 1);\n          }\n      };\n      ListWrapper.remove = function (list, el) {\n          var index = list.indexOf(el);\n          if (index > -1) {\n              list.splice(index, 1);\n              return true;\n          }\n          return false;\n      };\n      ListWrapper.clear = function (list) { list.length = 0; };\n      ListWrapper.isEmpty = function (list) { return list.length == 0; };\n      ListWrapper.fill = function (list, value, start, end) {\n          if (start === void 0) { start = 0; }\n          if (end === void 0) { end = null; }\n          list.fill(value, start, end === null ? list.length : end);\n      };\n      ListWrapper.equals = function (a, b) {\n          if (a.length != b.length)\n              return false;\n          for (var i = 0; i < a.length; ++i) {\n              if (a[i] !== b[i])\n                  return false;\n          }\n          return true;\n      };\n      ListWrapper.slice = function (l, from, to) {\n          if (from === void 0) { from = 0; }\n          if (to === void 0) { to = null; }\n          return l.slice(from, to === null ? undefined : to);\n      };\n      ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };\n      ListWrapper.sort = function (l, compareFn) {\n          if (isPresent(compareFn)) {\n              l.sort(compareFn);\n          }\n          else {\n              l.sort();\n          }\n      };\n      ListWrapper.toString = function (l) { return l.toString(); };\n      ListWrapper.toJSON = function (l) { return JSON.stringify(l); };\n      ListWrapper.maximum = function (list, predicate) {\n          if (list.length == 0) {\n              return null;\n          }\n          var solution = null;\n          var maxValue = -Infinity;\n          for (var index = 0; index < list.length; index++) {\n              var candidate = list[index];\n              if (isBlank(candidate)) {\n                  continue;\n              }\n              var candidateValue = predicate(candidate);\n              if (candidateValue > maxValue) {\n                  solution = candidate;\n                  maxValue = candidateValue;\n              }\n          }\n          return solution;\n      };\n      ListWrapper.flatten = function (list) {\n          var target = [];\n          _flattenArray(list, target);\n          return target;\n      };\n      ListWrapper.addAll = function (list, source) {\n          for (var i = 0; i < source.length; i++) {\n              list.push(source[i]);\n          }\n      };\n      return ListWrapper;\n  }());\n  function _flattenArray(source, target) {\n      if (isPresent(source)) {\n          for (var i = 0; i < source.length; i++) {\n              var item = source[i];\n              if (isArray(item)) {\n                  _flattenArray(item, target);\n              }\n              else {\n                  target.push(item);\n              }\n          }\n      }\n      return target;\n  }\n  // Safari and Internet Explorer do not support the iterable parameter to the\n  // Set constructor.  We work around that by manually adding the items.\n  var createSetFromList = (function () {\n      var test = new Set$1([1, 2, 3]);\n      if (test.size === 3) {\n          return function createSetFromList(lst) { return new Set$1(lst); };\n      }\n      else {\n          return function createSetAndPopulateFromList(lst) {\n              var res = new Set$1(lst);\n              if (res.size !== lst.length) {\n                  for (var i = 0; i < lst.length; i++) {\n                      res.add(lst[i]);\n                  }\n              }\n              return res;\n          };\n      }\n  })();\n  var SetWrapper = (function () {\n      function SetWrapper() {\n      }\n      SetWrapper.createFromList = function (lst) { return createSetFromList(lst); };\n      SetWrapper.has = function (s, key) { return s.has(key); };\n      SetWrapper.delete = function (m, k) { m.delete(k); };\n      return SetWrapper;\n  }());\n\n  var _EMPTY_ATTR_VALUE = '';\n  var _SELECTOR_REGEXP = new RegExp('(\\\\:not\\\\()|' +\n      '([-\\\\w]+)|' +\n      '(?:\\\\.([-\\\\w]+))|' +\n      '(?:\\\\[([-\\\\w*]+)(?:=([^\\\\]]*))?\\\\])|' +\n      '(\\\\))|' +\n      '(\\\\s*,\\\\s*)', // \",\"\n  'g');\n  /**\n   * A css selector contains an element name,\n   * css classes and attribute/value pairs with the purpose\n   * of selecting subsets out of them.\n   */\n  var CssSelector = (function () {\n      function CssSelector() {\n          this.element = null;\n          this.classNames = [];\n          this.attrs = [];\n          this.notSelectors = [];\n      }\n      CssSelector.parse = function (selector) {\n          var results = [];\n          var _addResult = function (res, cssSel) {\n              if (cssSel.notSelectors.length > 0 && isBlank(cssSel.element) &&\n                  ListWrapper.isEmpty(cssSel.classNames) && ListWrapper.isEmpty(cssSel.attrs)) {\n                  cssSel.element = '*';\n              }\n              res.push(cssSel);\n          };\n          var cssSelector = new CssSelector();\n          var match;\n          var current = cssSelector;\n          var inNot = false;\n          _SELECTOR_REGEXP.lastIndex = 0;\n          while (isPresent(match = _SELECTOR_REGEXP.exec(selector))) {\n              if (isPresent(match[1])) {\n                  if (inNot) {\n                      throw new Error('Nesting :not is not allowed in a selector');\n                  }\n                  inNot = true;\n                  current = new CssSelector();\n                  cssSelector.notSelectors.push(current);\n              }\n              if (isPresent(match[2])) {\n                  current.setElement(match[2]);\n              }\n              if (isPresent(match[3])) {\n                  current.addClassName(match[3]);\n              }\n              if (isPresent(match[4])) {\n                  current.addAttribute(match[4], match[5]);\n              }\n              if (isPresent(match[6])) {\n                  inNot = false;\n                  current = cssSelector;\n              }\n              if (isPresent(match[7])) {\n                  if (inNot) {\n                      throw new Error('Multiple selectors in :not are not supported');\n                  }\n                  _addResult(results, cssSelector);\n                  cssSelector = current = new CssSelector();\n              }\n          }\n          _addResult(results, cssSelector);\n          return results;\n      };\n      CssSelector.prototype.isElementSelector = function () {\n          return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&\n              this.notSelectors.length === 0;\n      };\n      CssSelector.prototype.hasElementSelector = function () { return !!this.element; };\n      CssSelector.prototype.setElement = function (element) {\n          if (element === void 0) { element = null; }\n          this.element = element;\n      };\n      /** Gets a template string for an element that matches the selector. */\n      CssSelector.prototype.getMatchingElementTemplate = function () {\n          var tagName = isPresent(this.element) ? this.element : 'div';\n          var classAttr = this.classNames.length > 0 ? \" class=\\\"\" + this.classNames.join(' ') + \"\\\"\" : '';\n          var attrs = '';\n          for (var i = 0; i < this.attrs.length; i += 2) {\n              var attrName = this.attrs[i];\n              var attrValue = this.attrs[i + 1] !== '' ? \"=\\\"\" + this.attrs[i + 1] + \"\\\"\" : '';\n              attrs += \" \" + attrName + attrValue;\n          }\n          return \"<\" + tagName + classAttr + attrs + \"></\" + tagName + \">\";\n      };\n      CssSelector.prototype.addAttribute = function (name, value) {\n          if (value === void 0) { value = _EMPTY_ATTR_VALUE; }\n          this.attrs.push(name);\n          if (isPresent(value)) {\n              value = value.toLowerCase();\n          }\n          else {\n              value = _EMPTY_ATTR_VALUE;\n          }\n          this.attrs.push(value);\n      };\n      CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };\n      CssSelector.prototype.toString = function () {\n          var res = '';\n          if (isPresent(this.element)) {\n              res += this.element;\n          }\n          if (isPresent(this.classNames)) {\n              for (var i = 0; i < this.classNames.length; i++) {\n                  res += '.' + this.classNames[i];\n              }\n          }\n          if (isPresent(this.attrs)) {\n              for (var i = 0; i < this.attrs.length;) {\n                  var attrName = this.attrs[i++];\n                  var attrValue = this.attrs[i++];\n                  res += '[' + attrName;\n                  if (attrValue.length > 0) {\n                      res += '=' + attrValue;\n                  }\n                  res += ']';\n              }\n          }\n          this.notSelectors.forEach(function (notSelector) { return res += \":not(\" + notSelector + \")\"; });\n          return res;\n      };\n      return CssSelector;\n  }());\n  /**\n   * Reads a list of CssSelectors and allows to calculate which ones\n   * are contained in a given CssSelector.\n   */\n  var SelectorMatcher = (function () {\n      function SelectorMatcher() {\n          this._elementMap = new Map();\n          this._elementPartialMap = new Map();\n          this._classMap = new Map();\n          this._classPartialMap = new Map();\n          this._attrValueMap = new Map();\n          this._attrValuePartialMap = new Map();\n          this._listContexts = [];\n      }\n      SelectorMatcher.createNotMatcher = function (notSelectors) {\n          var notMatcher = new SelectorMatcher();\n          notMatcher.addSelectables(notSelectors, null);\n          return notMatcher;\n      };\n      SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {\n          var listContext = null;\n          if (cssSelectors.length > 1) {\n              listContext = new SelectorListContext(cssSelectors);\n              this._listContexts.push(listContext);\n          }\n          for (var i = 0; i < cssSelectors.length; i++) {\n              this._addSelectable(cssSelectors[i], callbackCtxt, listContext);\n          }\n      };\n      /**\n       * Add an object that can be found later on by calling `match`.\n       * @param cssSelector A css selector\n       * @param callbackCtxt An opaque object that will be given to the callback of the `match` function\n       */\n      SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {\n          var matcher = this;\n          var element = cssSelector.element;\n          var classNames = cssSelector.classNames;\n          var attrs = cssSelector.attrs;\n          var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);\n          if (isPresent(element)) {\n              var isTerminal = attrs.length === 0 && classNames.length === 0;\n              if (isTerminal) {\n                  this._addTerminal(matcher._elementMap, element, selectable);\n              }\n              else {\n                  matcher = this._addPartial(matcher._elementPartialMap, element);\n              }\n          }\n          if (isPresent(classNames)) {\n              for (var index = 0; index < classNames.length; index++) {\n                  var isTerminal = attrs.length === 0 && index === classNames.length - 1;\n                  var className = classNames[index];\n                  if (isTerminal) {\n                      this._addTerminal(matcher._classMap, className, selectable);\n                  }\n                  else {\n                      matcher = this._addPartial(matcher._classPartialMap, className);\n                  }\n              }\n          }\n          if (isPresent(attrs)) {\n              for (var index = 0; index < attrs.length;) {\n                  var isTerminal = index === attrs.length - 2;\n                  var attrName = attrs[index++];\n                  var attrValue = attrs[index++];\n                  if (isTerminal) {\n                      var terminalMap = matcher._attrValueMap;\n                      var terminalValuesMap = terminalMap.get(attrName);\n                      if (isBlank(terminalValuesMap)) {\n                          terminalValuesMap = new Map();\n                          terminalMap.set(attrName, terminalValuesMap);\n                      }\n                      this._addTerminal(terminalValuesMap, attrValue, selectable);\n                  }\n                  else {\n                      var parttialMap = matcher._attrValuePartialMap;\n                      var partialValuesMap = parttialMap.get(attrName);\n                      if (isBlank(partialValuesMap)) {\n                          partialValuesMap = new Map();\n                          parttialMap.set(attrName, partialValuesMap);\n                      }\n                      matcher = this._addPartial(partialValuesMap, attrValue);\n                  }\n              }\n          }\n      };\n      SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {\n          var terminalList = map.get(name);\n          if (isBlank(terminalList)) {\n              terminalList = [];\n              map.set(name, terminalList);\n          }\n          terminalList.push(selectable);\n      };\n      SelectorMatcher.prototype._addPartial = function (map, name) {\n          var matcher = map.get(name);\n          if (isBlank(matcher)) {\n              matcher = new SelectorMatcher();\n              map.set(name, matcher);\n          }\n          return matcher;\n      };\n      /**\n       * Find the objects that have been added via `addSelectable`\n       * whose css selector is contained in the given css selector.\n       * @param cssSelector A css selector\n       * @param matchedCallback This callback will be called with the object handed into `addSelectable`\n       * @return boolean true if a match was found\n      */\n      SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {\n          var result = false;\n          var element = cssSelector.element;\n          var classNames = cssSelector.classNames;\n          var attrs = cssSelector.attrs;\n          for (var i = 0; i < this._listContexts.length; i++) {\n              this._listContexts[i].alreadyMatched = false;\n          }\n          result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;\n          result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||\n              result;\n          if (isPresent(classNames)) {\n              for (var index = 0; index < classNames.length; index++) {\n                  var className = classNames[index];\n                  result =\n                      this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;\n                  result =\n                      this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||\n                          result;\n              }\n          }\n          if (isPresent(attrs)) {\n              for (var index = 0; index < attrs.length;) {\n                  var attrName = attrs[index++];\n                  var attrValue = attrs[index++];\n                  var terminalValuesMap = this._attrValueMap.get(attrName);\n                  if (!StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {\n                      result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||\n                          result;\n                  }\n                  result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) ||\n                      result;\n                  var partialValuesMap = this._attrValuePartialMap.get(attrName);\n                  if (!StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {\n                      result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||\n                          result;\n                  }\n                  result =\n                      this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;\n              }\n          }\n          return result;\n      };\n      /** @internal */\n      SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {\n          if (isBlank(map) || isBlank(name)) {\n              return false;\n          }\n          var selectables = map.get(name);\n          var starSelectables = map.get('*');\n          if (isPresent(starSelectables)) {\n              selectables = selectables.concat(starSelectables);\n          }\n          if (isBlank(selectables)) {\n              return false;\n          }\n          var selectable;\n          var result = false;\n          for (var index = 0; index < selectables.length; index++) {\n              selectable = selectables[index];\n              result = selectable.finalize(cssSelector, matchedCallback) || result;\n          }\n          return result;\n      };\n      /** @internal */\n      SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) {\n          if (isBlank(map) || isBlank(name)) {\n              return false;\n          }\n          var nestedSelector = map.get(name);\n          if (isBlank(nestedSelector)) {\n              return false;\n          }\n          // TODO(perf): get rid of recursion and measure again\n          // TODO(perf): don't pass the whole selector into the recursion,\n          // but only the not processed parts\n          return nestedSelector.match(cssSelector, matchedCallback);\n      };\n      return SelectorMatcher;\n  }());\n  var SelectorListContext = (function () {\n      function SelectorListContext(selectors) {\n          this.selectors = selectors;\n          this.alreadyMatched = false;\n      }\n      return SelectorListContext;\n  }());\n  // Store context to pass back selector and context when a selector is matched\n  var SelectorContext = (function () {\n      function SelectorContext(selector, cbContext, listContext) {\n          this.selector = selector;\n          this.cbContext = cbContext;\n          this.listContext = listContext;\n          this.notSelectors = selector.notSelectors;\n      }\n      SelectorContext.prototype.finalize = function (cssSelector, callback) {\n          var result = true;\n          if (this.notSelectors.length > 0 &&\n              (isBlank(this.listContext) || !this.listContext.alreadyMatched)) {\n              var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);\n              result = !notMatcher.match(cssSelector, null);\n          }\n          if (result && isPresent(callback) &&\n              (isBlank(this.listContext) || !this.listContext.alreadyMatched)) {\n              if (isPresent(this.listContext)) {\n                  this.listContext.alreadyMatched = true;\n              }\n              callback(this.selector, this.cbContext);\n          }\n          return result;\n      };\n      return SelectorContext;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$2 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  //// Types\n  var TypeModifier;\n  (function (TypeModifier) {\n      TypeModifier[TypeModifier[\"Const\"] = 0] = \"Const\";\n  })(TypeModifier || (TypeModifier = {}));\n  var Type$1 = (function () {\n      function Type(modifiers) {\n          if (modifiers === void 0) { modifiers = null; }\n          this.modifiers = modifiers;\n          if (isBlank(modifiers)) {\n              this.modifiers = [];\n          }\n      }\n      Type.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };\n      return Type;\n  }());\n  var BuiltinTypeName;\n  (function (BuiltinTypeName) {\n      BuiltinTypeName[BuiltinTypeName[\"Dynamic\"] = 0] = \"Dynamic\";\n      BuiltinTypeName[BuiltinTypeName[\"Bool\"] = 1] = \"Bool\";\n      BuiltinTypeName[BuiltinTypeName[\"String\"] = 2] = \"String\";\n      BuiltinTypeName[BuiltinTypeName[\"Int\"] = 3] = \"Int\";\n      BuiltinTypeName[BuiltinTypeName[\"Number\"] = 4] = \"Number\";\n      BuiltinTypeName[BuiltinTypeName[\"Function\"] = 5] = \"Function\";\n  })(BuiltinTypeName || (BuiltinTypeName = {}));\n  var BuiltinType = (function (_super) {\n      __extends$2(BuiltinType, _super);\n      function BuiltinType(name, modifiers) {\n          if (modifiers === void 0) { modifiers = null; }\n          _super.call(this, modifiers);\n          this.name = name;\n      }\n      BuiltinType.prototype.visitType = function (visitor, context) {\n          return visitor.visitBuiltintType(this, context);\n      };\n      return BuiltinType;\n  }(Type$1));\n  var ExternalType = (function (_super) {\n      __extends$2(ExternalType, _super);\n      function ExternalType(value, typeParams, modifiers) {\n          if (typeParams === void 0) { typeParams = null; }\n          if (modifiers === void 0) { modifiers = null; }\n          _super.call(this, modifiers);\n          this.value = value;\n          this.typeParams = typeParams;\n      }\n      ExternalType.prototype.visitType = function (visitor, context) {\n          return visitor.visitExternalType(this, context);\n      };\n      return ExternalType;\n  }(Type$1));\n  var ArrayType = (function (_super) {\n      __extends$2(ArrayType, _super);\n      function ArrayType(of, modifiers) {\n          if (modifiers === void 0) { modifiers = null; }\n          _super.call(this, modifiers);\n          this.of = of;\n      }\n      ArrayType.prototype.visitType = function (visitor, context) {\n          return visitor.visitArrayType(this, context);\n      };\n      return ArrayType;\n  }(Type$1));\n  var MapType = (function (_super) {\n      __extends$2(MapType, _super);\n      function MapType(valueType, modifiers) {\n          if (modifiers === void 0) { modifiers = null; }\n          _super.call(this, modifiers);\n          this.valueType = valueType;\n      }\n      MapType.prototype.visitType = function (visitor, context) { return visitor.visitMapType(this, context); };\n      return MapType;\n  }(Type$1));\n  var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);\n  var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);\n  var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);\n  var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);\n  var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);\n  var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);\n  ///// Expressions\n  var BinaryOperator;\n  (function (BinaryOperator) {\n      BinaryOperator[BinaryOperator[\"Equals\"] = 0] = \"Equals\";\n      BinaryOperator[BinaryOperator[\"NotEquals\"] = 1] = \"NotEquals\";\n      BinaryOperator[BinaryOperator[\"Identical\"] = 2] = \"Identical\";\n      BinaryOperator[BinaryOperator[\"NotIdentical\"] = 3] = \"NotIdentical\";\n      BinaryOperator[BinaryOperator[\"Minus\"] = 4] = \"Minus\";\n      BinaryOperator[BinaryOperator[\"Plus\"] = 5] = \"Plus\";\n      BinaryOperator[BinaryOperator[\"Divide\"] = 6] = \"Divide\";\n      BinaryOperator[BinaryOperator[\"Multiply\"] = 7] = \"Multiply\";\n      BinaryOperator[BinaryOperator[\"Modulo\"] = 8] = \"Modulo\";\n      BinaryOperator[BinaryOperator[\"And\"] = 9] = \"And\";\n      BinaryOperator[BinaryOperator[\"Or\"] = 10] = \"Or\";\n      BinaryOperator[BinaryOperator[\"Lower\"] = 11] = \"Lower\";\n      BinaryOperator[BinaryOperator[\"LowerEquals\"] = 12] = \"LowerEquals\";\n      BinaryOperator[BinaryOperator[\"Bigger\"] = 13] = \"Bigger\";\n      BinaryOperator[BinaryOperator[\"BiggerEquals\"] = 14] = \"BiggerEquals\";\n  })(BinaryOperator || (BinaryOperator = {}));\n  var Expression = (function () {\n      function Expression(type) {\n          this.type = type;\n      }\n      Expression.prototype.prop = function (name) { return new ReadPropExpr(this, name); };\n      Expression.prototype.key = function (index, type) {\n          if (type === void 0) { type = null; }\n          return new ReadKeyExpr(this, index, type);\n      };\n      Expression.prototype.callMethod = function (name, params) {\n          return new InvokeMethodExpr(this, name, params);\n      };\n      Expression.prototype.callFn = function (params) { return new InvokeFunctionExpr(this, params); };\n      Expression.prototype.instantiate = function (params, type) {\n          if (type === void 0) { type = null; }\n          return new InstantiateExpr(this, params, type);\n      };\n      Expression.prototype.conditional = function (trueCase, falseCase) {\n          if (falseCase === void 0) { falseCase = null; }\n          return new ConditionalExpr(this, trueCase, falseCase);\n      };\n      Expression.prototype.equals = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);\n      };\n      Expression.prototype.notEquals = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);\n      };\n      Expression.prototype.identical = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);\n      };\n      Expression.prototype.notIdentical = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);\n      };\n      Expression.prototype.minus = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);\n      };\n      Expression.prototype.plus = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);\n      };\n      Expression.prototype.divide = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);\n      };\n      Expression.prototype.multiply = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);\n      };\n      Expression.prototype.modulo = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);\n      };\n      Expression.prototype.and = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);\n      };\n      Expression.prototype.or = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);\n      };\n      Expression.prototype.lower = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);\n      };\n      Expression.prototype.lowerEquals = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);\n      };\n      Expression.prototype.bigger = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);\n      };\n      Expression.prototype.biggerEquals = function (rhs) {\n          return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);\n      };\n      Expression.prototype.isBlank = function () {\n          // Note: We use equals by purpose here to compare to null and undefined in JS.\n          return this.equals(NULL_EXPR);\n      };\n      Expression.prototype.cast = function (type) { return new CastExpr(this, type); };\n      Expression.prototype.toStmt = function () { return new ExpressionStatement(this); };\n      return Expression;\n  }());\n  var BuiltinVar;\n  (function (BuiltinVar) {\n      BuiltinVar[BuiltinVar[\"This\"] = 0] = \"This\";\n      BuiltinVar[BuiltinVar[\"Super\"] = 1] = \"Super\";\n      BuiltinVar[BuiltinVar[\"CatchError\"] = 2] = \"CatchError\";\n      BuiltinVar[BuiltinVar[\"CatchStack\"] = 3] = \"CatchStack\";\n  })(BuiltinVar || (BuiltinVar = {}));\n  var ReadVarExpr = (function (_super) {\n      __extends$2(ReadVarExpr, _super);\n      function ReadVarExpr(name, type) {\n          if (type === void 0) { type = null; }\n          _super.call(this, type);\n          if (isString(name)) {\n              this.name = name;\n              this.builtin = null;\n          }\n          else {\n              this.name = null;\n              this.builtin = name;\n          }\n      }\n      ReadVarExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitReadVarExpr(this, context);\n      };\n      ReadVarExpr.prototype.set = function (value) { return new WriteVarExpr(this.name, value); };\n      return ReadVarExpr;\n  }(Expression));\n  var WriteVarExpr = (function (_super) {\n      __extends$2(WriteVarExpr, _super);\n      function WriteVarExpr(name, value, type) {\n          if (type === void 0) { type = null; }\n          _super.call(this, isPresent(type) ? type : value.type);\n          this.name = name;\n          this.value = value;\n      }\n      WriteVarExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitWriteVarExpr(this, context);\n      };\n      WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) {\n          if (type === void 0) { type = null; }\n          if (modifiers === void 0) { modifiers = null; }\n          return new DeclareVarStmt(this.name, this.value, type, modifiers);\n      };\n      return WriteVarExpr;\n  }(Expression));\n  var WriteKeyExpr = (function (_super) {\n      __extends$2(WriteKeyExpr, _super);\n      function WriteKeyExpr(receiver, index, value, type) {\n          if (type === void 0) { type = null; }\n          _super.call(this, isPresent(type) ? type : value.type);\n          this.receiver = receiver;\n          this.index = index;\n          this.value = value;\n      }\n      WriteKeyExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitWriteKeyExpr(this, context);\n      };\n      return WriteKeyExpr;\n  }(Expression));\n  var WritePropExpr = (function (_super) {\n      __extends$2(WritePropExpr, _super);\n      function WritePropExpr(receiver, name, value, type) {\n          if (type === void 0) { type = null; }\n          _super.call(this, isPresent(type) ? type : value.type);\n          this.receiver = receiver;\n          this.name = name;\n          this.value = value;\n      }\n      WritePropExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitWritePropExpr(this, context);\n      };\n      return WritePropExpr;\n  }(Expression));\n  var BuiltinMethod;\n  (function (BuiltinMethod) {\n      BuiltinMethod[BuiltinMethod[\"ConcatArray\"] = 0] = \"ConcatArray\";\n      BuiltinMethod[BuiltinMethod[\"SubscribeObservable\"] = 1] = \"SubscribeObservable\";\n      BuiltinMethod[BuiltinMethod[\"Bind\"] = 2] = \"Bind\";\n  })(BuiltinMethod || (BuiltinMethod = {}));\n  var InvokeMethodExpr = (function (_super) {\n      __extends$2(InvokeMethodExpr, _super);\n      function InvokeMethodExpr(receiver, method, args, type) {\n          if (type === void 0) { type = null; }\n          _super.call(this, type);\n          this.receiver = receiver;\n          this.args = args;\n          if (isString(method)) {\n              this.name = method;\n              this.builtin = null;\n          }\n          else {\n              this.name = null;\n              this.builtin = method;\n          }\n      }\n      InvokeMethodExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitInvokeMethodExpr(this, context);\n      };\n      return InvokeMethodExpr;\n  }(Expression));\n  var InvokeFunctionExpr = (function (_super) {\n      __extends$2(InvokeFunctionExpr, _super);\n      function InvokeFunctionExpr(fn, args, type) {\n          if (type === void 0) { type = null; }\n          _super.call(this, type);\n          this.fn = fn;\n          this.args = args;\n      }\n      InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitInvokeFunctionExpr(this, context);\n      };\n      return InvokeFunctionExpr;\n  }(Expression));\n  var InstantiateExpr = (function (_super) {\n      __extends$2(InstantiateExpr, _super);\n      function InstantiateExpr(classExpr, args, type) {\n          _super.call(this, type);\n          this.classExpr = classExpr;\n          this.args = args;\n      }\n      InstantiateExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitInstantiateExpr(this, context);\n      };\n      return InstantiateExpr;\n  }(Expression));\n  var LiteralExpr = (function (_super) {\n      __extends$2(LiteralExpr, _super);\n      function LiteralExpr(value, type) {\n          if (type === void 0) { type = null; }\n          _super.call(this, type);\n          this.value = value;\n      }\n      LiteralExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitLiteralExpr(this, context);\n      };\n      return LiteralExpr;\n  }(Expression));\n  var ExternalExpr = (function (_super) {\n      __extends$2(ExternalExpr, _super);\n      function ExternalExpr(value, type, typeParams) {\n          if (type === void 0) { type = null; }\n          if (typeParams === void 0) { typeParams = null; }\n          _super.call(this, type);\n          this.value = value;\n          this.typeParams = typeParams;\n      }\n      ExternalExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitExternalExpr(this, context);\n      };\n      return ExternalExpr;\n  }(Expression));\n  var ConditionalExpr = (function (_super) {\n      __extends$2(ConditionalExpr, _super);\n      function ConditionalExpr(condition, trueCase, falseCase, type) {\n          if (falseCase === void 0) { falseCase = null; }\n          if (type === void 0) { type = null; }\n          _super.call(this, isPresent(type) ? type : trueCase.type);\n          this.condition = condition;\n          this.falseCase = falseCase;\n          this.trueCase = trueCase;\n      }\n      ConditionalExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitConditionalExpr(this, context);\n      };\n      return ConditionalExpr;\n  }(Expression));\n  var NotExpr = (function (_super) {\n      __extends$2(NotExpr, _super);\n      function NotExpr(condition) {\n          _super.call(this, BOOL_TYPE);\n          this.condition = condition;\n      }\n      NotExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitNotExpr(this, context);\n      };\n      return NotExpr;\n  }(Expression));\n  var CastExpr = (function (_super) {\n      __extends$2(CastExpr, _super);\n      function CastExpr(value, type) {\n          _super.call(this, type);\n          this.value = value;\n      }\n      CastExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitCastExpr(this, context);\n      };\n      return CastExpr;\n  }(Expression));\n  var FnParam = (function () {\n      function FnParam(name, type) {\n          if (type === void 0) { type = null; }\n          this.name = name;\n          this.type = type;\n      }\n      return FnParam;\n  }());\n  var FunctionExpr = (function (_super) {\n      __extends$2(FunctionExpr, _super);\n      function FunctionExpr(params, statements, type) {\n          if (type === void 0) { type = null; }\n          _super.call(this, type);\n          this.params = params;\n          this.statements = statements;\n      }\n      FunctionExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitFunctionExpr(this, context);\n      };\n      FunctionExpr.prototype.toDeclStmt = function (name, modifiers) {\n          if (modifiers === void 0) { modifiers = null; }\n          return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);\n      };\n      return FunctionExpr;\n  }(Expression));\n  var BinaryOperatorExpr = (function (_super) {\n      __extends$2(BinaryOperatorExpr, _super);\n      function BinaryOperatorExpr(operator, lhs, rhs, type) {\n          if (type === void 0) { type = null; }\n          _super.call(this, isPresent(type) ? type : lhs.type);\n          this.operator = operator;\n          this.rhs = rhs;\n          this.lhs = lhs;\n      }\n      BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitBinaryOperatorExpr(this, context);\n      };\n      return BinaryOperatorExpr;\n  }(Expression));\n  var ReadPropExpr = (function (_super) {\n      __extends$2(ReadPropExpr, _super);\n      function ReadPropExpr(receiver, name, type) {\n          if (type === void 0) { type = null; }\n          _super.call(this, type);\n          this.receiver = receiver;\n          this.name = name;\n      }\n      ReadPropExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitReadPropExpr(this, context);\n      };\n      ReadPropExpr.prototype.set = function (value) {\n          return new WritePropExpr(this.receiver, this.name, value);\n      };\n      return ReadPropExpr;\n  }(Expression));\n  var ReadKeyExpr = (function (_super) {\n      __extends$2(ReadKeyExpr, _super);\n      function ReadKeyExpr(receiver, index, type) {\n          if (type === void 0) { type = null; }\n          _super.call(this, type);\n          this.receiver = receiver;\n          this.index = index;\n      }\n      ReadKeyExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitReadKeyExpr(this, context);\n      };\n      ReadKeyExpr.prototype.set = function (value) {\n          return new WriteKeyExpr(this.receiver, this.index, value);\n      };\n      return ReadKeyExpr;\n  }(Expression));\n  var LiteralArrayExpr = (function (_super) {\n      __extends$2(LiteralArrayExpr, _super);\n      function LiteralArrayExpr(entries, type) {\n          if (type === void 0) { type = null; }\n          _super.call(this, type);\n          this.entries = entries;\n      }\n      LiteralArrayExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitLiteralArrayExpr(this, context);\n      };\n      return LiteralArrayExpr;\n  }(Expression));\n  var LiteralMapExpr = (function (_super) {\n      __extends$2(LiteralMapExpr, _super);\n      function LiteralMapExpr(entries, type) {\n          if (type === void 0) { type = null; }\n          _super.call(this, type);\n          this.entries = entries;\n          this.valueType = null;\n          if (isPresent(type)) {\n              this.valueType = type.valueType;\n          }\n      }\n      LiteralMapExpr.prototype.visitExpression = function (visitor, context) {\n          return visitor.visitLiteralMapExpr(this, context);\n      };\n      return LiteralMapExpr;\n  }(Expression));\n  var THIS_EXPR = new ReadVarExpr(BuiltinVar.This);\n  var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);\n  var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);\n  var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);\n  var NULL_EXPR = new LiteralExpr(null, null);\n  //// Statements\n  var StmtModifier;\n  (function (StmtModifier) {\n      StmtModifier[StmtModifier[\"Final\"] = 0] = \"Final\";\n      StmtModifier[StmtModifier[\"Private\"] = 1] = \"Private\";\n  })(StmtModifier || (StmtModifier = {}));\n  var Statement = (function () {\n      function Statement(modifiers) {\n          if (modifiers === void 0) { modifiers = null; }\n          this.modifiers = modifiers;\n          if (isBlank(modifiers)) {\n              this.modifiers = [];\n          }\n      }\n      Statement.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };\n      return Statement;\n  }());\n  var DeclareVarStmt = (function (_super) {\n      __extends$2(DeclareVarStmt, _super);\n      function DeclareVarStmt(name, value, type, modifiers) {\n          if (type === void 0) { type = null; }\n          if (modifiers === void 0) { modifiers = null; }\n          _super.call(this, modifiers);\n          this.name = name;\n          this.value = value;\n          this.type = isPresent(type) ? type : value.type;\n      }\n      DeclareVarStmt.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitDeclareVarStmt(this, context);\n      };\n      return DeclareVarStmt;\n  }(Statement));\n  var DeclareFunctionStmt = (function (_super) {\n      __extends$2(DeclareFunctionStmt, _super);\n      function DeclareFunctionStmt(name, params, statements, type, modifiers) {\n          if (type === void 0) { type = null; }\n          if (modifiers === void 0) { modifiers = null; }\n          _super.call(this, modifiers);\n          this.name = name;\n          this.params = params;\n          this.statements = statements;\n          this.type = type;\n      }\n      DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitDeclareFunctionStmt(this, context);\n      };\n      return DeclareFunctionStmt;\n  }(Statement));\n  var ExpressionStatement = (function (_super) {\n      __extends$2(ExpressionStatement, _super);\n      function ExpressionStatement(expr) {\n          _super.call(this);\n          this.expr = expr;\n      }\n      ExpressionStatement.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitExpressionStmt(this, context);\n      };\n      return ExpressionStatement;\n  }(Statement));\n  var ReturnStatement = (function (_super) {\n      __extends$2(ReturnStatement, _super);\n      function ReturnStatement(value) {\n          _super.call(this);\n          this.value = value;\n      }\n      ReturnStatement.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitReturnStmt(this, context);\n      };\n      return ReturnStatement;\n  }(Statement));\n  var AbstractClassPart = (function () {\n      function AbstractClassPart(type, modifiers) {\n          if (type === void 0) { type = null; }\n          this.type = type;\n          this.modifiers = modifiers;\n          if (isBlank(modifiers)) {\n              this.modifiers = [];\n          }\n      }\n      AbstractClassPart.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };\n      return AbstractClassPart;\n  }());\n  var ClassField = (function (_super) {\n      __extends$2(ClassField, _super);\n      function ClassField(name, type, modifiers) {\n          if (type === void 0) { type = null; }\n          if (modifiers === void 0) { modifiers = null; }\n          _super.call(this, type, modifiers);\n          this.name = name;\n      }\n      return ClassField;\n  }(AbstractClassPart));\n  var ClassMethod = (function (_super) {\n      __extends$2(ClassMethod, _super);\n      function ClassMethod(name, params, body, type, modifiers) {\n          if (type === void 0) { type = null; }\n          if (modifiers === void 0) { modifiers = null; }\n          _super.call(this, type, modifiers);\n          this.name = name;\n          this.params = params;\n          this.body = body;\n      }\n      return ClassMethod;\n  }(AbstractClassPart));\n  var ClassGetter = (function (_super) {\n      __extends$2(ClassGetter, _super);\n      function ClassGetter(name, body, type, modifiers) {\n          if (type === void 0) { type = null; }\n          if (modifiers === void 0) { modifiers = null; }\n          _super.call(this, type, modifiers);\n          this.name = name;\n          this.body = body;\n      }\n      return ClassGetter;\n  }(AbstractClassPart));\n  var ClassStmt = (function (_super) {\n      __extends$2(ClassStmt, _super);\n      function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {\n          if (modifiers === void 0) { modifiers = null; }\n          _super.call(this, modifiers);\n          this.name = name;\n          this.parent = parent;\n          this.fields = fields;\n          this.getters = getters;\n          this.constructorMethod = constructorMethod;\n          this.methods = methods;\n      }\n      ClassStmt.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitDeclareClassStmt(this, context);\n      };\n      return ClassStmt;\n  }(Statement));\n  var IfStmt = (function (_super) {\n      __extends$2(IfStmt, _super);\n      function IfStmt(condition, trueCase, falseCase) {\n          if (falseCase === void 0) { falseCase = []; }\n          _super.call(this);\n          this.condition = condition;\n          this.trueCase = trueCase;\n          this.falseCase = falseCase;\n      }\n      IfStmt.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitIfStmt(this, context);\n      };\n      return IfStmt;\n  }(Statement));\n  var CommentStmt = (function (_super) {\n      __extends$2(CommentStmt, _super);\n      function CommentStmt(comment) {\n          _super.call(this);\n          this.comment = comment;\n      }\n      CommentStmt.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitCommentStmt(this, context);\n      };\n      return CommentStmt;\n  }(Statement));\n  var TryCatchStmt = (function (_super) {\n      __extends$2(TryCatchStmt, _super);\n      function TryCatchStmt(bodyStmts, catchStmts) {\n          _super.call(this);\n          this.bodyStmts = bodyStmts;\n          this.catchStmts = catchStmts;\n      }\n      TryCatchStmt.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitTryCatchStmt(this, context);\n      };\n      return TryCatchStmt;\n  }(Statement));\n  var ThrowStmt = (function (_super) {\n      __extends$2(ThrowStmt, _super);\n      function ThrowStmt(error) {\n          _super.call(this);\n          this.error = error;\n      }\n      ThrowStmt.prototype.visitStatement = function (visitor, context) {\n          return visitor.visitThrowStmt(this, context);\n      };\n      return ThrowStmt;\n  }(Statement));\n  var ExpressionTransformer = (function () {\n      function ExpressionTransformer() {\n      }\n      ExpressionTransformer.prototype.visitReadVarExpr = function (ast, context) { return ast; };\n      ExpressionTransformer.prototype.visitWriteVarExpr = function (expr, context) {\n          return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));\n      };\n      ExpressionTransformer.prototype.visitWriteKeyExpr = function (expr, context) {\n          return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));\n      };\n      ExpressionTransformer.prototype.visitWritePropExpr = function (expr, context) {\n          return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));\n      };\n      ExpressionTransformer.prototype.visitInvokeMethodExpr = function (ast, context) {\n          var method = isPresent(ast.builtin) ? ast.builtin : ast.name;\n          return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);\n      };\n      ExpressionTransformer.prototype.visitInvokeFunctionExpr = function (ast, context) {\n          return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);\n      };\n      ExpressionTransformer.prototype.visitInstantiateExpr = function (ast, context) {\n          return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);\n      };\n      ExpressionTransformer.prototype.visitLiteralExpr = function (ast, context) { return ast; };\n      ExpressionTransformer.prototype.visitExternalExpr = function (ast, context) { return ast; };\n      ExpressionTransformer.prototype.visitConditionalExpr = function (ast, context) {\n          return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));\n      };\n      ExpressionTransformer.prototype.visitNotExpr = function (ast, context) {\n          return new NotExpr(ast.condition.visitExpression(this, context));\n      };\n      ExpressionTransformer.prototype.visitCastExpr = function (ast, context) {\n          return new CastExpr(ast.value.visitExpression(this, context), context);\n      };\n      ExpressionTransformer.prototype.visitFunctionExpr = function (ast, context) {\n          // Don't descend into nested functions\n          return ast;\n      };\n      ExpressionTransformer.prototype.visitBinaryOperatorExpr = function (ast, context) {\n          return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);\n      };\n      ExpressionTransformer.prototype.visitReadPropExpr = function (ast, context) {\n          return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);\n      };\n      ExpressionTransformer.prototype.visitReadKeyExpr = function (ast, context) {\n          return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);\n      };\n      ExpressionTransformer.prototype.visitLiteralArrayExpr = function (ast, context) {\n          return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));\n      };\n      ExpressionTransformer.prototype.visitLiteralMapExpr = function (ast, context) {\n          var _this = this;\n          return new LiteralMapExpr(ast.entries.map(function (entry) { return [entry[0], entry[1].visitExpression(_this, context)]; }));\n      };\n      ExpressionTransformer.prototype.visitAllExpressions = function (exprs, context) {\n          var _this = this;\n          return exprs.map(function (expr) { return expr.visitExpression(_this, context); });\n      };\n      ExpressionTransformer.prototype.visitDeclareVarStmt = function (stmt, context) {\n          return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);\n      };\n      ExpressionTransformer.prototype.visitDeclareFunctionStmt = function (stmt, context) {\n          // Don't descend into nested functions\n          return stmt;\n      };\n      ExpressionTransformer.prototype.visitExpressionStmt = function (stmt, context) {\n          return new ExpressionStatement(stmt.expr.visitExpression(this, context));\n      };\n      ExpressionTransformer.prototype.visitReturnStmt = function (stmt, context) {\n          return new ReturnStatement(stmt.value.visitExpression(this, context));\n      };\n      ExpressionTransformer.prototype.visitDeclareClassStmt = function (stmt, context) {\n          // Don't descend into nested functions\n          return stmt;\n      };\n      ExpressionTransformer.prototype.visitIfStmt = function (stmt, context) {\n          return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));\n      };\n      ExpressionTransformer.prototype.visitTryCatchStmt = function (stmt, context) {\n          return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));\n      };\n      ExpressionTransformer.prototype.visitThrowStmt = function (stmt, context) {\n          return new ThrowStmt(stmt.error.visitExpression(this, context));\n      };\n      ExpressionTransformer.prototype.visitCommentStmt = function (stmt, context) { return stmt; };\n      ExpressionTransformer.prototype.visitAllStatements = function (stmts, context) {\n          var _this = this;\n          return stmts.map(function (stmt) { return stmt.visitStatement(_this, context); });\n      };\n      return ExpressionTransformer;\n  }());\n  var RecursiveExpressionVisitor = (function () {\n      function RecursiveExpressionVisitor() {\n      }\n      RecursiveExpressionVisitor.prototype.visitReadVarExpr = function (ast, context) { return ast; };\n      RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function (expr, context) {\n          expr.value.visitExpression(this, context);\n          return expr;\n      };\n      RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function (expr, context) {\n          expr.receiver.visitExpression(this, context);\n          expr.index.visitExpression(this, context);\n          expr.value.visitExpression(this, context);\n          return expr;\n      };\n      RecursiveExpressionVisitor.prototype.visitWritePropExpr = function (expr, context) {\n          expr.receiver.visitExpression(this, context);\n          expr.value.visitExpression(this, context);\n          return expr;\n      };\n      RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function (ast, context) {\n          ast.receiver.visitExpression(this, context);\n          this.visitAllExpressions(ast.args, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function (ast, context) {\n          ast.fn.visitExpression(this, context);\n          this.visitAllExpressions(ast.args, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function (ast, context) {\n          ast.classExpr.visitExpression(this, context);\n          this.visitAllExpressions(ast.args, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitLiteralExpr = function (ast, context) { return ast; };\n      RecursiveExpressionVisitor.prototype.visitExternalExpr = function (ast, context) { return ast; };\n      RecursiveExpressionVisitor.prototype.visitConditionalExpr = function (ast, context) {\n          ast.condition.visitExpression(this, context);\n          ast.trueCase.visitExpression(this, context);\n          ast.falseCase.visitExpression(this, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitNotExpr = function (ast, context) {\n          ast.condition.visitExpression(this, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitCastExpr = function (ast, context) {\n          ast.value.visitExpression(this, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitFunctionExpr = function (ast, context) { return ast; };\n      RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function (ast, context) {\n          ast.lhs.visitExpression(this, context);\n          ast.rhs.visitExpression(this, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitReadPropExpr = function (ast, context) {\n          ast.receiver.visitExpression(this, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function (ast, context) {\n          ast.receiver.visitExpression(this, context);\n          ast.index.visitExpression(this, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function (ast, context) {\n          this.visitAllExpressions(ast.entries, context);\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function (ast, context) {\n          var _this = this;\n          ast.entries.forEach(function (entry) { return entry[1].visitExpression(_this, context); });\n          return ast;\n      };\n      RecursiveExpressionVisitor.prototype.visitAllExpressions = function (exprs, context) {\n          var _this = this;\n          exprs.forEach(function (expr) { return expr.visitExpression(_this, context); });\n      };\n      RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function (stmt, context) {\n          stmt.value.visitExpression(this, context);\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {\n          // Don't descend into nested functions\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitExpressionStmt = function (stmt, context) {\n          stmt.expr.visitExpression(this, context);\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitReturnStmt = function (stmt, context) {\n          stmt.value.visitExpression(this, context);\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {\n          // Don't descend into nested functions\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitIfStmt = function (stmt, context) {\n          stmt.condition.visitExpression(this, context);\n          this.visitAllStatements(stmt.trueCase, context);\n          this.visitAllStatements(stmt.falseCase, context);\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function (stmt, context) {\n          this.visitAllStatements(stmt.bodyStmts, context);\n          this.visitAllStatements(stmt.catchStmts, context);\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitThrowStmt = function (stmt, context) {\n          stmt.error.visitExpression(this, context);\n          return stmt;\n      };\n      RecursiveExpressionVisitor.prototype.visitCommentStmt = function (stmt, context) { return stmt; };\n      RecursiveExpressionVisitor.prototype.visitAllStatements = function (stmts, context) {\n          var _this = this;\n          stmts.forEach(function (stmt) { return stmt.visitStatement(_this, context); });\n      };\n      return RecursiveExpressionVisitor;\n  }());\n  function replaceVarInExpression(varName, newValue, expression) {\n      var transformer = new _ReplaceVariableTransformer(varName, newValue);\n      return expression.visitExpression(transformer, null);\n  }\n  var _ReplaceVariableTransformer = (function (_super) {\n      __extends$2(_ReplaceVariableTransformer, _super);\n      function _ReplaceVariableTransformer(_varName, _newValue) {\n          _super.call(this);\n          this._varName = _varName;\n          this._newValue = _newValue;\n      }\n      _ReplaceVariableTransformer.prototype.visitReadVarExpr = function (ast, context) {\n          return ast.name == this._varName ? this._newValue : ast;\n      };\n      return _ReplaceVariableTransformer;\n  }(ExpressionTransformer));\n  function findReadVarNames(stmts) {\n      var finder = new _VariableFinder();\n      finder.visitAllStatements(stmts, null);\n      return finder.varNames;\n  }\n  var _VariableFinder = (function (_super) {\n      __extends$2(_VariableFinder, _super);\n      function _VariableFinder() {\n          _super.apply(this, arguments);\n          this.varNames = new Set();\n      }\n      _VariableFinder.prototype.visitReadVarExpr = function (ast, context) {\n          this.varNames.add(ast.name);\n          return null;\n      };\n      return _VariableFinder;\n  }(RecursiveExpressionVisitor));\n  function variable(name, type) {\n      if (type === void 0) { type = null; }\n      return new ReadVarExpr(name, type);\n  }\n  function importExpr(id, typeParams) {\n      if (typeParams === void 0) { typeParams = null; }\n      return new ExternalExpr(id, null, typeParams);\n  }\n  function importType(id, typeParams, typeModifiers) {\n      if (typeParams === void 0) { typeParams = null; }\n      if (typeModifiers === void 0) { typeModifiers = null; }\n      return isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;\n  }\n  function literalArr(values, type) {\n      if (type === void 0) { type = null; }\n      return new LiteralArrayExpr(values, type);\n  }\n  function literalMap(values, type) {\n      if (type === void 0) { type = null; }\n      return new LiteralMapExpr(values, type);\n  }\n  function not(expr) {\n      return new NotExpr(expr);\n  }\n  function fn(params, body, type) {\n      if (type === void 0) { type = null; }\n      return new FunctionExpr(params, body, type);\n  }\n  function literal(value, type) {\n      if (type === void 0) { type = null; }\n      return new LiteralExpr(value, type);\n  }\n\n  var MODULE_SUFFIX = '';\n  var CAMEL_CASE_REGEXP = /([A-Z])/g;\n  function camelCaseToDashCase(input) {\n      return StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });\n  }\n  function splitAtColon(input, defaultValues) {\n      var colonIndex = input.indexOf(':');\n      if (colonIndex == -1)\n          return defaultValues;\n      return [input.slice(0, colonIndex).trim(), input.slice(colonIndex + 1).trim()];\n  }\n  function sanitizeIdentifier(name) {\n      return StringWrapper.replaceAll(name, /\\W/g, '_');\n  }\n  function visitValue(value, visitor, context) {\n      if (isArray(value)) {\n          return visitor.visitArray(value, context);\n      }\n      else if (isStrictStringMap(value)) {\n          return visitor.visitStringMap(value, context);\n      }\n      else if (isBlank(value) || isPrimitive(value)) {\n          return visitor.visitPrimitive(value, context);\n      }\n      else {\n          return visitor.visitOther(value, context);\n      }\n  }\n  var ValueTransformer = (function () {\n      function ValueTransformer() {\n      }\n      ValueTransformer.prototype.visitArray = function (arr, context) {\n          var _this = this;\n          return arr.map(function (value) { return visitValue(value, _this, context); });\n      };\n      ValueTransformer.prototype.visitStringMap = function (map, context) {\n          var _this = this;\n          var result = {};\n          StringMapWrapper.forEach(map, function (value /** TODO #9100 */, key /** TODO #9100 */) {\n              result[key] = visitValue(value, _this, context);\n          });\n          return result;\n      };\n      ValueTransformer.prototype.visitPrimitive = function (value, context) { return value; };\n      ValueTransformer.prototype.visitOther = function (value, context) { return value; };\n      return ValueTransformer;\n  }());\n  function assetUrl(pkg, path, type) {\n      if (path === void 0) { path = null; }\n      if (type === void 0) { type = 'src'; }\n      if (path == null) {\n          return \"asset:@angular/lib/\" + pkg + \"/index\";\n      }\n      else {\n          return \"asset:@angular/lib/\" + pkg + \"/src/\" + path;\n      }\n  }\n  function createDiTokenExpression(token) {\n      if (isPresent(token.value)) {\n          return literal(token.value);\n      }\n      else if (token.identifierIsInstance) {\n          return importExpr(token.identifier)\n              .instantiate([], importType(token.identifier, [], [TypeModifier.Const]));\n      }\n      else {\n          return importExpr(token.identifier);\n      }\n  }\n  var SyncAsyncResult = (function () {\n      function SyncAsyncResult(syncResult, asyncResult) {\n          if (asyncResult === void 0) { asyncResult = null; }\n          this.syncResult = syncResult;\n          this.asyncResult = asyncResult;\n          if (!asyncResult) {\n              this.asyncResult = Promise.resolve(syncResult);\n          }\n      }\n      return SyncAsyncResult;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$1 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  function unimplemented() {\n      throw new Error('unimplemented');\n  }\n  // group 0: \"[prop] or (event) or @trigger\"\n  // group 1: \"prop\" from \"[prop]\"\n  // group 2: \"event\" from \"(event)\"\n  // group 3: \"@trigger\" from \"@trigger\"\n  var HOST_REG_EXP = /^(?:(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\)))|(\\@[-\\w]+)$/;\n  var CompileMetadataWithIdentifier = (function () {\n      function CompileMetadataWithIdentifier() {\n      }\n      Object.defineProperty(CompileMetadataWithIdentifier.prototype, \"identifier\", {\n          get: function () { return unimplemented(); },\n          enumerable: true,\n          configurable: true\n      });\n      return CompileMetadataWithIdentifier;\n  }());\n  var CompileAnimationEntryMetadata = (function () {\n      function CompileAnimationEntryMetadata(name, definitions) {\n          if (name === void 0) { name = null; }\n          if (definitions === void 0) { definitions = null; }\n          this.name = name;\n          this.definitions = definitions;\n      }\n      return CompileAnimationEntryMetadata;\n  }());\n  var CompileAnimationStateMetadata = (function () {\n      function CompileAnimationStateMetadata() {\n      }\n      return CompileAnimationStateMetadata;\n  }());\n  var CompileAnimationStateDeclarationMetadata = (function (_super) {\n      __extends$1(CompileAnimationStateDeclarationMetadata, _super);\n      function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {\n          _super.call(this);\n          this.stateNameExpr = stateNameExpr;\n          this.styles = styles;\n      }\n      return CompileAnimationStateDeclarationMetadata;\n  }(CompileAnimationStateMetadata));\n  var CompileAnimationStateTransitionMetadata = (function (_super) {\n      __extends$1(CompileAnimationStateTransitionMetadata, _super);\n      function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {\n          _super.call(this);\n          this.stateChangeExpr = stateChangeExpr;\n          this.steps = steps;\n      }\n      return CompileAnimationStateTransitionMetadata;\n  }(CompileAnimationStateMetadata));\n  var CompileAnimationMetadata = (function () {\n      function CompileAnimationMetadata() {\n      }\n      return CompileAnimationMetadata;\n  }());\n  var CompileAnimationKeyframesSequenceMetadata = (function (_super) {\n      __extends$1(CompileAnimationKeyframesSequenceMetadata, _super);\n      function CompileAnimationKeyframesSequenceMetadata(steps) {\n          if (steps === void 0) { steps = []; }\n          _super.call(this);\n          this.steps = steps;\n      }\n      return CompileAnimationKeyframesSequenceMetadata;\n  }(CompileAnimationMetadata));\n  var CompileAnimationStyleMetadata = (function (_super) {\n      __extends$1(CompileAnimationStyleMetadata, _super);\n      function CompileAnimationStyleMetadata(offset, styles) {\n          if (styles === void 0) { styles = null; }\n          _super.call(this);\n          this.offset = offset;\n          this.styles = styles;\n      }\n      return CompileAnimationStyleMetadata;\n  }(CompileAnimationMetadata));\n  var CompileAnimationAnimateMetadata = (function (_super) {\n      __extends$1(CompileAnimationAnimateMetadata, _super);\n      function CompileAnimationAnimateMetadata(timings, styles) {\n          if (timings === void 0) { timings = 0; }\n          if (styles === void 0) { styles = null; }\n          _super.call(this);\n          this.timings = timings;\n          this.styles = styles;\n      }\n      return CompileAnimationAnimateMetadata;\n  }(CompileAnimationMetadata));\n  var CompileAnimationWithStepsMetadata = (function (_super) {\n      __extends$1(CompileAnimationWithStepsMetadata, _super);\n      function CompileAnimationWithStepsMetadata(steps) {\n          if (steps === void 0) { steps = null; }\n          _super.call(this);\n          this.steps = steps;\n      }\n      return CompileAnimationWithStepsMetadata;\n  }(CompileAnimationMetadata));\n  var CompileAnimationSequenceMetadata = (function (_super) {\n      __extends$1(CompileAnimationSequenceMetadata, _super);\n      function CompileAnimationSequenceMetadata(steps) {\n          if (steps === void 0) { steps = null; }\n          _super.call(this, steps);\n      }\n      return CompileAnimationSequenceMetadata;\n  }(CompileAnimationWithStepsMetadata));\n  var CompileAnimationGroupMetadata = (function (_super) {\n      __extends$1(CompileAnimationGroupMetadata, _super);\n      function CompileAnimationGroupMetadata(steps) {\n          if (steps === void 0) { steps = null; }\n          _super.call(this, steps);\n      }\n      return CompileAnimationGroupMetadata;\n  }(CompileAnimationWithStepsMetadata));\n  var CompileIdentifierMetadata = (function () {\n      function CompileIdentifierMetadata(_a) {\n          var _b = _a === void 0 ? {} : _a, reference = _b.reference, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, value = _b.value;\n          this.reference = reference;\n          this.name = name;\n          this.prefix = prefix;\n          this.moduleUrl = moduleUrl;\n          this.value = value;\n      }\n      Object.defineProperty(CompileIdentifierMetadata.prototype, \"identifier\", {\n          get: function () { return this; },\n          enumerable: true,\n          configurable: true\n      });\n      return CompileIdentifierMetadata;\n  }());\n  var CompileDiDependencyMetadata = (function () {\n      function CompileDiDependencyMetadata(_a) {\n          var _b = _a === void 0 ? {} : _a, isAttribute = _b.isAttribute, isSelf = _b.isSelf, isHost = _b.isHost, isSkipSelf = _b.isSkipSelf, isOptional = _b.isOptional, isValue = _b.isValue, query = _b.query, viewQuery = _b.viewQuery, token = _b.token, value = _b.value;\n          this.isAttribute = normalizeBool(isAttribute);\n          this.isSelf = normalizeBool(isSelf);\n          this.isHost = normalizeBool(isHost);\n          this.isSkipSelf = normalizeBool(isSkipSelf);\n          this.isOptional = normalizeBool(isOptional);\n          this.isValue = normalizeBool(isValue);\n          this.query = query;\n          this.viewQuery = viewQuery;\n          this.token = token;\n          this.value = value;\n      }\n      return CompileDiDependencyMetadata;\n  }());\n  var CompileProviderMetadata = (function () {\n      function CompileProviderMetadata(_a) {\n          var token = _a.token, useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;\n          this.token = token;\n          this.useClass = useClass;\n          this.useValue = useValue;\n          this.useExisting = useExisting;\n          this.useFactory = useFactory;\n          this.deps = normalizeBlank(deps);\n          this.multi = normalizeBool(multi);\n      }\n      return CompileProviderMetadata;\n  }());\n  var CompileFactoryMetadata = (function (_super) {\n      __extends$1(CompileFactoryMetadata, _super);\n      function CompileFactoryMetadata(_a) {\n          var reference = _a.reference, name = _a.name, moduleUrl = _a.moduleUrl, prefix = _a.prefix, diDeps = _a.diDeps, value = _a.value;\n          _super.call(this, { reference: reference, name: name, prefix: prefix, moduleUrl: moduleUrl, value: value });\n          this.diDeps = _normalizeArray(diDeps);\n      }\n      return CompileFactoryMetadata;\n  }(CompileIdentifierMetadata));\n  var CompileTokenMetadata = (function () {\n      function CompileTokenMetadata(_a) {\n          var value = _a.value, identifier = _a.identifier, identifierIsInstance = _a.identifierIsInstance;\n          this.value = value;\n          this.identifier = identifier;\n          this.identifierIsInstance = normalizeBool(identifierIsInstance);\n      }\n      Object.defineProperty(CompileTokenMetadata.prototype, \"reference\", {\n          get: function () {\n              if (isPresent(this.identifier)) {\n                  return this.identifier.reference;\n              }\n              else {\n                  return this.value;\n              }\n          },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(CompileTokenMetadata.prototype, \"name\", {\n          get: function () {\n              return isPresent(this.value) ? sanitizeIdentifier(this.value) : this.identifier.name;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      return CompileTokenMetadata;\n  }());\n  /**\n   * Metadata regarding compilation of a type.\n   */\n  var CompileTypeMetadata = (function (_super) {\n      __extends$1(CompileTypeMetadata, _super);\n      function CompileTypeMetadata(_a) {\n          var _b = _a === void 0 ? {} : _a, reference = _b.reference, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, isHost = _b.isHost, value = _b.value, diDeps = _b.diDeps, lifecycleHooks = _b.lifecycleHooks;\n          _super.call(this, { reference: reference, name: name, moduleUrl: moduleUrl, prefix: prefix, value: value });\n          this.isHost = normalizeBool(isHost);\n          this.diDeps = _normalizeArray(diDeps);\n          this.lifecycleHooks = _normalizeArray(lifecycleHooks);\n      }\n      return CompileTypeMetadata;\n  }(CompileIdentifierMetadata));\n  var CompileQueryMetadata = (function () {\n      function CompileQueryMetadata(_a) {\n          var _b = _a === void 0 ? {} : _a, selectors = _b.selectors, descendants = _b.descendants, first = _b.first, propertyName = _b.propertyName, read = _b.read;\n          this.selectors = selectors;\n          this.descendants = normalizeBool(descendants);\n          this.first = normalizeBool(first);\n          this.propertyName = propertyName;\n          this.read = read;\n      }\n      return CompileQueryMetadata;\n  }());\n  /**\n   * Metadata about a stylesheet\n   */\n  var CompileStylesheetMetadata = (function () {\n      function CompileStylesheetMetadata(_a) {\n          var _b = _a === void 0 ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls;\n          this.moduleUrl = moduleUrl;\n          this.styles = _normalizeArray(styles);\n          this.styleUrls = _normalizeArray(styleUrls);\n      }\n      return CompileStylesheetMetadata;\n  }());\n  /**\n   * Metadata regarding compilation of a template.\n   */\n  var CompileTemplateMetadata = (function () {\n      function CompileTemplateMetadata(_a) {\n          var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, externalStylesheets = _b.externalStylesheets, animations = _b.animations, ngContentSelectors = _b.ngContentSelectors, interpolation = _b.interpolation;\n          this.encapsulation = encapsulation;\n          this.template = template;\n          this.templateUrl = templateUrl;\n          this.styles = _normalizeArray(styles);\n          this.styleUrls = _normalizeArray(styleUrls);\n          this.externalStylesheets = _normalizeArray(externalStylesheets);\n          this.animations = isPresent(animations) ? ListWrapper.flatten(animations) : [];\n          this.ngContentSelectors = isPresent(ngContentSelectors) ? ngContentSelectors : [];\n          if (isPresent(interpolation) && interpolation.length != 2) {\n              throw new Error(\"'interpolation' should have a start and an end symbol.\");\n          }\n          this.interpolation = interpolation;\n      }\n      return CompileTemplateMetadata;\n  }());\n  /**\n   * Metadata regarding compilation of a directive.\n   */\n  var CompileDirectiveMetadata = (function () {\n      function CompileDirectiveMetadata(_a) {\n          var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template;\n          this.type = type;\n          this.isComponent = isComponent;\n          this.selector = selector;\n          this.exportAs = exportAs;\n          this.changeDetection = changeDetection;\n          this.inputs = inputs;\n          this.outputs = outputs;\n          this.hostListeners = hostListeners;\n          this.hostProperties = hostProperties;\n          this.hostAttributes = hostAttributes;\n          this.providers = _normalizeArray(providers);\n          this.viewProviders = _normalizeArray(viewProviders);\n          this.queries = _normalizeArray(queries);\n          this.viewQueries = _normalizeArray(viewQueries);\n          this.entryComponents = _normalizeArray(entryComponents);\n          this.template = template;\n      }\n      CompileDirectiveMetadata.create = function (_a) {\n          var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template;\n          var hostListeners = {};\n          var hostProperties = {};\n          var hostAttributes = {};\n          if (isPresent(host)) {\n              StringMapWrapper.forEach(host, function (value, key) {\n                  var matches = key.match(HOST_REG_EXP);\n                  if (matches === null) {\n                      hostAttributes[key] = value;\n                  }\n                  else if (isPresent(matches[1])) {\n                      hostProperties[matches[1]] = value;\n                  }\n                  else if (isPresent(matches[2])) {\n                      hostListeners[matches[2]] = value;\n                  }\n              });\n          }\n          var inputsMap = {};\n          if (isPresent(inputs)) {\n              inputs.forEach(function (bindConfig) {\n                  // canonical syntax: `dirProp: elProp`\n                  // if there is no `:`, use dirProp = elProp\n                  var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n                  inputsMap[parts[0]] = parts[1];\n              });\n          }\n          var outputsMap = {};\n          if (isPresent(outputs)) {\n              outputs.forEach(function (bindConfig) {\n                  // canonical syntax: `dirProp: elProp`\n                  // if there is no `:`, use dirProp = elProp\n                  var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n                  outputsMap[parts[0]] = parts[1];\n              });\n          }\n          return new CompileDirectiveMetadata({\n              type: type,\n              isComponent: normalizeBool(isComponent), selector: selector, exportAs: exportAs, changeDetection: changeDetection,\n              inputs: inputsMap,\n              outputs: outputsMap,\n              hostListeners: hostListeners,\n              hostProperties: hostProperties,\n              hostAttributes: hostAttributes,\n              providers: providers,\n              viewProviders: viewProviders,\n              queries: queries,\n              viewQueries: viewQueries,\n              entryComponents: entryComponents,\n              template: template,\n          });\n      };\n      Object.defineProperty(CompileDirectiveMetadata.prototype, \"identifier\", {\n          get: function () { return this.type; },\n          enumerable: true,\n          configurable: true\n      });\n      return CompileDirectiveMetadata;\n  }());\n  /**\n   * Construct {@link CompileDirectiveMetadata} from {@link ComponentTypeMetadata} and a selector.\n   */\n  function createHostComponentMeta(compMeta) {\n      var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();\n      return CompileDirectiveMetadata.create({\n          type: new CompileTypeMetadata({\n              reference: Object,\n              name: compMeta.type.name + \"_Host\",\n              moduleUrl: compMeta.type.moduleUrl,\n              isHost: true\n          }),\n          template: new CompileTemplateMetadata({\n              encapsulation: _angular_core.ViewEncapsulation.None,\n              template: template,\n              templateUrl: '',\n              styles: [],\n              styleUrls: [],\n              ngContentSelectors: [],\n              animations: []\n          }),\n          changeDetection: _angular_core.ChangeDetectionStrategy.Default,\n          inputs: [],\n          outputs: [],\n          host: {},\n          isComponent: true,\n          selector: '*',\n          providers: [],\n          viewProviders: [],\n          queries: [],\n          viewQueries: []\n      });\n  }\n  var CompilePipeMetadata = (function () {\n      function CompilePipeMetadata(_a) {\n          var _b = _a === void 0 ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure;\n          this.type = type;\n          this.name = name;\n          this.pure = normalizeBool(pure);\n      }\n      Object.defineProperty(CompilePipeMetadata.prototype, \"identifier\", {\n          get: function () { return this.type; },\n          enumerable: true,\n          configurable: true\n      });\n      return CompilePipeMetadata;\n  }());\n  /**\n   * Metadata regarding compilation of a directive.\n   */\n  var CompileNgModuleMetadata = (function () {\n      function CompileNgModuleMetadata(_a) {\n          var _b = _a === void 0 ? {} : _a, type = _b.type, providers = _b.providers, declaredDirectives = _b.declaredDirectives, exportedDirectives = _b.exportedDirectives, declaredPipes = _b.declaredPipes, exportedPipes = _b.exportedPipes, entryComponents = _b.entryComponents, bootstrapComponents = _b.bootstrapComponents, importedModules = _b.importedModules, exportedModules = _b.exportedModules, schemas = _b.schemas, transitiveModule = _b.transitiveModule;\n          this.type = type;\n          this.declaredDirectives = _normalizeArray(declaredDirectives);\n          this.exportedDirectives = _normalizeArray(exportedDirectives);\n          this.declaredPipes = _normalizeArray(declaredPipes);\n          this.exportedPipes = _normalizeArray(exportedPipes);\n          this.providers = _normalizeArray(providers);\n          this.entryComponents = _normalizeArray(entryComponents);\n          this.bootstrapComponents = _normalizeArray(bootstrapComponents);\n          this.importedModules = _normalizeArray(importedModules);\n          this.exportedModules = _normalizeArray(exportedModules);\n          this.schemas = _normalizeArray(schemas);\n          this.transitiveModule = transitiveModule;\n      }\n      Object.defineProperty(CompileNgModuleMetadata.prototype, \"identifier\", {\n          get: function () { return this.type; },\n          enumerable: true,\n          configurable: true\n      });\n      return CompileNgModuleMetadata;\n  }());\n  var TransitiveCompileNgModuleMetadata = (function () {\n      function TransitiveCompileNgModuleMetadata(modules, providers, entryComponents, directives, pipes) {\n          var _this = this;\n          this.modules = modules;\n          this.providers = providers;\n          this.entryComponents = entryComponents;\n          this.directives = directives;\n          this.pipes = pipes;\n          this.directivesSet = new Set();\n          this.pipesSet = new Set();\n          directives.forEach(function (dir) { return _this.directivesSet.add(dir.type.reference); });\n          pipes.forEach(function (pipe) { return _this.pipesSet.add(pipe.type.reference); });\n      }\n      return TransitiveCompileNgModuleMetadata;\n  }());\n  function removeIdentifierDuplicates(items) {\n      var map = new Map();\n      items.forEach(function (item) {\n          if (!map.get(item.identifier.reference)) {\n              map.set(item.identifier.reference, item);\n          }\n      });\n      return MapWrapper.values(map);\n  }\n  function _normalizeArray(obj) {\n      return isPresent(obj) ? obj : [];\n  }\n  function isStaticSymbol(value) {\n      return isStringMap(value) && isPresent(value['name']) && isPresent(value['filePath']);\n  }\n  var ProviderMeta = (function () {\n      function ProviderMeta(token, _a) {\n          var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;\n          this.token = token;\n          this.useClass = useClass;\n          this.useValue = useValue;\n          this.useExisting = useExisting;\n          this.useFactory = useFactory;\n          this.dependencies = deps;\n          this.multi = !!multi;\n      }\n      return ProviderMeta;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$3 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var ParserError = (function () {\n      function ParserError(message, input, errLocation, ctxLocation) {\n          this.input = input;\n          this.errLocation = errLocation;\n          this.ctxLocation = ctxLocation;\n          this.message = \"Parser Error: \" + message + \" \" + errLocation + \" [\" + input + \"] in \" + ctxLocation;\n      }\n      return ParserError;\n  }());\n  var ParseSpan = (function () {\n      function ParseSpan(start, end) {\n          this.start = start;\n          this.end = end;\n      }\n      return ParseSpan;\n  }());\n  var AST = (function () {\n      function AST(span) {\n          this.span = span;\n      }\n      AST.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return null;\n      };\n      AST.prototype.toString = function () { return 'AST'; };\n      return AST;\n  }());\n  /**\n   * Represents a quoted expression of the form:\n   *\n   * quote = prefix `:` uninterpretedExpression\n   * prefix = identifier\n   * uninterpretedExpression = arbitrary string\n   *\n   * A quoted expression is meant to be pre-processed by an AST transformer that\n   * converts it into another AST that no longer contains quoted expressions.\n   * It is meant to allow third-party developers to extend Angular template\n   * expression language. The `uninterpretedExpression` part of the quote is\n   * therefore not interpreted by the Angular's own expression parser.\n   */\n  var Quote = (function (_super) {\n      __extends$3(Quote, _super);\n      function Quote(span, prefix, uninterpretedExpression, location) {\n          _super.call(this, span);\n          this.prefix = prefix;\n          this.uninterpretedExpression = uninterpretedExpression;\n          this.location = location;\n      }\n      Quote.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitQuote(this, context);\n      };\n      Quote.prototype.toString = function () { return 'Quote'; };\n      return Quote;\n  }(AST));\n  var EmptyExpr = (function (_super) {\n      __extends$3(EmptyExpr, _super);\n      function EmptyExpr() {\n          _super.apply(this, arguments);\n      }\n      EmptyExpr.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          // do nothing\n      };\n      return EmptyExpr;\n  }(AST));\n  var ImplicitReceiver = (function (_super) {\n      __extends$3(ImplicitReceiver, _super);\n      function ImplicitReceiver() {\n          _super.apply(this, arguments);\n      }\n      ImplicitReceiver.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitImplicitReceiver(this, context);\n      };\n      return ImplicitReceiver;\n  }(AST));\n  /**\n   * Multiple expressions separated by a semicolon.\n   */\n  var Chain = (function (_super) {\n      __extends$3(Chain, _super);\n      function Chain(span, expressions) {\n          _super.call(this, span);\n          this.expressions = expressions;\n      }\n      Chain.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitChain(this, context);\n      };\n      return Chain;\n  }(AST));\n  var Conditional = (function (_super) {\n      __extends$3(Conditional, _super);\n      function Conditional(span, condition, trueExp, falseExp) {\n          _super.call(this, span);\n          this.condition = condition;\n          this.trueExp = trueExp;\n          this.falseExp = falseExp;\n      }\n      Conditional.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitConditional(this, context);\n      };\n      return Conditional;\n  }(AST));\n  var PropertyRead = (function (_super) {\n      __extends$3(PropertyRead, _super);\n      function PropertyRead(span, receiver, name) {\n          _super.call(this, span);\n          this.receiver = receiver;\n          this.name = name;\n      }\n      PropertyRead.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitPropertyRead(this, context);\n      };\n      return PropertyRead;\n  }(AST));\n  var PropertyWrite = (function (_super) {\n      __extends$3(PropertyWrite, _super);\n      function PropertyWrite(span, receiver, name, value) {\n          _super.call(this, span);\n          this.receiver = receiver;\n          this.name = name;\n          this.value = value;\n      }\n      PropertyWrite.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitPropertyWrite(this, context);\n      };\n      return PropertyWrite;\n  }(AST));\n  var SafePropertyRead = (function (_super) {\n      __extends$3(SafePropertyRead, _super);\n      function SafePropertyRead(span, receiver, name) {\n          _super.call(this, span);\n          this.receiver = receiver;\n          this.name = name;\n      }\n      SafePropertyRead.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitSafePropertyRead(this, context);\n      };\n      return SafePropertyRead;\n  }(AST));\n  var KeyedRead = (function (_super) {\n      __extends$3(KeyedRead, _super);\n      function KeyedRead(span, obj, key) {\n          _super.call(this, span);\n          this.obj = obj;\n          this.key = key;\n      }\n      KeyedRead.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitKeyedRead(this, context);\n      };\n      return KeyedRead;\n  }(AST));\n  var KeyedWrite = (function (_super) {\n      __extends$3(KeyedWrite, _super);\n      function KeyedWrite(span, obj, key, value) {\n          _super.call(this, span);\n          this.obj = obj;\n          this.key = key;\n          this.value = value;\n      }\n      KeyedWrite.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitKeyedWrite(this, context);\n      };\n      return KeyedWrite;\n  }(AST));\n  var BindingPipe = (function (_super) {\n      __extends$3(BindingPipe, _super);\n      function BindingPipe(span, exp, name, args) {\n          _super.call(this, span);\n          this.exp = exp;\n          this.name = name;\n          this.args = args;\n      }\n      BindingPipe.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitPipe(this, context);\n      };\n      return BindingPipe;\n  }(AST));\n  var LiteralPrimitive = (function (_super) {\n      __extends$3(LiteralPrimitive, _super);\n      function LiteralPrimitive(span, value) {\n          _super.call(this, span);\n          this.value = value;\n      }\n      LiteralPrimitive.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitLiteralPrimitive(this, context);\n      };\n      return LiteralPrimitive;\n  }(AST));\n  var LiteralArray = (function (_super) {\n      __extends$3(LiteralArray, _super);\n      function LiteralArray(span, expressions) {\n          _super.call(this, span);\n          this.expressions = expressions;\n      }\n      LiteralArray.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitLiteralArray(this, context);\n      };\n      return LiteralArray;\n  }(AST));\n  var LiteralMap = (function (_super) {\n      __extends$3(LiteralMap, _super);\n      function LiteralMap(span, keys, values) {\n          _super.call(this, span);\n          this.keys = keys;\n          this.values = values;\n      }\n      LiteralMap.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitLiteralMap(this, context);\n      };\n      return LiteralMap;\n  }(AST));\n  var Interpolation = (function (_super) {\n      __extends$3(Interpolation, _super);\n      function Interpolation(span, strings, expressions) {\n          _super.call(this, span);\n          this.strings = strings;\n          this.expressions = expressions;\n      }\n      Interpolation.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitInterpolation(this, context);\n      };\n      return Interpolation;\n  }(AST));\n  var Binary = (function (_super) {\n      __extends$3(Binary, _super);\n      function Binary(span, operation, left, right) {\n          _super.call(this, span);\n          this.operation = operation;\n          this.left = left;\n          this.right = right;\n      }\n      Binary.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitBinary(this, context);\n      };\n      return Binary;\n  }(AST));\n  var PrefixNot = (function (_super) {\n      __extends$3(PrefixNot, _super);\n      function PrefixNot(span, expression) {\n          _super.call(this, span);\n          this.expression = expression;\n      }\n      PrefixNot.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitPrefixNot(this, context);\n      };\n      return PrefixNot;\n  }(AST));\n  var MethodCall = (function (_super) {\n      __extends$3(MethodCall, _super);\n      function MethodCall(span, receiver, name, args) {\n          _super.call(this, span);\n          this.receiver = receiver;\n          this.name = name;\n          this.args = args;\n      }\n      MethodCall.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitMethodCall(this, context);\n      };\n      return MethodCall;\n  }(AST));\n  var SafeMethodCall = (function (_super) {\n      __extends$3(SafeMethodCall, _super);\n      function SafeMethodCall(span, receiver, name, args) {\n          _super.call(this, span);\n          this.receiver = receiver;\n          this.name = name;\n          this.args = args;\n      }\n      SafeMethodCall.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitSafeMethodCall(this, context);\n      };\n      return SafeMethodCall;\n  }(AST));\n  var FunctionCall = (function (_super) {\n      __extends$3(FunctionCall, _super);\n      function FunctionCall(span, target, args) {\n          _super.call(this, span);\n          this.target = target;\n          this.args = args;\n      }\n      FunctionCall.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return visitor.visitFunctionCall(this, context);\n      };\n      return FunctionCall;\n  }(AST));\n  var ASTWithSource = (function (_super) {\n      __extends$3(ASTWithSource, _super);\n      function ASTWithSource(ast, source, location, errors) {\n          _super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length));\n          this.ast = ast;\n          this.source = source;\n          this.location = location;\n          this.errors = errors;\n      }\n      ASTWithSource.prototype.visit = function (visitor, context) {\n          if (context === void 0) { context = null; }\n          return this.ast.visit(visitor, context);\n      };\n      ASTWithSource.prototype.toString = function () { return this.source + \" in \" + this.location; };\n      return ASTWithSource;\n  }(AST));\n  var TemplateBinding = (function () {\n      function TemplateBinding(key, keyIsVar, name, expression) {\n          this.key = key;\n          this.keyIsVar = keyIsVar;\n          this.name = name;\n          this.expression = expression;\n      }\n      return TemplateBinding;\n  }());\n  var RecursiveAstVisitor = (function () {\n      function RecursiveAstVisitor() {\n      }\n      RecursiveAstVisitor.prototype.visitBinary = function (ast, context) {\n          ast.left.visit(this);\n          ast.right.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitChain = function (ast, context) { return this.visitAll(ast.expressions, context); };\n      RecursiveAstVisitor.prototype.visitConditional = function (ast, context) {\n          ast.condition.visit(this);\n          ast.trueExp.visit(this);\n          ast.falseExp.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitPipe = function (ast, context) {\n          ast.exp.visit(this);\n          this.visitAll(ast.args, context);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) {\n          ast.target.visit(this);\n          this.visitAll(ast.args, context);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) { return null; };\n      RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) {\n          return this.visitAll(ast.expressions, context);\n      };\n      RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) {\n          ast.obj.visit(this);\n          ast.key.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) {\n          ast.obj.visit(this);\n          ast.key.visit(this);\n          ast.value.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) {\n          return this.visitAll(ast.expressions, context);\n      };\n      RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) { return this.visitAll(ast.values, context); };\n      RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) { return null; };\n      RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) {\n          ast.receiver.visit(this);\n          return this.visitAll(ast.args, context);\n      };\n      RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) {\n          ast.expression.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) {\n          ast.receiver.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) {\n          ast.receiver.visit(this);\n          ast.value.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) {\n          ast.receiver.visit(this);\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) {\n          ast.receiver.visit(this);\n          return this.visitAll(ast.args, context);\n      };\n      RecursiveAstVisitor.prototype.visitAll = function (asts, context) {\n          var _this = this;\n          asts.forEach(function (ast) { return ast.visit(_this, context); });\n          return null;\n      };\n      RecursiveAstVisitor.prototype.visitQuote = function (ast, context) { return null; };\n      return RecursiveAstVisitor;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var $EOF = 0;\n  var $TAB = 9;\n  var $LF = 10;\n  var $VTAB = 11;\n  var $FF = 12;\n  var $CR = 13;\n  var $SPACE = 32;\n  var $BANG = 33;\n  var $DQ = 34;\n  var $HASH = 35;\n  var $$ = 36;\n  var $PERCENT = 37;\n  var $AMPERSAND = 38;\n  var $SQ = 39;\n  var $LPAREN = 40;\n  var $RPAREN = 41;\n  var $STAR = 42;\n  var $PLUS = 43;\n  var $COMMA = 44;\n  var $MINUS = 45;\n  var $PERIOD = 46;\n  var $SLASH = 47;\n  var $COLON = 58;\n  var $SEMICOLON = 59;\n  var $LT = 60;\n  var $EQ = 61;\n  var $GT = 62;\n  var $QUESTION = 63;\n  var $0 = 48;\n  var $9 = 57;\n  var $A = 65;\n  var $E = 69;\n  var $F = 70;\n  var $X = 88;\n  var $Z = 90;\n  var $LBRACKET = 91;\n  var $BACKSLASH = 92;\n  var $RBRACKET = 93;\n  var $CARET = 94;\n  var $_ = 95;\n  var $a = 97;\n  var $e = 101;\n  var $f = 102;\n  var $n = 110;\n  var $r = 114;\n  var $t = 116;\n  var $u = 117;\n  var $v = 118;\n  var $x = 120;\n  var $z = 122;\n  var $LBRACE = 123;\n  var $BAR = 124;\n  var $RBRACE = 125;\n  var $NBSP = 160;\n  var $BT = 96;\n  function isWhitespace(code) {\n      return (code >= $TAB && code <= $SPACE) || (code == $NBSP);\n  }\n  function isDigit(code) {\n      return $0 <= code && code <= $9;\n  }\n  function isAsciiLetter(code) {\n      return code >= $a && code <= $z || code >= $A && code <= $Z;\n  }\n  function isAsciiHexDigit(code) {\n      return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);\n  }\n\n  function assertArrayOfStrings(identifier, value) {\n      if (!_angular_core.isDevMode() || isBlank(value)) {\n          return;\n      }\n      if (!isArray(value)) {\n          throw new Error(\"Expected '\" + identifier + \"' to be an array of strings.\");\n      }\n      for (var i = 0; i < value.length; i += 1) {\n          if (!isString(value[i])) {\n              throw new Error(\"Expected '\" + identifier + \"' to be an array of strings.\");\n          }\n      }\n  }\n  var INTERPOLATION_BLACKLIST_REGEXPS = [\n      /^\\s*$/,\n      /[<>]/,\n      /^[{}]$/,\n      /&(#|[a-z])/i,\n      /^\\/\\//,\n  ];\n  function assertInterpolationSymbols(identifier, value) {\n      if (isPresent(value) && !(isArray(value) && value.length == 2)) {\n          throw new Error(\"Expected '\" + identifier + \"' to be an array, [start, end].\");\n      }\n      else if (_angular_core.isDevMode() && !isBlank(value)) {\n          var start_1 = value[0];\n          var end_1 = value[1];\n          // black list checking\n          INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {\n              if (regexp.test(start_1) || regexp.test(end_1)) {\n                  throw new Error(\"['\" + start_1 + \"', '\" + end_1 + \"'] contains unusable interpolation symbol.\");\n              }\n          });\n      }\n  }\n\n  var InterpolationConfig = (function () {\n      function InterpolationConfig(start, end) {\n          this.start = start;\n          this.end = end;\n      }\n      InterpolationConfig.fromArray = function (markers) {\n          if (!markers) {\n              return DEFAULT_INTERPOLATION_CONFIG;\n          }\n          assertInterpolationSymbols('interpolation', markers);\n          return new InterpolationConfig(markers[0], markers[1]);\n      };\n      ;\n      return InterpolationConfig;\n  }());\n  var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');\n\n  var TokenType;\n  (function (TokenType) {\n      TokenType[TokenType[\"Character\"] = 0] = \"Character\";\n      TokenType[TokenType[\"Identifier\"] = 1] = \"Identifier\";\n      TokenType[TokenType[\"Keyword\"] = 2] = \"Keyword\";\n      TokenType[TokenType[\"String\"] = 3] = \"String\";\n      TokenType[TokenType[\"Operator\"] = 4] = \"Operator\";\n      TokenType[TokenType[\"Number\"] = 5] = \"Number\";\n      TokenType[TokenType[\"Error\"] = 6] = \"Error\";\n  })(TokenType || (TokenType = {}));\n  var KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];\n  var Lexer = (function () {\n      function Lexer() {\n      }\n      Lexer.prototype.tokenize = function (text) {\n          var scanner = new _Scanner(text);\n          var tokens = [];\n          var token = scanner.scanToken();\n          while (token != null) {\n              tokens.push(token);\n              token = scanner.scanToken();\n          }\n          return tokens;\n      };\n      Lexer.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      Lexer.ctorParameters = [];\n      return Lexer;\n  }());\n  var Token = (function () {\n      function Token(index, type, numValue, strValue) {\n          this.index = index;\n          this.type = type;\n          this.numValue = numValue;\n          this.strValue = strValue;\n      }\n      Token.prototype.isCharacter = function (code) {\n          return this.type == TokenType.Character && this.numValue == code;\n      };\n      Token.prototype.isNumber = function () { return this.type == TokenType.Number; };\n      Token.prototype.isString = function () { return this.type == TokenType.String; };\n      Token.prototype.isOperator = function (operater) {\n          return this.type == TokenType.Operator && this.strValue == operater;\n      };\n      Token.prototype.isIdentifier = function () { return this.type == TokenType.Identifier; };\n      Token.prototype.isKeyword = function () { return this.type == TokenType.Keyword; };\n      Token.prototype.isKeywordLet = function () { return this.type == TokenType.Keyword && this.strValue == 'let'; };\n      Token.prototype.isKeywordNull = function () { return this.type == TokenType.Keyword && this.strValue == 'null'; };\n      Token.prototype.isKeywordUndefined = function () {\n          return this.type == TokenType.Keyword && this.strValue == 'undefined';\n      };\n      Token.prototype.isKeywordTrue = function () { return this.type == TokenType.Keyword && this.strValue == 'true'; };\n      Token.prototype.isKeywordFalse = function () { return this.type == TokenType.Keyword && this.strValue == 'false'; };\n      Token.prototype.isKeywordThis = function () { return this.type == TokenType.Keyword && this.strValue == 'this'; };\n      Token.prototype.isError = function () { return this.type == TokenType.Error; };\n      Token.prototype.toNumber = function () { return this.type == TokenType.Number ? this.numValue : -1; };\n      Token.prototype.toString = function () {\n          switch (this.type) {\n              case TokenType.Character:\n              case TokenType.Identifier:\n              case TokenType.Keyword:\n              case TokenType.Operator:\n              case TokenType.String:\n              case TokenType.Error:\n                  return this.strValue;\n              case TokenType.Number:\n                  return this.numValue.toString();\n              default:\n                  return null;\n          }\n      };\n      return Token;\n  }());\n  function newCharacterToken(index, code) {\n      return new Token(index, TokenType.Character, code, StringWrapper.fromCharCode(code));\n  }\n  function newIdentifierToken(index, text) {\n      return new Token(index, TokenType.Identifier, 0, text);\n  }\n  function newKeywordToken(index, text) {\n      return new Token(index, TokenType.Keyword, 0, text);\n  }\n  function newOperatorToken(index, text) {\n      return new Token(index, TokenType.Operator, 0, text);\n  }\n  function newStringToken(index, text) {\n      return new Token(index, TokenType.String, 0, text);\n  }\n  function newNumberToken(index, n) {\n      return new Token(index, TokenType.Number, n, '');\n  }\n  function newErrorToken(index, message) {\n      return new Token(index, TokenType.Error, 0, message);\n  }\n  var EOF = new Token(-1, TokenType.Character, 0, '');\n  var _Scanner = (function () {\n      function _Scanner(input) {\n          this.input = input;\n          this.peek = 0;\n          this.index = -1;\n          this.length = input.length;\n          this.advance();\n      }\n      _Scanner.prototype.advance = function () {\n          this.peek =\n              ++this.index >= this.length ? $EOF : StringWrapper.charCodeAt(this.input, this.index);\n      };\n      _Scanner.prototype.scanToken = function () {\n          var input = this.input, length = this.length, peek = this.peek, index = this.index;\n          // Skip whitespace.\n          while (peek <= $SPACE) {\n              if (++index >= length) {\n                  peek = $EOF;\n                  break;\n              }\n              else {\n                  peek = StringWrapper.charCodeAt(input, index);\n              }\n          }\n          this.peek = peek;\n          this.index = index;\n          if (index >= length) {\n              return null;\n          }\n          // Handle identifiers and numbers.\n          if (isIdentifierStart(peek))\n              return this.scanIdentifier();\n          if (isDigit(peek))\n              return this.scanNumber(index);\n          var start = index;\n          switch (peek) {\n              case $PERIOD:\n                  this.advance();\n                  return isDigit(this.peek) ? this.scanNumber(start) :\n                      newCharacterToken(start, $PERIOD);\n              case $LPAREN:\n              case $RPAREN:\n              case $LBRACE:\n              case $RBRACE:\n              case $LBRACKET:\n              case $RBRACKET:\n              case $COMMA:\n              case $COLON:\n              case $SEMICOLON:\n                  return this.scanCharacter(start, peek);\n              case $SQ:\n              case $DQ:\n                  return this.scanString();\n              case $HASH:\n              case $PLUS:\n              case $MINUS:\n              case $STAR:\n              case $SLASH:\n              case $PERCENT:\n              case $CARET:\n                  return this.scanOperator(start, StringWrapper.fromCharCode(peek));\n              case $QUESTION:\n                  return this.scanComplexOperator(start, '?', $PERIOD, '.');\n              case $LT:\n              case $GT:\n                  return this.scanComplexOperator(start, StringWrapper.fromCharCode(peek), $EQ, '=');\n              case $BANG:\n              case $EQ:\n                  return this.scanComplexOperator(start, StringWrapper.fromCharCode(peek), $EQ, '=', $EQ, '=');\n              case $AMPERSAND:\n                  return this.scanComplexOperator(start, '&', $AMPERSAND, '&');\n              case $BAR:\n                  return this.scanComplexOperator(start, '|', $BAR, '|');\n              case $NBSP:\n                  while (isWhitespace(this.peek))\n                      this.advance();\n                  return this.scanToken();\n          }\n          this.advance();\n          return this.error(\"Unexpected character [\" + StringWrapper.fromCharCode(peek) + \"]\", 0);\n      };\n      _Scanner.prototype.scanCharacter = function (start, code) {\n          this.advance();\n          return newCharacterToken(start, code);\n      };\n      _Scanner.prototype.scanOperator = function (start, str) {\n          this.advance();\n          return newOperatorToken(start, str);\n      };\n      /**\n       * Tokenize a 2/3 char long operator\n       *\n       * @param start start index in the expression\n       * @param one first symbol (always part of the operator)\n       * @param twoCode code point for the second symbol\n       * @param two second symbol (part of the operator when the second code point matches)\n       * @param threeCode code point for the third symbol\n       * @param three third symbol (part of the operator when provided and matches source expression)\n       * @returns {Token}\n       */\n      _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {\n          this.advance();\n          var str = one;\n          if (this.peek == twoCode) {\n              this.advance();\n              str += two;\n          }\n          if (isPresent(threeCode) && this.peek == threeCode) {\n              this.advance();\n              str += three;\n          }\n          return newOperatorToken(start, str);\n      };\n      _Scanner.prototype.scanIdentifier = function () {\n          var start = this.index;\n          this.advance();\n          while (isIdentifierPart(this.peek))\n              this.advance();\n          var str = this.input.substring(start, this.index);\n          return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :\n              newIdentifierToken(start, str);\n      };\n      _Scanner.prototype.scanNumber = function (start) {\n          var simple = (this.index === start);\n          this.advance(); // Skip initial digit.\n          while (true) {\n              if (isDigit(this.peek)) {\n              }\n              else if (this.peek == $PERIOD) {\n                  simple = false;\n              }\n              else if (isExponentStart(this.peek)) {\n                  this.advance();\n                  if (isExponentSign(this.peek))\n                      this.advance();\n                  if (!isDigit(this.peek))\n                      return this.error('Invalid exponent', -1);\n                  simple = false;\n              }\n              else {\n                  break;\n              }\n              this.advance();\n          }\n          var str = this.input.substring(start, this.index);\n          var value = simple ? NumberWrapper.parseIntAutoRadix(str) : NumberWrapper.parseFloat(str);\n          return newNumberToken(start, value);\n      };\n      _Scanner.prototype.scanString = function () {\n          var start = this.index;\n          var quote = this.peek;\n          this.advance(); // Skip initial quote.\n          var buffer;\n          var marker = this.index;\n          var input = this.input;\n          while (this.peek != quote) {\n              if (this.peek == $BACKSLASH) {\n                  if (buffer == null)\n                      buffer = new StringJoiner();\n                  buffer.add(input.substring(marker, this.index));\n                  this.advance();\n                  var unescapedCode;\n                  if (this.peek == $u) {\n                      // 4 character hex code for unicode character.\n                      var hex = input.substring(this.index + 1, this.index + 5);\n                      try {\n                          unescapedCode = NumberWrapper.parseInt(hex, 16);\n                      }\n                      catch (e) {\n                          return this.error(\"Invalid unicode escape [\\\\u\" + hex + \"]\", 0);\n                      }\n                      for (var i = 0; i < 5; i++) {\n                          this.advance();\n                      }\n                  }\n                  else {\n                      unescapedCode = unescape(this.peek);\n                      this.advance();\n                  }\n                  buffer.add(StringWrapper.fromCharCode(unescapedCode));\n                  marker = this.index;\n              }\n              else if (this.peek == $EOF) {\n                  return this.error('Unterminated quote', 0);\n              }\n              else {\n                  this.advance();\n              }\n          }\n          var last = input.substring(marker, this.index);\n          this.advance(); // Skip terminating quote.\n          // Compute the unescaped string value.\n          var unescaped = last;\n          if (buffer != null) {\n              buffer.add(last);\n              unescaped = buffer.toString();\n          }\n          return newStringToken(start, unescaped);\n      };\n      _Scanner.prototype.error = function (message, offset) {\n          var position = this.index + offset;\n          return newErrorToken(position, \"Lexer Error: \" + message + \" at column \" + position + \" in expression [\" + this.input + \"]\");\n      };\n      return _Scanner;\n  }());\n  function isIdentifierStart(code) {\n      return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||\n          (code == $_) || (code == $$);\n  }\n  function isIdentifier(input) {\n      if (input.length == 0)\n          return false;\n      var scanner = new _Scanner(input);\n      if (!isIdentifierStart(scanner.peek))\n          return false;\n      scanner.advance();\n      while (scanner.peek !== $EOF) {\n          if (!isIdentifierPart(scanner.peek))\n              return false;\n          scanner.advance();\n      }\n      return true;\n  }\n  function isIdentifierPart(code) {\n      return isAsciiLetter(code) || isDigit(code) || (code == $_) ||\n          (code == $$);\n  }\n  function isExponentStart(code) {\n      return code == $e || code == $E;\n  }\n  function isExponentSign(code) {\n      return code == $MINUS || code == $PLUS;\n  }\n  function isQuote(code) {\n      return code === $SQ || code === $DQ || code === $BT;\n  }\n  function unescape(code) {\n      switch (code) {\n          case $n:\n              return $LF;\n          case $f:\n              return $FF;\n          case $r:\n              return $CR;\n          case $t:\n              return $TAB;\n          case $v:\n              return $VTAB;\n          default:\n              return code;\n      }\n  }\n\n  var SplitInterpolation = (function () {\n      function SplitInterpolation(strings, expressions) {\n          this.strings = strings;\n          this.expressions = expressions;\n      }\n      return SplitInterpolation;\n  }());\n  var TemplateBindingParseResult = (function () {\n      function TemplateBindingParseResult(templateBindings, warnings, errors) {\n          this.templateBindings = templateBindings;\n          this.warnings = warnings;\n          this.errors = errors;\n      }\n      return TemplateBindingParseResult;\n  }());\n  function _createInterpolateRegExp(config) {\n      var pattern = escapeRegExp(config.start) + '([\\\\s\\\\S]*?)' + escapeRegExp(config.end);\n      return new RegExp(pattern, 'g');\n  }\n  var Parser = (function () {\n      function Parser(_lexer) {\n          this._lexer = _lexer;\n          this.errors = [];\n      }\n      Parser.prototype.parseAction = function (input, location, interpolationConfig) {\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          this._checkNoInterpolation(input, location, interpolationConfig);\n          var tokens = this._lexer.tokenize(this._stripComments(input));\n          var ast = new _ParseAST(input, location, tokens, true, this.errors).parseChain();\n          return new ASTWithSource(ast, input, location, this.errors);\n      };\n      Parser.prototype.parseBinding = function (input, location, interpolationConfig) {\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          var ast = this._parseBindingAst(input, location, interpolationConfig);\n          return new ASTWithSource(ast, input, location, this.errors);\n      };\n      Parser.prototype.parseSimpleBinding = function (input, location, interpolationConfig) {\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          var ast = this._parseBindingAst(input, location, interpolationConfig);\n          if (!SimpleExpressionChecker.check(ast)) {\n              this._reportError('Host binding expression can only contain field access and constants', input, location);\n          }\n          return new ASTWithSource(ast, input, location, this.errors);\n      };\n      Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {\n          this.errors.push(new ParserError(message, input, errLocation, ctxLocation));\n      };\n      Parser.prototype._parseBindingAst = function (input, location, interpolationConfig) {\n          // Quotes expressions use 3rd-party expression language. We don't want to use\n          // our lexer or parser for that, so we check for that ahead of time.\n          var quote = this._parseQuote(input, location);\n          if (isPresent(quote)) {\n              return quote;\n          }\n          this._checkNoInterpolation(input, location, interpolationConfig);\n          var tokens = this._lexer.tokenize(this._stripComments(input));\n          return new _ParseAST(input, location, tokens, false, this.errors).parseChain();\n      };\n      Parser.prototype._parseQuote = function (input, location) {\n          if (isBlank(input))\n              return null;\n          var prefixSeparatorIndex = input.indexOf(':');\n          if (prefixSeparatorIndex == -1)\n              return null;\n          var prefix = input.substring(0, prefixSeparatorIndex).trim();\n          if (!isIdentifier(prefix))\n              return null;\n          var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\n          return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);\n      };\n      Parser.prototype.parseTemplateBindings = function (input, location) {\n          var tokens = this._lexer.tokenize(input);\n          return new _ParseAST(input, location, tokens, false, this.errors).parseTemplateBindings();\n      };\n      Parser.prototype.parseInterpolation = function (input, location, interpolationConfig) {\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          var split = this.splitInterpolation(input, location, interpolationConfig);\n          if (split == null)\n              return null;\n          var expressions = [];\n          for (var i = 0; i < split.expressions.length; ++i) {\n              var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));\n              var ast = new _ParseAST(input, location, tokens, false, this.errors).parseChain();\n              expressions.push(ast);\n          }\n          return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);\n      };\n      Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          var regexp = _createInterpolateRegExp(interpolationConfig);\n          var parts = StringWrapper.split(input, regexp);\n          if (parts.length <= 1) {\n              return null;\n          }\n          var strings = [];\n          var expressions = [];\n          for (var i = 0; i < parts.length; i++) {\n              var part = parts[i];\n              if (i % 2 === 0) {\n                  // fixed string\n                  strings.push(part);\n              }\n              else if (part.trim().length > 0) {\n                  expressions.push(part);\n              }\n              else {\n                  this._reportError('Blank expressions are not allowed in interpolated strings', input, \"at column \" + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + \" in\", location);\n              }\n          }\n          return new SplitInterpolation(strings, expressions);\n      };\n      Parser.prototype.wrapLiteralPrimitive = function (input, location) {\n          return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);\n      };\n      Parser.prototype._stripComments = function (input) {\n          var i = this._commentStart(input);\n          return isPresent(i) ? input.substring(0, i).trim() : input;\n      };\n      Parser.prototype._commentStart = function (input) {\n          var outerQuote = null;\n          for (var i = 0; i < input.length - 1; i++) {\n              var char = StringWrapper.charCodeAt(input, i);\n              var nextChar = StringWrapper.charCodeAt(input, i + 1);\n              if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote))\n                  return i;\n              if (outerQuote === char) {\n                  outerQuote = null;\n              }\n              else if (isBlank(outerQuote) && isQuote(char)) {\n                  outerQuote = char;\n              }\n          }\n          return null;\n      };\n      Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) {\n          var regexp = _createInterpolateRegExp(interpolationConfig);\n          var parts = StringWrapper.split(input, regexp);\n          if (parts.length > 1) {\n              this._reportError(\"Got interpolation (\" + interpolationConfig.start + interpolationConfig.end + \") where expression was expected\", input, \"at column \" + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + \" in\", location);\n          }\n      };\n      Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) {\n          var errLocation = '';\n          for (var j = 0; j < partInErrIdx; j++) {\n              errLocation += j % 2 === 0 ?\n                  parts[j] :\n                  \"\" + interpolationConfig.start + parts[j] + interpolationConfig.end;\n          }\n          return errLocation.length;\n      };\n      Parser.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      Parser.ctorParameters = [\n          { type: Lexer, },\n      ];\n      return Parser;\n  }());\n  var _ParseAST = (function () {\n      function _ParseAST(input, location, tokens, parseAction, errors) {\n          this.input = input;\n          this.location = location;\n          this.tokens = tokens;\n          this.parseAction = parseAction;\n          this.errors = errors;\n          this.rparensExpected = 0;\n          this.rbracketsExpected = 0;\n          this.rbracesExpected = 0;\n          this.index = 0;\n      }\n      _ParseAST.prototype.peek = function (offset) {\n          var i = this.index + offset;\n          return i < this.tokens.length ? this.tokens[i] : EOF;\n      };\n      Object.defineProperty(_ParseAST.prototype, \"next\", {\n          get: function () { return this.peek(0); },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(_ParseAST.prototype, \"inputIndex\", {\n          get: function () {\n              return (this.index < this.tokens.length) ? this.next.index : this.input.length;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      _ParseAST.prototype.span = function (start) { return new ParseSpan(start, this.inputIndex); };\n      _ParseAST.prototype.advance = function () { this.index++; };\n      _ParseAST.prototype.optionalCharacter = function (code) {\n          if (this.next.isCharacter(code)) {\n              this.advance();\n              return true;\n          }\n          else {\n              return false;\n          }\n      };\n      _ParseAST.prototype.peekKeywordLet = function () { return this.next.isKeywordLet(); };\n      _ParseAST.prototype.expectCharacter = function (code) {\n          if (this.optionalCharacter(code))\n              return;\n          this.error(\"Missing expected \" + StringWrapper.fromCharCode(code));\n      };\n      _ParseAST.prototype.optionalOperator = function (op) {\n          if (this.next.isOperator(op)) {\n              this.advance();\n              return true;\n          }\n          else {\n              return false;\n          }\n      };\n      _ParseAST.prototype.expectOperator = function (operator) {\n          if (this.optionalOperator(operator))\n              return;\n          this.error(\"Missing expected operator \" + operator);\n      };\n      _ParseAST.prototype.expectIdentifierOrKeyword = function () {\n          var n = this.next;\n          if (!n.isIdentifier() && !n.isKeyword()) {\n              this.error(\"Unexpected token \" + n + \", expected identifier or keyword\");\n              return '';\n          }\n          this.advance();\n          return n.toString();\n      };\n      _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {\n          var n = this.next;\n          if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n              this.error(\"Unexpected token \" + n + \", expected identifier, keyword, or string\");\n              return '';\n          }\n          this.advance();\n          return n.toString();\n      };\n      _ParseAST.prototype.parseChain = function () {\n          var exprs = [];\n          var start = this.inputIndex;\n          while (this.index < this.tokens.length) {\n              var expr = this.parsePipe();\n              exprs.push(expr);\n              if (this.optionalCharacter($SEMICOLON)) {\n                  if (!this.parseAction) {\n                      this.error('Binding expression cannot contain chained expression');\n                  }\n                  while (this.optionalCharacter($SEMICOLON)) {\n                  } // read all semicolons\n              }\n              else if (this.index < this.tokens.length) {\n                  this.error(\"Unexpected token '\" + this.next + \"'\");\n              }\n          }\n          if (exprs.length == 0)\n              return new EmptyExpr(this.span(start));\n          if (exprs.length == 1)\n              return exprs[0];\n          return new Chain(this.span(start), exprs);\n      };\n      _ParseAST.prototype.parsePipe = function () {\n          var result = this.parseExpression();\n          if (this.optionalOperator('|')) {\n              if (this.parseAction) {\n                  this.error('Cannot have a pipe in an action expression');\n              }\n              do {\n                  var name = this.expectIdentifierOrKeyword();\n                  var args = [];\n                  while (this.optionalCharacter($COLON)) {\n                      args.push(this.parseExpression());\n                  }\n                  result = new BindingPipe(this.span(result.span.start), result, name, args);\n              } while (this.optionalOperator('|'));\n          }\n          return result;\n      };\n      _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };\n      _ParseAST.prototype.parseConditional = function () {\n          var start = this.inputIndex;\n          var result = this.parseLogicalOr();\n          if (this.optionalOperator('?')) {\n              var yes = this.parsePipe();\n              var no = void 0;\n              if (!this.optionalCharacter($COLON)) {\n                  var end = this.inputIndex;\n                  var expression = this.input.substring(start, end);\n                  this.error(\"Conditional expression \" + expression + \" requires all 3 expressions\");\n                  no = new EmptyExpr(this.span(start));\n              }\n              else {\n                  no = this.parsePipe();\n              }\n              return new Conditional(this.span(start), result, yes, no);\n          }\n          else {\n              return result;\n          }\n      };\n      _ParseAST.prototype.parseLogicalOr = function () {\n          // '||'\n          var result = this.parseLogicalAnd();\n          while (this.optionalOperator('||')) {\n              var right = this.parseLogicalAnd();\n              result = new Binary(this.span(result.span.start), '||', result, right);\n          }\n          return result;\n      };\n      _ParseAST.prototype.parseLogicalAnd = function () {\n          // '&&'\n          var result = this.parseEquality();\n          while (this.optionalOperator('&&')) {\n              var right = this.parseEquality();\n              result = new Binary(this.span(result.span.start), '&&', result, right);\n          }\n          return result;\n      };\n      _ParseAST.prototype.parseEquality = function () {\n          // '==','!=','===','!=='\n          var result = this.parseRelational();\n          while (this.next.type == TokenType.Operator) {\n              var operator = this.next.strValue;\n              switch (operator) {\n                  case '==':\n                  case '===':\n                  case '!=':\n                  case '!==':\n                      this.advance();\n                      var right = this.parseRelational();\n                      result = new Binary(this.span(result.span.start), operator, result, right);\n                      continue;\n              }\n              break;\n          }\n          return result;\n      };\n      _ParseAST.prototype.parseRelational = function () {\n          // '<', '>', '<=', '>='\n          var result = this.parseAdditive();\n          while (this.next.type == TokenType.Operator) {\n              var operator = this.next.strValue;\n              switch (operator) {\n                  case '<':\n                  case '>':\n                  case '<=':\n                  case '>=':\n                      this.advance();\n                      var right = this.parseAdditive();\n                      result = new Binary(this.span(result.span.start), operator, result, right);\n                      continue;\n              }\n              break;\n          }\n          return result;\n      };\n      _ParseAST.prototype.parseAdditive = function () {\n          // '+', '-'\n          var result = this.parseMultiplicative();\n          while (this.next.type == TokenType.Operator) {\n              var operator = this.next.strValue;\n              switch (operator) {\n                  case '+':\n                  case '-':\n                      this.advance();\n                      var right = this.parseMultiplicative();\n                      result = new Binary(this.span(result.span.start), operator, result, right);\n                      continue;\n              }\n              break;\n          }\n          return result;\n      };\n      _ParseAST.prototype.parseMultiplicative = function () {\n          // '*', '%', '/'\n          var result = this.parsePrefix();\n          while (this.next.type == TokenType.Operator) {\n              var operator = this.next.strValue;\n              switch (operator) {\n                  case '*':\n                  case '%':\n                  case '/':\n                      this.advance();\n                      var right = this.parsePrefix();\n                      result = new Binary(this.span(result.span.start), operator, result, right);\n                      continue;\n              }\n              break;\n          }\n          return result;\n      };\n      _ParseAST.prototype.parsePrefix = function () {\n          if (this.next.type == TokenType.Operator) {\n              var start = this.inputIndex;\n              var operator = this.next.strValue;\n              var result = void 0;\n              switch (operator) {\n                  case '+':\n                      this.advance();\n                      return this.parsePrefix();\n                  case '-':\n                      this.advance();\n                      result = this.parsePrefix();\n                      return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);\n                  case '!':\n                      this.advance();\n                      result = this.parsePrefix();\n                      return new PrefixNot(this.span(start), result);\n              }\n          }\n          return this.parseCallChain();\n      };\n      _ParseAST.prototype.parseCallChain = function () {\n          var result = this.parsePrimary();\n          while (true) {\n              if (this.optionalCharacter($PERIOD)) {\n                  result = this.parseAccessMemberOrMethodCall(result, false);\n              }\n              else if (this.optionalOperator('?.')) {\n                  result = this.parseAccessMemberOrMethodCall(result, true);\n              }\n              else if (this.optionalCharacter($LBRACKET)) {\n                  this.rbracketsExpected++;\n                  var key = this.parsePipe();\n                  this.rbracketsExpected--;\n                  this.expectCharacter($RBRACKET);\n                  if (this.optionalOperator('=')) {\n                      var value = this.parseConditional();\n                      result = new KeyedWrite(this.span(result.span.start), result, key, value);\n                  }\n                  else {\n                      result = new KeyedRead(this.span(result.span.start), result, key);\n                  }\n              }\n              else if (this.optionalCharacter($LPAREN)) {\n                  this.rparensExpected++;\n                  var args = this.parseCallArguments();\n                  this.rparensExpected--;\n                  this.expectCharacter($RPAREN);\n                  result = new FunctionCall(this.span(result.span.start), result, args);\n              }\n              else {\n                  return result;\n              }\n          }\n      };\n      _ParseAST.prototype.parsePrimary = function () {\n          var start = this.inputIndex;\n          if (this.optionalCharacter($LPAREN)) {\n              this.rparensExpected++;\n              var result = this.parsePipe();\n              this.rparensExpected--;\n              this.expectCharacter($RPAREN);\n              return result;\n          }\n          else if (this.next.isKeywordNull()) {\n              this.advance();\n              return new LiteralPrimitive(this.span(start), null);\n          }\n          else if (this.next.isKeywordUndefined()) {\n              this.advance();\n              return new LiteralPrimitive(this.span(start), void 0);\n          }\n          else if (this.next.isKeywordTrue()) {\n              this.advance();\n              return new LiteralPrimitive(this.span(start), true);\n          }\n          else if (this.next.isKeywordFalse()) {\n              this.advance();\n              return new LiteralPrimitive(this.span(start), false);\n          }\n          else if (this.next.isKeywordThis()) {\n              this.advance();\n              return new ImplicitReceiver(this.span(start));\n          }\n          else if (this.optionalCharacter($LBRACKET)) {\n              this.rbracketsExpected++;\n              var elements = this.parseExpressionList($RBRACKET);\n              this.rbracketsExpected--;\n              this.expectCharacter($RBRACKET);\n              return new LiteralArray(this.span(start), elements);\n          }\n          else if (this.next.isCharacter($LBRACE)) {\n              return this.parseLiteralMap();\n          }\n          else if (this.next.isIdentifier()) {\n              return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);\n          }\n          else if (this.next.isNumber()) {\n              var value = this.next.toNumber();\n              this.advance();\n              return new LiteralPrimitive(this.span(start), value);\n          }\n          else if (this.next.isString()) {\n              var literalValue = this.next.toString();\n              this.advance();\n              return new LiteralPrimitive(this.span(start), literalValue);\n          }\n          else if (this.index >= this.tokens.length) {\n              this.error(\"Unexpected end of expression: \" + this.input);\n              return new EmptyExpr(this.span(start));\n          }\n          else {\n              this.error(\"Unexpected token \" + this.next);\n              return new EmptyExpr(this.span(start));\n          }\n      };\n      _ParseAST.prototype.parseExpressionList = function (terminator) {\n          var result = [];\n          if (!this.next.isCharacter(terminator)) {\n              do {\n                  result.push(this.parsePipe());\n              } while (this.optionalCharacter($COMMA));\n          }\n          return result;\n      };\n      _ParseAST.prototype.parseLiteralMap = function () {\n          var keys = [];\n          var values = [];\n          var start = this.inputIndex;\n          this.expectCharacter($LBRACE);\n          if (!this.optionalCharacter($RBRACE)) {\n              this.rbracesExpected++;\n              do {\n                  var key = this.expectIdentifierOrKeywordOrString();\n                  keys.push(key);\n                  this.expectCharacter($COLON);\n                  values.push(this.parsePipe());\n              } while (this.optionalCharacter($COMMA));\n              this.rbracesExpected--;\n              this.expectCharacter($RBRACE);\n          }\n          return new LiteralMap(this.span(start), keys, values);\n      };\n      _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {\n          if (isSafe === void 0) { isSafe = false; }\n          var start = receiver.span.start;\n          var id = this.expectIdentifierOrKeyword();\n          if (this.optionalCharacter($LPAREN)) {\n              this.rparensExpected++;\n              var args = this.parseCallArguments();\n              this.expectCharacter($RPAREN);\n              this.rparensExpected--;\n              var span = this.span(start);\n              return isSafe ? new SafeMethodCall(span, receiver, id, args) :\n                  new MethodCall(span, receiver, id, args);\n          }\n          else {\n              if (isSafe) {\n                  if (this.optionalOperator('=')) {\n                      this.error('The \\'?.\\' operator cannot be used in the assignment');\n                      return new EmptyExpr(this.span(start));\n                  }\n                  else {\n                      return new SafePropertyRead(this.span(start), receiver, id);\n                  }\n              }\n              else {\n                  if (this.optionalOperator('=')) {\n                      if (!this.parseAction) {\n                          this.error('Bindings cannot contain assignments');\n                          return new EmptyExpr(this.span(start));\n                      }\n                      var value = this.parseConditional();\n                      return new PropertyWrite(this.span(start), receiver, id, value);\n                  }\n                  else {\n                      return new PropertyRead(this.span(start), receiver, id);\n                  }\n              }\n          }\n      };\n      _ParseAST.prototype.parseCallArguments = function () {\n          if (this.next.isCharacter($RPAREN))\n              return [];\n          var positionals = [];\n          do {\n              positionals.push(this.parsePipe());\n          } while (this.optionalCharacter($COMMA));\n          return positionals;\n      };\n      /**\n       * An identifier, a keyword, a string with an optional `-` inbetween.\n       */\n      _ParseAST.prototype.expectTemplateBindingKey = function () {\n          var result = '';\n          var operatorFound = false;\n          do {\n              result += this.expectIdentifierOrKeywordOrString();\n              operatorFound = this.optionalOperator('-');\n              if (operatorFound) {\n                  result += '-';\n              }\n          } while (operatorFound);\n          return result.toString();\n      };\n      _ParseAST.prototype.parseTemplateBindings = function () {\n          var bindings = [];\n          var prefix = null;\n          var warnings = [];\n          while (this.index < this.tokens.length) {\n              var keyIsVar = this.peekKeywordLet();\n              if (keyIsVar) {\n                  this.advance();\n              }\n              var key = this.expectTemplateBindingKey();\n              if (!keyIsVar) {\n                  if (prefix == null) {\n                      prefix = key;\n                  }\n                  else {\n                      key = prefix + key[0].toUpperCase() + key.substring(1);\n                  }\n              }\n              this.optionalCharacter($COLON);\n              var name = null;\n              var expression = null;\n              if (keyIsVar) {\n                  if (this.optionalOperator('=')) {\n                      name = this.expectTemplateBindingKey();\n                  }\n                  else {\n                      name = '\\$implicit';\n                  }\n              }\n              else if (this.next !== EOF && !this.peekKeywordLet()) {\n                  var start = this.inputIndex;\n                  var ast = this.parsePipe();\n                  var source = this.input.substring(start, this.inputIndex);\n                  expression = new ASTWithSource(ast, source, this.location, this.errors);\n              }\n              bindings.push(new TemplateBinding(key, keyIsVar, name, expression));\n              if (!this.optionalCharacter($SEMICOLON)) {\n                  this.optionalCharacter($COMMA);\n              }\n          }\n          return new TemplateBindingParseResult(bindings, warnings, this.errors);\n      };\n      _ParseAST.prototype.error = function (message, index) {\n          if (index === void 0) { index = null; }\n          this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));\n          this.skip();\n      };\n      _ParseAST.prototype.locationText = function (index) {\n          if (index === void 0) { index = null; }\n          if (isBlank(index))\n              index = this.index;\n          return (index < this.tokens.length) ? \"at column \" + (this.tokens[index].index + 1) + \" in\" :\n              \"at the end of the expression\";\n      };\n      // Error recovery should skip tokens until it encounters a recovery point. skip() treats\n      // the end of input and a ';' as unconditionally a recovery point. It also treats ')',\n      // '}' and ']' as conditional recovery points if one of calling productions is expecting\n      // one of these symbols. This allows skip() to recover from errors such as '(a.) + 1' allowing\n      // more of the AST to be retained (it doesn't skip any tokens as the ')' is retained because\n      // of the '(' begins an '(' <expr> ')' production). The recovery points of grouping symbols\n      // must be conditional as they must be skipped if none of the calling productions are not\n      // expecting the closing token else we will never make progress in the case of an\n      // extraneous group closing symbol (such as a stray ')'). This is not the case for ';' because\n      // parseChain() is always the root production and it expects a ';'.\n      // If a production expects one of these token it increments the corresponding nesting count,\n      // and then decrements it just prior to checking if the token is in the input.\n      _ParseAST.prototype.skip = function () {\n          var n = this.next;\n          while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&\n              (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&\n              (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&\n              (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {\n              if (this.next.isError()) {\n                  this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));\n              }\n              this.advance();\n              n = this.next;\n          }\n      };\n      return _ParseAST;\n  }());\n  var SimpleExpressionChecker = (function () {\n      function SimpleExpressionChecker() {\n          this.simple = true;\n      }\n      SimpleExpressionChecker.check = function (ast) {\n          var s = new SimpleExpressionChecker();\n          ast.visit(s);\n          return s.simple;\n      };\n      SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) { this.simple = false; };\n      SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) { };\n      SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) { this.simple = false; };\n      SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) { this.simple = false; };\n      SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) { this.simple = false; };\n      SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) { this.simple = false; };\n      SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) { this.simple = false; };\n      SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) { this.visitAll(ast.expressions); };\n      SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) { this.visitAll(ast.values); };\n      SimpleExpressionChecker.prototype.visitBinary = function (ast, context) { this.simple = false; };\n      SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) { this.simple = false; };\n      SimpleExpressionChecker.prototype.visitConditional = function (ast, context) { this.simple = false; };\n      SimpleExpressionChecker.prototype.visitPipe = function (ast, context) { this.simple = false; };\n      SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) { this.simple = false; };\n      SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) { this.simple = false; };\n      SimpleExpressionChecker.prototype.visitAll = function (asts) {\n          var _this = this;\n          return asts.map(function (node) { return node.visit(_this); });\n      };\n      SimpleExpressionChecker.prototype.visitChain = function (ast, context) { this.simple = false; };\n      SimpleExpressionChecker.prototype.visitQuote = function (ast, context) { this.simple = false; };\n      return SimpleExpressionChecker;\n  }());\n\n  var ParseLocation = (function () {\n      function ParseLocation(file, offset, line, col) {\n          this.file = file;\n          this.offset = offset;\n          this.line = line;\n          this.col = col;\n      }\n      ParseLocation.prototype.toString = function () {\n          return isPresent(this.offset) ? this.file.url + \"@\" + this.line + \":\" + this.col : this.file.url;\n      };\n      return ParseLocation;\n  }());\n  var ParseSourceFile = (function () {\n      function ParseSourceFile(content, url) {\n          this.content = content;\n          this.url = url;\n      }\n      return ParseSourceFile;\n  }());\n  var ParseSourceSpan = (function () {\n      function ParseSourceSpan(start, end, details) {\n          if (details === void 0) { details = null; }\n          this.start = start;\n          this.end = end;\n          this.details = details;\n      }\n      ParseSourceSpan.prototype.toString = function () {\n          return this.start.file.content.substring(this.start.offset, this.end.offset);\n      };\n      return ParseSourceSpan;\n  }());\n  var ParseErrorLevel;\n  (function (ParseErrorLevel) {\n      ParseErrorLevel[ParseErrorLevel[\"WARNING\"] = 0] = \"WARNING\";\n      ParseErrorLevel[ParseErrorLevel[\"FATAL\"] = 1] = \"FATAL\";\n  })(ParseErrorLevel || (ParseErrorLevel = {}));\n  var ParseError = (function () {\n      function ParseError(span, msg, level) {\n          if (level === void 0) { level = ParseErrorLevel.FATAL; }\n          this.span = span;\n          this.msg = msg;\n          this.level = level;\n      }\n      ParseError.prototype.toString = function () {\n          var source = this.span.start.file.content;\n          var ctxStart = this.span.start.offset;\n          var contextStr = '';\n          var details = '';\n          if (isPresent(ctxStart)) {\n              if (ctxStart > source.length - 1) {\n                  ctxStart = source.length - 1;\n              }\n              var ctxEnd = ctxStart;\n              var ctxLen = 0;\n              var ctxLines = 0;\n              while (ctxLen < 100 && ctxStart > 0) {\n                  ctxStart--;\n                  ctxLen++;\n                  if (source[ctxStart] == '\\n') {\n                      if (++ctxLines == 3) {\n                          break;\n                      }\n                  }\n              }\n              ctxLen = 0;\n              ctxLines = 0;\n              while (ctxLen < 100 && ctxEnd < source.length - 1) {\n                  ctxEnd++;\n                  ctxLen++;\n                  if (source[ctxEnd] == '\\n') {\n                      if (++ctxLines == 3) {\n                          break;\n                      }\n                  }\n              }\n              var context = source.substring(ctxStart, this.span.start.offset) + '[ERROR ->]' +\n                  source.substring(this.span.start.offset, ctxEnd + 1);\n              contextStr = \" (\\\"\" + context + \"\\\")\";\n          }\n          if (this.span.details) {\n              details = \", \" + this.span.details;\n          }\n          return \"\" + this.msg + contextStr + \": \" + this.span.start + details;\n      };\n      return ParseError;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var Text = (function () {\n      function Text(value, sourceSpan) {\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };\n      return Text;\n  }());\n  var Expansion = (function () {\n      function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {\n          this.switchValue = switchValue;\n          this.type = type;\n          this.cases = cases;\n          this.sourceSpan = sourceSpan;\n          this.switchValueSourceSpan = switchValueSourceSpan;\n      }\n      Expansion.prototype.visit = function (visitor, context) { return visitor.visitExpansion(this, context); };\n      return Expansion;\n  }());\n  var ExpansionCase = (function () {\n      function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {\n          this.value = value;\n          this.expression = expression;\n          this.sourceSpan = sourceSpan;\n          this.valueSourceSpan = valueSourceSpan;\n          this.expSourceSpan = expSourceSpan;\n      }\n      ExpansionCase.prototype.visit = function (visitor, context) { return visitor.visitExpansionCase(this, context); };\n      return ExpansionCase;\n  }());\n  var Attribute = (function () {\n      function Attribute(name, value, sourceSpan) {\n          this.name = name;\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      Attribute.prototype.visit = function (visitor, context) { return visitor.visitAttribute(this, context); };\n      return Attribute;\n  }());\n  var Element = (function () {\n      function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {\n          this.name = name;\n          this.attrs = attrs;\n          this.children = children;\n          this.sourceSpan = sourceSpan;\n          this.startSourceSpan = startSourceSpan;\n          this.endSourceSpan = endSourceSpan;\n      }\n      Element.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context); };\n      return Element;\n  }());\n  var Comment = (function () {\n      function Comment(value, sourceSpan) {\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      Comment.prototype.visit = function (visitor, context) { return visitor.visitComment(this, context); };\n      return Comment;\n  }());\n  function visitAll(visitor, nodes, context) {\n      if (context === void 0) { context = null; }\n      var result = [];\n      nodes.forEach(function (ast) {\n          var astResult = ast.visit(visitor, context);\n          if (astResult) {\n              result.push(astResult);\n          }\n      });\n      return result;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var TagContentType;\n  (function (TagContentType) {\n      TagContentType[TagContentType[\"RAW_TEXT\"] = 0] = \"RAW_TEXT\";\n      TagContentType[TagContentType[\"ESCAPABLE_RAW_TEXT\"] = 1] = \"ESCAPABLE_RAW_TEXT\";\n      TagContentType[TagContentType[\"PARSABLE_DATA\"] = 2] = \"PARSABLE_DATA\";\n  })(TagContentType || (TagContentType = {}));\n  function splitNsName(elementName) {\n      if (elementName[0] != ':') {\n          return [null, elementName];\n      }\n      var colonIndex = elementName.indexOf(':', 1);\n      if (colonIndex == -1) {\n          throw new Error(\"Unsupported format \\\"\" + elementName + \"\\\" expecting \\\":namespace:name\\\"\");\n      }\n      return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];\n  }\n  function getNsPrefix(fullName) {\n      return fullName === null ? null : splitNsName(fullName)[0];\n  }\n  function mergeNsAndName(prefix, localName) {\n      return prefix ? \":\" + prefix + \":\" + localName : localName;\n  }\n  // see http://www.w3.org/TR/html51/syntax.html#named-character-references\n  // see https://html.spec.whatwg.org/multipage/entities.json\n  // This list is not exhaustive to keep the compiler footprint low.\n  // The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.\n  var NAMED_ENTITIES = {\n      'Aacute': '\\u00C1',\n      'aacute': '\\u00E1',\n      'Acirc': '\\u00C2',\n      'acirc': '\\u00E2',\n      'acute': '\\u00B4',\n      'AElig': '\\u00C6',\n      'aelig': '\\u00E6',\n      'Agrave': '\\u00C0',\n      'agrave': '\\u00E0',\n      'alefsym': '\\u2135',\n      'Alpha': '\\u0391',\n      'alpha': '\\u03B1',\n      'amp': '&',\n      'and': '\\u2227',\n      'ang': '\\u2220',\n      'apos': '\\u0027',\n      'Aring': '\\u00C5',\n      'aring': '\\u00E5',\n      'asymp': '\\u2248',\n      'Atilde': '\\u00C3',\n      'atilde': '\\u00E3',\n      'Auml': '\\u00C4',\n      'auml': '\\u00E4',\n      'bdquo': '\\u201E',\n      'Beta': '\\u0392',\n      'beta': '\\u03B2',\n      'brvbar': '\\u00A6',\n      'bull': '\\u2022',\n      'cap': '\\u2229',\n      'Ccedil': '\\u00C7',\n      'ccedil': '\\u00E7',\n      'cedil': '\\u00B8',\n      'cent': '\\u00A2',\n      'Chi': '\\u03A7',\n      'chi': '\\u03C7',\n      'circ': '\\u02C6',\n      'clubs': '\\u2663',\n      'cong': '\\u2245',\n      'copy': '\\u00A9',\n      'crarr': '\\u21B5',\n      'cup': '\\u222A',\n      'curren': '\\u00A4',\n      'dagger': '\\u2020',\n      'Dagger': '\\u2021',\n      'darr': '\\u2193',\n      'dArr': '\\u21D3',\n      'deg': '\\u00B0',\n      'Delta': '\\u0394',\n      'delta': '\\u03B4',\n      'diams': '\\u2666',\n      'divide': '\\u00F7',\n      'Eacute': '\\u00C9',\n      'eacute': '\\u00E9',\n      'Ecirc': '\\u00CA',\n      'ecirc': '\\u00EA',\n      'Egrave': '\\u00C8',\n      'egrave': '\\u00E8',\n      'empty': '\\u2205',\n      'emsp': '\\u2003',\n      'ensp': '\\u2002',\n      'Epsilon': '\\u0395',\n      'epsilon': '\\u03B5',\n      'equiv': '\\u2261',\n      'Eta': '\\u0397',\n      'eta': '\\u03B7',\n      'ETH': '\\u00D0',\n      'eth': '\\u00F0',\n      'Euml': '\\u00CB',\n      'euml': '\\u00EB',\n      'euro': '\\u20AC',\n      'exist': '\\u2203',\n      'fnof': '\\u0192',\n      'forall': '\\u2200',\n      'frac12': '\\u00BD',\n      'frac14': '\\u00BC',\n      'frac34': '\\u00BE',\n      'frasl': '\\u2044',\n      'Gamma': '\\u0393',\n      'gamma': '\\u03B3',\n      'ge': '\\u2265',\n      'gt': '>',\n      'harr': '\\u2194',\n      'hArr': '\\u21D4',\n      'hearts': '\\u2665',\n      'hellip': '\\u2026',\n      'Iacute': '\\u00CD',\n      'iacute': '\\u00ED',\n      'Icirc': '\\u00CE',\n      'icirc': '\\u00EE',\n      'iexcl': '\\u00A1',\n      'Igrave': '\\u00CC',\n      'igrave': '\\u00EC',\n      'image': '\\u2111',\n      'infin': '\\u221E',\n      'int': '\\u222B',\n      'Iota': '\\u0399',\n      'iota': '\\u03B9',\n      'iquest': '\\u00BF',\n      'isin': '\\u2208',\n      'Iuml': '\\u00CF',\n      'iuml': '\\u00EF',\n      'Kappa': '\\u039A',\n      'kappa': '\\u03BA',\n      'Lambda': '\\u039B',\n      'lambda': '\\u03BB',\n      'lang': '\\u27E8',\n      'laquo': '\\u00AB',\n      'larr': '\\u2190',\n      'lArr': '\\u21D0',\n      'lceil': '\\u2308',\n      'ldquo': '\\u201C',\n      'le': '\\u2264',\n      'lfloor': '\\u230A',\n      'lowast': '\\u2217',\n      'loz': '\\u25CA',\n      'lrm': '\\u200E',\n      'lsaquo': '\\u2039',\n      'lsquo': '\\u2018',\n      'lt': '<',\n      'macr': '\\u00AF',\n      'mdash': '\\u2014',\n      'micro': '\\u00B5',\n      'middot': '\\u00B7',\n      'minus': '\\u2212',\n      'Mu': '\\u039C',\n      'mu': '\\u03BC',\n      'nabla': '\\u2207',\n      'nbsp': '\\u00A0',\n      'ndash': '\\u2013',\n      'ne': '\\u2260',\n      'ni': '\\u220B',\n      'not': '\\u00AC',\n      'notin': '\\u2209',\n      'nsub': '\\u2284',\n      'Ntilde': '\\u00D1',\n      'ntilde': '\\u00F1',\n      'Nu': '\\u039D',\n      'nu': '\\u03BD',\n      'Oacute': '\\u00D3',\n      'oacute': '\\u00F3',\n      'Ocirc': '\\u00D4',\n      'ocirc': '\\u00F4',\n      'OElig': '\\u0152',\n      'oelig': '\\u0153',\n      'Ograve': '\\u00D2',\n      'ograve': '\\u00F2',\n      'oline': '\\u203E',\n      'Omega': '\\u03A9',\n      'omega': '\\u03C9',\n      'Omicron': '\\u039F',\n      'omicron': '\\u03BF',\n      'oplus': '\\u2295',\n      'or': '\\u2228',\n      'ordf': '\\u00AA',\n      'ordm': '\\u00BA',\n      'Oslash': '\\u00D8',\n      'oslash': '\\u00F8',\n      'Otilde': '\\u00D5',\n      'otilde': '\\u00F5',\n      'otimes': '\\u2297',\n      'Ouml': '\\u00D6',\n      'ouml': '\\u00F6',\n      'para': '\\u00B6',\n      'permil': '\\u2030',\n      'perp': '\\u22A5',\n      'Phi': '\\u03A6',\n      'phi': '\\u03C6',\n      'Pi': '\\u03A0',\n      'pi': '\\u03C0',\n      'piv': '\\u03D6',\n      'plusmn': '\\u00B1',\n      'pound': '\\u00A3',\n      'prime': '\\u2032',\n      'Prime': '\\u2033',\n      'prod': '\\u220F',\n      'prop': '\\u221D',\n      'Psi': '\\u03A8',\n      'psi': '\\u03C8',\n      'quot': '\\u0022',\n      'radic': '\\u221A',\n      'rang': '\\u27E9',\n      'raquo': '\\u00BB',\n      'rarr': '\\u2192',\n      'rArr': '\\u21D2',\n      'rceil': '\\u2309',\n      'rdquo': '\\u201D',\n      'real': '\\u211C',\n      'reg': '\\u00AE',\n      'rfloor': '\\u230B',\n      'Rho': '\\u03A1',\n      'rho': '\\u03C1',\n      'rlm': '\\u200F',\n      'rsaquo': '\\u203A',\n      'rsquo': '\\u2019',\n      'sbquo': '\\u201A',\n      'Scaron': '\\u0160',\n      'scaron': '\\u0161',\n      'sdot': '\\u22C5',\n      'sect': '\\u00A7',\n      'shy': '\\u00AD',\n      'Sigma': '\\u03A3',\n      'sigma': '\\u03C3',\n      'sigmaf': '\\u03C2',\n      'sim': '\\u223C',\n      'spades': '\\u2660',\n      'sub': '\\u2282',\n      'sube': '\\u2286',\n      'sum': '\\u2211',\n      'sup': '\\u2283',\n      'sup1': '\\u00B9',\n      'sup2': '\\u00B2',\n      'sup3': '\\u00B3',\n      'supe': '\\u2287',\n      'szlig': '\\u00DF',\n      'Tau': '\\u03A4',\n      'tau': '\\u03C4',\n      'there4': '\\u2234',\n      'Theta': '\\u0398',\n      'theta': '\\u03B8',\n      'thetasym': '\\u03D1',\n      'thinsp': '\\u2009',\n      'THORN': '\\u00DE',\n      'thorn': '\\u00FE',\n      'tilde': '\\u02DC',\n      'times': '\\u00D7',\n      'trade': '\\u2122',\n      'Uacute': '\\u00DA',\n      'uacute': '\\u00FA',\n      'uarr': '\\u2191',\n      'uArr': '\\u21D1',\n      'Ucirc': '\\u00DB',\n      'ucirc': '\\u00FB',\n      'Ugrave': '\\u00D9',\n      'ugrave': '\\u00F9',\n      'uml': '\\u00A8',\n      'upsih': '\\u03D2',\n      'Upsilon': '\\u03A5',\n      'upsilon': '\\u03C5',\n      'Uuml': '\\u00DC',\n      'uuml': '\\u00FC',\n      'weierp': '\\u2118',\n      'Xi': '\\u039E',\n      'xi': '\\u03BE',\n      'Yacute': '\\u00DD',\n      'yacute': '\\u00FD',\n      'yen': '\\u00A5',\n      'yuml': '\\u00FF',\n      'Yuml': '\\u0178',\n      'Zeta': '\\u0396',\n      'zeta': '\\u03B6',\n      'zwj': '\\u200D',\n      'zwnj': '\\u200C',\n  };\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$5 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var TokenType$1;\n  (function (TokenType) {\n      TokenType[TokenType[\"TAG_OPEN_START\"] = 0] = \"TAG_OPEN_START\";\n      TokenType[TokenType[\"TAG_OPEN_END\"] = 1] = \"TAG_OPEN_END\";\n      TokenType[TokenType[\"TAG_OPEN_END_VOID\"] = 2] = \"TAG_OPEN_END_VOID\";\n      TokenType[TokenType[\"TAG_CLOSE\"] = 3] = \"TAG_CLOSE\";\n      TokenType[TokenType[\"TEXT\"] = 4] = \"TEXT\";\n      TokenType[TokenType[\"ESCAPABLE_RAW_TEXT\"] = 5] = \"ESCAPABLE_RAW_TEXT\";\n      TokenType[TokenType[\"RAW_TEXT\"] = 6] = \"RAW_TEXT\";\n      TokenType[TokenType[\"COMMENT_START\"] = 7] = \"COMMENT_START\";\n      TokenType[TokenType[\"COMMENT_END\"] = 8] = \"COMMENT_END\";\n      TokenType[TokenType[\"CDATA_START\"] = 9] = \"CDATA_START\";\n      TokenType[TokenType[\"CDATA_END\"] = 10] = \"CDATA_END\";\n      TokenType[TokenType[\"ATTR_NAME\"] = 11] = \"ATTR_NAME\";\n      TokenType[TokenType[\"ATTR_VALUE\"] = 12] = \"ATTR_VALUE\";\n      TokenType[TokenType[\"DOC_TYPE\"] = 13] = \"DOC_TYPE\";\n      TokenType[TokenType[\"EXPANSION_FORM_START\"] = 14] = \"EXPANSION_FORM_START\";\n      TokenType[TokenType[\"EXPANSION_CASE_VALUE\"] = 15] = \"EXPANSION_CASE_VALUE\";\n      TokenType[TokenType[\"EXPANSION_CASE_EXP_START\"] = 16] = \"EXPANSION_CASE_EXP_START\";\n      TokenType[TokenType[\"EXPANSION_CASE_EXP_END\"] = 17] = \"EXPANSION_CASE_EXP_END\";\n      TokenType[TokenType[\"EXPANSION_FORM_END\"] = 18] = \"EXPANSION_FORM_END\";\n      TokenType[TokenType[\"EOF\"] = 19] = \"EOF\";\n  })(TokenType$1 || (TokenType$1 = {}));\n  var Token$1 = (function () {\n      function Token(type, parts, sourceSpan) {\n          this.type = type;\n          this.parts = parts;\n          this.sourceSpan = sourceSpan;\n      }\n      return Token;\n  }());\n  var TokenError = (function (_super) {\n      __extends$5(TokenError, _super);\n      function TokenError(errorMsg, tokenType, span) {\n          _super.call(this, span, errorMsg);\n          this.tokenType = tokenType;\n      }\n      return TokenError;\n  }(ParseError));\n  var TokenizeResult = (function () {\n      function TokenizeResult(tokens, errors) {\n          this.tokens = tokens;\n          this.errors = errors;\n      }\n      return TokenizeResult;\n  }());\n  function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {\n      if (tokenizeExpansionForms === void 0) { tokenizeExpansionForms = false; }\n      if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n      return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig)\n          .tokenize();\n  }\n  var _CR_OR_CRLF_REGEXP = /\\r\\n?/g;\n  function _unexpectedCharacterErrorMsg(charCode) {\n      var char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);\n      return \"Unexpected character \\\"\" + char + \"\\\"\";\n  }\n  function _unknownEntityErrorMsg(entitySrc) {\n      return \"Unknown entity \\\"\" + entitySrc + \"\\\" - use the \\\"&#<decimal>;\\\" or  \\\"&#x<hex>;\\\" syntax\";\n  }\n  var _ControlFlowError = (function () {\n      function _ControlFlowError(error) {\n          this.error = error;\n      }\n      return _ControlFlowError;\n  }());\n  // See http://www.w3.org/TR/html51/syntax.html#writing\n  var _Tokenizer = (function () {\n      /**\n       * @param _file The html source\n       * @param _getTagDefinition\n       * @param _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)\n       * @param _interpolationConfig\n       */\n      function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {\n          if (_interpolationConfig === void 0) { _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          this._file = _file;\n          this._getTagDefinition = _getTagDefinition;\n          this._tokenizeIcu = _tokenizeIcu;\n          this._interpolationConfig = _interpolationConfig;\n          // Note: this is always lowercase!\n          this._peek = -1;\n          this._nextPeek = -1;\n          this._index = -1;\n          this._line = 0;\n          this._column = -1;\n          this._expansionCaseStack = [];\n          this._inInterpolation = false;\n          this.tokens = [];\n          this.errors = [];\n          this._input = _file.content;\n          this._length = _file.content.length;\n          this._advance();\n      }\n      _Tokenizer.prototype._processCarriageReturns = function (content) {\n          // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream\n          // In order to keep the original position in the source, we can not\n          // pre-process it.\n          // Instead CRs are processed right before instantiating the tokens.\n          return content.replace(_CR_OR_CRLF_REGEXP, '\\n');\n      };\n      _Tokenizer.prototype.tokenize = function () {\n          while (this._peek !== $EOF) {\n              var start = this._getLocation();\n              try {\n                  if (this._attemptCharCode($LT)) {\n                      if (this._attemptCharCode($BANG)) {\n                          if (this._attemptCharCode($LBRACKET)) {\n                              this._consumeCdata(start);\n                          }\n                          else if (this._attemptCharCode($MINUS)) {\n                              this._consumeComment(start);\n                          }\n                          else {\n                              this._consumeDocType(start);\n                          }\n                      }\n                      else if (this._attemptCharCode($SLASH)) {\n                          this._consumeTagClose(start);\n                      }\n                      else {\n                          this._consumeTagOpen(start);\n                      }\n                  }\n                  else if (!this._tokenizeIcu || !this._tokenizeExpansionForm()) {\n                      this._consumeText();\n                  }\n              }\n              catch (e) {\n                  if (e instanceof _ControlFlowError) {\n                      this.errors.push(e.error);\n                  }\n                  else {\n                      throw e;\n                  }\n              }\n          }\n          this._beginToken(TokenType$1.EOF);\n          this._endToken([]);\n          return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);\n      };\n      /**\n       * @returns {boolean} whether an ICU token has been created\n       * @internal\n       */\n      _Tokenizer.prototype._tokenizeExpansionForm = function () {\n          if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\n              this._consumeExpansionFormStart();\n              return true;\n          }\n          if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {\n              this._consumeExpansionCaseStart();\n              return true;\n          }\n          if (this._peek === $RBRACE) {\n              if (this._isInExpansionCase()) {\n                  this._consumeExpansionCaseEnd();\n                  return true;\n              }\n              if (this._isInExpansionForm()) {\n                  this._consumeExpansionFormEnd();\n                  return true;\n              }\n          }\n          return false;\n      };\n      _Tokenizer.prototype._getLocation = function () {\n          return new ParseLocation(this._file, this._index, this._line, this._column);\n      };\n      _Tokenizer.prototype._getSpan = function (start, end) {\n          if (start === void 0) { start = this._getLocation(); }\n          if (end === void 0) { end = this._getLocation(); }\n          return new ParseSourceSpan(start, end);\n      };\n      _Tokenizer.prototype._beginToken = function (type, start) {\n          if (start === void 0) { start = this._getLocation(); }\n          this._currentTokenStart = start;\n          this._currentTokenType = type;\n      };\n      _Tokenizer.prototype._endToken = function (parts, end) {\n          if (end === void 0) { end = this._getLocation(); }\n          var token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));\n          this.tokens.push(token);\n          this._currentTokenStart = null;\n          this._currentTokenType = null;\n          return token;\n      };\n      _Tokenizer.prototype._createError = function (msg, span) {\n          if (this._isInExpansionForm()) {\n              msg += \" (Do you have an unescaped \\\"{\\\" in your template? Use \\\"{{ '{' }}\\\") to escape it.)\";\n          }\n          var error = new TokenError(msg, this._currentTokenType, span);\n          this._currentTokenStart = null;\n          this._currentTokenType = null;\n          return new _ControlFlowError(error);\n      };\n      _Tokenizer.prototype._advance = function () {\n          if (this._index >= this._length) {\n              throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());\n          }\n          if (this._peek === $LF) {\n              this._line++;\n              this._column = 0;\n          }\n          else if (this._peek !== $LF && this._peek !== $CR) {\n              this._column++;\n          }\n          this._index++;\n          this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);\n          this._nextPeek =\n              this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);\n      };\n      _Tokenizer.prototype._attemptCharCode = function (charCode) {\n          if (this._peek === charCode) {\n              this._advance();\n              return true;\n          }\n          return false;\n      };\n      _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {\n          if (compareCharCodeCaseInsensitive(this._peek, charCode)) {\n              this._advance();\n              return true;\n          }\n          return false;\n      };\n      _Tokenizer.prototype._requireCharCode = function (charCode) {\n          var location = this._getLocation();\n          if (!this._attemptCharCode(charCode)) {\n              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));\n          }\n      };\n      _Tokenizer.prototype._attemptStr = function (chars) {\n          var len = chars.length;\n          if (this._index + len > this._length) {\n              return false;\n          }\n          var initialPosition = this._savePosition();\n          for (var i = 0; i < len; i++) {\n              if (!this._attemptCharCode(chars.charCodeAt(i))) {\n                  // If attempting to parse the string fails, we want to reset the parser\n                  // to where it was before the attempt\n                  this._restorePosition(initialPosition);\n                  return false;\n              }\n          }\n          return true;\n      };\n      _Tokenizer.prototype._attemptStrCaseInsensitive = function (chars) {\n          for (var i = 0; i < chars.length; i++) {\n              if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {\n                  return false;\n              }\n          }\n          return true;\n      };\n      _Tokenizer.prototype._requireStr = function (chars) {\n          var location = this._getLocation();\n          if (!this._attemptStr(chars)) {\n              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));\n          }\n      };\n      _Tokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {\n          while (!predicate(this._peek)) {\n              this._advance();\n          }\n      };\n      _Tokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {\n          var start = this._getLocation();\n          this._attemptCharCodeUntilFn(predicate);\n          if (this._index - start.offset < len) {\n              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));\n          }\n      };\n      _Tokenizer.prototype._attemptUntilChar = function (char) {\n          while (this._peek !== char) {\n              this._advance();\n          }\n      };\n      _Tokenizer.prototype._readChar = function (decodeEntities) {\n          if (decodeEntities && this._peek === $AMPERSAND) {\n              return this._decodeEntity();\n          }\n          else {\n              var index = this._index;\n              this._advance();\n              return this._input[index];\n          }\n      };\n      _Tokenizer.prototype._decodeEntity = function () {\n          var start = this._getLocation();\n          this._advance();\n          if (this._attemptCharCode($HASH)) {\n              var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);\n              var numberStart = this._getLocation().offset;\n              this._attemptCharCodeUntilFn(isDigitEntityEnd);\n              if (this._peek != $SEMICOLON) {\n                  throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n              }\n              this._advance();\n              var strNum = this._input.substring(numberStart, this._index - 1);\n              try {\n                  var charCode = parseInt(strNum, isHex ? 16 : 10);\n                  return String.fromCharCode(charCode);\n              }\n              catch (e) {\n                  var entity = this._input.substring(start.offset + 1, this._index - 1);\n                  throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));\n              }\n          }\n          else {\n              var startPosition = this._savePosition();\n              this._attemptCharCodeUntilFn(isNamedEntityEnd);\n              if (this._peek != $SEMICOLON) {\n                  this._restorePosition(startPosition);\n                  return '&';\n              }\n              this._advance();\n              var name_1 = this._input.substring(start.offset + 1, this._index - 1);\n              var char = NAMED_ENTITIES[name_1];\n              if (!char) {\n                  throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));\n              }\n              return char;\n          }\n      };\n      _Tokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {\n          var tagCloseStart;\n          var textStart = this._getLocation();\n          this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);\n          var parts = [];\n          while (true) {\n              tagCloseStart = this._getLocation();\n              if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {\n                  break;\n              }\n              if (this._index > tagCloseStart.offset) {\n                  // add the characters consumed by the previous if statement to the output\n                  parts.push(this._input.substring(tagCloseStart.offset, this._index));\n              }\n              while (this._peek !== firstCharOfEnd) {\n                  parts.push(this._readChar(decodeEntities));\n              }\n          }\n          return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);\n      };\n      _Tokenizer.prototype._consumeComment = function (start) {\n          var _this = this;\n          this._beginToken(TokenType$1.COMMENT_START, start);\n          this._requireCharCode($MINUS);\n          this._endToken([]);\n          var textToken = this._consumeRawText(false, $MINUS, function () { return _this._attemptStr('->'); });\n          this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);\n          this._endToken([]);\n      };\n      _Tokenizer.prototype._consumeCdata = function (start) {\n          var _this = this;\n          this._beginToken(TokenType$1.CDATA_START, start);\n          this._requireStr('CDATA[');\n          this._endToken([]);\n          var textToken = this._consumeRawText(false, $RBRACKET, function () { return _this._attemptStr(']>'); });\n          this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);\n          this._endToken([]);\n      };\n      _Tokenizer.prototype._consumeDocType = function (start) {\n          this._beginToken(TokenType$1.DOC_TYPE, start);\n          this._attemptUntilChar($GT);\n          this._advance();\n          this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);\n      };\n      _Tokenizer.prototype._consumePrefixAndName = function () {\n          var nameOrPrefixStart = this._index;\n          var prefix = null;\n          while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {\n              this._advance();\n          }\n          var nameStart;\n          if (this._peek === $COLON) {\n              this._advance();\n              prefix = this._input.substring(nameOrPrefixStart, this._index - 1);\n              nameStart = this._index;\n          }\n          else {\n              nameStart = nameOrPrefixStart;\n          }\n          this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);\n          var name = this._input.substring(nameStart, this._index);\n          return [prefix, name];\n      };\n      _Tokenizer.prototype._consumeTagOpen = function (start) {\n          var savedPos = this._savePosition();\n          var tagName;\n          var lowercaseTagName;\n          try {\n              if (!isAsciiLetter(this._peek)) {\n                  throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n              }\n              var nameStart = this._index;\n              this._consumeTagOpenStart(start);\n              tagName = this._input.substring(nameStart, this._index);\n              lowercaseTagName = tagName.toLowerCase();\n              this._attemptCharCodeUntilFn(isNotWhitespace);\n              while (this._peek !== $SLASH && this._peek !== $GT) {\n                  this._consumeAttributeName();\n                  this._attemptCharCodeUntilFn(isNotWhitespace);\n                  if (this._attemptCharCode($EQ)) {\n                      this._attemptCharCodeUntilFn(isNotWhitespace);\n                      this._consumeAttributeValue();\n                  }\n                  this._attemptCharCodeUntilFn(isNotWhitespace);\n              }\n              this._consumeTagOpenEnd();\n          }\n          catch (e) {\n              if (e instanceof _ControlFlowError) {\n                  // When the start tag is invalid, assume we want a \"<\"\n                  this._restorePosition(savedPos);\n                  // Back to back text tokens are merged at the end\n                  this._beginToken(TokenType$1.TEXT, start);\n                  this._endToken(['<']);\n                  return;\n              }\n              throw e;\n          }\n          var contentTokenType = this._getTagDefinition(tagName).contentType;\n          if (contentTokenType === TagContentType.RAW_TEXT) {\n              this._consumeRawTextWithTagClose(lowercaseTagName, false);\n          }\n          else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {\n              this._consumeRawTextWithTagClose(lowercaseTagName, true);\n          }\n      };\n      _Tokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {\n          var _this = this;\n          var textToken = this._consumeRawText(decodeEntities, $LT, function () {\n              if (!_this._attemptCharCode($SLASH))\n                  return false;\n              _this._attemptCharCodeUntilFn(isNotWhitespace);\n              if (!_this._attemptStrCaseInsensitive(lowercaseTagName))\n                  return false;\n              _this._attemptCharCodeUntilFn(isNotWhitespace);\n              return _this._attemptCharCode($GT);\n          });\n          this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);\n          this._endToken([null, lowercaseTagName]);\n      };\n      _Tokenizer.prototype._consumeTagOpenStart = function (start) {\n          this._beginToken(TokenType$1.TAG_OPEN_START, start);\n          var parts = this._consumePrefixAndName();\n          this._endToken(parts);\n      };\n      _Tokenizer.prototype._consumeAttributeName = function () {\n          this._beginToken(TokenType$1.ATTR_NAME);\n          var prefixAndName = this._consumePrefixAndName();\n          this._endToken(prefixAndName);\n      };\n      _Tokenizer.prototype._consumeAttributeValue = function () {\n          this._beginToken(TokenType$1.ATTR_VALUE);\n          var value;\n          if (this._peek === $SQ || this._peek === $DQ) {\n              var quoteChar = this._peek;\n              this._advance();\n              var parts = [];\n              while (this._peek !== quoteChar) {\n                  parts.push(this._readChar(true));\n              }\n              value = parts.join('');\n              this._advance();\n          }\n          else {\n              var valueStart = this._index;\n              this._requireCharCodeUntilFn(isNameEnd, 1);\n              value = this._input.substring(valueStart, this._index);\n          }\n          this._endToken([this._processCarriageReturns(value)]);\n      };\n      _Tokenizer.prototype._consumeTagOpenEnd = function () {\n          var tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;\n          this._beginToken(tokenType);\n          this._requireCharCode($GT);\n          this._endToken([]);\n      };\n      _Tokenizer.prototype._consumeTagClose = function (start) {\n          this._beginToken(TokenType$1.TAG_CLOSE, start);\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          var prefixAndName = this._consumePrefixAndName();\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          this._requireCharCode($GT);\n          this._endToken(prefixAndName);\n      };\n      _Tokenizer.prototype._consumeExpansionFormStart = function () {\n          this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());\n          this._requireCharCode($LBRACE);\n          this._endToken([]);\n          this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);\n          this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());\n          var condition = this._readUntil($COMMA);\n          this._endToken([condition], this._getLocation());\n          this._requireCharCode($COMMA);\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());\n          var type = this._readUntil($COMMA);\n          this._endToken([type], this._getLocation());\n          this._requireCharCode($COMMA);\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n      };\n      _Tokenizer.prototype._consumeExpansionCaseStart = function () {\n          this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());\n          var value = this._readUntil($LBRACE).trim();\n          this._endToken([value], this._getLocation());\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());\n          this._requireCharCode($LBRACE);\n          this._endToken([], this._getLocation());\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);\n      };\n      _Tokenizer.prototype._consumeExpansionCaseEnd = function () {\n          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());\n          this._requireCharCode($RBRACE);\n          this._endToken([], this._getLocation());\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n          this._expansionCaseStack.pop();\n      };\n      _Tokenizer.prototype._consumeExpansionFormEnd = function () {\n          this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());\n          this._requireCharCode($RBRACE);\n          this._endToken([]);\n          this._expansionCaseStack.pop();\n      };\n      _Tokenizer.prototype._consumeText = function () {\n          var start = this._getLocation();\n          this._beginToken(TokenType$1.TEXT, start);\n          var parts = [];\n          do {\n              if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {\n                  parts.push(this._interpolationConfig.start);\n                  this._inInterpolation = true;\n              }\n              else if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.end) &&\n                  this._inInterpolation) {\n                  parts.push(this._interpolationConfig.end);\n                  this._inInterpolation = false;\n              }\n              else {\n                  parts.push(this._readChar(true));\n              }\n          } while (!this._isTextEnd());\n          this._endToken([this._processCarriageReturns(parts.join(''))]);\n      };\n      _Tokenizer.prototype._isTextEnd = function () {\n          if (this._peek === $LT || this._peek === $EOF) {\n              return true;\n          }\n          if (this._tokenizeIcu && !this._inInterpolation) {\n              if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\n                  // start of an expansion form\n                  return true;\n              }\n              if (this._peek === $RBRACE && this._isInExpansionCase()) {\n                  // end of and expansion case\n                  return true;\n              }\n          }\n          return false;\n      };\n      _Tokenizer.prototype._savePosition = function () {\n          return [this._peek, this._index, this._column, this._line, this.tokens.length];\n      };\n      _Tokenizer.prototype._readUntil = function (char) {\n          var start = this._index;\n          this._attemptUntilChar(char);\n          return this._input.substring(start, this._index);\n      };\n      _Tokenizer.prototype._restorePosition = function (position) {\n          this._peek = position[0];\n          this._index = position[1];\n          this._column = position[2];\n          this._line = position[3];\n          var nbTokens = position[4];\n          if (nbTokens < this.tokens.length) {\n              // remove any extra tokens\n              this.tokens = this.tokens.slice(0, nbTokens);\n          }\n      };\n      _Tokenizer.prototype._isInExpansionCase = function () {\n          return this._expansionCaseStack.length > 0 &&\n              this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n                  TokenType$1.EXPANSION_CASE_EXP_START;\n      };\n      _Tokenizer.prototype._isInExpansionForm = function () {\n          return this._expansionCaseStack.length > 0 &&\n              this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n                  TokenType$1.EXPANSION_FORM_START;\n      };\n      return _Tokenizer;\n  }());\n  function isNotWhitespace(code) {\n      return !isWhitespace(code) || code === $EOF;\n  }\n  function isNameEnd(code) {\n      return isWhitespace(code) || code === $GT || code === $SLASH ||\n          code === $SQ || code === $DQ || code === $EQ;\n  }\n  function isPrefixEnd(code) {\n      return (code < $a || $z < code) && (code < $A || $Z < code) &&\n          (code < $0 || code > $9);\n  }\n  function isDigitEntityEnd(code) {\n      return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);\n  }\n  function isNamedEntityEnd(code) {\n      return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);\n  }\n  function isExpansionFormStart(input, offset, interpolationConfig) {\n      var isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;\n      return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;\n  }\n  function isExpansionCaseStart(peek) {\n      return peek === $EQ || isAsciiLetter(peek);\n  }\n  function compareCharCodeCaseInsensitive(code1, code2) {\n      return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);\n  }\n  function toUpperCaseCharCode(code) {\n      return code >= $a && code <= $z ? code - $a + $A : code;\n  }\n  function mergeTextTokens(srcTokens) {\n      var dstTokens = [];\n      var lastDstToken;\n      for (var i = 0; i < srcTokens.length; i++) {\n          var token = srcTokens[i];\n          if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {\n              lastDstToken.parts[0] += token.parts[0];\n              lastDstToken.sourceSpan.end = token.sourceSpan.end;\n          }\n          else {\n              lastDstToken = token;\n              dstTokens.push(lastDstToken);\n          }\n      }\n      return dstTokens;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$4 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var TreeError = (function (_super) {\n      __extends$4(TreeError, _super);\n      function TreeError(elementName, span, msg) {\n          _super.call(this, span, msg);\n          this.elementName = elementName;\n      }\n      TreeError.create = function (elementName, span, msg) {\n          return new TreeError(elementName, span, msg);\n      };\n      return TreeError;\n  }(ParseError));\n  var ParseTreeResult = (function () {\n      function ParseTreeResult(rootNodes, errors) {\n          this.rootNodes = rootNodes;\n          this.errors = errors;\n      }\n      return ParseTreeResult;\n  }());\n  var Parser$1 = (function () {\n      function Parser(getTagDefinition) {\n          this.getTagDefinition = getTagDefinition;\n      }\n      Parser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {\n          if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          var tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);\n          var treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();\n          return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));\n      };\n      return Parser;\n  }());\n  var _TreeBuilder = (function () {\n      function _TreeBuilder(tokens, getTagDefinition) {\n          this.tokens = tokens;\n          this.getTagDefinition = getTagDefinition;\n          this._index = -1;\n          this._rootNodes = [];\n          this._errors = [];\n          this._elementStack = [];\n          this._advance();\n      }\n      _TreeBuilder.prototype.build = function () {\n          while (this._peek.type !== TokenType$1.EOF) {\n              if (this._peek.type === TokenType$1.TAG_OPEN_START) {\n                  this._consumeStartTag(this._advance());\n              }\n              else if (this._peek.type === TokenType$1.TAG_CLOSE) {\n                  this._consumeEndTag(this._advance());\n              }\n              else if (this._peek.type === TokenType$1.CDATA_START) {\n                  this._closeVoidElement();\n                  this._consumeCdata(this._advance());\n              }\n              else if (this._peek.type === TokenType$1.COMMENT_START) {\n                  this._closeVoidElement();\n                  this._consumeComment(this._advance());\n              }\n              else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT ||\n                  this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {\n                  this._closeVoidElement();\n                  this._consumeText(this._advance());\n              }\n              else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {\n                  this._consumeExpansion(this._advance());\n              }\n              else {\n                  // Skip all other tokens...\n                  this._advance();\n              }\n          }\n          return new ParseTreeResult(this._rootNodes, this._errors);\n      };\n      _TreeBuilder.prototype._advance = function () {\n          var prev = this._peek;\n          if (this._index < this.tokens.length - 1) {\n              // Note: there is always an EOF token at the end\n              this._index++;\n          }\n          this._peek = this.tokens[this._index];\n          return prev;\n      };\n      _TreeBuilder.prototype._advanceIf = function (type) {\n          if (this._peek.type === type) {\n              return this._advance();\n          }\n          return null;\n      };\n      _TreeBuilder.prototype._consumeCdata = function (startToken) {\n          this._consumeText(this._advance());\n          this._advanceIf(TokenType$1.CDATA_END);\n      };\n      _TreeBuilder.prototype._consumeComment = function (token) {\n          var text = this._advanceIf(TokenType$1.RAW_TEXT);\n          this._advanceIf(TokenType$1.COMMENT_END);\n          var value = isPresent(text) ? text.parts[0].trim() : null;\n          this._addToParent(new Comment(value, token.sourceSpan));\n      };\n      _TreeBuilder.prototype._consumeExpansion = function (token) {\n          var switchValue = this._advance();\n          var type = this._advance();\n          var cases = [];\n          // read =\n          while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {\n              var expCase = this._parseExpansionCase();\n              if (isBlank(expCase))\n                  return; // error\n              cases.push(expCase);\n          }\n          // read the final }\n          if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {\n              this._errors.push(TreeError.create(null, this._peek.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n              return;\n          }\n          var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);\n          this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\n          this._advance();\n      };\n      _TreeBuilder.prototype._parseExpansionCase = function () {\n          var value = this._advance();\n          // read {\n          if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {\n              this._errors.push(TreeError.create(null, this._peek.sourceSpan, \"Invalid ICU message. Missing '{'.\"));\n              return null;\n          }\n          // read until }\n          var start = this._advance();\n          var exp = this._collectExpansionExpTokens(start);\n          if (isBlank(exp))\n              return null;\n          var end = this._advance();\n          exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));\n          // parse everything in between { and }\n          var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();\n          if (parsedExp.errors.length > 0) {\n              this._errors = this._errors.concat(parsedExp.errors);\n              return null;\n          }\n          var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);\n          var expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);\n          return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\n      };\n      _TreeBuilder.prototype._collectExpansionExpTokens = function (start) {\n          var exp = [];\n          var expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];\n          while (true) {\n              if (this._peek.type === TokenType$1.EXPANSION_FORM_START ||\n                  this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {\n                  expansionFormStack.push(this._peek.type);\n              }\n              if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {\n                  if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {\n                      expansionFormStack.pop();\n                      if (expansionFormStack.length == 0)\n                          return exp;\n                  }\n                  else {\n                      this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                      return null;\n                  }\n              }\n              if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {\n                  if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {\n                      expansionFormStack.pop();\n                  }\n                  else {\n                      this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                      return null;\n                  }\n              }\n              if (this._peek.type === TokenType$1.EOF) {\n                  this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                  return null;\n              }\n              exp.push(this._advance());\n          }\n      };\n      _TreeBuilder.prototype._consumeText = function (token) {\n          var text = token.parts[0];\n          if (text.length > 0 && text[0] == '\\n') {\n              var parent_1 = this._getParentElement();\n              if (isPresent(parent_1) && parent_1.children.length == 0 &&\n                  this.getTagDefinition(parent_1.name).ignoreFirstLf) {\n                  text = text.substring(1);\n              }\n          }\n          if (text.length > 0) {\n              this._addToParent(new Text(text, token.sourceSpan));\n          }\n      };\n      _TreeBuilder.prototype._closeVoidElement = function () {\n          if (this._elementStack.length > 0) {\n              var el = ListWrapper.last(this._elementStack);\n              if (this.getTagDefinition(el.name).isVoid) {\n                  this._elementStack.pop();\n              }\n          }\n      };\n      _TreeBuilder.prototype._consumeStartTag = function (startTagToken) {\n          var prefix = startTagToken.parts[0];\n          var name = startTagToken.parts[1];\n          var attrs = [];\n          while (this._peek.type === TokenType$1.ATTR_NAME) {\n              attrs.push(this._consumeAttr(this._advance()));\n          }\n          var fullName = this._getElementFullName(prefix, name, this._getParentElement());\n          var selfClosing = false;\n          // Note: There could have been a tokenizer error\n          // so that we don't get a token for the end tag...\n          if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {\n              this._advance();\n              selfClosing = true;\n              var tagDef = this.getTagDefinition(fullName);\n              if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {\n                  this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, \"Only void and foreign elements can be self closed \\\"\" + startTagToken.parts[1] + \"\\\"\"));\n              }\n          }\n          else if (this._peek.type === TokenType$1.TAG_OPEN_END) {\n              this._advance();\n              selfClosing = false;\n          }\n          var end = this._peek.sourceSpan.start;\n          var span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);\n          var el = new Element(fullName, attrs, [], span, span, null);\n          this._pushElement(el);\n          if (selfClosing) {\n              this._popElement(fullName);\n              el.endSourceSpan = span;\n          }\n      };\n      _TreeBuilder.prototype._pushElement = function (el) {\n          if (this._elementStack.length > 0) {\n              var parentEl = ListWrapper.last(this._elementStack);\n              if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {\n                  this._elementStack.pop();\n              }\n          }\n          var tagDef = this.getTagDefinition(el.name);\n          var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;\n          if (isPresent(parent) && tagDef.requireExtraParent(parent.name)) {\n              var newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n              this._insertBeforeContainer(parent, container, newParent);\n          }\n          this._addToParent(el);\n          this._elementStack.push(el);\n      };\n      _TreeBuilder.prototype._consumeEndTag = function (endTagToken) {\n          var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());\n          if (this._getParentElement()) {\n              this._getParentElement().endSourceSpan = endTagToken.sourceSpan;\n          }\n          if (this.getTagDefinition(fullName).isVoid) {\n              this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, \"Void elements do not have end tags \\\"\" + endTagToken.parts[1] + \"\\\"\"));\n          }\n          else if (!this._popElement(fullName)) {\n              this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, \"Unexpected closing tag \\\"\" + endTagToken.parts[1] + \"\\\"\"));\n          }\n      };\n      _TreeBuilder.prototype._popElement = function (fullName) {\n          for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {\n              var el = this._elementStack[stackIndex];\n              if (el.name == fullName) {\n                  ListWrapper.splice(this._elementStack, stackIndex, this._elementStack.length - stackIndex);\n                  return true;\n              }\n              if (!this.getTagDefinition(el.name).closedByParent) {\n                  return false;\n              }\n          }\n          return false;\n      };\n      _TreeBuilder.prototype._consumeAttr = function (attrName) {\n          var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);\n          var end = attrName.sourceSpan.end;\n          var value = '';\n          if (this._peek.type === TokenType$1.ATTR_VALUE) {\n              var valueToken = this._advance();\n              value = valueToken.parts[0];\n              end = valueToken.sourceSpan.end;\n          }\n          return new Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end));\n      };\n      _TreeBuilder.prototype._getParentElement = function () {\n          return this._elementStack.length > 0 ? ListWrapper.last(this._elementStack) : null;\n      };\n      /**\n       * Returns the parent in the DOM and the container.\n       *\n       * `<ng-container>` elements are skipped as they are not rendered as DOM element.\n       */\n      _TreeBuilder.prototype._getParentElementSkippingContainers = function () {\n          var container = null;\n          for (var i = this._elementStack.length - 1; i >= 0; i--) {\n              if (this._elementStack[i].name !== 'ng-container') {\n                  return { parent: this._elementStack[i], container: container };\n              }\n              container = this._elementStack[i];\n          }\n          return { parent: ListWrapper.last(this._elementStack), container: container };\n      };\n      _TreeBuilder.prototype._addToParent = function (node) {\n          var parent = this._getParentElement();\n          if (isPresent(parent)) {\n              parent.children.push(node);\n          }\n          else {\n              this._rootNodes.push(node);\n          }\n      };\n      /**\n       * Insert a node between the parent and the container.\n       * When no container is given, the node is appended as a child of the parent.\n       * Also updates the element stack accordingly.\n       *\n       * @internal\n       */\n      _TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) {\n          if (!container) {\n              this._addToParent(node);\n              this._elementStack.push(node);\n          }\n          else {\n              if (parent) {\n                  // replace the container with the new node in the children\n                  var index = parent.children.indexOf(container);\n                  parent.children[index] = node;\n              }\n              else {\n                  this._rootNodes.push(node);\n              }\n              node.children.push(container);\n              this._elementStack.splice(this._elementStack.indexOf(container), 0, node);\n          }\n      };\n      _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) {\n          if (isBlank(prefix)) {\n              prefix = this.getTagDefinition(localName).implicitNamespacePrefix;\n              if (isBlank(prefix) && isPresent(parentElement)) {\n                  prefix = getNsPrefix(parentElement.name);\n              }\n          }\n          return mergeNsAndName(prefix, localName);\n      };\n      return _TreeBuilder;\n  }());\n  function lastOnStack(stack, element) {\n      return stack.length > 0 && stack[stack.length - 1] === element;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  function digestMessage(message) {\n      return sha1(serializeNodes(message.nodes).join('') + (\"[\" + message.meaning + \"]\"));\n  }\n  /**\n   * Serialize the i18n ast to something xml-like in order to generate an UID.\n   *\n   * The visitor is also used in the i18n parser tests\n   *\n   * @internal\n   */\n  var _SerializerVisitor = (function () {\n      function _SerializerVisitor() {\n      }\n      _SerializerVisitor.prototype.visitText = function (text, context) { return text.value; };\n      _SerializerVisitor.prototype.visitContainer = function (container, context) {\n          var _this = this;\n          return \"[\" + container.children.map(function (child) { return child.visit(_this); }).join(', ') + \"]\";\n      };\n      _SerializerVisitor.prototype.visitIcu = function (icu, context) {\n          var _this = this;\n          var strCases = Object.keys(icu.cases).map(function (k) { return (k + \" {\" + icu.cases[k].visit(_this) + \"}\"); });\n          return \"{\" + icu.expression + \", \" + icu.type + \", \" + strCases.join(', ') + \"}\";\n      };\n      _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {\n          var _this = this;\n          return ph.isVoid ?\n              \"<ph tag name=\\\"\" + ph.startName + \"\\\"/>\" :\n              \"<ph tag name=\\\"\" + ph.startName + \"\\\">\" + ph.children.map(function (child) { return child.visit(_this); }).join(', ') + \"</ph name=\\\"\" + ph.closeName + \"\\\">\";\n      };\n      _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) {\n          return \"<ph name=\\\"\" + ph.name + \"\\\">\" + ph.value + \"</ph>\";\n      };\n      _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {\n          return \"<ph icu name=\\\"\" + ph.name + \"\\\">\" + ph.value.visit(this) + \"</ph>\";\n      };\n      return _SerializerVisitor;\n  }());\n  var serializerVisitor = new _SerializerVisitor();\n  function serializeNodes(nodes) {\n      return nodes.map(function (a) { return a.visit(serializerVisitor, null); });\n  }\n  /**\n   * Compute the SHA1 of the given string\n   *\n   * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n   *\n   * WARNING: this function has not been designed not tested with security in mind.\n   *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n   */\n  function sha1(str) {\n      var utf8 = utf8Encode(str);\n      var words32 = stringToWords32(utf8);\n      var len = utf8.length * 8;\n      var w = new Array(80);\n      var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0], a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];\n      words32[len >> 5] |= 0x80 << (24 - len % 32);\n      words32[((len + 64 >> 9) << 4) + 15] = len;\n      for (var i = 0; i < words32.length; i += 16) {\n          var _b = [a, b, c, d, e], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];\n          for (var j = 0; j < 80; j++) {\n              if (j < 16) {\n                  w[j] = words32[i + j];\n              }\n              else {\n                  w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n              }\n              var _c = fk(j, b, c, d), f = _c[0], k = _c[1];\n              var temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n              _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];\n          }\n          _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];\n      }\n      var sha1 = words32ToString([a, b, c, d, e]);\n      var hex = '';\n      for (var i = 0; i < sha1.length; i++) {\n          var b_1 = sha1.charCodeAt(i);\n          hex += (b_1 >>> 4 & 0x0f).toString(16) + (b_1 & 0x0f).toString(16);\n      }\n      return hex.toLowerCase();\n      var _d, _e;\n  }\n  function utf8Encode(str) {\n      var encoded = '';\n      for (var index = 0; index < str.length; index++) {\n          var codePoint = decodeSurrogatePairs(str, index);\n          if (codePoint <= 0x7f) {\n              encoded += String.fromCharCode(codePoint);\n          }\n          else if (codePoint <= 0x7ff) {\n              encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);\n          }\n          else if (codePoint <= 0xffff) {\n              encoded += String.fromCharCode(0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);\n          }\n          else if (codePoint <= 0x1fffff) {\n              encoded += String.fromCharCode(0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);\n          }\n      }\n      return encoded;\n  }\n  // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n  function decodeSurrogatePairs(str, index) {\n      if (index < 0 || index >= str.length) {\n          throw new Error(\"index=\" + index + \" is out of range in \\\"\" + str + \"\\\"\");\n      }\n      var high = str.charCodeAt(index);\n      var low;\n      if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {\n          low = str.charCodeAt(index + 1);\n          if (low >= 0xdc00 && low <= 0xdfff) {\n              return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;\n          }\n      }\n      return high;\n  }\n  function stringToWords32(str) {\n      var words32 = Array(str.length >>> 2);\n      for (var i = 0; i < words32.length; i++) {\n          words32[i] = 0;\n      }\n      for (var i = 0; i < str.length; i++) {\n          words32[i >>> 2] |= (str.charCodeAt(i) & 0xff) << 8 * (3 - i & 0x3);\n      }\n      return words32;\n  }\n  function words32ToString(words32) {\n      var str = '';\n      for (var i = 0; i < words32.length * 4; i++) {\n          str += String.fromCharCode((words32[i >>> 2] >>> 8 * (3 - i & 0x3)) & 0xff);\n      }\n      return str;\n  }\n  function fk(index, b, c, d) {\n      if (index < 20) {\n          return [(b & c) | (~b & d), 0x5a827999];\n      }\n      if (index < 40) {\n          return [b ^ c ^ d, 0x6ed9eba1];\n      }\n      if (index < 60) {\n          return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];\n      }\n      return [b ^ c ^ d, 0xca62c1d6];\n  }\n  function add32(a, b) {\n      var low = (a & 0xffff) + (b & 0xffff);\n      var high = (a >> 16) + (b >> 16) + (low >> 16);\n      return (high << 16) | (low & 0xffff);\n  }\n  function rol32(a, count) {\n      return (a << count) | (a >>> (32 - count));\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var Message = (function () {\n      /**\n       * @param nodes message AST\n       * @param placeholders maps placeholder names to static content\n       * @param placeholderToMsgIds maps placeholder names to translatable message IDs (used for ICU\n       *                            messages)\n       * @param meaning\n       * @param description\n       */\n      function Message(nodes, placeholders, placeholderToMsgIds, meaning, description) {\n          this.nodes = nodes;\n          this.placeholders = placeholders;\n          this.placeholderToMsgIds = placeholderToMsgIds;\n          this.meaning = meaning;\n          this.description = description;\n      }\n      return Message;\n  }());\n  var Text$1 = (function () {\n      function Text(value, sourceSpan) {\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };\n      return Text;\n  }());\n  var Container = (function () {\n      function Container(children, sourceSpan) {\n          this.children = children;\n          this.sourceSpan = sourceSpan;\n      }\n      Container.prototype.visit = function (visitor, context) { return visitor.visitContainer(this, context); };\n      return Container;\n  }());\n  var Icu = (function () {\n      function Icu(expression, type, cases, sourceSpan) {\n          this.expression = expression;\n          this.type = type;\n          this.cases = cases;\n          this.sourceSpan = sourceSpan;\n      }\n      Icu.prototype.visit = function (visitor, context) { return visitor.visitIcu(this, context); };\n      return Icu;\n  }());\n  var TagPlaceholder = (function () {\n      function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {\n          this.tag = tag;\n          this.attrs = attrs;\n          this.startName = startName;\n          this.closeName = closeName;\n          this.children = children;\n          this.isVoid = isVoid;\n          this.sourceSpan = sourceSpan;\n      }\n      TagPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitTagPlaceholder(this, context); };\n      return TagPlaceholder;\n  }());\n  var Placeholder = (function () {\n      function Placeholder(value, name, sourceSpan) {\n          if (name === void 0) { name = ''; }\n          this.value = value;\n          this.name = name;\n          this.sourceSpan = sourceSpan;\n      }\n      Placeholder.prototype.visit = function (visitor, context) { return visitor.visitPlaceholder(this, context); };\n      return Placeholder;\n  }());\n  var IcuPlaceholder = (function () {\n      function IcuPlaceholder(value, name, sourceSpan) {\n          if (name === void 0) { name = ''; }\n          this.value = value;\n          this.name = name;\n          this.sourceSpan = sourceSpan;\n      }\n      IcuPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitIcuPlaceholder(this, context); };\n      return IcuPlaceholder;\n  }());\n\n  var HtmlTagDefinition = (function () {\n      function HtmlTagDefinition(_a) {\n          var _this = this;\n          var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;\n          this.closedByChildren = {};\n          this.closedByParent = false;\n          this.canSelfClose = false;\n          if (closedByChildren && closedByChildren.length > 0) {\n              closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });\n          }\n          this.isVoid = isVoid;\n          this.closedByParent = closedByParent || isVoid;\n          if (requiredParents && requiredParents.length > 0) {\n              this.requiredParents = {};\n              // The first parent is the list is automatically when none of the listed parents are present\n              this.parentToAdd = requiredParents[0];\n              requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });\n          }\n          this.implicitNamespacePrefix = implicitNamespacePrefix;\n          this.contentType = contentType;\n          this.ignoreFirstLf = ignoreFirstLf;\n      }\n      HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {\n          if (!this.requiredParents) {\n              return false;\n          }\n          if (!currentParent) {\n              return true;\n          }\n          var lcParent = currentParent.toLowerCase();\n          return this.requiredParents[lcParent] != true && lcParent != 'template';\n      };\n      HtmlTagDefinition.prototype.isClosedByChild = function (name) {\n          return this.isVoid || name.toLowerCase() in this.closedByChildren;\n      };\n      return HtmlTagDefinition;\n  }());\n  // see http://www.w3.org/TR/html51/syntax.html#optional-tags\n  // This implementation does not fully conform to the HTML5 spec.\n  var TAG_DEFINITIONS = {\n      'base': new HtmlTagDefinition({ isVoid: true }),\n      'meta': new HtmlTagDefinition({ isVoid: true }),\n      'area': new HtmlTagDefinition({ isVoid: true }),\n      'embed': new HtmlTagDefinition({ isVoid: true }),\n      'link': new HtmlTagDefinition({ isVoid: true }),\n      'img': new HtmlTagDefinition({ isVoid: true }),\n      'input': new HtmlTagDefinition({ isVoid: true }),\n      'param': new HtmlTagDefinition({ isVoid: true }),\n      'hr': new HtmlTagDefinition({ isVoid: true }),\n      'br': new HtmlTagDefinition({ isVoid: true }),\n      'source': new HtmlTagDefinition({ isVoid: true }),\n      'track': new HtmlTagDefinition({ isVoid: true }),\n      'wbr': new HtmlTagDefinition({ isVoid: true }),\n      'p': new HtmlTagDefinition({\n          closedByChildren: [\n              'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',\n              'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',\n              'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'\n          ],\n          closedByParent: true\n      }),\n      'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),\n      'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),\n      'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),\n      'tr': new HtmlTagDefinition({\n          closedByChildren: ['tr'],\n          requiredParents: ['tbody', 'tfoot', 'thead'],\n          closedByParent: true\n      }),\n      'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n      'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n      'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),\n      'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),\n      'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),\n      'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),\n      'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),\n      'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),\n      'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n      'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n      'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),\n      'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n      'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),\n      'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),\n      'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),\n      'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),\n      'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\n      'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\n      'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),\n      'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),\n  };\n  var _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();\n  function getHtmlTagDefinition(tagName) {\n      return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var TAG_TO_PLACEHOLDER_NAMES = {\n      'A': 'LINK',\n      'B': 'BOLD_TEXT',\n      'BR': 'LINE_BREAK',\n      'EM': 'EMPHASISED_TEXT',\n      'H1': 'HEADING_LEVEL1',\n      'H2': 'HEADING_LEVEL2',\n      'H3': 'HEADING_LEVEL3',\n      'H4': 'HEADING_LEVEL4',\n      'H5': 'HEADING_LEVEL5',\n      'H6': 'HEADING_LEVEL6',\n      'HR': 'HORIZONTAL_RULE',\n      'I': 'ITALIC_TEXT',\n      'LI': 'LIST_ITEM',\n      'LINK': 'MEDIA_LINK',\n      'OL': 'ORDERED_LIST',\n      'P': 'PARAGRAPH',\n      'Q': 'QUOTATION',\n      'S': 'STRIKETHROUGH_TEXT',\n      'SMALL': 'SMALL_TEXT',\n      'SUB': 'SUBSTRIPT',\n      'SUP': 'SUPERSCRIPT',\n      'TBODY': 'TABLE_BODY',\n      'TD': 'TABLE_CELL',\n      'TFOOT': 'TABLE_FOOTER',\n      'TH': 'TABLE_HEADER_CELL',\n      'THEAD': 'TABLE_HEADER',\n      'TR': 'TABLE_ROW',\n      'TT': 'MONOSPACED_TEXT',\n      'U': 'UNDERLINED_TEXT',\n      'UL': 'UNORDERED_LIST',\n  };\n  /**\n   * Creates unique names for placeholder with different content\n   *\n   * @internal\n   */\n  var PlaceholderRegistry = (function () {\n      function PlaceholderRegistry() {\n          // Count the occurrence of the base name top generate a unique name\n          this._placeHolderNameCounts = {};\n          // Maps signature to placeholder names\n          this._signatureToName = {};\n      }\n      PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) {\n          var signature = this._hashTag(tag, attrs, isVoid);\n          if (this._signatureToName[signature]) {\n              return this._signatureToName[signature];\n          }\n          var upperTag = tag.toUpperCase();\n          var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || \"TAG_\" + upperTag;\n          var name = this._generateUniqueName(isVoid ? baseName : \"START_\" + baseName);\n          this._signatureToName[signature] = name;\n          return name;\n      };\n      PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) {\n          var signature = this._hashClosingTag(tag);\n          if (this._signatureToName[signature]) {\n              return this._signatureToName[signature];\n          }\n          var upperTag = tag.toUpperCase();\n          var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || \"TAG_\" + upperTag;\n          var name = this._generateUniqueName(\"CLOSE_\" + baseName);\n          this._signatureToName[signature] = name;\n          return name;\n      };\n      PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) {\n          var upperName = name.toUpperCase();\n          var signature = \"PH: \" + upperName + \"=\" + content;\n          if (this._signatureToName[signature]) {\n              return this._signatureToName[signature];\n          }\n          var uniqueName = this._generateUniqueName(upperName);\n          this._signatureToName[signature] = uniqueName;\n          return uniqueName;\n      };\n      // Generate a hash for a tag - does not take attribute order into account\n      PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) {\n          var start = \"<\" + tag;\n          var strAttrs = Object.keys(attrs).sort().map(function (name) { return (\" \" + name + \"=\" + attrs[name]); }).join('');\n          var end = isVoid ? '/>' : \"></\" + tag + \">\";\n          return start + strAttrs + end;\n      };\n      PlaceholderRegistry.prototype._hashClosingTag = function (tag) { return this._hashTag(\"/\" + tag, {}, false); };\n      PlaceholderRegistry.prototype._generateUniqueName = function (base) {\n          var name = base;\n          var next = this._placeHolderNameCounts[name];\n          if (!next) {\n              next = 1;\n          }\n          else {\n              name += \"_\" + next;\n              next++;\n          }\n          this._placeHolderNameCounts[base] = next;\n          return name;\n      };\n      return PlaceholderRegistry;\n  }());\n\n  var _expParser = new Parser(new Lexer());\n  /**\n   * Returns a function converting html nodes to an i18n Message given an interpolationConfig\n   */\n  function createI18nMessageFactory(interpolationConfig) {\n      var visitor = new _I18nVisitor(_expParser, interpolationConfig);\n      return function (nodes, meaning, description) {\n          return visitor.toI18nMessage(nodes, meaning, description);\n      };\n  }\n  var _I18nVisitor = (function () {\n      function _I18nVisitor(_expressionParser, _interpolationConfig) {\n          this._expressionParser = _expressionParser;\n          this._interpolationConfig = _interpolationConfig;\n      }\n      _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description) {\n          this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;\n          this._icuDepth = 0;\n          this._placeholderRegistry = new PlaceholderRegistry();\n          this._placeholderToContent = {};\n          this._placeholderToIds = {};\n          var i18nodes = visitAll(this, nodes, {});\n          return new Message(i18nodes, this._placeholderToContent, this._placeholderToIds, meaning, description);\n      };\n      _I18nVisitor.prototype.visitElement = function (el, context) {\n          var children = visitAll(this, el.children);\n          var attrs = {};\n          el.attrs.forEach(function (attr) {\n              // Do not visit the attributes, translatable ones are top-level ASTs\n              attrs[attr.name] = attr.value;\n          });\n          var isVoid = getHtmlTagDefinition(el.name).isVoid;\n          var startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n          this._placeholderToContent[startPhName] = el.sourceSpan.toString();\n          var closePhName = '';\n          if (!isVoid) {\n              closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);\n              this._placeholderToContent[closePhName] = \"</\" + el.name + \">\";\n          }\n          return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);\n      };\n      _I18nVisitor.prototype.visitAttribute = function (attribute, context) {\n          return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);\n      };\n      _I18nVisitor.prototype.visitText = function (text, context) {\n          return this._visitTextWithInterpolation(text.value, text.sourceSpan);\n      };\n      _I18nVisitor.prototype.visitComment = function (comment, context) { return null; };\n      _I18nVisitor.prototype.visitExpansion = function (icu, context) {\n          var _this = this;\n          this._icuDepth++;\n          var i18nIcuCases = {};\n          var i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n          icu.cases.forEach(function (caze) {\n              i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) { return node.visit(_this, {}); }), caze.expSourceSpan);\n          });\n          this._icuDepth--;\n          if (this._isIcu || this._icuDepth > 0) {\n              // If the message (vs a part of the message) is an ICU message returns it\n              return i18nIcu;\n          }\n          // Else returns a placeholder\n          // ICU placeholders should not be replaced with their original content but with the their\n          // translations. We need to create a new visitor (they are not re-entrant) to compute the\n          // message id.\n          // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n          var phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\n          var visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);\n          this._placeholderToIds[phName] = digestMessage(visitor.toI18nMessage([icu], '', ''));\n          return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n      };\n      _I18nVisitor.prototype.visitExpansionCase = function (icuCase, context) {\n          throw new Error('Unreachable code');\n      };\n      _I18nVisitor.prototype._visitTextWithInterpolation = function (text, sourceSpan) {\n          var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);\n          if (!splitInterpolation) {\n              // No expression, return a single text\n              return new Text$1(text, sourceSpan);\n          }\n          // Return a group of text + expressions\n          var nodes = [];\n          var container = new Container(nodes, sourceSpan);\n          var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;\n          for (var i = 0; i < splitInterpolation.strings.length - 1; i++) {\n              var expression = splitInterpolation.expressions[i];\n              var baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';\n              var phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);\n              if (splitInterpolation.strings[i].length) {\n                  // No need to add empty strings\n                  nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));\n              }\n              nodes.push(new Placeholder(expression, phName, sourceSpan));\n              this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;\n          }\n          // The last index contains no expression\n          var lastStringIdx = splitInterpolation.strings.length - 1;\n          if (splitInterpolation.strings[lastStringIdx].length) {\n              nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));\n          }\n          return container;\n      };\n      return _I18nVisitor;\n  }());\n  var _CUSTOM_PH_EXP = /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*\"([\\s\\S]*?)\"[\\s\\S]*\\)/g;\n  function _extractPlaceholderName(input) {\n      return input.split(_CUSTOM_PH_EXP)[1];\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$6 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  /**\n   * An i18n error.\n   */\n  var I18nError = (function (_super) {\n      __extends$6(I18nError, _super);\n      function I18nError(span, msg) {\n          _super.call(this, span, msg);\n      }\n      return I18nError;\n  }(ParseError));\n\n  var _I18N_ATTR = 'i18n';\n  var _I18N_ATTR_PREFIX = 'i18n-';\n  var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;\n  /**\n   * Extract translatable messages from an html AST\n   */\n  function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {\n      var visitor = new _Visitor(implicitTags, implicitAttrs);\n      return visitor.extract(nodes, interpolationConfig);\n  }\n  function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {\n      var visitor = new _Visitor(implicitTags, implicitAttrs);\n      return visitor.merge(nodes, translations, interpolationConfig);\n  }\n  var ExtractionResult = (function () {\n      function ExtractionResult(messages, errors) {\n          this.messages = messages;\n          this.errors = errors;\n      }\n      return ExtractionResult;\n  }());\n  var _VisitorMode;\n  (function (_VisitorMode) {\n      _VisitorMode[_VisitorMode[\"Extract\"] = 0] = \"Extract\";\n      _VisitorMode[_VisitorMode[\"Merge\"] = 1] = \"Merge\";\n  })(_VisitorMode || (_VisitorMode = {}));\n  /**\n   * This Visitor is used:\n   * 1. to extract all the translatable strings from an html AST (see `extract()`),\n   * 2. to replace the translatable strings with the actual translations (see `merge()`)\n   *\n   * @internal\n   */\n  var _Visitor = (function () {\n      function _Visitor(_implicitTags, _implicitAttrs) {\n          this._implicitTags = _implicitTags;\n          this._implicitAttrs = _implicitAttrs;\n      }\n      /**\n       * Extracts the messages from the tree\n       */\n      _Visitor.prototype.extract = function (nodes, interpolationConfig) {\n          var _this = this;\n          this._init(_VisitorMode.Extract, interpolationConfig);\n          nodes.forEach(function (node) { return node.visit(_this, null); });\n          if (this._inI18nBlock) {\n              this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n          }\n          return new ExtractionResult(this._messages, this._errors);\n      };\n      /**\n       * Returns a tree where all translatable nodes are translated\n       */\n      _Visitor.prototype.merge = function (nodes, translations, interpolationConfig) {\n          this._init(_VisitorMode.Merge, interpolationConfig);\n          this._translations = translations;\n          // Construct a single fake root element\n          var wrapper = new Element('wrapper', [], nodes, null, null, null);\n          var translatedNode = wrapper.visit(this, null);\n          if (this._inI18nBlock) {\n              this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n          }\n          return new ParseTreeResult(translatedNode.children, this._errors);\n      };\n      _Visitor.prototype.visitExpansionCase = function (icuCase, context) {\n          // Parse cases for translatable html attributes\n          var expression = visitAll(this, icuCase.expression, context);\n          if (this._mode === _VisitorMode.Merge) {\n              return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);\n          }\n      };\n      _Visitor.prototype.visitExpansion = function (icu, context) {\n          this._mayBeAddBlockChildren(icu);\n          var wasInIcu = this._inIcu;\n          if (!this._inIcu) {\n              // nested ICU messages should not be extracted but top-level translated as a whole\n              if (this._isInTranslatableSection) {\n                  this._addMessage([icu]);\n              }\n              this._inIcu = true;\n          }\n          var cases = visitAll(this, icu.cases, context);\n          if (this._mode === _VisitorMode.Merge) {\n              icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\n          }\n          this._inIcu = wasInIcu;\n          return icu;\n      };\n      _Visitor.prototype.visitComment = function (comment, context) {\n          var isOpening = _isOpeningComment(comment);\n          if (isOpening && this._isInTranslatableSection) {\n              this._reportError(comment, 'Could not start a block inside a translatable section');\n              return;\n          }\n          var isClosing = _isClosingComment(comment);\n          if (isClosing && !this._inI18nBlock) {\n              this._reportError(comment, 'Trying to close an unopened block');\n              return;\n          }\n          if (!this._inI18nNode && !this._inIcu) {\n              if (!this._inI18nBlock) {\n                  if (isOpening) {\n                      this._inI18nBlock = true;\n                      this._blockStartDepth = this._depth;\n                      this._blockChildren = [];\n                      this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();\n                      this._openTranslatableSection(comment);\n                  }\n              }\n              else {\n                  if (isClosing) {\n                      if (this._depth == this._blockStartDepth) {\n                          this._closeTranslatableSection(comment, this._blockChildren);\n                          this._inI18nBlock = false;\n                          var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);\n                          // merge attributes in sections\n                          var nodes = this._translateMessage(comment, message);\n                          return visitAll(this, nodes);\n                      }\n                      else {\n                          this._reportError(comment, 'I18N blocks should not cross element boundaries');\n                          return;\n                      }\n                  }\n              }\n          }\n      };\n      _Visitor.prototype.visitText = function (text, context) {\n          if (this._isInTranslatableSection) {\n              this._mayBeAddBlockChildren(text);\n          }\n          return text;\n      };\n      _Visitor.prototype.visitElement = function (el, context) {\n          var _this = this;\n          this._mayBeAddBlockChildren(el);\n          this._depth++;\n          var wasInI18nNode = this._inI18nNode;\n          var wasInImplicitNode = this._inImplicitNode;\n          var childNodes;\n          // Extract only top level nodes with the (implicit) \"i18n\" attribute if not in a block or an ICU\n          // message\n          var i18nAttr = _getI18nAttr(el);\n          var isImplicit = this._implicitTags.some(function (tag) { return el.name === tag; }) &&\n              !this._inIcu && !this._isInTranslatableSection;\n          var isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n          this._inImplicitNode = this._inImplicitNode || isImplicit;\n          if (!this._isInTranslatableSection && !this._inIcu) {\n              if (i18nAttr) {\n                  // explicit translation\n                  this._inI18nNode = true;\n                  var message = this._addMessage(el.children, i18nAttr.value);\n                  childNodes = this._translateMessage(el, message);\n              }\n              else if (isTopLevelImplicit) {\n                  // implicit translation\n                  this._inI18nNode = true;\n                  var message = this._addMessage(el.children);\n                  childNodes = this._translateMessage(el, message);\n              }\n              if (this._mode == _VisitorMode.Extract) {\n                  var isTranslatable = i18nAttr || isTopLevelImplicit;\n                  if (isTranslatable) {\n                      this._openTranslatableSection(el);\n                  }\n                  visitAll(this, el.children);\n                  if (isTranslatable) {\n                      this._closeTranslatableSection(el, el.children);\n                  }\n              }\n              if (this._mode === _VisitorMode.Merge && !i18nAttr && !isTopLevelImplicit) {\n                  childNodes = [];\n                  el.children.forEach(function (child) {\n                      var visited = child.visit(_this, context);\n                      if (visited && !_this._isInTranslatableSection) {\n                          // Do not add the children from translatable sections (= i18n blocks here)\n                          // They will be added when the section is close (i.e. on `<!-- /i18n -->`)\n                          childNodes = childNodes.concat(visited);\n                      }\n                  });\n              }\n          }\n          else {\n              if (i18nAttr || isTopLevelImplicit) {\n                  this._reportError(el, 'Could not mark an element as translatable inside a translatable section');\n              }\n              if (this._mode == _VisitorMode.Extract) {\n                  // Descend into child nodes for extraction\n                  visitAll(this, el.children);\n              }\n              if (this._mode == _VisitorMode.Merge) {\n                  // Translate attributes in ICU messages\n                  childNodes = [];\n                  el.children.forEach(function (child) {\n                      var visited = child.visit(_this, context);\n                      if (visited && !_this._isInTranslatableSection) {\n                          // Do not add the children from translatable sections (= i18n blocks here)\n                          // They will be added when the section is close (i.e. on `<!-- /i18n -->`)\n                          childNodes = childNodes.concat(visited);\n                      }\n                  });\n              }\n          }\n          this._visitAttributesOf(el);\n          this._depth--;\n          this._inI18nNode = wasInI18nNode;\n          this._inImplicitNode = wasInImplicitNode;\n          if (this._mode === _VisitorMode.Merge) {\n              // There are no childNodes in translatable sections - those nodes will be replace anyway\n              var translatedAttrs = this._translateAttributes(el);\n              return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n          }\n      };\n      _Visitor.prototype.visitAttribute = function (attribute, context) {\n          throw new Error('unreachable code');\n      };\n      _Visitor.prototype._init = function (mode, interpolationConfig) {\n          this._mode = mode;\n          this._inI18nBlock = false;\n          this._inI18nNode = false;\n          this._depth = 0;\n          this._inIcu = false;\n          this._msgCountAtSectionStart = void 0;\n          this._errors = [];\n          this._messages = [];\n          this._inImplicitNode = false;\n          this._createI18nMessage = createI18nMessageFactory(interpolationConfig);\n      };\n      // looks for translatable attributes\n      _Visitor.prototype._visitAttributesOf = function (el) {\n          var _this = this;\n          var explicitAttrNameToValue = {};\n          var implicitAttrNames = this._implicitAttrs[el.name] || [];\n          el.attrs.filter(function (attr) { return attr.name.startsWith(_I18N_ATTR_PREFIX); })\n              .forEach(function (attr) { return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n              attr.value; });\n          el.attrs.forEach(function (attr) {\n              if (attr.name in explicitAttrNameToValue) {\n                  _this._addMessage([attr], explicitAttrNameToValue[attr.name]);\n              }\n              else if (implicitAttrNames.some(function (name) { return attr.name === name; })) {\n                  _this._addMessage([attr]);\n              }\n          });\n      };\n      // add a translatable message\n      _Visitor.prototype._addMessage = function (ast, meaningAndDesc) {\n          if (ast.length == 0 ||\n              ast.length == 1 && ast[0] instanceof Attribute && !ast[0].value) {\n              // Do not create empty messages\n              return;\n          }\n          var _a = _splitMeaningAndDesc(meaningAndDesc), meaning = _a[0], description = _a[1];\n          var message = this._createI18nMessage(ast, meaning, description);\n          this._messages.push(message);\n          return message;\n      };\n      // Translates the given message given the `TranslationBundle`\n      // no-op when called in extraction mode (returns [])\n      _Visitor.prototype._translateMessage = function (el, message) {\n          if (message && this._mode === _VisitorMode.Merge) {\n              var id = digestMessage(message);\n              var nodes = this._translations.get(id);\n              if (nodes) {\n                  return nodes;\n              }\n              this._reportError(el, \"Translation unavailable for message id=\\\"\" + id + \"\\\"\");\n          }\n          return [];\n      };\n      // translate the attributes of an element and remove i18n specific attributes\n      _Visitor.prototype._translateAttributes = function (el) {\n          var _this = this;\n          var attributes = el.attrs;\n          var i18nAttributeMeanings = {};\n          attributes.forEach(function (attr) {\n              if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n                  i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n                      _splitMeaningAndDesc(attr.value)[0];\n              }\n          });\n          var translatedAttributes = [];\n          attributes.forEach(function (attr) {\n              if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n                  // strip i18n specific attributes\n                  return;\n              }\n              if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {\n                  var meaning = i18nAttributeMeanings[attr.name];\n                  var message = _this._createI18nMessage([attr], meaning, '');\n                  var id = digestMessage(message);\n                  var nodes = _this._translations.get(id);\n                  if (nodes) {\n                      if (nodes[0] instanceof Text) {\n                          var value = nodes[0].value;\n                          translatedAttributes.push(new Attribute(attr.name, value, attr.sourceSpan));\n                      }\n                      else {\n                          _this._reportError(el, \"Unexpected translation for attribute \\\"\" + attr.name + \"\\\" (id=\\\"\" + id + \"\\\")\");\n                      }\n                  }\n                  else {\n                      _this._reportError(el, \"Translation unavailable for attribute \\\"\" + attr.name + \"\\\" (id=\\\"\" + id + \"\\\")\");\n                  }\n              }\n              else {\n                  translatedAttributes.push(attr);\n              }\n          });\n          return translatedAttributes;\n      };\n      /**\n       * Add the node as a child of the block when:\n       * - we are in a block,\n       * - we are not inside a ICU message (those are handled separately),\n       * - the node is a \"direct child\" of the block\n       */\n      _Visitor.prototype._mayBeAddBlockChildren = function (node) {\n          if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {\n              this._blockChildren.push(node);\n          }\n      };\n      /**\n       * Marks the start of a section, see `_endSection`\n       */\n      _Visitor.prototype._openTranslatableSection = function (node) {\n          if (this._isInTranslatableSection) {\n              this._reportError(node, 'Unexpected section start');\n          }\n          else {\n              this._msgCountAtSectionStart = this._messages.length;\n          }\n      };\n      Object.defineProperty(_Visitor.prototype, \"_isInTranslatableSection\", {\n          /**\n           * A translatable section could be:\n           * - a translatable element,\n           * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\n           */\n          get: function () {\n              return this._msgCountAtSectionStart !== void 0;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      /**\n       * Terminates a section.\n       *\n       * If a section has only one significant children (comments not significant) then we should not\n       * keep the message from this children:\n       *\n       * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n       * - one for the <p> content with meaning and description,\n       * - another one for the ICU message.\n       *\n       * In this case the last message is discarded as it contains less information (the AST is\n       * otherwise identical).\n       *\n       * Note that we should still keep messages extracted from attributes inside the section (ie in the\n       * ICU message here)\n       */\n      _Visitor.prototype._closeTranslatableSection = function (node, directChildren) {\n          if (!this._isInTranslatableSection) {\n              this._reportError(node, 'Unexpected section end');\n              return;\n          }\n          var startIndex = this._msgCountAtSectionStart;\n          var significantChildren = directChildren.reduce(function (count, node) { return count + (node instanceof Comment ? 0 : 1); }, 0);\n          if (significantChildren == 1) {\n              for (var i = this._messages.length - 1; i >= startIndex; i--) {\n                  var ast = this._messages[i].nodes;\n                  if (!(ast.length == 1 && ast[0] instanceof Text$1)) {\n                      this._messages.splice(i, 1);\n                      break;\n                  }\n              }\n          }\n          this._msgCountAtSectionStart = void 0;\n      };\n      _Visitor.prototype._reportError = function (node, msg) {\n          this._errors.push(new I18nError(node.sourceSpan, msg));\n      };\n      return _Visitor;\n  }());\n  function _isOpeningComment(n) {\n      return n instanceof Comment && n.value && n.value.startsWith('i18n');\n  }\n  function _isClosingComment(n) {\n      return n instanceof Comment && n.value && n.value === '/i18n';\n  }\n  function _getI18nAttr(p) {\n      return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR; }) || null;\n  }\n  function _splitMeaningAndDesc(i18n) {\n      if (!i18n)\n          return ['', ''];\n      var pipeIndex = i18n.indexOf('|');\n      return pipeIndex == -1 ? ['', i18n] : [i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1)];\n  }\n\n  /**\n   * A container for message extracted from the templates.\n   */\n  var MessageBundle = (function () {\n      function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {\n          this._htmlParser = _htmlParser;\n          this._implicitTags = _implicitTags;\n          this._implicitAttrs = _implicitAttrs;\n          this._messageMap = {};\n      }\n      MessageBundle.prototype.updateFromTemplate = function (html, url, interpolationConfig) {\n          var _this = this;\n          var htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);\n          if (htmlParserResult.errors.length) {\n              return htmlParserResult.errors;\n          }\n          var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n          if (i18nParserResult.errors.length) {\n              return i18nParserResult.errors;\n          }\n          i18nParserResult.messages.forEach(function (message) { _this._messageMap[digestMessage(message)] = message; });\n      };\n      MessageBundle.prototype.getMessageMap = function () { return this._messageMap; };\n      MessageBundle.prototype.write = function (serializer) { return serializer.write(this._messageMap); };\n      return MessageBundle;\n  }());\n\n  var XmlTagDefinition = (function () {\n      function XmlTagDefinition() {\n          this.closedByParent = false;\n          this.contentType = TagContentType.PARSABLE_DATA;\n          this.isVoid = false;\n          this.ignoreFirstLf = false;\n          this.canSelfClose = true;\n      }\n      XmlTagDefinition.prototype.requireExtraParent = function (currentParent) { return false; };\n      XmlTagDefinition.prototype.isClosedByChild = function (name) { return false; };\n      return XmlTagDefinition;\n  }());\n  var _TAG_DEFINITION = new XmlTagDefinition();\n  function getXmlTagDefinition(tagName) {\n      return _TAG_DEFINITION;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$7 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var XmlParser = (function (_super) {\n      __extends$7(XmlParser, _super);\n      function XmlParser() {\n          _super.call(this, getXmlTagDefinition);\n      }\n      XmlParser.prototype.parse = function (source, url, parseExpansionForms) {\n          if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n          return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);\n      };\n      return XmlParser;\n  }(Parser$1));\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  // Generate a map of placeholder to content indexed by message ids\n  function extractPlaceholders(messageBundle) {\n      var messageMap = messageBundle.getMessageMap();\n      var placeholders = {};\n      Object.keys(messageMap).forEach(function (msgId) {\n          placeholders[msgId] = messageMap[msgId].placeholders;\n      });\n      return placeholders;\n  }\n  // Generate a map of placeholder to message ids indexed by message ids\n  function extractPlaceholderToIds(messageBundle) {\n      var messageMap = messageBundle.getMessageMap();\n      var placeholderToIds = {};\n      Object.keys(messageMap).forEach(function (msgId) {\n          placeholderToIds[msgId] = messageMap[msgId].placeholderToMsgIds;\n      });\n      return placeholderToIds;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var _Visitor$1 = (function () {\n      function _Visitor() {\n      }\n      _Visitor.prototype.visitTag = function (tag) {\n          var _this = this;\n          var strAttrs = this._serializeAttributes(tag.attrs);\n          if (tag.children.length == 0) {\n              return \"<\" + tag.name + strAttrs + \"/>\";\n          }\n          var strChildren = tag.children.map(function (node) { return node.visit(_this); });\n          return \"<\" + tag.name + strAttrs + \">\" + strChildren.join('') + \"</\" + tag.name + \">\";\n      };\n      _Visitor.prototype.visitText = function (text) { return text.value; };\n      _Visitor.prototype.visitDeclaration = function (decl) {\n          return \"<?xml\" + this._serializeAttributes(decl.attrs) + \" ?>\";\n      };\n      _Visitor.prototype._serializeAttributes = function (attrs) {\n          var strAttrs = Object.keys(attrs).map(function (name) { return (name + \"=\\\"\" + attrs[name] + \"\\\"\"); }).join(' ');\n          return strAttrs.length > 0 ? ' ' + strAttrs : '';\n      };\n      _Visitor.prototype.visitDoctype = function (doctype) {\n          return \"<!DOCTYPE \" + doctype.rootTag + \" [\\n\" + doctype.dtd + \"\\n]>\";\n      };\n      return _Visitor;\n  }());\n  var _visitor = new _Visitor$1();\n  function serialize(nodes) {\n      return nodes.map(function (node) { return node.visit(_visitor); }).join('');\n  }\n  var Declaration = (function () {\n      function Declaration(unescapedAttrs) {\n          var _this = this;\n          this.attrs = {};\n          Object.keys(unescapedAttrs).forEach(function (k) {\n              _this.attrs[k] = _escapeXml(unescapedAttrs[k]);\n          });\n      }\n      Declaration.prototype.visit = function (visitor) { return visitor.visitDeclaration(this); };\n      return Declaration;\n  }());\n  var Doctype = (function () {\n      function Doctype(rootTag, dtd) {\n          this.rootTag = rootTag;\n          this.dtd = dtd;\n      }\n      ;\n      Doctype.prototype.visit = function (visitor) { return visitor.visitDoctype(this); };\n      return Doctype;\n  }());\n  var Tag = (function () {\n      function Tag(name, unescapedAttrs, children) {\n          var _this = this;\n          if (unescapedAttrs === void 0) { unescapedAttrs = {}; }\n          if (children === void 0) { children = []; }\n          this.name = name;\n          this.children = children;\n          this.attrs = {};\n          Object.keys(unescapedAttrs).forEach(function (k) {\n              _this.attrs[k] = _escapeXml(unescapedAttrs[k]);\n          });\n      }\n      Tag.prototype.visit = function (visitor) { return visitor.visitTag(this); };\n      return Tag;\n  }());\n  var Text$2 = (function () {\n      function Text(unescapedValue) {\n          this.value = _escapeXml(unescapedValue);\n      }\n      ;\n      Text.prototype.visit = function (visitor) { return visitor.visitText(this); };\n      return Text;\n  }());\n  var _ESCAPED_CHARS = [\n      [/&/g, '&amp;'],\n      [/\"/g, '&quot;'],\n      [/'/g, '&apos;'],\n      [/</g, '&lt;'],\n      [/>/g, '&gt;'],\n  ];\n  function _escapeXml(text) {\n      return _ESCAPED_CHARS.reduce(function (text, entry) { return text.replace(entry[0], entry[1]); }, text);\n  }\n\n  var _VERSION = '1.2';\n  var _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';\n  // TODO(vicb): make this a param (s/_/-/)\n  var _SOURCE_LANG = 'en';\n  var _PLACEHOLDER_TAG = 'x';\n  var _SOURCE_TAG = 'source';\n  var _TARGET_TAG = 'target';\n  var _UNIT_TAG = 'trans-unit';\n  var _CR = function (ws) {\n      if (ws === void 0) { ws = 0; }\n      return new Text$2(\"\\n\" + new Array(ws).join(' '));\n  };\n  // http://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html\n  // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html\n  var Xliff = (function () {\n      function Xliff(_htmlParser, _interpolationConfig) {\n          this._htmlParser = _htmlParser;\n          this._interpolationConfig = _interpolationConfig;\n      }\n      Xliff.prototype.write = function (messageMap) {\n          var visitor = new _WriteVisitor();\n          var transUnits = [];\n          Object.keys(messageMap).forEach(function (id) {\n              var message = messageMap[id];\n              var transUnit = new Tag(_UNIT_TAG, { id: id, datatype: 'html' });\n              transUnit.children.push(_CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), _CR(8), new Tag(_TARGET_TAG));\n              if (message.description) {\n                  transUnit.children.push(_CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$2(message.description)]));\n              }\n              if (message.meaning) {\n                  transUnit.children.push(_CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$2(message.meaning)]));\n              }\n              transUnit.children.push(_CR(6));\n              transUnits.push(_CR(6), transUnit);\n          });\n          var body = new Tag('body', {}, transUnits.concat([_CR(4)]));\n          var file = new Tag('file', { 'source-language': _SOURCE_LANG, datatype: 'plaintext', original: 'ng2.template' }, [_CR(4), body, _CR(2)]);\n          var xliff = new Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [_CR(2), file, _CR()]);\n          return serialize([new Declaration({ version: '1.0', encoding: 'UTF-8' }), _CR(), xliff]);\n      };\n      Xliff.prototype.load = function (content, url, messageBundle) {\n          var _this = this;\n          // Parse the xtb file into xml nodes\n          var result = new XmlParser().parse(content, url);\n          if (result.errors.length) {\n              throw new Error(\"xtb parse errors:\\n\" + result.errors.join('\\n'));\n          }\n          // Replace the placeholders, messages are now string\n          var _a = new _LoadVisitor().parse(result.rootNodes, messageBundle), messages = _a.messages, errors = _a.errors;\n          if (errors.length) {\n              throw new Error(\"xtb parse errors:\\n\" + errors.join('\\n'));\n          }\n          // Convert the string messages to html ast\n          // TODO(vicb): map error message back to the original message in xtb\n          var messageMap = {};\n          var parseErrors = [];\n          Object.keys(messages).forEach(function (id) {\n              var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);\n              parseErrors.push.apply(parseErrors, res.errors);\n              messageMap[id] = res.rootNodes;\n          });\n          if (parseErrors.length) {\n              throw new Error(\"xtb parse errors:\\n\" + parseErrors.join('\\n'));\n          }\n          return messageMap;\n      };\n      return Xliff;\n  }());\n  var _WriteVisitor = (function () {\n      function _WriteVisitor() {\n      }\n      _WriteVisitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };\n      _WriteVisitor.prototype.visitContainer = function (container, context) {\n          var _this = this;\n          var nodes = [];\n          container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });\n          return nodes;\n      };\n      _WriteVisitor.prototype.visitIcu = function (icu, context) {\n          if (this._isInIcu) {\n              // nested ICU is not supported\n              throw new Error('xliff does not support nested ICU messages');\n          }\n          this._isInIcu = true;\n          // TODO(vicb): support ICU messages\n          // https://lists.oasis-open.org/archives/xliff/201201/msg00028.html\n          // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-po/xliff-profile-po-1.2-cd02.html\n          var nodes = [];\n          this._isInIcu = false;\n          return nodes;\n      };\n      _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) {\n          var startTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ph.tag });\n          if (ph.isVoid) {\n              // void tags have no children nor closing tags\n              return [startTagPh];\n          }\n          var closeTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype: ph.tag });\n          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);\n      };\n      _WriteVisitor.prototype.visitPlaceholder = function (ph, context) {\n          return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];\n      };\n      _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) {\n          return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];\n      };\n      _WriteVisitor.prototype.serialize = function (nodes) {\n          var _this = this;\n          this._isInIcu = false;\n          return ListWrapper.flatten(nodes.map(function (node) { return node.visit(_this); }));\n      };\n      return _WriteVisitor;\n  }());\n  // TODO(vicb): add error management (structure)\n  // TODO(vicb): factorize (xtb) ?\n  var _LoadVisitor = (function () {\n      function _LoadVisitor() {\n      }\n      _LoadVisitor.prototype.parse = function (nodes, messageBundle) {\n          var _this = this;\n          this._messageNodes = [];\n          this._translatedMessages = {};\n          this._msgId = '';\n          this._target = [];\n          this._errors = [];\n          // Find all messages\n          visitAll(this, nodes, null);\n          var messageMap = messageBundle.getMessageMap();\n          var placeholders = extractPlaceholders(messageBundle);\n          var placeholderToIds = extractPlaceholderToIds(messageBundle);\n          this._messageNodes\n              .filter(function (message) {\n              // Remove any messages that is not present in the source message bundle.\n              return messageMap.hasOwnProperty(message[0]);\n          })\n              .sort(function (a, b) {\n              // Because there could be no ICU placeholders inside an ICU message,\n              // we do not need to take into account the `placeholderToMsgIds` of the referenced\n              // messages, those would always be empty\n              // TODO(vicb): overkill - create 2 buckets and [...woDeps, ...wDeps].process()\n              if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {\n                  return -1;\n              }\n              if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {\n                  return 1;\n              }\n              return 0;\n          })\n              .forEach(function (message) {\n              var id = message[0];\n              _this._placeholders = placeholders[id] || {};\n              _this._placeholderToIds = placeholderToIds[id] || {};\n              // TODO(vicb): make sure there is no `_TRANSLATIONS_TAG` nor `_TRANSLATION_TAG`\n              _this._translatedMessages[id] = visitAll(_this, message[1]).join('');\n          });\n          return { messages: this._translatedMessages, errors: this._errors };\n      };\n      _LoadVisitor.prototype.visitElement = function (element, context) {\n          switch (element.name) {\n              case _UNIT_TAG:\n                  this._target = null;\n                  var msgId = element.attrs.find(function (attr) { return attr.name === 'id'; });\n                  if (!msgId) {\n                      this._addError(element, \"<\" + _UNIT_TAG + \"> misses the \\\"id\\\" attribute\");\n                  }\n                  else {\n                      this._msgId = msgId.value;\n                  }\n                  visitAll(this, element.children, null);\n                  if (this._msgId !== null) {\n                      this._messageNodes.push([this._msgId, this._target]);\n                  }\n                  break;\n              case _SOURCE_TAG:\n                  // ignore source message\n                  break;\n              case _TARGET_TAG:\n                  this._target = element.children;\n                  break;\n              case _PLACEHOLDER_TAG:\n                  var idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });\n                  if (!idAttr) {\n                      this._addError(element, \"<\" + _PLACEHOLDER_TAG + \"> misses the \\\"id\\\" attribute\");\n                  }\n                  else {\n                      var id = idAttr.value;\n                      if (this._placeholders.hasOwnProperty(id)) {\n                          return this._placeholders[id];\n                      }\n                      if (this._placeholderToIds.hasOwnProperty(id) &&\n                          this._translatedMessages.hasOwnProperty(this._placeholderToIds[id])) {\n                          return this._translatedMessages[this._placeholderToIds[id]];\n                      }\n                      // TODO(vicb): better error message for when\n                      // !this._translatedMessages.hasOwnProperty(this._placeholderToIds[id])\n                      this._addError(element, \"The placeholder \\\"\" + id + \"\\\" does not exists in the source message\");\n                  }\n                  break;\n              default:\n                  visitAll(this, element.children, null);\n          }\n      };\n      _LoadVisitor.prototype.visitAttribute = function (attribute, context) {\n          throw new Error('unreachable code');\n      };\n      _LoadVisitor.prototype.visitText = function (text, context) { return text.value; };\n      _LoadVisitor.prototype.visitComment = function (comment, context) { return ''; };\n      _LoadVisitor.prototype.visitExpansion = function (expansion, context) {\n          throw new Error('unreachable code');\n      };\n      _LoadVisitor.prototype.visitExpansionCase = function (expansionCase, context) {\n          throw new Error('unreachable code');\n      };\n      _LoadVisitor.prototype._addError = function (node, message) {\n          this._errors.push(new I18nError(node.sourceSpan, message));\n      };\n      return _LoadVisitor;\n  }());\n\n  var _MESSAGES_TAG = 'messagebundle';\n  var _MESSAGE_TAG = 'msg';\n  var _PLACEHOLDER_TAG$1 = 'ph';\n  var _EXEMPLE_TAG = 'ex';\n  var _DOCTYPE = \"<!ELEMENT messagebundle (msg)*>\\n<!ATTLIST messagebundle class CDATA #IMPLIED>\\n\\n<!ELEMENT msg (#PCDATA|ph|source)*>\\n<!ATTLIST msg id CDATA #IMPLIED>\\n<!ATTLIST msg seq CDATA #IMPLIED>\\n<!ATTLIST msg name CDATA #IMPLIED>\\n<!ATTLIST msg desc CDATA #IMPLIED>\\n<!ATTLIST msg meaning CDATA #IMPLIED>\\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\\n<!ATTLIST msg xml:space (default|preserve) \\\"default\\\">\\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\\n\\n<!ELEMENT source (#PCDATA)>\\n\\n<!ELEMENT ph (#PCDATA|ex)*>\\n<!ATTLIST ph name CDATA #REQUIRED>\\n\\n<!ELEMENT ex (#PCDATA)>\";\n  var Xmb = (function () {\n      function Xmb() {\n      }\n      Xmb.prototype.write = function (messageMap) {\n          var visitor = new _Visitor$2();\n          var rootNode = new Tag(_MESSAGES_TAG);\n          rootNode.children.push(new Text$2('\\n'));\n          Object.keys(messageMap).forEach(function (id) {\n              var message = messageMap[id];\n              var attrs = { id: id };\n              if (message.description) {\n                  attrs['desc'] = message.description;\n              }\n              if (message.meaning) {\n                  attrs['meaning'] = message.meaning;\n              }\n              rootNode.children.push(new Text$2('  '), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)), new Text$2('\\n'));\n          });\n          return serialize([\n              new Declaration({ version: '1.0', encoding: 'UTF-8' }),\n              new Text$2('\\n'),\n              new Doctype(_MESSAGES_TAG, _DOCTYPE),\n              new Text$2('\\n'),\n              rootNode,\n          ]);\n      };\n      Xmb.prototype.load = function (content, url, messageBundle) {\n          throw new Error('Unsupported');\n      };\n      return Xmb;\n  }());\n  var _Visitor$2 = (function () {\n      function _Visitor() {\n      }\n      _Visitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };\n      _Visitor.prototype.visitContainer = function (container, context) {\n          var _this = this;\n          var nodes = [];\n          container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });\n          return nodes;\n      };\n      _Visitor.prototype.visitIcu = function (icu, context) {\n          var _this = this;\n          var nodes = [new Text$2(\"{\" + icu.expression + \", \" + icu.type + \", \")];\n          Object.keys(icu.cases).forEach(function (c) {\n              nodes.push.apply(nodes, [new Text$2(c + \" {\")].concat(icu.cases[c].visit(_this), [new Text$2(\"} \")]));\n          });\n          nodes.push(new Text$2(\"}\"));\n          return nodes;\n      };\n      _Visitor.prototype.visitTagPlaceholder = function (ph, context) {\n          var startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2(\"<\" + ph.tag + \">\")]);\n          var startTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.startName }, [startEx]);\n          if (ph.isVoid) {\n              // void tags have no children nor closing tags\n              return [startTagPh];\n          }\n          var closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2(\"</\" + ph.tag + \">\")]);\n          var closeTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.closeName }, [closeEx]);\n          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);\n      };\n      _Visitor.prototype.visitPlaceholder = function (ph, context) {\n          return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];\n      };\n      _Visitor.prototype.visitIcuPlaceholder = function (ph, context) {\n          return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];\n      };\n      _Visitor.prototype.serialize = function (nodes) {\n          var _this = this;\n          return ListWrapper.flatten(nodes.map(function (node) { return node.visit(_this); }));\n      };\n      return _Visitor;\n  }());\n\n  var _TRANSLATIONS_TAG = 'translationbundle';\n  var _TRANSLATION_TAG = 'translation';\n  var _PLACEHOLDER_TAG$2 = 'ph';\n  var Xtb = (function () {\n      function Xtb(_htmlParser, _interpolationConfig) {\n          this._htmlParser = _htmlParser;\n          this._interpolationConfig = _interpolationConfig;\n      }\n      Xtb.prototype.write = function (messageMap) { throw new Error('Unsupported'); };\n      Xtb.prototype.load = function (content, url, messageBundle) {\n          var _this = this;\n          // Parse the xtb file into xml nodes\n          var result = new XmlParser().parse(content, url);\n          if (result.errors.length) {\n              throw new Error(\"xtb parse errors:\\n\" + result.errors.join('\\n'));\n          }\n          // Replace the placeholders, messages are now string\n          var _a = new _Visitor$3().parse(result.rootNodes, messageBundle), messages = _a.messages, errors = _a.errors;\n          if (errors.length) {\n              throw new Error(\"xtb parse errors:\\n\" + errors.join('\\n'));\n          }\n          // Convert the string messages to html ast\n          // TODO(vicb): map error message back to the original message in xtb\n          var messageMap = {};\n          var parseErrors = [];\n          Object.keys(messages).forEach(function (id) {\n              var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);\n              parseErrors.push.apply(parseErrors, res.errors);\n              messageMap[id] = res.rootNodes;\n          });\n          if (parseErrors.length) {\n              throw new Error(\"xtb parse errors:\\n\" + parseErrors.join('\\n'));\n          }\n          return messageMap;\n      };\n      return Xtb;\n  }());\n  var _Visitor$3 = (function () {\n      function _Visitor() {\n      }\n      _Visitor.prototype.parse = function (nodes, messageBundle) {\n          var _this = this;\n          this._messageNodes = [];\n          this._translatedMessages = {};\n          this._bundleDepth = 0;\n          this._translationDepth = 0;\n          this._errors = [];\n          // Find all messages\n          visitAll(this, nodes, null);\n          var messageMap = messageBundle.getMessageMap();\n          var placeholders = extractPlaceholders(messageBundle);\n          var placeholderToIds = extractPlaceholderToIds(messageBundle);\n          this._messageNodes\n              .filter(function (message) {\n              // Remove any messages that is not present in the source message bundle.\n              return messageMap.hasOwnProperty(message[0]);\n          })\n              .sort(function (a, b) {\n              // Because there could be no ICU placeholders inside an ICU message,\n              // we do not need to take into account the `placeholderToMsgIds` of the referenced\n              // messages, those would always be empty\n              // TODO(vicb): overkill - create 2 buckets and [...woDeps, ...wDeps].process()\n              if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {\n                  return -1;\n              }\n              if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {\n                  return 1;\n              }\n              return 0;\n          })\n              .forEach(function (message) {\n              var id = message[0];\n              _this._placeholders = placeholders[id] || {};\n              _this._placeholderToIds = placeholderToIds[id] || {};\n              // TODO(vicb): make sure there is no `_TRANSLATIONS_TAG` nor `_TRANSLATION_TAG`\n              _this._translatedMessages[id] = visitAll(_this, message[1]).join('');\n          });\n          return { messages: this._translatedMessages, errors: this._errors };\n      };\n      _Visitor.prototype.visitElement = function (element, context) {\n          switch (element.name) {\n              case _TRANSLATIONS_TAG:\n                  this._bundleDepth++;\n                  if (this._bundleDepth > 1) {\n                      this._addError(element, \"<\" + _TRANSLATIONS_TAG + \"> elements can not be nested\");\n                  }\n                  visitAll(this, element.children, null);\n                  this._bundleDepth--;\n                  break;\n              case _TRANSLATION_TAG:\n                  this._translationDepth++;\n                  if (this._translationDepth > 1) {\n                      this._addError(element, \"<\" + _TRANSLATION_TAG + \"> elements can not be nested\");\n                  }\n                  var idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });\n                  if (!idAttr) {\n                      this._addError(element, \"<\" + _TRANSLATION_TAG + \"> misses the \\\"id\\\" attribute\");\n                  }\n                  else {\n                      // ICU placeholders are reference to other messages.\n                      // The referenced message might not have been decoded yet.\n                      // We need to have all messages available to make sure deps are decoded first.\n                      // TODO(vicb): report an error on duplicate id\n                      this._messageNodes.push([idAttr.value, element.children]);\n                  }\n                  this._translationDepth--;\n                  break;\n              case _PLACEHOLDER_TAG$2:\n                  var nameAttr = element.attrs.find(function (attr) { return attr.name === 'name'; });\n                  if (!nameAttr) {\n                      this._addError(element, \"<\" + _PLACEHOLDER_TAG$2 + \"> misses the \\\"name\\\" attribute\");\n                  }\n                  else {\n                      var name_1 = nameAttr.value;\n                      if (this._placeholders.hasOwnProperty(name_1)) {\n                          return this._placeholders[name_1];\n                      }\n                      if (this._placeholderToIds.hasOwnProperty(name_1) &&\n                          this._translatedMessages.hasOwnProperty(this._placeholderToIds[name_1])) {\n                          return this._translatedMessages[this._placeholderToIds[name_1]];\n                      }\n                      // TODO(vicb): better error message for when\n                      // !this._translatedMessages.hasOwnProperty(this._placeholderToIds[name])\n                      this._addError(element, \"The placeholder \\\"\" + name_1 + \"\\\" does not exists in the source message\");\n                  }\n                  break;\n              default:\n                  this._addError(element, 'Unexpected tag');\n          }\n      };\n      _Visitor.prototype.visitAttribute = function (attribute, context) {\n          throw new Error('unreachable code');\n      };\n      _Visitor.prototype.visitText = function (text, context) { return text.value; };\n      _Visitor.prototype.visitComment = function (comment, context) { return ''; };\n      _Visitor.prototype.visitExpansion = function (expansion, context) {\n          var _this = this;\n          var strCases = expansion.cases.map(function (c) { return c.visit(_this, null); });\n          return \"{\" + expansion.switchValue + \", \" + expansion.type + \", strCases.join(' ')}\";\n      };\n      _Visitor.prototype.visitExpansionCase = function (expansionCase, context) {\n          return expansionCase.value + \" {\" + visitAll(this, expansionCase.expression, null) + \"}\";\n      };\n      _Visitor.prototype._addError = function (node, message) {\n          this._errors.push(new I18nError(node.sourceSpan, message));\n      };\n      return _Visitor;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  /**\n   * A container for translated messages\n   */\n  var TranslationBundle = (function () {\n      function TranslationBundle(_messageMap) {\n          if (_messageMap === void 0) { _messageMap = {}; }\n          this._messageMap = _messageMap;\n      }\n      TranslationBundle.load = function (content, url, messageBundle, serializer) {\n          return new TranslationBundle(serializer.load(content, url, messageBundle));\n      };\n      TranslationBundle.prototype.get = function (id) { return this._messageMap[id]; };\n      TranslationBundle.prototype.has = function (id) { return id in this._messageMap; };\n      return TranslationBundle;\n  }());\n\n  var I18NHtmlParser = (function () {\n      // TODO(vicb): transB.load() should not need a msgB & add transB.resolve(msgB,\n      // interpolationConfig)\n      // TODO(vicb): remove the interpolationConfig from the Xtb serializer\n      function I18NHtmlParser(_htmlParser, _translations, _translationsFormat) {\n          this._htmlParser = _htmlParser;\n          this._translations = _translations;\n          this._translationsFormat = _translationsFormat;\n      }\n      I18NHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {\n          if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          var parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);\n          if (!this._translations || this._translations === '') {\n              // Do not enable i18n when no translation bundle is provided\n              return parseResult;\n          }\n          // TODO(vicb): add support for implicit tags / attributes\n          var messageBundle = new MessageBundle(this._htmlParser, [], {});\n          var errors = messageBundle.updateFromTemplate(source, url, interpolationConfig);\n          if (errors && errors.length) {\n              return new ParseTreeResult(parseResult.rootNodes, parseResult.errors.concat(errors));\n          }\n          var serializer = this._createSerializer(interpolationConfig);\n          var translationBundle = TranslationBundle.load(this._translations, url, messageBundle, serializer);\n          return mergeTranslations(parseResult.rootNodes, translationBundle, interpolationConfig, [], {});\n      };\n      I18NHtmlParser.prototype._createSerializer = function (interpolationConfig) {\n          var format = (this._translationsFormat || 'xlf').toLowerCase();\n          switch (format) {\n              case 'xmb':\n                  return new Xmb();\n              case 'xtb':\n                  return new Xtb(this._htmlParser, interpolationConfig);\n              case 'xliff':\n              case 'xlf':\n              default:\n                  return new Xliff(this._htmlParser, interpolationConfig);\n          }\n      };\n      return I18NHtmlParser;\n  }());\n\n  var isDefaultChangeDetectionStrategy = _angular_core.__core_private__.isDefaultChangeDetectionStrategy;\n  var ChangeDetectorStatus = _angular_core.__core_private__.ChangeDetectorStatus;\n  var LifecycleHooks = _angular_core.__core_private__.LifecycleHooks;\n  var LIFECYCLE_HOOKS_VALUES = _angular_core.__core_private__.LIFECYCLE_HOOKS_VALUES;\n  var ReflectorReader = _angular_core.__core_private__.ReflectorReader;\n  var AppElement = _angular_core.__core_private__.AppElement;\n  var CodegenComponentFactoryResolver = _angular_core.__core_private__.CodegenComponentFactoryResolver;\n  var AppView = _angular_core.__core_private__.AppView;\n  var DebugAppView = _angular_core.__core_private__.DebugAppView;\n  var NgModuleInjector = _angular_core.__core_private__.NgModuleInjector;\n  var ViewType = _angular_core.__core_private__.ViewType;\n  var MAX_INTERPOLATION_VALUES = _angular_core.__core_private__.MAX_INTERPOLATION_VALUES;\n  var checkBinding = _angular_core.__core_private__.checkBinding;\n  var flattenNestedViewRenderNodes = _angular_core.__core_private__.flattenNestedViewRenderNodes;\n  var interpolate = _angular_core.__core_private__.interpolate;\n  var ViewUtils = _angular_core.__core_private__.ViewUtils;\n  var DebugContext = _angular_core.__core_private__.DebugContext;\n  var StaticNodeDebugInfo = _angular_core.__core_private__.StaticNodeDebugInfo;\n  var devModeEqual = _angular_core.__core_private__.devModeEqual;\n  var UNINITIALIZED = _angular_core.__core_private__.UNINITIALIZED;\n  var ValueUnwrapper = _angular_core.__core_private__.ValueUnwrapper;\n  var TemplateRef_ = _angular_core.__core_private__.TemplateRef_;\n  var EMPTY_ARRAY = _angular_core.__core_private__.EMPTY_ARRAY;\n  var EMPTY_MAP = _angular_core.__core_private__.EMPTY_MAP;\n  var pureProxy1 = _angular_core.__core_private__.pureProxy1;\n  var pureProxy2 = _angular_core.__core_private__.pureProxy2;\n  var pureProxy3 = _angular_core.__core_private__.pureProxy3;\n  var pureProxy4 = _angular_core.__core_private__.pureProxy4;\n  var pureProxy5 = _angular_core.__core_private__.pureProxy5;\n  var pureProxy6 = _angular_core.__core_private__.pureProxy6;\n  var pureProxy7 = _angular_core.__core_private__.pureProxy7;\n  var pureProxy8 = _angular_core.__core_private__.pureProxy8;\n  var pureProxy9 = _angular_core.__core_private__.pureProxy9;\n  var pureProxy10 = _angular_core.__core_private__.pureProxy10;\n  var castByValue = _angular_core.__core_private__.castByValue;\n  var Console = _angular_core.__core_private__.Console;\n  var reflector = _angular_core.__core_private__.reflector;\n  var Reflector = _angular_core.__core_private__.Reflector;\n  var ReflectionCapabilities = _angular_core.__core_private__.ReflectionCapabilities;\n  var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;\n  var AnimationSequencePlayer = _angular_core.__core_private__.AnimationSequencePlayer;\n  var AnimationGroupPlayer = _angular_core.__core_private__.AnimationGroupPlayer;\n  var AnimationKeyframe = _angular_core.__core_private__.AnimationKeyframe;\n  var AnimationStyles = _angular_core.__core_private__.AnimationStyles;\n  var AnimationOutput = _angular_core.__core_private__.AnimationOutput;\n  var ANY_STATE = _angular_core.__core_private__.ANY_STATE;\n  var DEFAULT_STATE = _angular_core.__core_private__.DEFAULT_STATE;\n  var EMPTY_ANIMATION_STATE = _angular_core.__core_private__.EMPTY_STATE;\n  var FILL_STYLE_FLAG = _angular_core.__core_private__.FILL_STYLE_FLAG;\n  var prepareFinalAnimationStyles = _angular_core.__core_private__.prepareFinalAnimationStyles;\n  var balanceAnimationKeyframes = _angular_core.__core_private__.balanceAnimationKeyframes;\n  var clearStyles = _angular_core.__core_private__.clearStyles;\n  var collectAndResolveStyles = _angular_core.__core_private__.collectAndResolveStyles;\n  var renderStyles = _angular_core.__core_private__.renderStyles;\n  var ComponentStillLoadingError = _angular_core.__core_private__.ComponentStillLoadingError;\n\n  var APP_VIEW_MODULE_URL = assetUrl('core', 'linker/view');\n  var VIEW_UTILS_MODULE_URL = assetUrl('core', 'linker/view_utils');\n  var CD_MODULE_URL = assetUrl('core', 'change_detection/change_detection');\n  var ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl('core', 'animation/animation_style_util');\n  var Identifiers = (function () {\n      function Identifiers() {\n      }\n      Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {\n          name: 'ANALYZE_FOR_ENTRY_COMPONENTS',\n          moduleUrl: assetUrl('core', 'metadata/di'),\n          runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS\n      };\n      Identifiers.ViewUtils = {\n          name: 'ViewUtils',\n          moduleUrl: assetUrl('core', 'linker/view_utils'),\n          runtime: ViewUtils\n      };\n      Identifiers.AppView = { name: 'AppView', moduleUrl: APP_VIEW_MODULE_URL, runtime: AppView };\n      Identifiers.DebugAppView = {\n          name: 'DebugAppView',\n          moduleUrl: APP_VIEW_MODULE_URL,\n          runtime: DebugAppView\n      };\n      Identifiers.AppElement = {\n          name: 'AppElement',\n          moduleUrl: assetUrl('core', 'linker/element'),\n          runtime: AppElement\n      };\n      Identifiers.ElementRef = {\n          name: 'ElementRef',\n          moduleUrl: assetUrl('core', 'linker/element_ref'),\n          runtime: _angular_core.ElementRef\n      };\n      Identifiers.ViewContainerRef = {\n          name: 'ViewContainerRef',\n          moduleUrl: assetUrl('core', 'linker/view_container_ref'),\n          runtime: _angular_core.ViewContainerRef\n      };\n      Identifiers.ChangeDetectorRef = {\n          name: 'ChangeDetectorRef',\n          moduleUrl: assetUrl('core', 'change_detection/change_detector_ref'),\n          runtime: _angular_core.ChangeDetectorRef\n      };\n      Identifiers.RenderComponentType = {\n          name: 'RenderComponentType',\n          moduleUrl: assetUrl('core', 'render/api'),\n          runtime: _angular_core.RenderComponentType\n      };\n      Identifiers.QueryList = {\n          name: 'QueryList',\n          moduleUrl: assetUrl('core', 'linker/query_list'),\n          runtime: _angular_core.QueryList\n      };\n      Identifiers.TemplateRef = {\n          name: 'TemplateRef',\n          moduleUrl: assetUrl('core', 'linker/template_ref'),\n          runtime: _angular_core.TemplateRef\n      };\n      Identifiers.TemplateRef_ = {\n          name: 'TemplateRef_',\n          moduleUrl: assetUrl('core', 'linker/template_ref'),\n          runtime: TemplateRef_\n      };\n      Identifiers.CodegenComponentFactoryResolver = {\n          name: 'CodegenComponentFactoryResolver',\n          moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),\n          runtime: CodegenComponentFactoryResolver\n      };\n      Identifiers.ComponentFactoryResolver = {\n          name: 'ComponentFactoryResolver',\n          moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),\n          runtime: _angular_core.ComponentFactoryResolver\n      };\n      Identifiers.ComponentFactory = {\n          name: 'ComponentFactory',\n          runtime: _angular_core.ComponentFactory,\n          moduleUrl: assetUrl('core', 'linker/component_factory')\n      };\n      Identifiers.NgModuleFactory = {\n          name: 'NgModuleFactory',\n          runtime: _angular_core.NgModuleFactory,\n          moduleUrl: assetUrl('core', 'linker/ng_module_factory')\n      };\n      Identifiers.NgModuleInjector = {\n          name: 'NgModuleInjector',\n          runtime: NgModuleInjector,\n          moduleUrl: assetUrl('core', 'linker/ng_module_factory')\n      };\n      Identifiers.ValueUnwrapper = { name: 'ValueUnwrapper', moduleUrl: CD_MODULE_URL, runtime: ValueUnwrapper };\n      Identifiers.Injector = {\n          name: 'Injector',\n          moduleUrl: assetUrl('core', 'di/injector'),\n          runtime: _angular_core.Injector\n      };\n      Identifiers.ViewEncapsulation = {\n          name: 'ViewEncapsulation',\n          moduleUrl: assetUrl('core', 'metadata/view'),\n          runtime: _angular_core.ViewEncapsulation\n      };\n      Identifiers.ViewType = {\n          name: 'ViewType',\n          moduleUrl: assetUrl('core', 'linker/view_type'),\n          runtime: ViewType\n      };\n      Identifiers.ChangeDetectionStrategy = {\n          name: 'ChangeDetectionStrategy',\n          moduleUrl: CD_MODULE_URL,\n          runtime: _angular_core.ChangeDetectionStrategy\n      };\n      Identifiers.StaticNodeDebugInfo = {\n          name: 'StaticNodeDebugInfo',\n          moduleUrl: assetUrl('core', 'linker/debug_context'),\n          runtime: StaticNodeDebugInfo\n      };\n      Identifiers.DebugContext = {\n          name: 'DebugContext',\n          moduleUrl: assetUrl('core', 'linker/debug_context'),\n          runtime: DebugContext\n      };\n      Identifiers.Renderer = {\n          name: 'Renderer',\n          moduleUrl: assetUrl('core', 'render/api'),\n          runtime: _angular_core.Renderer\n      };\n      Identifiers.SimpleChange = { name: 'SimpleChange', moduleUrl: CD_MODULE_URL, runtime: _angular_core.SimpleChange };\n      Identifiers.UNINITIALIZED = { name: 'UNINITIALIZED', moduleUrl: CD_MODULE_URL, runtime: UNINITIALIZED };\n      Identifiers.ChangeDetectorStatus = {\n          name: 'ChangeDetectorStatus',\n          moduleUrl: CD_MODULE_URL,\n          runtime: ChangeDetectorStatus\n      };\n      Identifiers.checkBinding = {\n          name: 'checkBinding',\n          moduleUrl: VIEW_UTILS_MODULE_URL,\n          runtime: checkBinding\n      };\n      Identifiers.flattenNestedViewRenderNodes = {\n          name: 'flattenNestedViewRenderNodes',\n          moduleUrl: VIEW_UTILS_MODULE_URL,\n          runtime: flattenNestedViewRenderNodes\n      };\n      Identifiers.devModeEqual = { name: 'devModeEqual', moduleUrl: CD_MODULE_URL, runtime: devModeEqual };\n      Identifiers.interpolate = {\n          name: 'interpolate',\n          moduleUrl: VIEW_UTILS_MODULE_URL,\n          runtime: interpolate\n      };\n      Identifiers.castByValue = {\n          name: 'castByValue',\n          moduleUrl: VIEW_UTILS_MODULE_URL,\n          runtime: castByValue\n      };\n      Identifiers.EMPTY_ARRAY = {\n          name: 'EMPTY_ARRAY',\n          moduleUrl: VIEW_UTILS_MODULE_URL,\n          runtime: EMPTY_ARRAY\n      };\n      Identifiers.EMPTY_MAP = { name: 'EMPTY_MAP', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: EMPTY_MAP };\n      Identifiers.pureProxies = [\n          null,\n          { name: 'pureProxy1', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy1 },\n          { name: 'pureProxy2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy2 },\n          { name: 'pureProxy3', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy3 },\n          { name: 'pureProxy4', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy4 },\n          { name: 'pureProxy5', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy5 },\n          { name: 'pureProxy6', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy6 },\n          { name: 'pureProxy7', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy7 },\n          { name: 'pureProxy8', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy8 },\n          { name: 'pureProxy9', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy9 },\n          { name: 'pureProxy10', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy10 },\n      ];\n      Identifiers.SecurityContext = {\n          name: 'SecurityContext',\n          moduleUrl: assetUrl('core', 'security'),\n          runtime: _angular_core.SecurityContext,\n      };\n      Identifiers.AnimationKeyframe = {\n          name: 'AnimationKeyframe',\n          moduleUrl: assetUrl('core', 'animation/animation_keyframe'),\n          runtime: AnimationKeyframe\n      };\n      Identifiers.AnimationStyles = {\n          name: 'AnimationStyles',\n          moduleUrl: assetUrl('core', 'animation/animation_styles'),\n          runtime: AnimationStyles\n      };\n      Identifiers.NoOpAnimationPlayer = {\n          name: 'NoOpAnimationPlayer',\n          moduleUrl: assetUrl('core', 'animation/animation_player'),\n          runtime: NoOpAnimationPlayer\n      };\n      Identifiers.AnimationGroupPlayer = {\n          name: 'AnimationGroupPlayer',\n          moduleUrl: assetUrl('core', 'animation/animation_group_player'),\n          runtime: AnimationGroupPlayer\n      };\n      Identifiers.AnimationSequencePlayer = {\n          name: 'AnimationSequencePlayer',\n          moduleUrl: assetUrl('core', 'animation/animation_sequence_player'),\n          runtime: AnimationSequencePlayer\n      };\n      Identifiers.prepareFinalAnimationStyles = {\n          name: 'prepareFinalAnimationStyles',\n          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,\n          runtime: prepareFinalAnimationStyles\n      };\n      Identifiers.balanceAnimationKeyframes = {\n          name: 'balanceAnimationKeyframes',\n          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,\n          runtime: balanceAnimationKeyframes\n      };\n      Identifiers.clearStyles = {\n          name: 'clearStyles',\n          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,\n          runtime: clearStyles\n      };\n      Identifiers.renderStyles = {\n          name: 'renderStyles',\n          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,\n          runtime: renderStyles\n      };\n      Identifiers.collectAndResolveStyles = {\n          name: 'collectAndResolveStyles',\n          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,\n          runtime: collectAndResolveStyles\n      };\n      Identifiers.LOCALE_ID = {\n          name: 'LOCALE_ID',\n          moduleUrl: assetUrl('core', 'i18n/tokens'),\n          runtime: _angular_core.LOCALE_ID\n      };\n      Identifiers.TRANSLATIONS_FORMAT = {\n          name: 'TRANSLATIONS_FORMAT',\n          moduleUrl: assetUrl('core', 'i18n/tokens'),\n          runtime: _angular_core.TRANSLATIONS_FORMAT\n      };\n      Identifiers.AnimationOutput = {\n          name: 'AnimationOutput',\n          moduleUrl: assetUrl('core', 'animation/animation_output'),\n          runtime: AnimationOutput\n      };\n      return Identifiers;\n  }());\n  function resolveIdentifier(identifier) {\n      return new CompileIdentifierMetadata({\n          name: identifier.name,\n          moduleUrl: identifier.moduleUrl,\n          reference: reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime)\n      });\n  }\n  function identifierToken(identifier) {\n      return new CompileTokenMetadata({ identifier: identifier });\n  }\n  function resolveIdentifierToken(identifier) {\n      return identifierToken(resolveIdentifier(identifier));\n  }\n  function resolveEnumIdentifier(enumType, name) {\n      var resolvedEnum = reflector.resolveEnum(enumType.reference, name);\n      return new CompileIdentifierMetadata({ name: enumType.name + \".\" + name, moduleUrl: enumType.moduleUrl, reference: resolvedEnum });\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$8 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var HtmlParser = (function (_super) {\n      __extends$8(HtmlParser, _super);\n      function HtmlParser() {\n          _super.call(this, getHtmlTagDefinition);\n      }\n      HtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {\n          if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n          return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);\n      };\n      HtmlParser.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      HtmlParser.ctorParameters = [];\n      return HtmlParser;\n  }(Parser$1));\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$9 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  // http://cldr.unicode.org/index/cldr-spec/plural-rules\n  var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];\n  /**\n   * Expands special forms into elements.\n   *\n   * For example,\n   *\n   * ```\n   * { messages.length, plural,\n   *   =0 {zero}\n   *   =1 {one}\n   *   other {more than one}\n   * }\n   * ```\n   *\n   * will be expanded into\n   *\n   * ```\n   * <ng-container [ngPlural]=\"messages.length\">\n   *   <template ngPluralCase=\"=0\">zero</ng-container>\n   *   <template ngPluralCase=\"=1\">one</ng-container>\n   *   <template ngPluralCase=\"other\">more than one</ng-container>\n   * </ng-container>\n   * ```\n   */\n  function expandNodes(nodes) {\n      var expander = new _Expander();\n      return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);\n  }\n  var ExpansionResult = (function () {\n      function ExpansionResult(nodes, expanded, errors) {\n          this.nodes = nodes;\n          this.expanded = expanded;\n          this.errors = errors;\n      }\n      return ExpansionResult;\n  }());\n  var ExpansionError = (function (_super) {\n      __extends$9(ExpansionError, _super);\n      function ExpansionError(span, errorMsg) {\n          _super.call(this, span, errorMsg);\n      }\n      return ExpansionError;\n  }(ParseError));\n  /**\n   * Expand expansion forms (plural, select) to directives\n   *\n   * @internal\n   */\n  var _Expander = (function () {\n      function _Expander() {\n          this.isExpanded = false;\n          this.errors = [];\n      }\n      _Expander.prototype.visitElement = function (element, context) {\n          return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n      };\n      _Expander.prototype.visitAttribute = function (attribute, context) { return attribute; };\n      _Expander.prototype.visitText = function (text, context) { return text; };\n      _Expander.prototype.visitComment = function (comment, context) { return comment; };\n      _Expander.prototype.visitExpansion = function (icu, context) {\n          this.isExpanded = true;\n          return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :\n              _expandDefaultForm(icu, this.errors);\n      };\n      _Expander.prototype.visitExpansionCase = function (icuCase, context) {\n          throw new Error('Should not be reached');\n      };\n      return _Expander;\n  }());\n  function _expandPluralForm(ast, errors) {\n      var children = ast.cases.map(function (c) {\n          if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\\d+$/)) {\n              errors.push(new ExpansionError(c.valueSourceSpan, \"Plural cases should be \\\"=<number>\\\" or one of \" + PLURAL_CASES.join(\", \")));\n          }\n          var expansionResult = expandNodes(c.expression);\n          errors.push.apply(errors, expansionResult.errors);\n          return new Element(\"template\", [new Attribute('ngPluralCase', \"\" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n      });\n      var switchAttr = new Attribute('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);\n      return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n  }\n  function _expandDefaultForm(ast, errors) {\n      var children = ast.cases.map(function (c) {\n          var expansionResult = expandNodes(c.expression);\n          errors.push.apply(errors, expansionResult.errors);\n          return new Element(\"template\", [new Attribute('ngSwitchCase', \"\" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n      });\n      var switchAttr = new Attribute('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);\n      return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$10 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var ProviderError = (function (_super) {\n      __extends$10(ProviderError, _super);\n      function ProviderError(message, span) {\n          _super.call(this, span, message);\n      }\n      return ProviderError;\n  }(ParseError));\n  var ProviderViewContext = (function () {\n      function ProviderViewContext(component, sourceSpan) {\n          var _this = this;\n          this.component = component;\n          this.sourceSpan = sourceSpan;\n          this.errors = [];\n          this.viewQueries = _getViewQueries(component);\n          this.viewProviders = new Map();\n          _normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach(function (provider) {\n              if (isBlank(_this.viewProviders.get(provider.token.reference))) {\n                  _this.viewProviders.set(provider.token.reference, true);\n              }\n          });\n      }\n      return ProviderViewContext;\n  }());\n  var ProviderElementContext = (function () {\n      function ProviderElementContext(_viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {\n          var _this = this;\n          this._viewContext = _viewContext;\n          this._parent = _parent;\n          this._isViewRoot = _isViewRoot;\n          this._directiveAsts = _directiveAsts;\n          this._sourceSpan = _sourceSpan;\n          this._transformedProviders = new Map();\n          this._seenProviders = new Map();\n          this._hasViewContainer = false;\n          this._attrs = {};\n          attrs.forEach(function (attrAst) { return _this._attrs[attrAst.name] = attrAst.value; });\n          var directivesMeta = _directiveAsts.map(function (directiveAst) { return directiveAst.directive; });\n          this._allProviders =\n              _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, _viewContext.errors);\n          this._contentQueries = _getContentQueries(directivesMeta);\n          var queriedTokens = new Map();\n          MapWrapper.values(this._allProviders).forEach(function (provider) {\n              _this._addQueryReadsTo(provider.token, queriedTokens);\n          });\n          refs.forEach(function (refAst) {\n              _this._addQueryReadsTo(new CompileTokenMetadata({ value: refAst.name }), queriedTokens);\n          });\n          if (isPresent(queriedTokens.get(resolveIdentifierToken(Identifiers.ViewContainerRef).reference))) {\n              this._hasViewContainer = true;\n          }\n          // create the providers that we know are eager first\n          MapWrapper.values(this._allProviders).forEach(function (provider) {\n              var eager = provider.eager || isPresent(queriedTokens.get(provider.token.reference));\n              if (eager) {\n                  _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);\n              }\n          });\n      }\n      ProviderElementContext.prototype.afterElement = function () {\n          var _this = this;\n          // collect lazy providers\n          MapWrapper.values(this._allProviders).forEach(function (provider) {\n              _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);\n          });\n      };\n      Object.defineProperty(ProviderElementContext.prototype, \"transformProviders\", {\n          get: function () { return MapWrapper.values(this._transformedProviders); },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(ProviderElementContext.prototype, \"transformedDirectiveAsts\", {\n          get: function () {\n              var sortedProviderTypes = this.transformProviders.map(function (provider) { return provider.token.identifier; });\n              var sortedDirectives = ListWrapper.clone(this._directiveAsts);\n              ListWrapper.sort(sortedDirectives, function (dir1, dir2) { return sortedProviderTypes.indexOf(dir1.directive.type) -\n                  sortedProviderTypes.indexOf(dir2.directive.type); });\n              return sortedDirectives;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(ProviderElementContext.prototype, \"transformedHasViewContainer\", {\n          get: function () { return this._hasViewContainer; },\n          enumerable: true,\n          configurable: true\n      });\n      ProviderElementContext.prototype._addQueryReadsTo = function (token, queryReadTokens) {\n          this._getQueriesFor(token).forEach(function (query) {\n              var queryReadToken = isPresent(query.read) ? query.read : token;\n              if (isBlank(queryReadTokens.get(queryReadToken.reference))) {\n                  queryReadTokens.set(queryReadToken.reference, true);\n              }\n          });\n      };\n      ProviderElementContext.prototype._getQueriesFor = function (token) {\n          var result = [];\n          var currentEl = this;\n          var distance = 0;\n          var queries;\n          while (currentEl !== null) {\n              queries = currentEl._contentQueries.get(token.reference);\n              if (isPresent(queries)) {\n                  ListWrapper.addAll(result, queries.filter(function (query) { return query.descendants || distance <= 1; }));\n              }\n              if (currentEl._directiveAsts.length > 0) {\n                  distance++;\n              }\n              currentEl = currentEl._parent;\n          }\n          queries = this._viewContext.viewQueries.get(token.reference);\n          if (isPresent(queries)) {\n              ListWrapper.addAll(result, queries);\n          }\n          return result;\n      };\n      ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) {\n          var _this = this;\n          var resolvedProvider = this._allProviders.get(token.reference);\n          if (isBlank(resolvedProvider) ||\n              ((requestingProviderType === exports.ProviderAstType.Directive ||\n                  requestingProviderType === exports.ProviderAstType.PublicService) &&\n                  resolvedProvider.providerType === exports.ProviderAstType.PrivateService) ||\n              ((requestingProviderType === exports.ProviderAstType.PrivateService ||\n                  requestingProviderType === exports.ProviderAstType.PublicService) &&\n                  resolvedProvider.providerType === exports.ProviderAstType.Builtin)) {\n              return null;\n          }\n          var transformedProviderAst = this._transformedProviders.get(token.reference);\n          if (isPresent(transformedProviderAst)) {\n              return transformedProviderAst;\n          }\n          if (isPresent(this._seenProviders.get(token.reference))) {\n              this._viewContext.errors.push(new ProviderError(\"Cannot instantiate cyclic dependency! \" + token.name, this._sourceSpan));\n              return null;\n          }\n          this._seenProviders.set(token.reference, true);\n          var transformedProviders = resolvedProvider.providers.map(function (provider) {\n              var transformedUseValue = provider.useValue;\n              var transformedUseExisting = provider.useExisting;\n              var transformedDeps;\n              if (isPresent(provider.useExisting)) {\n                  var existingDiDep = _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({ token: provider.useExisting }), eager);\n                  if (isPresent(existingDiDep.token)) {\n                      transformedUseExisting = existingDiDep.token;\n                  }\n                  else {\n                      transformedUseExisting = null;\n                      transformedUseValue = existingDiDep.value;\n                  }\n              }\n              else if (isPresent(provider.useFactory)) {\n                  var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;\n                  transformedDeps =\n                      deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });\n              }\n              else if (isPresent(provider.useClass)) {\n                  var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;\n                  transformedDeps =\n                      deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });\n              }\n              return _transformProvider(provider, {\n                  useExisting: transformedUseExisting,\n                  useValue: transformedUseValue,\n                  deps: transformedDeps\n              });\n          });\n          transformedProviderAst =\n              _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });\n          this._transformedProviders.set(token.reference, transformedProviderAst);\n          return transformedProviderAst;\n      };\n      ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) {\n          if (eager === void 0) { eager = null; }\n          if (dep.isAttribute) {\n              var attrValue = this._attrs[dep.token.value];\n              return new CompileDiDependencyMetadata({ isValue: true, value: normalizeBlank(attrValue) });\n          }\n          if (isPresent(dep.query) || isPresent(dep.viewQuery)) {\n              return dep;\n          }\n          if (isPresent(dep.token)) {\n              // access builtints\n              if ((requestingProviderType === exports.ProviderAstType.Directive ||\n                  requestingProviderType === exports.ProviderAstType.Component)) {\n                  if (dep.token.reference === resolveIdentifierToken(Identifiers.Renderer).reference ||\n                      dep.token.reference === resolveIdentifierToken(Identifiers.ElementRef).reference ||\n                      dep.token.reference ===\n                          resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference ||\n                      dep.token.reference === resolveIdentifierToken(Identifiers.TemplateRef).reference) {\n                      return dep;\n                  }\n                  if (dep.token.reference ===\n                      resolveIdentifierToken(Identifiers.ViewContainerRef).reference) {\n                      this._hasViewContainer = true;\n                  }\n              }\n              // access the injector\n              if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference) {\n                  return dep;\n              }\n              // access providers\n              if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {\n                  return dep;\n              }\n          }\n          return null;\n      };\n      ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) {\n          if (eager === void 0) { eager = null; }\n          var currElement = this;\n          var currEager = eager;\n          var result = null;\n          if (!dep.isSkipSelf) {\n              result = this._getLocalDependency(requestingProviderType, dep, eager);\n          }\n          if (dep.isSelf) {\n              if (isBlank(result) && dep.isOptional) {\n                  result = new CompileDiDependencyMetadata({ isValue: true, value: null });\n              }\n          }\n          else {\n              // check parent elements\n              while (isBlank(result) && isPresent(currElement._parent)) {\n                  var prevElement = currElement;\n                  currElement = currElement._parent;\n                  if (prevElement._isViewRoot) {\n                      currEager = false;\n                  }\n                  result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, dep, currEager);\n              }\n              // check @Host restriction\n              if (isBlank(result)) {\n                  if (!dep.isHost || this._viewContext.component.type.isHost ||\n                      this._viewContext.component.type.reference === dep.token.reference ||\n                      isPresent(this._viewContext.viewProviders.get(dep.token.reference))) {\n                      result = dep;\n                  }\n                  else {\n                      result = dep.isOptional ?\n                          result = new CompileDiDependencyMetadata({ isValue: true, value: null }) :\n                          null;\n                  }\n              }\n          }\n          if (isBlank(result)) {\n              this._viewContext.errors.push(new ProviderError(\"No provider for \" + dep.token.name, this._sourceSpan));\n          }\n          return result;\n      };\n      return ProviderElementContext;\n  }());\n  var NgModuleProviderAnalyzer = (function () {\n      function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {\n          var _this = this;\n          this._transformedProviders = new Map();\n          this._seenProviders = new Map();\n          this._errors = [];\n          this._allProviders = new Map();\n          var ngModuleTypes = ngModule.transitiveModule.modules.map(function (moduleMeta) { return moduleMeta.type; });\n          ngModuleTypes.forEach(function (ngModuleType) {\n              var ngModuleProvider = new CompileProviderMetadata({ token: new CompileTokenMetadata({ identifier: ngModuleType }), useClass: ngModuleType });\n              _resolveProviders([ngModuleProvider], exports.ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);\n          });\n          _resolveProviders(_normalizeProviders(ngModule.transitiveModule.providers.concat(extraProviders), sourceSpan, this._errors), exports.ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);\n      }\n      NgModuleProviderAnalyzer.prototype.parse = function () {\n          var _this = this;\n          MapWrapper.values(this._allProviders).forEach(function (provider) {\n              _this._getOrCreateLocalProvider(provider.token, provider.eager);\n          });\n          if (this._errors.length > 0) {\n              var errorString = this._errors.join('\\n');\n              throw new Error(\"Provider parse errors:\\n\" + errorString);\n          }\n          return MapWrapper.values(this._transformedProviders);\n      };\n      NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function (token, eager) {\n          var _this = this;\n          var resolvedProvider = this._allProviders.get(token.reference);\n          if (isBlank(resolvedProvider)) {\n              return null;\n          }\n          var transformedProviderAst = this._transformedProviders.get(token.reference);\n          if (isPresent(transformedProviderAst)) {\n              return transformedProviderAst;\n          }\n          if (isPresent(this._seenProviders.get(token.reference))) {\n              this._errors.push(new ProviderError(\"Cannot instantiate cyclic dependency! \" + token.name, resolvedProvider.sourceSpan));\n              return null;\n          }\n          this._seenProviders.set(token.reference, true);\n          var transformedProviders = resolvedProvider.providers.map(function (provider) {\n              var transformedUseValue = provider.useValue;\n              var transformedUseExisting = provider.useExisting;\n              var transformedDeps;\n              if (isPresent(provider.useExisting)) {\n                  var existingDiDep = _this._getDependency(new CompileDiDependencyMetadata({ token: provider.useExisting }), eager, resolvedProvider.sourceSpan);\n                  if (isPresent(existingDiDep.token)) {\n                      transformedUseExisting = existingDiDep.token;\n                  }\n                  else {\n                      transformedUseExisting = null;\n                      transformedUseValue = existingDiDep.value;\n                  }\n              }\n              else if (isPresent(provider.useFactory)) {\n                  var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;\n                  transformedDeps =\n                      deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });\n              }\n              else if (isPresent(provider.useClass)) {\n                  var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;\n                  transformedDeps =\n                      deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });\n              }\n              return _transformProvider(provider, {\n                  useExisting: transformedUseExisting,\n                  useValue: transformedUseValue,\n                  deps: transformedDeps\n              });\n          });\n          transformedProviderAst =\n              _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });\n          this._transformedProviders.set(token.reference, transformedProviderAst);\n          return transformedProviderAst;\n      };\n      NgModuleProviderAnalyzer.prototype._getDependency = function (dep, eager, requestorSourceSpan) {\n          if (eager === void 0) { eager = null; }\n          var foundLocal = false;\n          if (!dep.isSkipSelf && isPresent(dep.token)) {\n              // access the injector\n              if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference ||\n                  dep.token.reference ===\n                      resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference) {\n                  foundLocal = true;\n              }\n              else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {\n                  foundLocal = true;\n              }\n          }\n          var result = dep;\n          if (dep.isSelf && !foundLocal) {\n              if (dep.isOptional) {\n                  result = new CompileDiDependencyMetadata({ isValue: true, value: null });\n              }\n              else {\n                  this._errors.push(new ProviderError(\"No provider for \" + dep.token.name, requestorSourceSpan));\n              }\n          }\n          return result;\n      };\n      return NgModuleProviderAnalyzer;\n  }());\n  function _transformProvider(provider, _a) {\n      var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;\n      return new CompileProviderMetadata({\n          token: provider.token,\n          useClass: provider.useClass,\n          useExisting: useExisting,\n          useFactory: provider.useFactory,\n          useValue: useValue,\n          deps: deps,\n          multi: provider.multi\n      });\n  }\n  function _transformProviderAst(provider, _a) {\n      var eager = _a.eager, providers = _a.providers;\n      return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);\n  }\n  function _normalizeProviders(providers, sourceSpan, targetErrors, targetProviders) {\n      if (targetProviders === void 0) { targetProviders = null; }\n      if (isBlank(targetProviders)) {\n          targetProviders = [];\n      }\n      if (isPresent(providers)) {\n          providers.forEach(function (provider) {\n              if (isArray(provider)) {\n                  _normalizeProviders(provider, sourceSpan, targetErrors, targetProviders);\n              }\n              else {\n                  var normalizeProvider = void 0;\n                  if (provider instanceof CompileProviderMetadata) {\n                      normalizeProvider = provider;\n                  }\n                  else if (provider instanceof CompileTypeMetadata) {\n                      normalizeProvider = new CompileProviderMetadata({ token: new CompileTokenMetadata({ identifier: provider }), useClass: provider });\n                  }\n                  else {\n                      targetErrors.push(new ProviderError(\"Unknown provider type \" + provider, sourceSpan));\n                  }\n                  if (isPresent(normalizeProvider)) {\n                      targetProviders.push(normalizeProvider);\n                  }\n              }\n          });\n      }\n      return targetProviders;\n  }\n  function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {\n      var providersByToken = new Map();\n      directives.forEach(function (directive) {\n          var dirProvider = new CompileProviderMetadata({ token: new CompileTokenMetadata({ identifier: directive.type }), useClass: directive.type });\n          _resolveProviders([dirProvider], directive.isComponent ? exports.ProviderAstType.Component : exports.ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);\n      });\n      // Note: directives need to be able to overwrite providers of a component!\n      var directivesWithComponentFirst = directives.filter(function (dir) { return dir.isComponent; }).concat(directives.filter(function (dir) { return !dir.isComponent; }));\n      directivesWithComponentFirst.forEach(function (directive) {\n          _resolveProviders(_normalizeProviders(directive.providers, sourceSpan, targetErrors), exports.ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);\n          _resolveProviders(_normalizeProviders(directive.viewProviders, sourceSpan, targetErrors), exports.ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);\n      });\n      return providersByToken;\n  }\n  function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {\n      providers.forEach(function (provider) {\n          var resolvedProvider = targetProvidersByToken.get(provider.token.reference);\n          if (isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi) {\n              targetErrors.push(new ProviderError(\"Mixing multi and non multi provider is not possible for token \" + resolvedProvider.token.name, sourceSpan));\n          }\n          if (isBlank(resolvedProvider)) {\n              var lifecycleHooks = provider.token.identifier && provider.token.identifier instanceof CompileTypeMetadata ?\n                  provider.token.identifier.lifecycleHooks :\n                  [];\n              resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);\n              targetProvidersByToken.set(provider.token.reference, resolvedProvider);\n          }\n          else {\n              if (!provider.multi) {\n                  ListWrapper.clear(resolvedProvider.providers);\n              }\n              resolvedProvider.providers.push(provider);\n          }\n      });\n  }\n  function _getViewQueries(component) {\n      var viewQueries = new Map();\n      if (isPresent(component.viewQueries)) {\n          component.viewQueries.forEach(function (query) { return _addQueryToTokenMap(viewQueries, query); });\n      }\n      component.type.diDeps.forEach(function (dep) {\n          if (isPresent(dep.viewQuery)) {\n              _addQueryToTokenMap(viewQueries, dep.viewQuery);\n          }\n      });\n      return viewQueries;\n  }\n  function _getContentQueries(directives) {\n      var contentQueries = new Map();\n      directives.forEach(function (directive) {\n          if (isPresent(directive.queries)) {\n              directive.queries.forEach(function (query) { return _addQueryToTokenMap(contentQueries, query); });\n          }\n          directive.type.diDeps.forEach(function (dep) {\n              if (isPresent(dep.query)) {\n                  _addQueryToTokenMap(contentQueries, dep.query);\n              }\n          });\n      });\n      return contentQueries;\n  }\n  function _addQueryToTokenMap(map, query) {\n      query.selectors.forEach(function (token) {\n          var entry = map.get(token.reference);\n          if (isBlank(entry)) {\n              entry = [];\n              map.set(token.reference, entry);\n          }\n          entry.push(query);\n      });\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var ElementSchemaRegistry = (function () {\n      function ElementSchemaRegistry() {\n      }\n      return ElementSchemaRegistry;\n  }());\n\n  var StyleWithImports = (function () {\n      function StyleWithImports(style, styleUrls) {\n          this.style = style;\n          this.styleUrls = styleUrls;\n      }\n      return StyleWithImports;\n  }());\n  function isStyleUrlResolvable(url) {\n      if (isBlank(url) || url.length === 0 || url[0] == '/')\n          return false;\n      var schemeMatch = url.match(_urlWithSchemaRe);\n      return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';\n  }\n  /**\n   * Rewrites stylesheets by resolving and removing the @import urls that\n   * are either relative or don't have a `package:` scheme\n   */\n  function extractStyleUrls(resolver, baseUrl, cssText) {\n      var foundUrls = [];\n      var modifiedCssText = StringWrapper.replaceAllMapped(cssText, _cssImportRe, function (m) {\n          var url = isPresent(m[1]) ? m[1] : m[2];\n          if (!isStyleUrlResolvable(url)) {\n              // Do not attempt to resolve non-package absolute URLs with URI scheme\n              return m[0];\n          }\n          foundUrls.push(resolver.resolve(baseUrl, url));\n          return '';\n      });\n      return new StyleWithImports(modifiedCssText, foundUrls);\n  }\n  var _cssImportRe = /@import\\s+(?:url\\()?\\s*(?:(?:['\"]([^'\"]*))|([^;\\)\\s]*))[^;]*;?/g;\n  var _urlWithSchemaRe = /^([^:/?#]+):/;\n\n  var NG_CONTENT_SELECT_ATTR = 'select';\n  var NG_CONTENT_ELEMENT = 'ng-content';\n  var LINK_ELEMENT = 'link';\n  var LINK_STYLE_REL_ATTR = 'rel';\n  var LINK_STYLE_HREF_ATTR = 'href';\n  var LINK_STYLE_REL_VALUE = 'stylesheet';\n  var STYLE_ELEMENT = 'style';\n  var SCRIPT_ELEMENT = 'script';\n  var NG_NON_BINDABLE_ATTR = 'ngNonBindable';\n  var NG_PROJECT_AS = 'ngProjectAs';\n  function preparseElement(ast) {\n      var selectAttr = null;\n      var hrefAttr = null;\n      var relAttr = null;\n      var nonBindable = false;\n      var projectAs = null;\n      ast.attrs.forEach(function (attr) {\n          var lcAttrName = attr.name.toLowerCase();\n          if (lcAttrName == NG_CONTENT_SELECT_ATTR) {\n              selectAttr = attr.value;\n          }\n          else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\n              hrefAttr = attr.value;\n          }\n          else if (lcAttrName == LINK_STYLE_REL_ATTR) {\n              relAttr = attr.value;\n          }\n          else if (attr.name == NG_NON_BINDABLE_ATTR) {\n              nonBindable = true;\n          }\n          else if (attr.name == NG_PROJECT_AS) {\n              if (attr.value.length > 0) {\n                  projectAs = attr.value;\n              }\n          }\n      });\n      selectAttr = normalizeNgContentSelect(selectAttr);\n      var nodeName = ast.name.toLowerCase();\n      var type = PreparsedElementType.OTHER;\n      if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {\n          type = PreparsedElementType.NG_CONTENT;\n      }\n      else if (nodeName == STYLE_ELEMENT) {\n          type = PreparsedElementType.STYLE;\n      }\n      else if (nodeName == SCRIPT_ELEMENT) {\n          type = PreparsedElementType.SCRIPT;\n      }\n      else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\n          type = PreparsedElementType.STYLESHEET;\n      }\n      return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\n  }\n  var PreparsedElementType;\n  (function (PreparsedElementType) {\n      PreparsedElementType[PreparsedElementType[\"NG_CONTENT\"] = 0] = \"NG_CONTENT\";\n      PreparsedElementType[PreparsedElementType[\"STYLE\"] = 1] = \"STYLE\";\n      PreparsedElementType[PreparsedElementType[\"STYLESHEET\"] = 2] = \"STYLESHEET\";\n      PreparsedElementType[PreparsedElementType[\"SCRIPT\"] = 3] = \"SCRIPT\";\n      PreparsedElementType[PreparsedElementType[\"OTHER\"] = 4] = \"OTHER\";\n  })(PreparsedElementType || (PreparsedElementType = {}));\n  var PreparsedElement = (function () {\n      function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {\n          this.type = type;\n          this.selectAttr = selectAttr;\n          this.hrefAttr = hrefAttr;\n          this.nonBindable = nonBindable;\n          this.projectAs = projectAs;\n      }\n      return PreparsedElement;\n  }());\n  function normalizeNgContentSelect(selectAttr) {\n      if (selectAttr === null || selectAttr.length === 0) {\n          return '*';\n      }\n      return selectAttr;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  // Group 1 = \"bind-\"\n  // Group 2 = \"let-\"\n  // Group 3 = \"ref-/#\"\n  // Group 4 = \"on-\"\n  // Group 5 = \"bindon-\"\n  // Group 6 = \"@\"\n  // Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\n  // Group 8 = identifier inside [()]\n  // Group 9 = identifier inside []\n  // Group 10 = identifier inside ()\n  var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$/;\n  var KW_BIND_IDX = 1;\n  var KW_LET_IDX = 2;\n  var KW_REF_IDX = 3;\n  var KW_ON_IDX = 4;\n  var KW_BINDON_IDX = 5;\n  var KW_AT_IDX = 6;\n  var IDENT_KW_IDX = 7;\n  var IDENT_BANANA_BOX_IDX = 8;\n  var IDENT_PROPERTY_IDX = 9;\n  var IDENT_EVENT_IDX = 10;\n  var ANIMATE_PROP_PREFIX = 'animate-';\n  var TEMPLATE_ELEMENT = 'template';\n  var TEMPLATE_ATTR = 'template';\n  var TEMPLATE_ATTR_PREFIX = '*';\n  var CLASS_ATTR = 'class';\n  var PROPERTY_PARTS_SEPARATOR = '.';\n  var ATTRIBUTE_PREFIX = 'attr';\n  var CLASS_PREFIX = 'class';\n  var STYLE_PREFIX = 'style';\n  var TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];\n  /**\n   * Provides an array of {@link TemplateAstVisitor}s which will be used to transform\n   * parsed templates before compilation is invoked, allowing custom expression syntax\n   * and other advanced transformations.\n   *\n   * This is currently an internal-only feature and not meant for general use.\n   */\n  var TEMPLATE_TRANSFORMS = new _angular_core.OpaqueToken('TemplateTransforms');\n  var TemplateParseError = (function (_super) {\n      __extends(TemplateParseError, _super);\n      function TemplateParseError(message, span, level) {\n          _super.call(this, span, message, level);\n      }\n      return TemplateParseError;\n  }(ParseError));\n  var TemplateParseResult = (function () {\n      function TemplateParseResult(templateAst, errors) {\n          this.templateAst = templateAst;\n          this.errors = errors;\n      }\n      return TemplateParseResult;\n  }());\n  var TemplateParser = (function () {\n      function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {\n          this._exprParser = _exprParser;\n          this._schemaRegistry = _schemaRegistry;\n          this._htmlParser = _htmlParser;\n          this._console = _console;\n          this.transforms = transforms;\n      }\n      TemplateParser.prototype.parse = function (component, template, directives, pipes, schemas, templateUrl) {\n          var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);\n          var warnings = result.errors.filter(function (error) { return error.level === ParseErrorLevel.WARNING; });\n          var errors = result.errors.filter(function (error) { return error.level === ParseErrorLevel.FATAL; });\n          if (warnings.length > 0) {\n              this._console.warn(\"Template parse warnings:\\n\" + warnings.join('\\n'));\n          }\n          if (errors.length > 0) {\n              var errorString = errors.join('\\n');\n              throw new Error(\"Template parse errors:\\n\" + errorString);\n          }\n          return result.templateAst;\n      };\n      TemplateParser.prototype.tryParse = function (component, template, directives, pipes, schemas, templateUrl) {\n          var interpolationConfig;\n          if (component.template) {\n              interpolationConfig = InterpolationConfig.fromArray(component.template.interpolation);\n          }\n          var htmlAstWithErrors = this._htmlParser.parse(template, templateUrl, true, interpolationConfig);\n          var errors = htmlAstWithErrors.errors;\n          var result;\n          if (errors.length == 0) {\n              // Transform ICU messages to angular directives\n              var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);\n              errors.push.apply(errors, expandedHtmlAst.errors);\n              htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);\n          }\n          if (htmlAstWithErrors.rootNodes.length > 0) {\n              var uniqDirectives = removeIdentifierDuplicates(directives);\n              var uniqPipes = removeIdentifierDuplicates(pipes);\n              var providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);\n              var parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, uniqPipes, schemas, this._exprParser, this._schemaRegistry);\n              result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);\n              errors.push.apply(errors, parseVisitor.errors.concat(providerViewContext.errors));\n          }\n          else {\n              result = [];\n          }\n          this._assertNoReferenceDuplicationOnTemplate(result, errors);\n          if (errors.length > 0) {\n              return new TemplateParseResult(result, errors);\n          }\n          if (isPresent(this.transforms)) {\n              this.transforms.forEach(function (transform) { result = templateVisitAll(transform, result); });\n          }\n          return new TemplateParseResult(result, errors);\n      };\n      /** @internal */\n      TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) {\n          var existingReferences = [];\n          result.filter(function (element) { return !!element.references; })\n              .forEach(function (element) { return element.references.forEach(function (reference) {\n              var name = reference.name;\n              if (existingReferences.indexOf(name) < 0) {\n                  existingReferences.push(name);\n              }\n              else {\n                  var error = new TemplateParseError(\"Reference \\\"#\" + name + \"\\\" is defined several times\", reference.sourceSpan, ParseErrorLevel.FATAL);\n                  errors.push(error);\n              }\n          }); });\n      };\n      TemplateParser.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      TemplateParser.ctorParameters = [\n          { type: Parser, },\n          { type: ElementSchemaRegistry, },\n          { type: I18NHtmlParser, },\n          { type: Console, },\n          { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [TEMPLATE_TRANSFORMS,] },] },\n      ];\n      return TemplateParser;\n  }());\n  var TemplateParseVisitor = (function () {\n      function TemplateParseVisitor(providerViewContext, directives, pipes, _schemas, _exprParser, _schemaRegistry) {\n          var _this = this;\n          this.providerViewContext = providerViewContext;\n          this._schemas = _schemas;\n          this._exprParser = _exprParser;\n          this._schemaRegistry = _schemaRegistry;\n          this.selectorMatcher = new SelectorMatcher();\n          this.errors = [];\n          this.directivesIndex = new Map();\n          this.ngContentCount = 0;\n          this.pipesByName = new Map();\n          var tempMeta = providerViewContext.component.template;\n          if (tempMeta && tempMeta.interpolation) {\n              this._interpolationConfig = {\n                  start: tempMeta.interpolation[0],\n                  end: tempMeta.interpolation[1]\n              };\n          }\n          directives.forEach(function (directive, index) {\n              var selector = CssSelector.parse(directive.selector);\n              _this.selectorMatcher.addSelectables(selector, directive);\n              _this.directivesIndex.set(directive, index);\n          });\n          pipes.forEach(function (pipe) { return _this.pipesByName.set(pipe.name, pipe); });\n      }\n      TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) {\n          if (level === void 0) { level = ParseErrorLevel.FATAL; }\n          this.errors.push(new TemplateParseError(message, sourceSpan, level));\n      };\n      TemplateParseVisitor.prototype._reportParserErrors = function (errors, sourceSpan) {\n          for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {\n              var error = errors_1[_i];\n              this._reportError(error.message, sourceSpan);\n          }\n      };\n      TemplateParseVisitor.prototype._parseInterpolation = function (value, sourceSpan) {\n          var sourceInfo = sourceSpan.start.toString();\n          try {\n              var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);\n              if (ast)\n                  this._reportParserErrors(ast.errors, sourceSpan);\n              this._checkPipes(ast, sourceSpan);\n              if (isPresent(ast) &&\n                  ast.ast.expressions.length > MAX_INTERPOLATION_VALUES) {\n                  throw new Error(\"Only support at most \" + MAX_INTERPOLATION_VALUES + \" interpolation values!\");\n              }\n              return ast;\n          }\n          catch (e) {\n              this._reportError(\"\" + e, sourceSpan);\n              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n          }\n      };\n      TemplateParseVisitor.prototype._parseAction = function (value, sourceSpan) {\n          var sourceInfo = sourceSpan.start.toString();\n          try {\n              var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);\n              if (ast) {\n                  this._reportParserErrors(ast.errors, sourceSpan);\n              }\n              if (!ast || ast.ast instanceof EmptyExpr) {\n                  this._reportError(\"Empty expressions are not allowed\", sourceSpan);\n                  return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n              }\n              this._checkPipes(ast, sourceSpan);\n              return ast;\n          }\n          catch (e) {\n              this._reportError(\"\" + e, sourceSpan);\n              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n          }\n      };\n      TemplateParseVisitor.prototype._parseBinding = function (value, sourceSpan) {\n          var sourceInfo = sourceSpan.start.toString();\n          try {\n              var ast = this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);\n              if (ast)\n                  this._reportParserErrors(ast.errors, sourceSpan);\n              this._checkPipes(ast, sourceSpan);\n              return ast;\n          }\n          catch (e) {\n              this._reportError(\"\" + e, sourceSpan);\n              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n          }\n      };\n      TemplateParseVisitor.prototype._parseTemplateBindings = function (value, sourceSpan) {\n          var _this = this;\n          var sourceInfo = sourceSpan.start.toString();\n          try {\n              var bindingsResult = this._exprParser.parseTemplateBindings(value, sourceInfo);\n              this._reportParserErrors(bindingsResult.errors, sourceSpan);\n              bindingsResult.templateBindings.forEach(function (binding) {\n                  if (isPresent(binding.expression)) {\n                      _this._checkPipes(binding.expression, sourceSpan);\n                  }\n              });\n              bindingsResult.warnings.forEach(function (warning) { _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });\n              return bindingsResult.templateBindings;\n          }\n          catch (e) {\n              this._reportError(\"\" + e, sourceSpan);\n              return [];\n          }\n      };\n      TemplateParseVisitor.prototype._checkPipes = function (ast, sourceSpan) {\n          var _this = this;\n          if (isPresent(ast)) {\n              var collector = new PipeCollector();\n              ast.visit(collector);\n              collector.pipes.forEach(function (pipeName) {\n                  if (!_this.pipesByName.has(pipeName)) {\n                      _this._reportError(\"The pipe '\" + pipeName + \"' could not be found\", sourceSpan);\n                  }\n              });\n          }\n      };\n      TemplateParseVisitor.prototype.visitExpansion = function (expansion, context) { return null; };\n      TemplateParseVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return null; };\n      TemplateParseVisitor.prototype.visitText = function (text, parent) {\n          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);\n          var expr = this._parseInterpolation(text.value, text.sourceSpan);\n          if (isPresent(expr)) {\n              return new BoundTextAst(expr, ngContentIndex, text.sourceSpan);\n          }\n          else {\n              return new TextAst(text.value, ngContentIndex, text.sourceSpan);\n          }\n      };\n      TemplateParseVisitor.prototype.visitAttribute = function (attribute, context) {\n          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n      };\n      TemplateParseVisitor.prototype.visitComment = function (comment, context) { return null; };\n      TemplateParseVisitor.prototype.visitElement = function (element, parent) {\n          var _this = this;\n          var nodeName = element.name;\n          var preparsedElement = preparseElement(element);\n          if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n              preparsedElement.type === PreparsedElementType.STYLE) {\n              // Skipping <script> for security reasons\n              // Skipping <style> as we already processed them\n              // in the StyleCompiler\n              return null;\n          }\n          if (preparsedElement.type === PreparsedElementType.STYLESHEET &&\n              isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n              // Skipping stylesheets with either relative urls or package scheme as we already processed\n              // them in the StyleCompiler\n              return null;\n          }\n          var matchableAttrs = [];\n          var elementOrDirectiveProps = [];\n          var elementOrDirectiveRefs = [];\n          var elementVars = [];\n          var animationProps = [];\n          var events = [];\n          var templateElementOrDirectiveProps = [];\n          var templateMatchableAttrs = [];\n          var templateElementVars = [];\n          var hasInlineTemplates = false;\n          var attrs = [];\n          var lcElName = splitNsName(nodeName.toLowerCase())[1];\n          var isTemplateElement = lcElName == TEMPLATE_ELEMENT;\n          element.attrs.forEach(function (attr) {\n              var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, animationProps, events, elementOrDirectiveRefs, elementVars);\n              var hasTemplateBinding = _this._parseInlineTemplateBinding(attr, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);\n              if (hasTemplateBinding && hasInlineTemplates) {\n                  _this._reportError(\"Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *\", attr.sourceSpan);\n              }\n              if (!hasBinding && !hasTemplateBinding) {\n                  // don't include the bindings as attributes as well in the AST\n                  attrs.push(_this.visitAttribute(attr, null));\n                  matchableAttrs.push([attr.name, attr.value]);\n              }\n              if (hasTemplateBinding) {\n                  hasInlineTemplates = true;\n              }\n          });\n          var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);\n          var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement;\n          var references = [];\n          var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);\n          var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts)\n              .concat(animationProps);\n          var isViewRoot = parent.isTemplateElement || hasInlineTemplates;\n          var providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);\n          var children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));\n          providerContext.afterElement();\n          // Override the actual selector when the `ngProjectAs` attribute is provided\n          var projectionSelector = isPresent(preparsedElement.projectAs) ?\n              CssSelector.parse(preparsedElement.projectAs)[0] :\n              elementCssSelector;\n          var ngContentIndex = parent.findNgContentIndex(projectionSelector);\n          var parsedElement;\n          if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n              if (isPresent(element.children) && element.children.length > 0) {\n                  this._reportError(\"<ng-content> element cannot have content. <ng-content> must be immediately followed by </ng-content>\", element.sourceSpan);\n              }\n              parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);\n          }\n          else if (isTemplateElement) {\n              this._assertAllEventsPublishedByDirectives(directiveAsts, events);\n              this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);\n              parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);\n          }\n          else {\n              this._assertElementExists(matchElement, element);\n              this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);\n              var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);\n              parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan);\n          }\n          if (hasInlineTemplates) {\n              var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);\n              var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector).directives;\n              var templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);\n              var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);\n              this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);\n              var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);\n              templateProviderContext.afterElement();\n              parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);\n          }\n          return parsedElement;\n      };\n      TemplateParseVisitor.prototype._parseInlineTemplateBinding = function (attr, targetMatchableAttrs, targetProps, targetVars) {\n          var templateBindingsSource = null;\n          if (this._normalizeAttributeName(attr.name) == TEMPLATE_ATTR) {\n              templateBindingsSource = attr.value;\n          }\n          else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {\n              var key = attr.name.substring(TEMPLATE_ATTR_PREFIX.length); // remove the star\n              templateBindingsSource = (attr.value.length == 0) ? key : key + ' ' + attr.value;\n          }\n          if (isPresent(templateBindingsSource)) {\n              var bindings = this._parseTemplateBindings(templateBindingsSource, attr.sourceSpan);\n              for (var i = 0; i < bindings.length; i++) {\n                  var binding = bindings[i];\n                  if (binding.keyIsVar) {\n                      targetVars.push(new VariableAst(binding.key, binding.name, attr.sourceSpan));\n                  }\n                  else if (isPresent(binding.expression)) {\n                      this._parsePropertyAst(binding.key, binding.expression, attr.sourceSpan, targetMatchableAttrs, targetProps);\n                  }\n                  else {\n                      targetMatchableAttrs.push([binding.key, '']);\n                      this._parseLiteralAttr(binding.key, null, attr.sourceSpan, targetProps);\n                  }\n              }\n              return true;\n          }\n          return false;\n      };\n      TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetAnimationProps, targetEvents, targetRefs, targetVars) {\n          var name = this._normalizeAttributeName(attr.name);\n          var value = attr.value;\n          var srcSpan = attr.sourceSpan;\n          var bindParts = name.match(BIND_NAME_REGEXP);\n          var hasBinding = false;\n          if (bindParts !== null) {\n              hasBinding = true;\n              if (isPresent(bindParts[KW_BIND_IDX])) {\n                  this._parsePropertyOrAnimation(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetProps, targetAnimationProps);\n              }\n              else if (bindParts[KW_LET_IDX]) {\n                  if (isTemplateElement) {\n                      var identifier = bindParts[IDENT_KW_IDX];\n                      this._parseVariable(identifier, value, srcSpan, targetVars);\n                  }\n                  else {\n                      this._reportError(\"\\\"let-\\\" is only supported on template elements.\", srcSpan);\n                  }\n              }\n              else if (bindParts[KW_REF_IDX]) {\n                  var identifier = bindParts[IDENT_KW_IDX];\n                  this._parseReference(identifier, value, srcSpan, targetRefs);\n              }\n              else if (bindParts[KW_ON_IDX]) {\n                  this._parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n              }\n              else if (bindParts[KW_BINDON_IDX]) {\n                  this._parsePropertyOrAnimation(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetProps, targetAnimationProps);\n                  this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n              }\n              else if (bindParts[KW_AT_IDX]) {\n                  if (name[0] == '@' && isPresent(value) && value.length > 0) {\n                      this._reportError(\"Assigning animation triggers via @prop=\\\"exp\\\" attributes with an expression is invalid.\" +\n                          \" Use property bindings (e.g. [@prop]=\\\"exp\\\") or use an attribute without a value (e.g. @prop) instead.\", srcSpan, ParseErrorLevel.FATAL);\n                  }\n                  this._parseAnimation(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetAnimationProps);\n              }\n              else if (bindParts[IDENT_BANANA_BOX_IDX]) {\n                  this._parsePropertyOrAnimation(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetProps, targetAnimationProps);\n                  this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n              }\n              else if (bindParts[IDENT_PROPERTY_IDX]) {\n                  this._parsePropertyOrAnimation(bindParts[IDENT_PROPERTY_IDX], value, srcSpan, targetMatchableAttrs, targetProps, targetAnimationProps);\n              }\n              else if (bindParts[IDENT_EVENT_IDX]) {\n                  this._parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n              }\n          }\n          else {\n              hasBinding =\n                  this._parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);\n          }\n          if (!hasBinding) {\n              this._parseLiteralAttr(name, value, srcSpan, targetProps);\n          }\n          return hasBinding;\n      };\n      TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {\n          return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n      };\n      TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {\n          if (identifier.indexOf('-') > -1) {\n              this._reportError(\"\\\"-\\\" is not allowed in variable names\", sourceSpan);\n          }\n          targetVars.push(new VariableAst(identifier, value, sourceSpan));\n      };\n      TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) {\n          if (identifier.indexOf('-') > -1) {\n              this._reportError(\"\\\"-\\\" is not allowed in reference names\", sourceSpan);\n          }\n          targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));\n      };\n      TemplateParseVisitor.prototype._parsePropertyOrAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps, targetAnimationProps) {\n          var animatePropLength = ANIMATE_PROP_PREFIX.length;\n          var isAnimationProp = name[0] == '@';\n          var animationPrefixLength = 1;\n          if (name.substring(0, animatePropLength) == ANIMATE_PROP_PREFIX) {\n              isAnimationProp = true;\n              animationPrefixLength = animatePropLength;\n          }\n          if (isAnimationProp) {\n              this._parseAnimation(name.substr(animationPrefixLength), expression, sourceSpan, targetMatchableAttrs, targetAnimationProps);\n          }\n          else {\n              this._parsePropertyAst(name, this._parseBinding(expression, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);\n          }\n      };\n      TemplateParseVisitor.prototype._parseAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetAnimationProps) {\n          // This will occur when a @trigger is not paired with an expression.\n          // For animations it is valid to not have an expression since */void\n          // states will be applied by angular when the element is attached/detached\n          if (!isPresent(expression) || expression.length == 0) {\n              expression = 'null';\n          }\n          var ast = this._parseBinding(expression, sourceSpan);\n          targetMatchableAttrs.push([name, ast.source]);\n          targetAnimationProps.push(new BoundElementPropertyAst(name, exports.PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, ast, null, sourceSpan));\n      };\n      TemplateParseVisitor.prototype._parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {\n          var expr = this._parseInterpolation(value, sourceSpan);\n          if (isPresent(expr)) {\n              this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);\n              return true;\n          }\n          return false;\n      };\n      TemplateParseVisitor.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {\n          targetMatchableAttrs.push([name, ast.source]);\n          targetProps.push(new BoundElementOrDirectiveProperty(name, ast, false, sourceSpan));\n      };\n      TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {\n          this._parseEvent(name + \"Change\", expression + \"=$event\", sourceSpan, targetMatchableAttrs, targetEvents);\n      };\n      TemplateParseVisitor.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {\n          // long format: 'target: eventName'\n          var parts = splitAtColon(name, [null, name]);\n          var target = parts[0];\n          var eventName = parts[1];\n          var ast = this._parseAction(expression, sourceSpan);\n          targetMatchableAttrs.push([name, ast.source]);\n          targetEvents.push(new BoundEventAst(eventName, target, ast, sourceSpan));\n          // Don't detect directives for event names for now,\n          // so don't add the event name to the matchableAttrs\n      };\n      TemplateParseVisitor.prototype._parseLiteralAttr = function (name, value, sourceSpan, targetProps) {\n          targetProps.push(new BoundElementOrDirectiveProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), true, sourceSpan));\n      };\n      TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {\n          var _this = this;\n          // Need to sort the directives so that we get consistent results throughout,\n          // as selectorMatcher uses Maps inside.\n          // Also deduplicate directives as they might match more than one time!\n          var directives = new Array(this.directivesIndex.size);\n          // Whether any directive selector matches on the element name\n          var matchElement = false;\n          selectorMatcher.match(elementCssSelector, function (selector, directive) {\n              directives[_this.directivesIndex.get(directive)] = directive;\n              matchElement = matchElement || selector.hasElementSelector();\n          });\n          return {\n              directives: directives.filter(function (dir) { return !!dir; }),\n              matchElement: matchElement,\n          };\n      };\n      TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) {\n          var _this = this;\n          var matchedReferences = new Set();\n          var component = null;\n          var directiveAsts = directives.map(function (directive) {\n              var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, \"Directive \" + directive.type.name);\n              if (directive.isComponent) {\n                  component = directive;\n              }\n              var hostProperties = [];\n              var hostEvents = [];\n              var directiveProperties = [];\n              _this._createDirectiveHostPropertyAsts(elementName, directive.hostProperties, sourceSpan, hostProperties);\n              _this._createDirectiveHostEventAsts(directive.hostListeners, sourceSpan, hostEvents);\n              _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);\n              elementOrDirectiveRefs.forEach(function (elOrDirRef) {\n                  if ((elOrDirRef.value.length === 0 && directive.isComponent) ||\n                      (directive.exportAs == elOrDirRef.value)) {\n                      targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));\n                      matchedReferences.add(elOrDirRef.name);\n                  }\n              });\n              return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);\n          });\n          elementOrDirectiveRefs.forEach(function (elOrDirRef) {\n              if (elOrDirRef.value.length > 0) {\n                  if (!matchedReferences.has(elOrDirRef.name)) {\n                      _this._reportError(\"There is no directive with \\\"exportAs\\\" set to \\\"\" + elOrDirRef.value + \"\\\"\", elOrDirRef.sourceSpan);\n                  }\n              }\n              else if (!component) {\n                  var refToken = null;\n                  if (isTemplateElement) {\n                      refToken = resolveIdentifierToken(Identifiers.TemplateRef);\n                  }\n                  targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));\n              }\n          }); // fix syntax highlighting issue: `\n          return directiveAsts;\n      };\n      TemplateParseVisitor.prototype._createDirectiveHostPropertyAsts = function (elementName, hostProps, sourceSpan, targetPropertyAsts) {\n          var _this = this;\n          if (hostProps) {\n              StringMapWrapper.forEach(hostProps, function (expression, propName) {\n                  if (isString(expression)) {\n                      var exprAst = _this._parseBinding(expression, sourceSpan);\n                      targetPropertyAsts.push(_this._createElementPropertyAst(elementName, propName, exprAst, sourceSpan));\n                  }\n                  else {\n                      _this._reportError(\"Value of the host property binding \\\"\" + propName + \"\\\" needs to be a string representing an expression but got \\\"\" + expression + \"\\\" (\" + typeof expression + \")\", sourceSpan);\n                  }\n              });\n          }\n      };\n      TemplateParseVisitor.prototype._createDirectiveHostEventAsts = function (hostListeners, sourceSpan, targetEventAsts) {\n          var _this = this;\n          if (hostListeners) {\n              StringMapWrapper.forEach(hostListeners, function (expression, propName) {\n                  if (isString(expression)) {\n                      _this._parseEvent(propName, expression, sourceSpan, [], targetEventAsts);\n                  }\n                  else {\n                      _this._reportError(\"Value of the host listener \\\"\" + propName + \"\\\" needs to be a string representing an expression but got \\\"\" + expression + \"\\\" (\" + typeof expression + \")\", sourceSpan);\n                  }\n              });\n          }\n      };\n      TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps) {\n          if (directiveProperties) {\n              var boundPropsByName_1 = new Map();\n              boundProps.forEach(function (boundProp) {\n                  var prevValue = boundPropsByName_1.get(boundProp.name);\n                  if (isBlank(prevValue) || prevValue.isLiteral) {\n                      // give [a]=\"b\" a higher precedence than a=\"b\" on the same element\n                      boundPropsByName_1.set(boundProp.name, boundProp);\n                  }\n              });\n              StringMapWrapper.forEach(directiveProperties, function (elProp, dirProp) {\n                  var boundProp = boundPropsByName_1.get(elProp);\n                  // Bindings are optional, so this binding only needs to be set up if an expression is given.\n                  if (boundProp) {\n                      targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));\n                  }\n              });\n          }\n      };\n      TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, directives) {\n          var _this = this;\n          var boundElementProps = [];\n          var boundDirectivePropsIndex = new Map();\n          directives.forEach(function (directive) {\n              directive.inputs.forEach(function (prop) {\n                  boundDirectivePropsIndex.set(prop.templateName, prop);\n              });\n          });\n          props.forEach(function (prop) {\n              if (!prop.isLiteral && isBlank(boundDirectivePropsIndex.get(prop.name))) {\n                  boundElementProps.push(_this._createElementPropertyAst(elementName, prop.name, prop.expression, prop.sourceSpan));\n              }\n          });\n          return boundElementProps;\n      };\n      TemplateParseVisitor.prototype._createElementPropertyAst = function (elementName, name, ast, sourceSpan) {\n          var unit = null;\n          var bindingType;\n          var boundPropertyName;\n          var parts = name.split(PROPERTY_PARTS_SEPARATOR);\n          var securityContext;\n          if (parts.length === 1) {\n              var partValue = parts[0];\n              if (partValue[0] == '@') {\n                  boundPropertyName = partValue.substr(1);\n                  bindingType = exports.PropertyBindingType.Animation;\n                  securityContext = _angular_core.SecurityContext.NONE;\n              }\n              else {\n                  boundPropertyName = this._schemaRegistry.getMappedPropName(partValue);\n                  securityContext = this._schemaRegistry.securityContext(elementName, boundPropertyName);\n                  bindingType = exports.PropertyBindingType.Property;\n                  this._assertNoEventBinding(boundPropertyName, sourceSpan);\n                  if (!this._schemaRegistry.hasProperty(elementName, boundPropertyName, this._schemas)) {\n                      var errorMsg = \"Can't bind to '\" + boundPropertyName + \"' since it isn't a known property of '\" + elementName + \"'.\";\n                      if (elementName.indexOf('-') > -1) {\n                          errorMsg +=\n                              (\"\\n1. If '\" + elementName + \"' is an Angular component and it has '\" + boundPropertyName + \"' input, then verify that it is part of this module.\") +\n                                  (\"\\n2. If '\" + elementName + \"' is a Web Component then add \\\"CUSTOM_ELEMENTS_SCHEMA\\\" to the '@NgModule.schema' of this component to suppress this message.\\n\");\n                      }\n                      this._reportError(errorMsg, sourceSpan);\n                  }\n              }\n          }\n          else {\n              if (parts[0] == ATTRIBUTE_PREFIX) {\n                  boundPropertyName = parts[1];\n                  this._assertNoEventBinding(boundPropertyName, sourceSpan);\n                  // NB: For security purposes, use the mapped property name, not the attribute name.\n                  var mapPropName = this._schemaRegistry.getMappedPropName(boundPropertyName);\n                  securityContext = this._schemaRegistry.securityContext(elementName, mapPropName);\n                  var nsSeparatorIdx = boundPropertyName.indexOf(':');\n                  if (nsSeparatorIdx > -1) {\n                      var ns = boundPropertyName.substring(0, nsSeparatorIdx);\n                      var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);\n                      boundPropertyName = mergeNsAndName(ns, name_1);\n                  }\n                  bindingType = exports.PropertyBindingType.Attribute;\n              }\n              else if (parts[0] == CLASS_PREFIX) {\n                  boundPropertyName = parts[1];\n                  bindingType = exports.PropertyBindingType.Class;\n                  securityContext = _angular_core.SecurityContext.NONE;\n              }\n              else if (parts[0] == STYLE_PREFIX) {\n                  unit = parts.length > 2 ? parts[2] : null;\n                  boundPropertyName = parts[1];\n                  bindingType = exports.PropertyBindingType.Style;\n                  securityContext = _angular_core.SecurityContext.STYLE;\n              }\n              else {\n                  this._reportError(\"Invalid property name '\" + name + \"'\", sourceSpan);\n                  bindingType = null;\n                  securityContext = null;\n              }\n          }\n          return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContext, ast, unit, sourceSpan);\n      };\n      TemplateParseVisitor.prototype._assertNoEventBinding = function (propName, sourceSpan) {\n          if (propName.toLowerCase().startsWith('on')) {\n              this._reportError((\"Binding to event attribute '\" + propName + \"' is disallowed \") +\n                  (\"for security reasons, please use (\" + propName.slice(2) + \")=...\"), sourceSpan, ParseErrorLevel.FATAL);\n          }\n      };\n      TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {\n          var componentTypeNames = [];\n          directives.forEach(function (directive) {\n              var typeName = directive.directive.type.name;\n              if (directive.directive.isComponent) {\n                  componentTypeNames.push(typeName);\n              }\n          });\n          return componentTypeNames;\n      };\n      TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {\n          var componentTypeNames = this._findComponentDirectiveNames(directives);\n          if (componentTypeNames.length > 1) {\n              this._reportError(\"More than one component: \" + componentTypeNames.join(','), sourceSpan);\n          }\n      };\n      /**\n       * Make sure that non-angular tags conform to the schemas.\n       *\n       * Note: An element is considered an angular tag when at least one directive selector matches the\n       * tag name.\n       *\n       * @param matchElement Whether any directive has matched on the tag name\n       * @param element the html element\n       */\n      TemplateParseVisitor.prototype._assertElementExists = function (matchElement, element) {\n          var elName = element.name.replace(/^:xhtml:/, '');\n          if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {\n              var errorMsg = (\"'\" + elName + \"' is not a known element:\\n\") +\n                  (\"1. If '\" + elName + \"' is an Angular component, then verify that it is part of this module.\\n\") +\n                  (\"2. If '\" + elName + \"' is a Web Component then add \\\"CUSTOM_ELEMENTS_SCHEMA\\\" to the '@NgModule.schema' of this component to suppress this message.\");\n              this._reportError(errorMsg, element.sourceSpan);\n          }\n      };\n      TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {\n          var _this = this;\n          var componentTypeNames = this._findComponentDirectiveNames(directives);\n          if (componentTypeNames.length > 0) {\n              this._reportError(\"Components on an embedded template: \" + componentTypeNames.join(','), sourceSpan);\n          }\n          elementProps.forEach(function (prop) {\n              _this._reportError(\"Property binding \" + prop.name + \" not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \\\"directives\\\" section.\", sourceSpan);\n          });\n      };\n      TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {\n          var _this = this;\n          var allDirectiveEvents = new Set();\n          directives.forEach(function (directive) {\n              StringMapWrapper.forEach(directive.directive.outputs, function (eventName) {\n                  allDirectiveEvents.add(eventName);\n              });\n          });\n          events.forEach(function (event) {\n              if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {\n                  _this._reportError(\"Event binding \" + event.fullName + \" not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \\\"directives\\\" section.\", event.sourceSpan);\n              }\n          });\n      };\n      return TemplateParseVisitor;\n  }());\n  var NonBindableVisitor = (function () {\n      function NonBindableVisitor() {\n      }\n      NonBindableVisitor.prototype.visitElement = function (ast, parent) {\n          var preparsedElement = preparseElement(ast);\n          if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n              preparsedElement.type === PreparsedElementType.STYLE ||\n              preparsedElement.type === PreparsedElementType.STYLESHEET) {\n              // Skipping <script> for security reasons\n              // Skipping <style> and stylesheets as we already processed them\n              // in the StyleCompiler\n              return null;\n          }\n          var attrNameAndValues = ast.attrs.map(function (attrAst) { return [attrAst.name, attrAst.value]; });\n          var selector = createElementCssSelector(ast.name, attrNameAndValues);\n          var ngContentIndex = parent.findNgContentIndex(selector);\n          var children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);\n          return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan);\n      };\n      NonBindableVisitor.prototype.visitComment = function (comment, context) { return null; };\n      NonBindableVisitor.prototype.visitAttribute = function (attribute, context) {\n          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n      };\n      NonBindableVisitor.prototype.visitText = function (text, parent) {\n          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);\n          return new TextAst(text.value, ngContentIndex, text.sourceSpan);\n      };\n      NonBindableVisitor.prototype.visitExpansion = function (expansion, context) { return expansion; };\n      NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return expansionCase; };\n      return NonBindableVisitor;\n  }());\n  var BoundElementOrDirectiveProperty = (function () {\n      function BoundElementOrDirectiveProperty(name, expression, isLiteral, sourceSpan) {\n          this.name = name;\n          this.expression = expression;\n          this.isLiteral = isLiteral;\n          this.sourceSpan = sourceSpan;\n      }\n      return BoundElementOrDirectiveProperty;\n  }());\n  var ElementOrDirectiveRef = (function () {\n      function ElementOrDirectiveRef(name, value, sourceSpan) {\n          this.name = name;\n          this.value = value;\n          this.sourceSpan = sourceSpan;\n      }\n      return ElementOrDirectiveRef;\n  }());\n  function splitClasses(classAttrValue) {\n      return classAttrValue.trim().split(/\\s+/g);\n  }\n  var ElementContext = (function () {\n      function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {\n          this.isTemplateElement = isTemplateElement;\n          this._ngContentIndexMatcher = _ngContentIndexMatcher;\n          this._wildcardNgContentIndex = _wildcardNgContentIndex;\n          this.providerContext = providerContext;\n      }\n      ElementContext.create = function (isTemplateElement, directives, providerContext) {\n          var matcher = new SelectorMatcher();\n          var wildcardNgContentIndex = null;\n          var component = directives.find(function (directive) { return directive.directive.isComponent; });\n          if (component) {\n              var ngContentSelectors = component.directive.template.ngContentSelectors;\n              for (var i = 0; i < ngContentSelectors.length; i++) {\n                  var selector = ngContentSelectors[i];\n                  if (selector === '*') {\n                      wildcardNgContentIndex = i;\n                  }\n                  else {\n                      matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);\n                  }\n              }\n          }\n          return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);\n      };\n      ElementContext.prototype.findNgContentIndex = function (selector) {\n          var ngContentIndices = [];\n          this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });\n          ngContentIndices.sort();\n          if (isPresent(this._wildcardNgContentIndex)) {\n              ngContentIndices.push(this._wildcardNgContentIndex);\n          }\n          return ngContentIndices.length > 0 ? ngContentIndices[0] : null;\n      };\n      return ElementContext;\n  }());\n  function createElementCssSelector(elementName, matchableAttrs) {\n      var cssSelector = new CssSelector();\n      var elNameNoNs = splitNsName(elementName)[1];\n      cssSelector.setElement(elNameNoNs);\n      for (var i = 0; i < matchableAttrs.length; i++) {\n          var attrName = matchableAttrs[i][0];\n          var attrNameNoNs = splitNsName(attrName)[1];\n          var attrValue = matchableAttrs[i][1];\n          cssSelector.addAttribute(attrNameNoNs, attrValue);\n          if (attrName.toLowerCase() == CLASS_ATTR) {\n              var classes = splitClasses(attrValue);\n              classes.forEach(function (className) { return cssSelector.addClassName(className); });\n          }\n      }\n      return cssSelector;\n  }\n  var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);\n  var NON_BINDABLE_VISITOR = new NonBindableVisitor();\n  var PipeCollector = (function (_super) {\n      __extends(PipeCollector, _super);\n      function PipeCollector() {\n          _super.apply(this, arguments);\n          this.pipes = new Set();\n      }\n      PipeCollector.prototype.visitPipe = function (ast, context) {\n          this.pipes.add(ast.name);\n          ast.exp.visit(this);\n          this.visitAll(ast.args, context);\n          return null;\n      };\n      return PipeCollector;\n  }(RecursiveAstVisitor));\n\n  function unimplemented$1() {\n      throw new Error('unimplemented');\n  }\n  var CompilerConfig = (function () {\n      function CompilerConfig(_a) {\n          var _b = _a === void 0 ? {} : _a, _c = _b.renderTypes, renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c, _d = _b.defaultEncapsulation, defaultEncapsulation = _d === void 0 ? _angular_core.ViewEncapsulation.Emulated : _d, genDebugInfo = _b.genDebugInfo, logBindingUpdate = _b.logBindingUpdate, _e = _b.useJit, useJit = _e === void 0 ? true : _e;\n          this.renderTypes = renderTypes;\n          this.defaultEncapsulation = defaultEncapsulation;\n          this._genDebugInfo = genDebugInfo;\n          this._logBindingUpdate = logBindingUpdate;\n          this.useJit = useJit;\n      }\n      Object.defineProperty(CompilerConfig.prototype, \"genDebugInfo\", {\n          get: function () {\n              return this._genDebugInfo === void 0 ? _angular_core.isDevMode() : this._genDebugInfo;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(CompilerConfig.prototype, \"logBindingUpdate\", {\n          get: function () {\n              return this._logBindingUpdate === void 0 ? _angular_core.isDevMode() : this._logBindingUpdate;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      return CompilerConfig;\n  }());\n  /**\n   * Types used for the renderer.\n   * Can be replaced to specialize the generated output to a specific renderer\n   * to help tree shaking.\n   */\n  var RenderTypes = (function () {\n      function RenderTypes() {\n      }\n      Object.defineProperty(RenderTypes.prototype, \"renderer\", {\n          get: function () { return unimplemented$1(); },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(RenderTypes.prototype, \"renderText\", {\n          get: function () { return unimplemented$1(); },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(RenderTypes.prototype, \"renderElement\", {\n          get: function () { return unimplemented$1(); },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(RenderTypes.prototype, \"renderComment\", {\n          get: function () { return unimplemented$1(); },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(RenderTypes.prototype, \"renderNode\", {\n          get: function () { return unimplemented$1(); },\n          enumerable: true,\n          configurable: true\n      });\n      Object.defineProperty(RenderTypes.prototype, \"renderEvent\", {\n          get: function () { return unimplemented$1(); },\n          enumerable: true,\n          configurable: true\n      });\n      return RenderTypes;\n  }());\n  var DefaultRenderTypes = (function () {\n      function DefaultRenderTypes() {\n          this.renderText = null;\n          this.renderElement = null;\n          this.renderComment = null;\n          this.renderNode = null;\n          this.renderEvent = null;\n      }\n      Object.defineProperty(DefaultRenderTypes.prototype, \"renderer\", {\n          get: function () { return resolveIdentifier(Identifiers.Renderer); },\n          enumerable: true,\n          configurable: true\n      });\n      ;\n      return DefaultRenderTypes;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$11 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var AnimationAst = (function () {\n      function AnimationAst() {\n          this.startTime = 0;\n          this.playTime = 0;\n      }\n      return AnimationAst;\n  }());\n  var AnimationStateAst = (function (_super) {\n      __extends$11(AnimationStateAst, _super);\n      function AnimationStateAst() {\n          _super.apply(this, arguments);\n      }\n      return AnimationStateAst;\n  }(AnimationAst));\n  var AnimationEntryAst = (function (_super) {\n      __extends$11(AnimationEntryAst, _super);\n      function AnimationEntryAst(name, stateDeclarations, stateTransitions) {\n          _super.call(this);\n          this.name = name;\n          this.stateDeclarations = stateDeclarations;\n          this.stateTransitions = stateTransitions;\n      }\n      AnimationEntryAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationEntry(this, context);\n      };\n      return AnimationEntryAst;\n  }(AnimationAst));\n  var AnimationStateDeclarationAst = (function (_super) {\n      __extends$11(AnimationStateDeclarationAst, _super);\n      function AnimationStateDeclarationAst(stateName, styles) {\n          _super.call(this);\n          this.stateName = stateName;\n          this.styles = styles;\n      }\n      AnimationStateDeclarationAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationStateDeclaration(this, context);\n      };\n      return AnimationStateDeclarationAst;\n  }(AnimationStateAst));\n  var AnimationStateTransitionExpression = (function () {\n      function AnimationStateTransitionExpression(fromState, toState) {\n          this.fromState = fromState;\n          this.toState = toState;\n      }\n      return AnimationStateTransitionExpression;\n  }());\n  var AnimationStateTransitionAst = (function (_super) {\n      __extends$11(AnimationStateTransitionAst, _super);\n      function AnimationStateTransitionAst(stateChanges, animation) {\n          _super.call(this);\n          this.stateChanges = stateChanges;\n          this.animation = animation;\n      }\n      AnimationStateTransitionAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationStateTransition(this, context);\n      };\n      return AnimationStateTransitionAst;\n  }(AnimationStateAst));\n  var AnimationStepAst = (function (_super) {\n      __extends$11(AnimationStepAst, _super);\n      function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {\n          _super.call(this);\n          this.startingStyles = startingStyles;\n          this.keyframes = keyframes;\n          this.duration = duration;\n          this.delay = delay;\n          this.easing = easing;\n      }\n      AnimationStepAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationStep(this, context);\n      };\n      return AnimationStepAst;\n  }(AnimationAst));\n  var AnimationStylesAst = (function (_super) {\n      __extends$11(AnimationStylesAst, _super);\n      function AnimationStylesAst(styles) {\n          _super.call(this);\n          this.styles = styles;\n      }\n      AnimationStylesAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationStyles(this, context);\n      };\n      return AnimationStylesAst;\n  }(AnimationAst));\n  var AnimationKeyframeAst = (function (_super) {\n      __extends$11(AnimationKeyframeAst, _super);\n      function AnimationKeyframeAst(offset, styles) {\n          _super.call(this);\n          this.offset = offset;\n          this.styles = styles;\n      }\n      AnimationKeyframeAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationKeyframe(this, context);\n      };\n      return AnimationKeyframeAst;\n  }(AnimationAst));\n  var AnimationWithStepsAst = (function (_super) {\n      __extends$11(AnimationWithStepsAst, _super);\n      function AnimationWithStepsAst(steps) {\n          _super.call(this);\n          this.steps = steps;\n      }\n      return AnimationWithStepsAst;\n  }(AnimationAst));\n  var AnimationGroupAst = (function (_super) {\n      __extends$11(AnimationGroupAst, _super);\n      function AnimationGroupAst(steps) {\n          _super.call(this, steps);\n      }\n      AnimationGroupAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationGroup(this, context);\n      };\n      return AnimationGroupAst;\n  }(AnimationWithStepsAst));\n  var AnimationSequenceAst = (function (_super) {\n      __extends$11(AnimationSequenceAst, _super);\n      function AnimationSequenceAst(steps) {\n          _super.call(this, steps);\n      }\n      AnimationSequenceAst.prototype.visit = function (visitor, context) {\n          return visitor.visitAnimationSequence(this, context);\n      };\n      return AnimationSequenceAst;\n  }(AnimationWithStepsAst));\n\n  var Math$2 = global$1.Math;\n\n  var StylesCollectionEntry = (function () {\n      function StylesCollectionEntry(time, value) {\n          this.time = time;\n          this.value = value;\n      }\n      StylesCollectionEntry.prototype.matches = function (time, value) {\n          return time == this.time && value == this.value;\n      };\n      return StylesCollectionEntry;\n  }());\n  var StylesCollection = (function () {\n      function StylesCollection() {\n          this.styles = {};\n      }\n      StylesCollection.prototype.insertAtTime = function (property, time, value) {\n          var tuple = new StylesCollectionEntry(time, value);\n          var entries = this.styles[property];\n          if (!isPresent(entries)) {\n              entries = this.styles[property] = [];\n          }\n          // insert this at the right stop in the array\n          // this way we can keep it sorted\n          var insertionIndex = 0;\n          for (var i = entries.length - 1; i >= 0; i--) {\n              if (entries[i].time <= time) {\n                  insertionIndex = i + 1;\n                  break;\n              }\n          }\n          ListWrapper.insert(entries, insertionIndex, tuple);\n      };\n      StylesCollection.prototype.getByIndex = function (property, index) {\n          var items = this.styles[property];\n          if (isPresent(items)) {\n              return index >= items.length ? null : items[index];\n          }\n          return null;\n      };\n      StylesCollection.prototype.indexOfAtOrBeforeTime = function (property, time) {\n          var entries = this.styles[property];\n          if (isPresent(entries)) {\n              for (var i = entries.length - 1; i >= 0; i--) {\n                  if (entries[i].time <= time)\n                      return i;\n              }\n          }\n          return null;\n      };\n      return StylesCollection;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$12 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var _INITIAL_KEYFRAME = 0;\n  var _TERMINAL_KEYFRAME = 1;\n  var _ONE_SECOND = 1000;\n  var AnimationParseError = (function (_super) {\n      __extends$12(AnimationParseError, _super);\n      function AnimationParseError(message /** TODO #9100 */) {\n          _super.call(this, null, message);\n      }\n      AnimationParseError.prototype.toString = function () { return \"\" + this.msg; };\n      return AnimationParseError;\n  }(ParseError));\n  var ParsedAnimationResult = (function () {\n      function ParsedAnimationResult(ast, errors) {\n          this.ast = ast;\n          this.errors = errors;\n      }\n      return ParsedAnimationResult;\n  }());\n  function parseAnimationEntry(entry) {\n      var errors = [];\n      var stateStyles = {};\n      var transitions = [];\n      var stateDeclarationAsts = [];\n      entry.definitions.forEach(function (def) {\n          if (def instanceof CompileAnimationStateDeclarationMetadata) {\n              _parseAnimationDeclarationStates(def, errors).forEach(function (ast) {\n                  stateDeclarationAsts.push(ast);\n                  stateStyles[ast.stateName] = ast.styles;\n              });\n          }\n          else {\n              transitions.push(def);\n          }\n      });\n      var stateTransitionAsts = transitions.map(function (transDef) { return _parseAnimationStateTransition(transDef, stateStyles, errors); });\n      var ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);\n      return new ParsedAnimationResult(ast, errors);\n  }\n  function parseAnimationOutputName(outputName, errors) {\n      var values = outputName.split('.');\n      var name;\n      var phase = '';\n      if (values.length > 1) {\n          name = values[0];\n          var parsedPhase = values[1];\n          switch (parsedPhase) {\n              case 'start':\n              case 'done':\n                  phase = parsedPhase;\n                  break;\n              default:\n                  errors.push(new AnimationParseError(\"The provided animation output phase value \\\"\" + parsedPhase + \"\\\" for \\\"@\" + name + \"\\\" is not supported (use start or done)\"));\n          }\n      }\n      else {\n          name = outputName;\n          errors.push(new AnimationParseError(\"The animation trigger output event (@\" + name + \") is missing its phase value name (start or done are currently supported)\"));\n      }\n      return new AnimationOutput(name, phase, outputName);\n  }\n  function _parseAnimationDeclarationStates(stateMetadata, errors) {\n      var styleValues = [];\n      stateMetadata.styles.styles.forEach(function (stylesEntry) {\n          // TODO (matsko): change this when we get CSS class integration support\n          if (isStringMap(stylesEntry)) {\n              styleValues.push(stylesEntry);\n          }\n          else {\n              errors.push(new AnimationParseError(\"State based animations cannot contain references to other states\"));\n          }\n      });\n      var defStyles = new AnimationStylesAst(styleValues);\n      var states = stateMetadata.stateNameExpr.split(/\\s*,\\s*/);\n      return states.map(function (state) { return new AnimationStateDeclarationAst(state, defStyles); });\n  }\n  function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, errors) {\n      var styles = new StylesCollection();\n      var transitionExprs = [];\n      var transitionStates = transitionStateMetadata.stateChangeExpr.split(/\\s*,\\s*/);\n      transitionStates.forEach(function (expr) {\n          _parseAnimationTransitionExpr(expr, errors).forEach(function (transExpr) {\n              transitionExprs.push(transExpr);\n          });\n      });\n      var entry = _normalizeAnimationEntry(transitionStateMetadata.steps);\n      var animation = _normalizeStyleSteps(entry, stateStyles, errors);\n      var animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);\n      if (errors.length == 0) {\n          _fillAnimationAstStartingKeyframes(animationAst, styles, errors);\n      }\n      var sequenceAst = (animationAst instanceof AnimationSequenceAst) ?\n          animationAst :\n          new AnimationSequenceAst([animationAst]);\n      return new AnimationStateTransitionAst(transitionExprs, sequenceAst);\n  }\n  function _parseAnimationTransitionExpr(eventStr, errors) {\n      var expressions = [];\n      var match = eventStr.match(/^(\\*|[-\\w]+)\\s*(<?[=-]>)\\s*(\\*|[-\\w]+)$/);\n      if (!isPresent(match) || match.length < 4) {\n          errors.push(new AnimationParseError(\"the provided \" + eventStr + \" is not of a supported format\"));\n          return expressions;\n      }\n      var fromState = match[1];\n      var separator = match[2];\n      var toState = match[3];\n      expressions.push(new AnimationStateTransitionExpression(fromState, toState));\n      var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;\n      if (separator[0] == '<' && !isFullAnyStateExpr) {\n          expressions.push(new AnimationStateTransitionExpression(toState, fromState));\n      }\n      return expressions;\n  }\n  function _normalizeAnimationEntry(entry) {\n      return isArray(entry) ? new CompileAnimationSequenceMetadata(entry) :\n          entry;\n  }\n  function _normalizeStyleMetadata(entry, stateStyles, errors) {\n      var normalizedStyles = [];\n      entry.styles.forEach(function (styleEntry) {\n          if (isString(styleEntry)) {\n              ListWrapper.addAll(normalizedStyles, _resolveStylesFromState(styleEntry, stateStyles, errors));\n          }\n          else {\n              normalizedStyles.push(styleEntry);\n          }\n      });\n      return normalizedStyles;\n  }\n  function _normalizeStyleSteps(entry, stateStyles, errors) {\n      var steps = _normalizeStyleStepEntry(entry, stateStyles, errors);\n      return new CompileAnimationSequenceMetadata(steps);\n  }\n  function _mergeAnimationStyles(stylesList, newItem) {\n      if (isStringMap(newItem) && stylesList.length > 0) {\n          var lastIndex = stylesList.length - 1;\n          var lastItem = stylesList[lastIndex];\n          if (isStringMap(lastItem)) {\n              stylesList[lastIndex] = StringMapWrapper.merge(lastItem, newItem);\n              return;\n          }\n      }\n      stylesList.push(newItem);\n  }\n  function _normalizeStyleStepEntry(entry, stateStyles, errors) {\n      var steps;\n      if (entry instanceof CompileAnimationWithStepsMetadata) {\n          steps = entry.steps;\n      }\n      else {\n          return [entry];\n      }\n      var newSteps = [];\n      var combinedStyles;\n      steps.forEach(function (step) {\n          if (step instanceof CompileAnimationStyleMetadata) {\n              // this occurs when a style step is followed by a previous style step\n              // or when the first style step is run. We want to concatenate all subsequent\n              // style steps together into a single style step such that we have the correct\n              // starting keyframe data to pass into the animation player.\n              if (!isPresent(combinedStyles)) {\n                  combinedStyles = [];\n              }\n              _normalizeStyleMetadata(step, stateStyles, errors)\n                  .forEach(function (entry) { _mergeAnimationStyles(combinedStyles, entry); });\n          }\n          else {\n              // it is important that we create a metadata entry of the combined styles\n              // before we go on an process the animate, sequence or group metadata steps.\n              // This will ensure that the AST will have the previous styles painted on\n              // screen before any further animations that use the styles take place.\n              if (isPresent(combinedStyles)) {\n                  newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));\n                  combinedStyles = null;\n              }\n              if (step instanceof CompileAnimationAnimateMetadata) {\n                  // we do not recurse into CompileAnimationAnimateMetadata since\n                  // those style steps are not going to be squashed\n                  var animateStyleValue = step.styles;\n                  if (animateStyleValue instanceof CompileAnimationStyleMetadata) {\n                      animateStyleValue.styles =\n                          _normalizeStyleMetadata(animateStyleValue, stateStyles, errors);\n                  }\n                  else if (animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata) {\n                      animateStyleValue.steps.forEach(function (step) { step.styles = _normalizeStyleMetadata(step, stateStyles, errors); });\n                  }\n              }\n              else if (step instanceof CompileAnimationWithStepsMetadata) {\n                  var innerSteps = _normalizeStyleStepEntry(step, stateStyles, errors);\n                  step = step instanceof CompileAnimationGroupMetadata ?\n                      new CompileAnimationGroupMetadata(innerSteps) :\n                      new CompileAnimationSequenceMetadata(innerSteps);\n              }\n              newSteps.push(step);\n          }\n      });\n      // this happens when only styles were animated within the sequence\n      if (isPresent(combinedStyles)) {\n          newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));\n      }\n      return newSteps;\n  }\n  function _resolveStylesFromState(stateName, stateStyles, errors) {\n      var styles = [];\n      if (stateName[0] != ':') {\n          errors.push(new AnimationParseError(\"Animation states via styles must be prefixed with a \\\":\\\"\"));\n      }\n      else {\n          var normalizedStateName = stateName.substring(1);\n          var value = stateStyles[normalizedStateName];\n          if (!isPresent(value)) {\n              errors.push(new AnimationParseError(\"Unable to apply styles due to missing a state: \\\"\" + normalizedStateName + \"\\\"\"));\n          }\n          else {\n              value.styles.forEach(function (stylesEntry) {\n                  if (isStringMap(stylesEntry)) {\n                      styles.push(stylesEntry);\n                  }\n              });\n          }\n      }\n      return styles;\n  }\n  var _AnimationTimings = (function () {\n      function _AnimationTimings(duration, delay, easing) {\n          this.duration = duration;\n          this.delay = delay;\n          this.easing = easing;\n      }\n      return _AnimationTimings;\n  }());\n  function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {\n      var totalEntries = keyframeSequence.steps.length;\n      var totalOffsets = 0;\n      keyframeSequence.steps.forEach(function (step) { return totalOffsets += (isPresent(step.offset) ? 1 : 0); });\n      if (totalOffsets > 0 && totalOffsets < totalEntries) {\n          errors.push(new AnimationParseError(\"Not all style() entries contain an offset for the provided keyframe()\"));\n          totalOffsets = totalEntries;\n      }\n      var limit = totalEntries - 1;\n      var margin = totalOffsets == 0 ? (1 / limit) : 0;\n      var rawKeyframes = [];\n      var index = 0;\n      var doSortKeyframes = false;\n      var lastOffset = 0;\n      keyframeSequence.steps.forEach(function (styleMetadata) {\n          var offset = styleMetadata.offset;\n          var keyframeStyles = {};\n          styleMetadata.styles.forEach(function (entry) {\n              StringMapWrapper.forEach(entry, function (value /** TODO #9100 */, prop /** TODO #9100 */) {\n                  if (prop != 'offset') {\n                      keyframeStyles[prop] = value;\n                  }\n              });\n          });\n          if (isPresent(offset)) {\n              doSortKeyframes = doSortKeyframes || (offset < lastOffset);\n          }\n          else {\n              offset = index == limit ? _TERMINAL_KEYFRAME : (margin * index);\n          }\n          rawKeyframes.push([offset, keyframeStyles]);\n          lastOffset = offset;\n          index++;\n      });\n      if (doSortKeyframes) {\n          ListWrapper.sort(rawKeyframes, function (a, b) { return a[0] <= b[0] ? -1 : 1; });\n      }\n      var i;\n      var firstKeyframe = rawKeyframes[0];\n      if (firstKeyframe[0] != _INITIAL_KEYFRAME) {\n          ListWrapper.insert(rawKeyframes, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);\n      }\n      var firstKeyframeStyles = firstKeyframe[1];\n      limit = rawKeyframes.length - 1;\n      var lastKeyframe = rawKeyframes[limit];\n      if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {\n          rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);\n          limit++;\n      }\n      var lastKeyframeStyles = lastKeyframe[1];\n      for (i = 1; i <= limit; i++) {\n          var entry = rawKeyframes[i];\n          var styles = entry[1];\n          StringMapWrapper.forEach(styles, function (value /** TODO #9100 */, prop /** TODO #9100 */) {\n              if (!isPresent(firstKeyframeStyles[prop])) {\n                  firstKeyframeStyles[prop] = FILL_STYLE_FLAG;\n              }\n          });\n      }\n      for (i = limit - 1; i >= 0; i--) {\n          var entry = rawKeyframes[i];\n          var styles = entry[1];\n          StringMapWrapper.forEach(styles, function (value /** TODO #9100 */, prop /** TODO #9100 */) {\n              if (!isPresent(lastKeyframeStyles[prop])) {\n                  lastKeyframeStyles[prop] = value;\n              }\n          });\n      }\n      return rawKeyframes.map(function (entry) { return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]])); });\n  }\n  function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {\n      var ast;\n      var playTime = 0;\n      var startingTime = currentTime;\n      if (entry instanceof CompileAnimationWithStepsMetadata) {\n          var maxDuration = 0;\n          var steps = [];\n          var isGroup = entry instanceof CompileAnimationGroupMetadata;\n          var previousStyles;\n          entry.steps.forEach(function (entry) {\n              // these will get picked up by the next step...\n              var time = isGroup ? startingTime : currentTime;\n              if (entry instanceof CompileAnimationStyleMetadata) {\n                  entry.styles.forEach(function (stylesEntry) {\n                      // by this point we know that we only have stringmap values\n                      var map = stylesEntry;\n                      StringMapWrapper.forEach(map, function (value /** TODO #9100 */, prop /** TODO #9100 */) {\n                          collectedStyles.insertAtTime(prop, time, value);\n                      });\n                  });\n                  previousStyles = entry.styles;\n                  return;\n              }\n              var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);\n              if (isPresent(previousStyles)) {\n                  if (entry instanceof CompileAnimationWithStepsMetadata) {\n                      var startingStyles = new AnimationStylesAst(previousStyles);\n                      steps.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));\n                  }\n                  else {\n                      var innerStep = innerAst;\n                      ListWrapper.addAll(innerStep.startingStyles.styles, previousStyles);\n                  }\n                  previousStyles = null;\n              }\n              var astDuration = innerAst.playTime;\n              currentTime += astDuration;\n              playTime += astDuration;\n              maxDuration = Math$2.max(astDuration, maxDuration);\n              steps.push(innerAst);\n          });\n          if (isPresent(previousStyles)) {\n              var startingStyles = new AnimationStylesAst(previousStyles);\n              steps.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));\n          }\n          if (isGroup) {\n              ast = new AnimationGroupAst(steps);\n              playTime = maxDuration;\n              currentTime = startingTime + playTime;\n          }\n          else {\n              ast = new AnimationSequenceAst(steps);\n          }\n      }\n      else if (entry instanceof CompileAnimationAnimateMetadata) {\n          var timings = _parseTimeExpression(entry.timings, errors);\n          var styles = entry.styles;\n          var keyframes;\n          if (styles instanceof CompileAnimationKeyframesSequenceMetadata) {\n              keyframes =\n                  _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);\n          }\n          else {\n              var styleData = styles;\n              var offset = _TERMINAL_KEYFRAME;\n              var styleAst = new AnimationStylesAst(styleData.styles);\n              var keyframe = new AnimationKeyframeAst(offset, styleAst);\n              keyframes = [keyframe];\n          }\n          ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);\n          playTime = timings.duration + timings.delay;\n          currentTime += playTime;\n          keyframes.forEach(function (keyframe /** TODO #9100 */) { return keyframe.styles.styles.forEach(function (entry /** TODO #9100 */) { return StringMapWrapper.forEach(entry, function (value /** TODO #9100 */, prop /** TODO #9100 */) {\n              return collectedStyles.insertAtTime(prop, currentTime, value);\n          }); }); });\n      }\n      else {\n          // if the code reaches this stage then an error\n          // has already been populated within the _normalizeStyleSteps()\n          // operation...\n          ast = new AnimationStepAst(null, [], 0, 0, '');\n      }\n      ast.playTime = playTime;\n      ast.startTime = startingTime;\n      return ast;\n  }\n  function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {\n      // steps that only contain style will not be filled\n      if ((ast instanceof AnimationStepAst) && ast.keyframes.length > 0) {\n          var keyframes = ast.keyframes;\n          if (keyframes.length == 1) {\n              var endKeyframe = keyframes[0];\n              var startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);\n              ast.keyframes = [startKeyframe, endKeyframe];\n          }\n      }\n      else if (ast instanceof AnimationWithStepsAst) {\n          ast.steps.forEach(function (entry) { return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors); });\n      }\n  }\n  function _parseTimeExpression(exp, errors) {\n      var regex = /^([\\.\\d]+)(m?s)(?:\\s+([\\.\\d]+)(m?s))?(?:\\s+([-a-z]+(?:\\(.+?\\))?))?/i;\n      var duration;\n      var delay = 0;\n      var easing = null;\n      if (isString(exp)) {\n          var matches = exp.match(regex);\n          if (matches === null) {\n              errors.push(new AnimationParseError(\"The provided timing value \\\"\" + exp + \"\\\" is invalid.\"));\n              return new _AnimationTimings(0, 0, null);\n          }\n          var durationMatch = NumberWrapper.parseFloat(matches[1]);\n          var durationUnit = matches[2];\n          if (durationUnit == 's') {\n              durationMatch *= _ONE_SECOND;\n          }\n          duration = Math$2.floor(durationMatch);\n          var delayMatch = matches[3];\n          var delayUnit = matches[4];\n          if (isPresent(delayMatch)) {\n              var delayVal = NumberWrapper.parseFloat(delayMatch);\n              if (isPresent(delayUnit) && delayUnit == 's') {\n                  delayVal *= _ONE_SECOND;\n              }\n              delay = Math$2.floor(delayVal);\n          }\n          var easingVal = matches[5];\n          if (!isBlank(easingVal)) {\n              easing = easingVal;\n          }\n      }\n      else {\n          duration = exp;\n      }\n      return new _AnimationTimings(duration, delay, easing);\n  }\n  function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {\n      var values = {};\n      var endTime = startTime + duration;\n      endKeyframe.styles.styles.forEach(function (styleData) {\n          StringMapWrapper.forEach(styleData, function (val /** TODO #9100 */, prop /** TODO #9100 */) {\n              if (prop == 'offset')\n                  return;\n              var resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);\n              var resultEntry /** TODO #9100 */, nextEntry /** TODO #9100 */, value;\n              if (isPresent(resultIndex)) {\n                  resultEntry = collectedStyles.getByIndex(prop, resultIndex);\n                  value = resultEntry.value;\n                  nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);\n              }\n              else {\n                  // this is a flag that the runtime code uses to pass\n                  // in a value either from the state declaration styles\n                  // or using the AUTO_STYLE value (e.g. getComputedStyle)\n                  value = FILL_STYLE_FLAG;\n              }\n              if (isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {\n                  errors.push(new AnimationParseError(\"The animated CSS property \\\"\" + prop + \"\\\" unexpectedly changes between steps \\\"\" + resultEntry.time + \"ms\\\" and \\\"\" + endTime + \"ms\\\" at \\\"\" + nextEntry.time + \"ms\\\"\"));\n              }\n              values[prop] = value;\n          });\n      });\n      return new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));\n  }\n\n  var animationCompilationCache = new Map();\n  var CompiledAnimationTriggerResult = (function () {\n      function CompiledAnimationTriggerResult(name, statesMapStatement, statesVariableName, fnStatement, fnVariable) {\n          this.name = name;\n          this.statesMapStatement = statesMapStatement;\n          this.statesVariableName = statesVariableName;\n          this.fnStatement = fnStatement;\n          this.fnVariable = fnVariable;\n      }\n      return CompiledAnimationTriggerResult;\n  }());\n  var CompiledComponentAnimationResult = (function () {\n      function CompiledComponentAnimationResult(outputs, triggers) {\n          this.outputs = outputs;\n          this.triggers = triggers;\n      }\n      return CompiledComponentAnimationResult;\n  }());\n  var AnimationCompiler = (function () {\n      function AnimationCompiler() {\n      }\n      AnimationCompiler.prototype.compileComponent = function (component, template) {\n          var compiledAnimations = [];\n          var groupedErrors = [];\n          var triggerLookup = {};\n          var componentName = component.type.name;\n          component.template.animations.forEach(function (entry) {\n              var result = parseAnimationEntry(entry);\n              var triggerName = entry.name;\n              if (result.errors.length > 0) {\n                  var errorMessage = \"Unable to parse the animation sequence for \\\"\" + triggerName + \"\\\" due to the following errors:\";\n                  result.errors.forEach(function (error) { errorMessage += '\\n-- ' + error.msg; });\n                  groupedErrors.push(errorMessage);\n              }\n              if (triggerLookup[triggerName]) {\n                  groupedErrors.push(\"The animation trigger \\\"\" + triggerName + \"\\\" has already been registered on \\\"\" + componentName + \"\\\"\");\n              }\n              else {\n                  var factoryName = componentName + \"_\" + entry.name;\n                  var visitor = new _AnimationBuilder(triggerName, factoryName);\n                  var compileResult = visitor.build(result.ast);\n                  compiledAnimations.push(compileResult);\n                  triggerLookup[entry.name] = compileResult;\n              }\n          });\n          var validatedProperties = _validateAnimationProperties(compiledAnimations, template);\n          validatedProperties.errors.forEach(function (error) { groupedErrors.push(error.msg); });\n          if (groupedErrors.length > 0) {\n              var errorMessageStr = \"Animation parsing for \" + component.type.name + \" has failed due to the following errors:\";\n              groupedErrors.forEach(function (error) { return errorMessageStr += \"\\n- \" + error; });\n              throw new Error(errorMessageStr);\n          }\n          animationCompilationCache.set(component, compiledAnimations);\n          return new CompiledComponentAnimationResult(validatedProperties.outputs, compiledAnimations);\n      };\n      return AnimationCompiler;\n  }());\n  var _ANIMATION_FACTORY_ELEMENT_VAR = variable('element');\n  var _ANIMATION_DEFAULT_STATE_VAR = variable('defaultStateStyles');\n  var _ANIMATION_FACTORY_VIEW_VAR = variable('view');\n  var _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');\n  var _ANIMATION_CURRENT_STATE_VAR = variable('currentState');\n  var _ANIMATION_NEXT_STATE_VAR = variable('nextState');\n  var _ANIMATION_PLAYER_VAR = variable('player');\n  var _ANIMATION_TIME_VAR = variable('totalTime');\n  var _ANIMATION_START_STATE_STYLES_VAR = variable('startStateStyles');\n  var _ANIMATION_END_STATE_STYLES_VAR = variable('endStateStyles');\n  var _ANIMATION_COLLECTED_STYLES = variable('collectedStyles');\n  var EMPTY_MAP$1 = literalMap([]);\n  var _AnimationBuilder = (function () {\n      function _AnimationBuilder(animationName, factoryName) {\n          this.animationName = animationName;\n          this._fnVarName = factoryName + '_factory';\n          this._statesMapVarName = factoryName + '_states';\n          this._statesMapVar = variable(this._statesMapVarName);\n      }\n      _AnimationBuilder.prototype.visitAnimationStyles = function (ast, context) {\n          var stylesArr = [];\n          if (context.isExpectingFirstStyleStep) {\n              stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);\n              context.isExpectingFirstStyleStep = false;\n          }\n          ast.styles.forEach(function (entry) {\n              stylesArr.push(literalMap(StringMapWrapper.keys(entry).map(function (key) { return [key, literal(entry[key])]; })));\n          });\n          return importExpr(resolveIdentifier(Identifiers.AnimationStyles)).instantiate([\n              importExpr(resolveIdentifier(Identifiers.collectAndResolveStyles)).callFn([\n                  _ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)\n              ])\n          ]);\n      };\n      _AnimationBuilder.prototype.visitAnimationKeyframe = function (ast, context) {\n          return importExpr(resolveIdentifier(Identifiers.AnimationKeyframe)).instantiate([\n              literal(ast.offset), ast.styles.visit(this, context)\n          ]);\n      };\n      _AnimationBuilder.prototype.visitAnimationStep = function (ast, context) {\n          var _this = this;\n          if (context.endStateAnimateStep === ast) {\n              return this._visitEndStateAnimation(ast, context);\n          }\n          var startingStylesExpr = ast.startingStyles.visit(this, context);\n          var keyframeExpressions = ast.keyframes.map(function (keyframeEntry) { return keyframeEntry.visit(_this, context); });\n          return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions), context);\n      };\n      /** @internal */\n      _AnimationBuilder.prototype._visitEndStateAnimation = function (ast, context) {\n          var _this = this;\n          var startingStylesExpr = ast.startingStyles.visit(this, context);\n          var keyframeExpressions = ast.keyframes.map(function (keyframe) { return keyframe.visit(_this, context); });\n          var keyframesExpr = importExpr(resolveIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([\n              _ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR,\n              literalArr(keyframeExpressions)\n          ]);\n          return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context);\n      };\n      /** @internal */\n      _AnimationBuilder.prototype._callAnimateMethod = function (ast, startingStylesExpr, keyframesExpr, context) {\n          context.totalTransitionTime += ast.duration + ast.delay;\n          return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [\n              _ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration),\n              literal(ast.delay), literal(ast.easing)\n          ]);\n      };\n      _AnimationBuilder.prototype.visitAnimationSequence = function (ast, context) {\n          var _this = this;\n          var playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });\n          return importExpr(resolveIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([\n              literalArr(playerExprs)\n          ]);\n      };\n      _AnimationBuilder.prototype.visitAnimationGroup = function (ast, context) {\n          var _this = this;\n          var playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });\n          return importExpr(resolveIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([\n              literalArr(playerExprs)\n          ]);\n      };\n      _AnimationBuilder.prototype.visitAnimationStateDeclaration = function (ast, context) {\n          var flatStyles = {};\n          _getStylesArray(ast).forEach(function (entry) {\n              StringMapWrapper.forEach(entry, function (value, key) { flatStyles[key] = value; });\n          });\n          context.stateMap.registerState(ast.stateName, flatStyles);\n      };\n      _AnimationBuilder.prototype.visitAnimationStateTransition = function (ast, context) {\n          var steps = ast.animation.steps;\n          var lastStep = steps[steps.length - 1];\n          if (_isEndStateAnimateStep(lastStep)) {\n              context.endStateAnimateStep = lastStep;\n          }\n          context.totalTransitionTime = 0;\n          context.isExpectingFirstStyleStep = true;\n          var stateChangePreconditions = [];\n          ast.stateChanges.forEach(function (stateChange) {\n              stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState)\n                  .and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));\n              if (stateChange.fromState != ANY_STATE) {\n                  context.stateMap.registerState(stateChange.fromState);\n              }\n              if (stateChange.toState != ANY_STATE) {\n                  context.stateMap.registerState(stateChange.toState);\n              }\n          });\n          var animationPlayerExpr = ast.animation.visit(this, context);\n          var reducedStateChangesPrecondition = stateChangePreconditions.reduce(function (a, b) { return a.or(b); });\n          var precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);\n          var animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();\n          var totalTimeStmt = _ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt();\n          return new IfStmt(precondition, [animationStmt, totalTimeStmt]);\n      };\n      _AnimationBuilder.prototype.visitAnimationEntry = function (ast, context) {\n          var _this = this;\n          // visit each of the declarations first to build the context state map\n          ast.stateDeclarations.forEach(function (def) { return def.visit(_this, context); });\n          // this should always be defined even if the user overrides it\n          context.stateMap.registerState(DEFAULT_STATE, {});\n          var statements = [];\n          statements.push(_ANIMATION_FACTORY_VIEW_VAR\n              .callMethod('cancelActiveAnimation', [\n              _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName),\n              _ANIMATION_NEXT_STATE_VAR.equals(literal(EMPTY_ANIMATION_STATE))\n          ])\n              .toStmt());\n          statements.push(_ANIMATION_COLLECTED_STYLES.set(EMPTY_MAP$1).toDeclStmt());\n          statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt());\n          statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt());\n          statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(DEFAULT_STATE)))\n              .toDeclStmt());\n          statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR))\n              .toDeclStmt());\n          statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));\n          statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR))\n              .toDeclStmt());\n          statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));\n          var RENDER_STYLES_FN = importExpr(resolveIdentifier(Identifiers.renderStyles));\n          // before we start any animation we want to clear out the starting\n          // styles from the element's style property (since they were placed\n          // there at the end of the last animation\n          statements.push(RENDER_STYLES_FN\n              .callFn([\n              _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,\n              importExpr(resolveIdentifier(Identifiers.clearStyles))\n                  .callFn([_ANIMATION_START_STATE_STYLES_VAR])\n          ])\n              .toStmt());\n          ast.stateTransitions.forEach(function (transAst) { return statements.push(transAst.visit(_this, context)); });\n          // this check ensures that the animation factory always returns a player\n          // so that the onDone callback can be used for tracking\n          statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR\n                  .set(importExpr(resolveIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([]))\n                  .toStmt()]));\n          // once complete we want to apply the styles on the element\n          // since the destination state's values should persist once\n          // the animation sequence has completed.\n          statements.push(_ANIMATION_PLAYER_VAR\n              .callMethod('onDone', [fn([], [RENDER_STYLES_FN\n                      .callFn([\n                      _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,\n                      importExpr(resolveIdentifier(Identifiers.prepareFinalAnimationStyles))\n                          .callFn([\n                          _ANIMATION_START_STATE_STYLES_VAR, _ANIMATION_END_STATE_STYLES_VAR\n                      ])\n                  ])\n                      .toStmt()])])\n              .toStmt());\n          statements.push(_ANIMATION_FACTORY_VIEW_VAR\n              .callMethod('queueAnimation', [\n              _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName),\n              _ANIMATION_PLAYER_VAR, _ANIMATION_TIME_VAR,\n              _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR\n          ])\n              .toStmt());\n          return fn([\n              new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),\n              new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE),\n              new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE),\n              new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)\n          ], statements);\n      };\n      _AnimationBuilder.prototype.build = function (ast) {\n          var context = new _AnimationBuilderContext();\n          var fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);\n          var fnVariable = variable(this._fnVarName);\n          var lookupMap = [];\n          StringMapWrapper.forEach(context.stateMap.states, function (value, stateName) {\n              var variableValue = EMPTY_MAP$1;\n              if (isPresent(value)) {\n                  var styleMap_1 = [];\n                  StringMapWrapper.forEach(value, function (value, key) {\n                      styleMap_1.push([key, literal(value)]);\n                  });\n                  variableValue = literalMap(styleMap_1);\n              }\n              lookupMap.push([stateName, variableValue]);\n          });\n          var compiledStatesMapExpr = this._statesMapVar.set(literalMap(lookupMap)).toDeclStmt();\n          return new CompiledAnimationTriggerResult(this.animationName, compiledStatesMapExpr, this._statesMapVarName, fnStatement, fnVariable);\n      };\n      return _AnimationBuilder;\n  }());\n  var _AnimationBuilderContext = (function () {\n      function _AnimationBuilderContext() {\n          this.stateMap = new _AnimationBuilderStateMap();\n          this.endStateAnimateStep = null;\n          this.isExpectingFirstStyleStep = false;\n          this.totalTransitionTime = 0;\n      }\n      return _AnimationBuilderContext;\n  }());\n  var _AnimationBuilderStateMap = (function () {\n      function _AnimationBuilderStateMap() {\n          this._states = {};\n      }\n      Object.defineProperty(_AnimationBuilderStateMap.prototype, \"states\", {\n          get: function () { return this._states; },\n          enumerable: true,\n          configurable: true\n      });\n      _AnimationBuilderStateMap.prototype.registerState = function (name, value) {\n          if (value === void 0) { value = null; }\n          var existingEntry = this._states[name];\n          if (isBlank(existingEntry)) {\n              this._states[name] = value;\n          }\n      };\n      return _AnimationBuilderStateMap;\n  }());\n  function _compareToAnimationStateExpr(value, animationState) {\n      var emptyStateLiteral = literal(EMPTY_ANIMATION_STATE);\n      switch (animationState) {\n          case EMPTY_ANIMATION_STATE:\n              return value.equals(emptyStateLiteral);\n          case ANY_STATE:\n              return literal(true);\n          default:\n              return value.equals(literal(animationState));\n      }\n  }\n  function _isEndStateAnimateStep(step) {\n      // the final animation step is characterized by having only TWO\n      // keyframe values and it must have zero styles for both keyframes\n      if (step instanceof AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {\n          var styles1 = _getStylesArray(step.keyframes[0])[0];\n          var styles2 = _getStylesArray(step.keyframes[1])[0];\n          return StringMapWrapper.isEmpty(styles1) && StringMapWrapper.isEmpty(styles2);\n      }\n      return false;\n  }\n  function _getStylesArray(obj) {\n      return obj.styles.styles;\n  }\n  function _validateAnimationProperties(compiledAnimations, template) {\n      var visitor = new _AnimationTemplatePropertyVisitor(compiledAnimations);\n      templateVisitAll(visitor, template);\n      return new AnimationPropertyValidationOutput(visitor.outputs, visitor.errors);\n  }\n  var AnimationPropertyValidationOutput = (function () {\n      function AnimationPropertyValidationOutput(outputs, errors) {\n          this.outputs = outputs;\n          this.errors = errors;\n      }\n      return AnimationPropertyValidationOutput;\n  }());\n  var _AnimationTemplatePropertyVisitor = (function () {\n      function _AnimationTemplatePropertyVisitor(animations) {\n          this.errors = [];\n          this.outputs = [];\n          this._animationRegistry = this._buildCompileAnimationLookup(animations);\n      }\n      _AnimationTemplatePropertyVisitor.prototype._buildCompileAnimationLookup = function (animations) {\n          var map = {};\n          animations.forEach(function (entry) { map[entry.name] = true; });\n          return map;\n      };\n      _AnimationTemplatePropertyVisitor.prototype._validateAnimationInputOutputPairs = function (inputAsts, outputAsts, animationRegistry, isHostLevel) {\n          var _this = this;\n          var detectedAnimationInputs = {};\n          inputAsts.forEach(function (input) {\n              if (input.type == exports.PropertyBindingType.Animation) {\n                  var triggerName = input.name;\n                  if (isPresent(animationRegistry[triggerName])) {\n                      detectedAnimationInputs[triggerName] = true;\n                  }\n                  else {\n                      _this.errors.push(new AnimationParseError(\"Couldn't find an animation entry for \" + triggerName));\n                  }\n              }\n          });\n          outputAsts.forEach(function (output) {\n              if (output.name[0] == '@') {\n                  var normalizedOutputData = parseAnimationOutputName(output.name.substr(1), _this.errors);\n                  var triggerName = normalizedOutputData.name;\n                  var triggerEventPhase = normalizedOutputData.phase;\n                  if (!animationRegistry[triggerName]) {\n                      _this.errors.push(new AnimationParseError(\"Couldn't find the corresponding \" + (isHostLevel ? 'host-level ' : '') + \"animation trigger definition for (@\" + triggerName + \")\"));\n                  }\n                  else if (!detectedAnimationInputs[triggerName]) {\n                      _this.errors.push(new AnimationParseError(\"Unable to listen on (@\" + triggerName + \".\" + triggerEventPhase + \") because the animation trigger [@\" + triggerName + \"] isn't being used on the same element\"));\n                  }\n                  else {\n                      _this.outputs.push(normalizedOutputData);\n                  }\n              }\n          });\n      };\n      _AnimationTemplatePropertyVisitor.prototype.visitElement = function (ast, ctx) {\n          this._validateAnimationInputOutputPairs(ast.inputs, ast.outputs, this._animationRegistry, false);\n          var componentOnElement = ast.directives.find(function (directive) { return directive.directive.isComponent; });\n          if (componentOnElement) {\n              var cachedComponentAnimations = animationCompilationCache.get(componentOnElement.directive);\n              if (cachedComponentAnimations) {\n                  this._validateAnimationInputOutputPairs(componentOnElement.hostProperties, componentOnElement.hostEvents, this._buildCompileAnimationLookup(cachedComponentAnimations), true);\n              }\n          }\n          templateVisitAll(this, ast.children);\n      };\n      _AnimationTemplatePropertyVisitor.prototype.visitEmbeddedTemplate = function (ast, ctx) {\n          templateVisitAll(this, ast.children);\n      };\n      _AnimationTemplatePropertyVisitor.prototype.visitEvent = function (ast, ctx) { };\n      _AnimationTemplatePropertyVisitor.prototype.visitBoundText = function (ast, ctx) { };\n      _AnimationTemplatePropertyVisitor.prototype.visitText = function (ast, ctx) { };\n      _AnimationTemplatePropertyVisitor.prototype.visitNgContent = function (ast, ctx) { };\n      _AnimationTemplatePropertyVisitor.prototype.visitAttr = function (ast, ctx) { };\n      _AnimationTemplatePropertyVisitor.prototype.visitDirective = function (ast, ctx) { };\n      _AnimationTemplatePropertyVisitor.prototype.visitReference = function (ast, ctx) { };\n      _AnimationTemplatePropertyVisitor.prototype.visitVariable = function (ast, ctx) { };\n      _AnimationTemplatePropertyVisitor.prototype.visitDirectiveProperty = function (ast, ctx) { };\n      _AnimationTemplatePropertyVisitor.prototype.visitElementProperty = function (ast, ctx) { };\n      return _AnimationTemplatePropertyVisitor;\n  }());\n\n  function convertValueToOutputAst(value, type) {\n      if (type === void 0) { type = null; }\n      return visitValue(value, new _ValueOutputAstTransformer(), type);\n  }\n  var _ValueOutputAstTransformer = (function () {\n      function _ValueOutputAstTransformer() {\n      }\n      _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) {\n          var _this = this;\n          return literalArr(arr.map(function (value) { return visitValue(value, _this, null); }), type);\n      };\n      _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) {\n          var _this = this;\n          var entries = [];\n          StringMapWrapper.forEach(map, function (value, key) {\n              entries.push([key, visitValue(value, _this, null)]);\n          });\n          return literalMap(entries, type);\n      };\n      _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) { return literal(value, type); };\n      _ValueOutputAstTransformer.prototype.visitOther = function (value, type) {\n          if (value instanceof CompileIdentifierMetadata) {\n              return importExpr(value);\n          }\n          else if (value instanceof Expression) {\n              return value;\n          }\n          else {\n              throw new Error(\"Illegal state: Don't now how to compile value \" + value);\n          }\n      };\n      return _ValueOutputAstTransformer;\n  }());\n\n  var _DebugState = (function () {\n      function _DebugState(nodeIndex, sourceAst) {\n          this.nodeIndex = nodeIndex;\n          this.sourceAst = sourceAst;\n      }\n      return _DebugState;\n  }());\n  var NULL_DEBUG_STATE = new _DebugState(null, null);\n  var CompileMethod = (function () {\n      function CompileMethod(_view) {\n          this._view = _view;\n          this._newState = NULL_DEBUG_STATE;\n          this._currState = NULL_DEBUG_STATE;\n          this._bodyStatements = [];\n          this._debugEnabled = this._view.genConfig.genDebugInfo;\n      }\n      CompileMethod.prototype._updateDebugContextIfNeeded = function () {\n          if (this._newState.nodeIndex !== this._currState.nodeIndex ||\n              this._newState.sourceAst !== this._currState.sourceAst) {\n              var expr = this._updateDebugContext(this._newState);\n              if (isPresent(expr)) {\n                  this._bodyStatements.push(expr.toStmt());\n              }\n          }\n      };\n      CompileMethod.prototype._updateDebugContext = function (newState) {\n          this._currState = this._newState = newState;\n          if (this._debugEnabled) {\n              var sourceLocation = isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;\n              return THIS_EXPR.callMethod('debug', [\n                  literal(newState.nodeIndex),\n                  isPresent(sourceLocation) ? literal(sourceLocation.line) : NULL_EXPR,\n                  isPresent(sourceLocation) ? literal(sourceLocation.col) : NULL_EXPR\n              ]);\n          }\n          else {\n              return null;\n          }\n      };\n      CompileMethod.prototype.resetDebugInfoExpr = function (nodeIndex, templateAst) {\n          var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));\n          return isPresent(res) ? res : NULL_EXPR;\n      };\n      CompileMethod.prototype.resetDebugInfo = function (nodeIndex, templateAst) {\n          this._newState = new _DebugState(nodeIndex, templateAst);\n      };\n      CompileMethod.prototype.addStmt = function (stmt) {\n          this._updateDebugContextIfNeeded();\n          this._bodyStatements.push(stmt);\n      };\n      CompileMethod.prototype.addStmts = function (stmts) {\n          this._updateDebugContextIfNeeded();\n          ListWrapper.addAll(this._bodyStatements, stmts);\n      };\n      CompileMethod.prototype.finish = function () { return this._bodyStatements; };\n      CompileMethod.prototype.isEmpty = function () { return this._bodyStatements.length === 0; };\n      return CompileMethod;\n  }());\n\n  function getPropertyInView(property, callingView, definedView) {\n      if (callingView === definedView) {\n          return property;\n      }\n      else {\n          var viewProp = THIS_EXPR;\n          var currView = callingView;\n          while (currView !== definedView && isPresent(currView.declarationElement.view)) {\n              currView = currView.declarationElement.view;\n              viewProp = viewProp.prop('parent');\n          }\n          if (currView !== definedView) {\n              throw new Error(\"Internal error: Could not calculate a property in a parent view: \" + property);\n          }\n          if (property instanceof ReadPropExpr) {\n              var readPropExpr_1 = property;\n              // Note: Don't cast for members of the AppView base class...\n              if (definedView.fields.some(function (field) { return field.name == readPropExpr_1.name; }) ||\n                  definedView.getters.some(function (field) { return field.name == readPropExpr_1.name; })) {\n                  viewProp = viewProp.cast(definedView.classType);\n              }\n          }\n          return replaceVarInExpression(THIS_EXPR.name, viewProp, property);\n      }\n  }\n  function injectFromViewParentInjector(token, optional) {\n      var args = [createDiTokenExpression(token)];\n      if (optional) {\n          args.push(NULL_EXPR);\n      }\n      return THIS_EXPR.prop('parentInjector').callMethod('get', args);\n  }\n  function getViewFactoryName(component, embeddedTemplateIndex) {\n      return \"viewFactory_\" + component.type.name + embeddedTemplateIndex;\n  }\n  function createFlatArray(expressions) {\n      var lastNonArrayExpressions = [];\n      var result = literalArr([]);\n      for (var i = 0; i < expressions.length; i++) {\n          var expr = expressions[i];\n          if (expr.type instanceof ArrayType) {\n              if (lastNonArrayExpressions.length > 0) {\n                  result =\n                      result.callMethod(BuiltinMethod.ConcatArray, [literalArr(lastNonArrayExpressions)]);\n                  lastNonArrayExpressions = [];\n              }\n              result = result.callMethod(BuiltinMethod.ConcatArray, [expr]);\n          }\n          else {\n              lastNonArrayExpressions.push(expr);\n          }\n      }\n      if (lastNonArrayExpressions.length > 0) {\n          result =\n              result.callMethod(BuiltinMethod.ConcatArray, [literalArr(lastNonArrayExpressions)]);\n      }\n      return result;\n  }\n  function createPureProxy(fn, argCount, pureProxyProp, view) {\n      view.fields.push(new ClassField(pureProxyProp.name, null));\n      var pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;\n      if (isBlank(pureProxyId)) {\n          throw new Error(\"Unsupported number of argument for pure functions: \" + argCount);\n      }\n      view.createMethod.addStmt(THIS_EXPR.prop(pureProxyProp.name)\n          .set(importExpr(resolveIdentifier(pureProxyId)).callFn([fn]))\n          .toStmt());\n  }\n\n  var ViewQueryValues = (function () {\n      function ViewQueryValues(view, values) {\n          this.view = view;\n          this.values = values;\n      }\n      return ViewQueryValues;\n  }());\n  var CompileQuery = (function () {\n      function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {\n          this.meta = meta;\n          this.queryList = queryList;\n          this.ownerDirectiveExpression = ownerDirectiveExpression;\n          this.view = view;\n          this._values = new ViewQueryValues(view, []);\n      }\n      CompileQuery.prototype.addValue = function (value, view) {\n          var currentView = view;\n          var elPath = [];\n          while (isPresent(currentView) && currentView !== this.view) {\n              var parentEl = currentView.declarationElement;\n              elPath.unshift(parentEl);\n              currentView = parentEl.view;\n          }\n          var queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view);\n          var viewValues = this._values;\n          elPath.forEach(function (el) {\n              var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;\n              if (last instanceof ViewQueryValues && last.view === el.embeddedView) {\n                  viewValues = last;\n              }\n              else {\n                  var newViewValues = new ViewQueryValues(el.embeddedView, []);\n                  viewValues.values.push(newViewValues);\n                  viewValues = newViewValues;\n              }\n          });\n          viewValues.values.push(value);\n          if (elPath.length > 0) {\n              view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());\n          }\n      };\n      CompileQuery.prototype._isStatic = function () {\n          return !this._values.values.some(function (value) { return value instanceof ViewQueryValues; });\n      };\n      CompileQuery.prototype.afterChildren = function (targetStaticMethod /** TODO #9100 */, targetDynamicMethod) {\n          var values = createQueryValues(this._values);\n          var updateStmts = [this.queryList.callMethod('reset', [literalArr(values)]).toStmt()];\n          if (isPresent(this.ownerDirectiveExpression)) {\n              var valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;\n              updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());\n          }\n          if (!this.meta.first) {\n              updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());\n          }\n          if (this.meta.first && this._isStatic()) {\n              // for queries that don't change and the user asked for a single element,\n              // set it immediately. That is e.g. needed for querying for ViewContainerRefs, ...\n              // we don't do this for QueryLists for now as this would break the timing when\n              // we call QueryList listeners...\n              targetStaticMethod.addStmts(updateStmts);\n          }\n          else {\n              targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop('dirty'), updateStmts));\n          }\n      };\n      return CompileQuery;\n  }());\n  function createQueryValues(viewValues) {\n      return ListWrapper.flatten(viewValues.values.map(function (entry) {\n          if (entry instanceof ViewQueryValues) {\n              return mapNestedViews(entry.view.declarationElement.appElement, entry.view, createQueryValues(entry));\n          }\n          else {\n              return entry;\n          }\n      }));\n  }\n  function mapNestedViews(declarationAppElement, view, expressions) {\n      var adjustedExpressions = expressions.map(function (expr) {\n          return replaceVarInExpression(THIS_EXPR.name, variable('nestedView'), expr);\n      });\n      return declarationAppElement.callMethod('mapNestedViews', [\n          variable(view.className),\n          fn([new FnParam('nestedView', view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))], DYNAMIC_TYPE)\n      ]);\n  }\n  function createQueryList(query, directiveInstance, propertyName, compileView) {\n      compileView.fields.push(new ClassField(propertyName, importType(resolveIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])));\n      var expr = THIS_EXPR.prop(propertyName);\n      compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName)\n          .set(importExpr(resolveIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])\n          .instantiate([]))\n          .toStmt());\n      return expr;\n  }\n  function addQueryToTokenMap(map, query) {\n      query.meta.selectors.forEach(function (selector) {\n          var entry = map.get(selector.reference);\n          if (isBlank(entry)) {\n              entry = [];\n              map.set(selector.reference, entry);\n          }\n          entry.push(query);\n      });\n  }\n\n  function _enumExpression(classIdentifier, name) {\n      return importExpr(resolveEnumIdentifier(classIdentifier, name));\n  }\n  var ViewTypeEnum = (function () {\n      function ViewTypeEnum() {\n      }\n      ViewTypeEnum.fromValue = function (value) {\n          var viewType = resolveIdentifier(Identifiers.ViewType);\n          switch (value) {\n              case ViewType.HOST:\n                  return _enumExpression(viewType, 'HOST');\n              case ViewType.COMPONENT:\n                  return _enumExpression(viewType, 'COMPONENT');\n              case ViewType.EMBEDDED:\n                  return _enumExpression(viewType, 'EMBEDDED');\n              default:\n                  throw Error(\"Inavlid ViewType value: \" + value);\n          }\n      };\n      return ViewTypeEnum;\n  }());\n  var ViewEncapsulationEnum = (function () {\n      function ViewEncapsulationEnum() {\n      }\n      ViewEncapsulationEnum.fromValue = function (value) {\n          var viewEncapsulation = resolveIdentifier(Identifiers.ViewEncapsulation);\n          switch (value) {\n              case _angular_core.ViewEncapsulation.Emulated:\n                  return _enumExpression(viewEncapsulation, 'Emulated');\n              case _angular_core.ViewEncapsulation.Native:\n                  return _enumExpression(viewEncapsulation, 'Native');\n              case _angular_core.ViewEncapsulation.None:\n                  return _enumExpression(viewEncapsulation, 'None');\n              default:\n                  throw Error(\"Inavlid ViewEncapsulation value: \" + value);\n          }\n      };\n      return ViewEncapsulationEnum;\n  }());\n  var ChangeDetectorStatusEnum = (function () {\n      function ChangeDetectorStatusEnum() {\n      }\n      ChangeDetectorStatusEnum.fromValue = function (value) {\n          var changeDetectorStatus = resolveIdentifier(Identifiers.ChangeDetectorStatus);\n          switch (value) {\n              case ChangeDetectorStatus.CheckOnce:\n                  return _enumExpression(changeDetectorStatus, 'CheckOnce');\n              case ChangeDetectorStatus.Checked:\n                  return _enumExpression(changeDetectorStatus, 'Checked');\n              case ChangeDetectorStatus.CheckAlways:\n                  return _enumExpression(changeDetectorStatus, 'CheckAlways');\n              case ChangeDetectorStatus.Detached:\n                  return _enumExpression(changeDetectorStatus, 'Detached');\n              case ChangeDetectorStatus.Errored:\n                  return _enumExpression(changeDetectorStatus, 'Errored');\n              case ChangeDetectorStatus.Destroyed:\n                  return _enumExpression(changeDetectorStatus, 'Destroyed');\n              default:\n                  throw Error(\"Inavlid ChangeDetectorStatus value: \" + value);\n          }\n      };\n      return ChangeDetectorStatusEnum;\n  }());\n  var ViewConstructorVars = (function () {\n      function ViewConstructorVars() {\n      }\n      ViewConstructorVars.viewUtils = variable('viewUtils');\n      ViewConstructorVars.parentInjector = variable('parentInjector');\n      ViewConstructorVars.declarationEl = variable('declarationEl');\n      return ViewConstructorVars;\n  }());\n  var ViewProperties = (function () {\n      function ViewProperties() {\n      }\n      ViewProperties.renderer = THIS_EXPR.prop('renderer');\n      ViewProperties.projectableNodes = THIS_EXPR.prop('projectableNodes');\n      ViewProperties.viewUtils = THIS_EXPR.prop('viewUtils');\n      return ViewProperties;\n  }());\n  var EventHandlerVars = (function () {\n      function EventHandlerVars() {\n      }\n      EventHandlerVars.event = variable('$event');\n      return EventHandlerVars;\n  }());\n  var InjectMethodVars = (function () {\n      function InjectMethodVars() {\n      }\n      InjectMethodVars.token = variable('token');\n      InjectMethodVars.requestNodeIndex = variable('requestNodeIndex');\n      InjectMethodVars.notFoundResult = variable('notFoundResult');\n      return InjectMethodVars;\n  }());\n  var DetectChangesVars = (function () {\n      function DetectChangesVars() {\n      }\n      DetectChangesVars.throwOnChange = variable(\"throwOnChange\");\n      DetectChangesVars.changes = variable(\"changes\");\n      DetectChangesVars.changed = variable(\"changed\");\n      DetectChangesVars.valUnwrapper = variable(\"valUnwrapper\");\n      return DetectChangesVars;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$13 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var CompileNode = (function () {\n      function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {\n          this.parent = parent;\n          this.view = view;\n          this.nodeIndex = nodeIndex;\n          this.renderNode = renderNode;\n          this.sourceAst = sourceAst;\n      }\n      CompileNode.prototype.isNull = function () { return isBlank(this.renderNode); };\n      CompileNode.prototype.isRootElement = function () { return this.view != this.parent.view; };\n      return CompileNode;\n  }());\n  var CompileElement = (function (_super) {\n      __extends$13(CompileElement, _super);\n      function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) {\n          var _this = this;\n          _super.call(this, parent, view, nodeIndex, renderNode, sourceAst);\n          this.component = component;\n          this._directives = _directives;\n          this._resolvedProvidersArray = _resolvedProvidersArray;\n          this.hasViewContainer = hasViewContainer;\n          this.hasEmbeddedView = hasEmbeddedView;\n          this._compViewExpr = null;\n          this.instances = new Map();\n          this._queryCount = 0;\n          this._queries = new Map();\n          this._componentConstructorViewQueryLists = [];\n          this.contentNodesByNgContentIndex = null;\n          this.referenceTokens = {};\n          references.forEach(function (ref) { return _this.referenceTokens[ref.name] = ref.value; });\n          this.elementRef =\n              importExpr(resolveIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);\n          this.instances.set(resolveIdentifierToken(Identifiers.ElementRef).reference, this.elementRef);\n          this.injector = THIS_EXPR.callMethod('injector', [literal(this.nodeIndex)]);\n          this.instances.set(resolveIdentifierToken(Identifiers.Injector).reference, this.injector);\n          this.instances.set(resolveIdentifierToken(Identifiers.Renderer).reference, THIS_EXPR.prop('renderer'));\n          if (this.hasViewContainer || this.hasEmbeddedView || isPresent(this.component)) {\n              this._createAppElement();\n          }\n      }\n      CompileElement.createNull = function () {\n          return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);\n      };\n      CompileElement.prototype._createAppElement = function () {\n          var fieldName = \"_appEl_\" + this.nodeIndex;\n          var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;\n          // private is fine here as no child view will reference an AppElement\n          this.view.fields.push(new ClassField(fieldName, importType(resolveIdentifier(Identifiers.AppElement)), [StmtModifier.Private]));\n          var statement = THIS_EXPR.prop(fieldName)\n              .set(importExpr(resolveIdentifier(Identifiers.AppElement)).instantiate([\n              literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode\n          ]))\n              .toStmt();\n          this.view.createMethod.addStmt(statement);\n          this.appElement = THIS_EXPR.prop(fieldName);\n          this.instances.set(resolveIdentifierToken(Identifiers.AppElement).reference, this.appElement);\n      };\n      CompileElement.prototype.createComponentFactoryResolver = function (entryComponents) {\n          if (!entryComponents || entryComponents.length === 0) {\n              return;\n          }\n          var createComponentFactoryResolverExpr = importExpr(resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([\n              literalArr(entryComponents.map(function (entryComponent) { return importExpr(entryComponent); })),\n              injectFromViewParentInjector(resolveIdentifierToken(Identifiers.ComponentFactoryResolver), false)\n          ]);\n          var provider = new CompileProviderMetadata({\n              token: resolveIdentifierToken(Identifiers.ComponentFactoryResolver),\n              useValue: createComponentFactoryResolverExpr\n          });\n          // Add ComponentFactoryResolver as first provider as it does not have deps on other providers\n          // ProviderAstType.PrivateService as only the component and its view can see it,\n          // but nobody else\n          this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], exports.ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));\n      };\n      CompileElement.prototype.setComponentView = function (compViewExpr) {\n          this._compViewExpr = compViewExpr;\n          this.contentNodesByNgContentIndex =\n              ListWrapper.createFixedSize(this.component.template.ngContentSelectors.length);\n          for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {\n              this.contentNodesByNgContentIndex[i] = [];\n          }\n      };\n      CompileElement.prototype.setEmbeddedView = function (embeddedView) {\n          this.embeddedView = embeddedView;\n          if (isPresent(embeddedView)) {\n              var createTemplateRefExpr = importExpr(resolveIdentifier(Identifiers.TemplateRef_)).instantiate([\n                  this.appElement, this.embeddedView.viewFactory\n              ]);\n              var provider = new CompileProviderMetadata({\n                  token: resolveIdentifierToken(Identifiers.TemplateRef),\n                  useValue: createTemplateRefExpr\n              });\n              // Add TemplateRef as first provider as it does not have deps on other providers\n              this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], exports.ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));\n          }\n      };\n      CompileElement.prototype.beforeChildren = function () {\n          var _this = this;\n          if (this.hasViewContainer) {\n              this.instances.set(resolveIdentifierToken(Identifiers.ViewContainerRef).reference, this.appElement.prop('vcRef'));\n          }\n          this._resolvedProviders = new Map();\n          this._resolvedProvidersArray.forEach(function (provider) { return _this._resolvedProviders.set(provider.token.reference, provider); });\n          // create all the provider instances, some in the view constructor,\n          // some as getters. We rely on the fact that they are already sorted topologically.\n          MapWrapper.values(this._resolvedProviders).forEach(function (resolvedProvider) {\n              var providerValueExpressions = resolvedProvider.providers.map(function (provider) {\n                  if (isPresent(provider.useExisting)) {\n                      return _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({ token: provider.useExisting }));\n                  }\n                  else if (isPresent(provider.useFactory)) {\n                      var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;\n                      var depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });\n                      return importExpr(provider.useFactory).callFn(depsExpr);\n                  }\n                  else if (isPresent(provider.useClass)) {\n                      var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;\n                      var depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });\n                      return importExpr(provider.useClass)\n                          .instantiate(depsExpr, importType(provider.useClass));\n                  }\n                  else {\n                      return convertValueToOutputAst(provider.useValue);\n                  }\n              });\n              var propName = \"_\" + resolvedProvider.token.name + \"_\" + _this.nodeIndex + \"_\" + _this.instances.size;\n              var instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);\n              _this.instances.set(resolvedProvider.token.reference, instance);\n          });\n          for (var i = 0; i < this._directives.length; i++) {\n              var directive = this._directives[i];\n              var directiveInstance = this.instances.get(identifierToken(directive.type).reference);\n              directive.queries.forEach(function (queryMeta) { _this._addQuery(queryMeta, directiveInstance); });\n          }\n          var queriesWithReads = [];\n          MapWrapper.values(this._resolvedProviders).forEach(function (resolvedProvider) {\n              var queriesForProvider = _this._getQueriesFor(resolvedProvider.token);\n              ListWrapper.addAll(queriesWithReads, queriesForProvider.map(function (query) { return new _QueryWithRead(query, resolvedProvider.token); }));\n          });\n          StringMapWrapper.forEach(this.referenceTokens, function (_, varName) {\n              var token = _this.referenceTokens[varName];\n              var varValue;\n              if (isPresent(token)) {\n                  varValue = _this.instances.get(token.reference);\n              }\n              else {\n                  varValue = _this.renderNode;\n              }\n              _this.view.locals.set(varName, varValue);\n              var varToken = new CompileTokenMetadata({ value: varName });\n              ListWrapper.addAll(queriesWithReads, _this._getQueriesFor(varToken).map(function (query) { return new _QueryWithRead(query, varToken); }));\n          });\n          queriesWithReads.forEach(function (queryWithRead) {\n              var value;\n              if (isPresent(queryWithRead.read.identifier)) {\n                  // query for an identifier\n                  value = _this.instances.get(queryWithRead.read.reference);\n              }\n              else {\n                  // query for a reference\n                  var token = _this.referenceTokens[queryWithRead.read.value];\n                  if (isPresent(token)) {\n                      value = _this.instances.get(token.reference);\n                  }\n                  else {\n                      value = _this.elementRef;\n                  }\n              }\n              if (isPresent(value)) {\n                  queryWithRead.query.addValue(value, _this.view);\n              }\n          });\n          if (isPresent(this.component)) {\n              var componentConstructorViewQueryList = isPresent(this.component) ?\n                  literalArr(this._componentConstructorViewQueryLists) :\n                  NULL_EXPR;\n              var compExpr = isPresent(this.getComponent()) ? this.getComponent() : NULL_EXPR;\n              this.view.createMethod.addStmt(this.appElement\n                  .callMethod('initComponent', [compExpr, componentConstructorViewQueryList, this._compViewExpr])\n                  .toStmt());\n          }\n      };\n      CompileElement.prototype.afterChildren = function (childNodeCount) {\n          var _this = this;\n          MapWrapper.values(this._resolvedProviders).forEach(function (resolvedProvider) {\n              // Note: afterChildren is called after recursing into children.\n              // This is good so that an injector match in an element that is closer to a requesting element\n              // matches first.\n              var providerExpr = _this.instances.get(resolvedProvider.token.reference);\n              // Note: view providers are only visible on the injector of that element.\n              // This is not fully correct as the rules during codegen don't allow a directive\n              // to get hold of a view provdier on the same element. We still do this semantic\n              // as it simplifies our model to having only one runtime injector per element.\n              var providerChildNodeCount = resolvedProvider.providerType === exports.ProviderAstType.PrivateService ? 0 : childNodeCount;\n              _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));\n          });\n          MapWrapper.values(this._queries)\n              .forEach(function (queries) { return queries.forEach(function (query) { return query.afterChildren(_this.view.createMethod, _this.view.updateContentQueriesMethod); }); });\n      };\n      CompileElement.prototype.addContentNode = function (ngContentIndex, nodeExpr) {\n          this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);\n      };\n      CompileElement.prototype.getComponent = function () {\n          return isPresent(this.component) ?\n              this.instances.get(identifierToken(this.component.type).reference) :\n              null;\n      };\n      CompileElement.prototype.getProviderTokens = function () {\n          return MapWrapper.values(this._resolvedProviders)\n              .map(function (resolvedProvider) { return createDiTokenExpression(resolvedProvider.token); });\n      };\n      CompileElement.prototype._getQueriesFor = function (token) {\n          var result = [];\n          var currentEl = this;\n          var distance = 0;\n          var queries;\n          while (!currentEl.isNull()) {\n              queries = currentEl._queries.get(token.reference);\n              if (isPresent(queries)) {\n                  ListWrapper.addAll(result, queries.filter(function (query) { return query.meta.descendants || distance <= 1; }));\n              }\n              if (currentEl._directives.length > 0) {\n                  distance++;\n              }\n              currentEl = currentEl.parent;\n          }\n          queries = this.view.componentView.viewQueries.get(token.reference);\n          if (isPresent(queries)) {\n              ListWrapper.addAll(result, queries);\n          }\n          return result;\n      };\n      CompileElement.prototype._addQuery = function (queryMeta, directiveInstance) {\n          var propName = \"_query_\" + queryMeta.selectors[0].name + \"_\" + this.nodeIndex + \"_\" + this._queryCount++;\n          var queryList = createQueryList(queryMeta, directiveInstance, propName, this.view);\n          var query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);\n          addQueryToTokenMap(this._queries, query);\n          return query;\n      };\n      CompileElement.prototype._getLocalDependency = function (requestingProviderType, dep) {\n          var result = null;\n          // constructor content query\n          if (isBlank(result) && isPresent(dep.query)) {\n              result = this._addQuery(dep.query, null).queryList;\n          }\n          // constructor view query\n          if (isBlank(result) && isPresent(dep.viewQuery)) {\n              result = createQueryList(dep.viewQuery, null, \"_viewQuery_\" + dep.viewQuery.selectors[0].name + \"_\" + this.nodeIndex + \"_\" + this._componentConstructorViewQueryLists.length, this.view);\n              this._componentConstructorViewQueryLists.push(result);\n          }\n          if (isPresent(dep.token)) {\n              // access builtins with special visibility\n              if (isBlank(result)) {\n                  if (dep.token.reference ===\n                      resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {\n                      if (requestingProviderType === exports.ProviderAstType.Component) {\n                          return this._compViewExpr.prop('ref');\n                      }\n                      else {\n                          return getPropertyInView(THIS_EXPR.prop('ref'), this.view, this.view.componentView);\n                      }\n                  }\n              }\n              // access regular providers on the element\n              if (isBlank(result)) {\n                  var resolvedProvider = this._resolvedProviders.get(dep.token.reference);\n                  // don't allow directives / public services to access private services.\n                  // only components and private services can access private services.\n                  if (resolvedProvider && (requestingProviderType === exports.ProviderAstType.Directive ||\n                      requestingProviderType === exports.ProviderAstType.PublicService) &&\n                      resolvedProvider.providerType === exports.ProviderAstType.PrivateService) {\n                      return null;\n                  }\n                  result = this.instances.get(dep.token.reference);\n              }\n          }\n          return result;\n      };\n      CompileElement.prototype._getDependency = function (requestingProviderType, dep) {\n          var currElement = this;\n          var result = null;\n          if (dep.isValue) {\n              result = literal(dep.value);\n          }\n          if (isBlank(result) && !dep.isSkipSelf) {\n              result = this._getLocalDependency(requestingProviderType, dep);\n          }\n          // check parent elements\n          while (isBlank(result) && !currElement.parent.isNull()) {\n              currElement = currElement.parent;\n              result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, new CompileDiDependencyMetadata({ token: dep.token }));\n          }\n          if (isBlank(result)) {\n              result = injectFromViewParentInjector(dep.token, dep.isOptional);\n          }\n          if (isBlank(result)) {\n              result = NULL_EXPR;\n          }\n          return getPropertyInView(result, this.view, currElement.view);\n      };\n      return CompileElement;\n  }(CompileNode));\n  function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {\n      var indexCondition;\n      if (childNodeCount > 0) {\n          indexCondition = literal(nodeIndex)\n              .lowerEquals(InjectMethodVars.requestNodeIndex)\n              .and(InjectMethodVars.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount)));\n      }\n      else {\n          indexCondition = literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex);\n      }\n      return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]);\n  }\n  function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {\n      var view = compileElement.view;\n      var resolvedProviderValueExpr;\n      var type;\n      if (isMulti) {\n          resolvedProviderValueExpr = literalArr(providerValueExpressions);\n          type = new ArrayType(DYNAMIC_TYPE);\n      }\n      else {\n          resolvedProviderValueExpr = providerValueExpressions[0];\n          type = providerValueExpressions[0].type;\n      }\n      if (isBlank(type)) {\n          type = DYNAMIC_TYPE;\n      }\n      if (isEager) {\n          view.fields.push(new ClassField(propName, type));\n          view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());\n      }\n      else {\n          var internalField = \"_\" + propName;\n          view.fields.push(new ClassField(internalField, type));\n          var getter = new CompileMethod(view);\n          getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n          // Note: Equals is important for JS so that it also checks the undefined case!\n          getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));\n          getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField)));\n          view.getters.push(new ClassGetter(propName, getter.finish(), type));\n      }\n      return THIS_EXPR.prop(propName);\n  }\n  var _QueryWithRead = (function () {\n      function _QueryWithRead(query, match) {\n          this.query = query;\n          this.read = isPresent(query.meta.read) ? query.meta.read : match;\n      }\n      return _QueryWithRead;\n  }());\n\n  var CompilePipe = (function () {\n      function CompilePipe(view, meta) {\n          var _this = this;\n          this.view = view;\n          this.meta = meta;\n          this._purePipeProxyCount = 0;\n          this.instance = THIS_EXPR.prop(\"_pipe_\" + meta.name + \"_\" + view.pipeCount++);\n          var deps = this.meta.type.diDeps.map(function (diDep) {\n              if (diDep.token.reference ===\n                  resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {\n                  return getPropertyInView(THIS_EXPR.prop('ref'), _this.view, _this.view.componentView);\n              }\n              return injectFromViewParentInjector(diDep.token, false);\n          });\n          this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type)));\n          this.view.createMethod.resetDebugInfo(null, null);\n          this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name)\n              .set(importExpr(this.meta.type).instantiate(deps))\n              .toStmt());\n      }\n      CompilePipe.call = function (view, name, args) {\n          var compView = view.componentView;\n          var meta = _findPipeMeta(compView, name);\n          var pipe;\n          if (meta.pure) {\n              // pure pipes live on the component view\n              pipe = compView.purePipes.get(name);\n              if (isBlank(pipe)) {\n                  pipe = new CompilePipe(compView, meta);\n                  compView.purePipes.set(name, pipe);\n                  compView.pipes.push(pipe);\n              }\n          }\n          else {\n              // Non pure pipes live on the view that called it\n              pipe = new CompilePipe(view, meta);\n              view.pipes.push(pipe);\n          }\n          return pipe._call(view, args);\n      };\n      Object.defineProperty(CompilePipe.prototype, \"pure\", {\n          get: function () { return this.meta.pure; },\n          enumerable: true,\n          configurable: true\n      });\n      CompilePipe.prototype._call = function (callingView, args) {\n          if (this.meta.pure) {\n              // PurePipeProxies live on the view that called them.\n              var purePipeProxyInstance = THIS_EXPR.prop(this.instance.name + \"_\" + this._purePipeProxyCount++);\n              var pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);\n              createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform')\n                  .callMethod(BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, callingView);\n              return importExpr(resolveIdentifier(Identifiers.castByValue))\n                  .callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')])\n                  .callFn(args);\n          }\n          else {\n              return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);\n          }\n      };\n      return CompilePipe;\n  }());\n  function _findPipeMeta(view, name) {\n      var pipeMeta = null;\n      for (var i = view.pipeMetas.length - 1; i >= 0; i--) {\n          var localPipeMeta = view.pipeMetas[i];\n          if (localPipeMeta.name == name) {\n              pipeMeta = localPipeMeta;\n              break;\n          }\n      }\n      if (isBlank(pipeMeta)) {\n          throw new Error(\"Illegal state: Could not find pipe \" + name + \" although the parser should have detected this error!\");\n      }\n      return pipeMeta;\n  }\n\n  var CompileView = (function () {\n      function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings) {\n          var _this = this;\n          this.component = component;\n          this.genConfig = genConfig;\n          this.pipeMetas = pipeMetas;\n          this.styles = styles;\n          this.animations = animations;\n          this.viewIndex = viewIndex;\n          this.declarationElement = declarationElement;\n          this.templateVariableBindings = templateVariableBindings;\n          this.nodes = [];\n          // root nodes or AppElements for ViewContainers\n          this.rootNodesOrAppElements = [];\n          this.bindings = [];\n          this.classStatements = [];\n          this.eventHandlerMethods = [];\n          this.fields = [];\n          this.getters = [];\n          this.disposables = [];\n          this.subscriptions = [];\n          this.purePipes = new Map();\n          this.pipes = [];\n          this.locals = new Map();\n          this.literalArrayCount = 0;\n          this.literalMapCount = 0;\n          this.pipeCount = 0;\n          this.createMethod = new CompileMethod(this);\n          this.injectorGetMethod = new CompileMethod(this);\n          this.updateContentQueriesMethod = new CompileMethod(this);\n          this.dirtyParentQueriesMethod = new CompileMethod(this);\n          this.updateViewQueriesMethod = new CompileMethod(this);\n          this.detectChangesInInputsMethod = new CompileMethod(this);\n          this.detectChangesRenderPropertiesMethod = new CompileMethod(this);\n          this.afterContentLifecycleCallbacksMethod = new CompileMethod(this);\n          this.afterViewLifecycleCallbacksMethod = new CompileMethod(this);\n          this.destroyMethod = new CompileMethod(this);\n          this.detachMethod = new CompileMethod(this);\n          this.viewType = getViewType(component, viewIndex);\n          this.className = \"_View_\" + component.type.name + viewIndex;\n          this.classType = importType(new CompileIdentifierMetadata({ name: this.className }));\n          this.viewFactory = variable(getViewFactoryName(component, viewIndex));\n          if (this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST) {\n              this.componentView = this;\n          }\n          else {\n              this.componentView = this.declarationElement.view.componentView;\n          }\n          this.componentContext =\n              getPropertyInView(THIS_EXPR.prop('context'), this, this.componentView);\n          var viewQueries = new Map();\n          if (this.viewType === ViewType.COMPONENT) {\n              var directiveInstance = THIS_EXPR.prop('context');\n              ListWrapper.forEachWithIndex(this.component.viewQueries, function (queryMeta, queryIndex) {\n                  var propName = \"_viewQuery_\" + queryMeta.selectors[0].name + \"_\" + queryIndex;\n                  var queryList = createQueryList(queryMeta, directiveInstance, propName, _this);\n                  var query = new CompileQuery(queryMeta, queryList, directiveInstance, _this);\n                  addQueryToTokenMap(viewQueries, query);\n              });\n              var constructorViewQueryCount = 0;\n              this.component.type.diDeps.forEach(function (dep) {\n                  if (isPresent(dep.viewQuery)) {\n                      var queryList = THIS_EXPR.prop('declarationAppElement')\n                          .prop('componentConstructorViewQueries')\n                          .key(literal(constructorViewQueryCount++));\n                      var query = new CompileQuery(dep.viewQuery, queryList, null, _this);\n                      addQueryToTokenMap(viewQueries, query);\n                  }\n              });\n          }\n          this.viewQueries = viewQueries;\n          templateVariableBindings.forEach(function (entry) { _this.locals.set(entry[1], THIS_EXPR.prop('context').prop(entry[0])); });\n          if (!this.declarationElement.isNull()) {\n              this.declarationElement.setEmbeddedView(this);\n          }\n      }\n      CompileView.prototype.callPipe = function (name, input, args) {\n          return CompilePipe.call(this, name, [input].concat(args));\n      };\n      CompileView.prototype.getLocal = function (name) {\n          if (name == EventHandlerVars.event.name) {\n              return EventHandlerVars.event;\n          }\n          var currView = this;\n          var result = currView.locals.get(name);\n          while (isBlank(result) && isPresent(currView.declarationElement.view)) {\n              currView = currView.declarationElement.view;\n              result = currView.locals.get(name);\n          }\n          if (isPresent(result)) {\n              return getPropertyInView(result, this, currView);\n          }\n          else {\n              return null;\n          }\n      };\n      CompileView.prototype.createLiteralArray = function (values) {\n          if (values.length === 0) {\n              return importExpr(resolveIdentifier(Identifiers.EMPTY_ARRAY));\n          }\n          var proxyExpr = THIS_EXPR.prop(\"_arr_\" + this.literalArrayCount++);\n          var proxyParams = [];\n          var proxyReturnEntries = [];\n          for (var i = 0; i < values.length; i++) {\n              var paramName = \"p\" + i;\n              proxyParams.push(new FnParam(paramName));\n              proxyReturnEntries.push(variable(paramName));\n          }\n          createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, this);\n          return proxyExpr.callFn(values);\n      };\n      CompileView.prototype.createLiteralMap = function (entries) {\n          if (entries.length === 0) {\n              return importExpr(resolveIdentifier(Identifiers.EMPTY_MAP));\n          }\n          var proxyExpr = THIS_EXPR.prop(\"_map_\" + this.literalMapCount++);\n          var proxyParams = [];\n          var proxyReturnEntries = [];\n          var values = [];\n          for (var i = 0; i < entries.length; i++) {\n              var paramName = \"p\" + i;\n              proxyParams.push(new FnParam(paramName));\n              proxyReturnEntries.push([entries[i][0], variable(paramName)]);\n              values.push(entries[i][1]);\n          }\n          createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, this);\n          return proxyExpr.callFn(values);\n      };\n      CompileView.prototype.afterNodes = function () {\n          var _this = this;\n          MapWrapper.values(this.viewQueries)\n              .forEach(function (queries) { return queries.forEach(function (query) { return query.afterChildren(_this.createMethod, _this.updateViewQueriesMethod); }); });\n      };\n      return CompileView;\n  }());\n  function getViewType(component, embeddedTemplateIndex) {\n      if (embeddedTemplateIndex > 0) {\n          return ViewType.EMBEDDED;\n      }\n      else if (component.type.isHost) {\n          return ViewType.HOST;\n      }\n      else {\n          return ViewType.COMPONENT;\n      }\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var CompileBinding = (function () {\n      function CompileBinding(node, sourceAst) {\n          this.node = node;\n          this.sourceAst = sourceAst;\n      }\n      return CompileBinding;\n  }());\n\n  var ExpressionWithWrappedValueInfo = (function () {\n      function ExpressionWithWrappedValueInfo(expression, needsValueUnwrapper, temporaryCount) {\n          this.expression = expression;\n          this.needsValueUnwrapper = needsValueUnwrapper;\n          this.temporaryCount = temporaryCount;\n      }\n      return ExpressionWithWrappedValueInfo;\n  }());\n  function convertCdExpressionToIr(nameResolver, implicitReceiver, expression, valueUnwrapper, bindingIndex) {\n      var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, valueUnwrapper, bindingIndex);\n      var irAst = expression.visit(visitor, _Mode.Expression);\n      return new ExpressionWithWrappedValueInfo(irAst, visitor.needsValueUnwrapper, visitor.temporaryCount);\n  }\n  function convertCdStatementToIr(nameResolver, implicitReceiver, stmt, bindingIndex) {\n      var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, null, bindingIndex);\n      var statements = [];\n      flattenStatements(stmt.visit(visitor, _Mode.Statement), statements);\n      prependTemporaryDecls(visitor.temporaryCount, bindingIndex, statements);\n      return statements;\n  }\n  function temporaryName(bindingIndex, temporaryNumber) {\n      return \"tmp_\" + bindingIndex + \"_\" + temporaryNumber;\n  }\n  function temporaryDeclaration(bindingIndex, temporaryNumber) {\n      return new DeclareVarStmt(temporaryName(bindingIndex, temporaryNumber), NULL_EXPR);\n  }\n  function prependTemporaryDecls(temporaryCount, bindingIndex, statements) {\n      for (var i = temporaryCount - 1; i >= 0; i--) {\n          statements.unshift(temporaryDeclaration(bindingIndex, i));\n      }\n  }\n  var _Mode;\n  (function (_Mode) {\n      _Mode[_Mode[\"Statement\"] = 0] = \"Statement\";\n      _Mode[_Mode[\"Expression\"] = 1] = \"Expression\";\n  })(_Mode || (_Mode = {}));\n  function ensureStatementMode(mode, ast) {\n      if (mode !== _Mode.Statement) {\n          throw new Error(\"Expected a statement, but saw \" + ast);\n      }\n  }\n  function ensureExpressionMode(mode, ast) {\n      if (mode !== _Mode.Expression) {\n          throw new Error(\"Expected an expression, but saw \" + ast);\n      }\n  }\n  function convertToStatementIfNeeded(mode, expr) {\n      if (mode === _Mode.Statement) {\n          return expr.toStmt();\n      }\n      else {\n          return expr;\n      }\n  }\n  var _AstToIrVisitor = (function () {\n      function _AstToIrVisitor(_nameResolver, _implicitReceiver, _valueUnwrapper, bindingIndex) {\n          this._nameResolver = _nameResolver;\n          this._implicitReceiver = _implicitReceiver;\n          this._valueUnwrapper = _valueUnwrapper;\n          this.bindingIndex = bindingIndex;\n          this._nodeMap = new Map();\n          this._resultMap = new Map();\n          this._currentTemporary = 0;\n          this.needsValueUnwrapper = false;\n          this.temporaryCount = 0;\n      }\n      _AstToIrVisitor.prototype.visitBinary = function (ast, mode) {\n          var op;\n          switch (ast.operation) {\n              case '+':\n                  op = BinaryOperator.Plus;\n                  break;\n              case '-':\n                  op = BinaryOperator.Minus;\n                  break;\n              case '*':\n                  op = BinaryOperator.Multiply;\n                  break;\n              case '/':\n                  op = BinaryOperator.Divide;\n                  break;\n              case '%':\n                  op = BinaryOperator.Modulo;\n                  break;\n              case '&&':\n                  op = BinaryOperator.And;\n                  break;\n              case '||':\n                  op = BinaryOperator.Or;\n                  break;\n              case '==':\n                  op = BinaryOperator.Equals;\n                  break;\n              case '!=':\n                  op = BinaryOperator.NotEquals;\n                  break;\n              case '===':\n                  op = BinaryOperator.Identical;\n                  break;\n              case '!==':\n                  op = BinaryOperator.NotIdentical;\n                  break;\n              case '<':\n                  op = BinaryOperator.Lower;\n                  break;\n              case '>':\n                  op = BinaryOperator.Bigger;\n                  break;\n              case '<=':\n                  op = BinaryOperator.LowerEquals;\n                  break;\n              case '>=':\n                  op = BinaryOperator.BiggerEquals;\n                  break;\n              default:\n                  throw new Error(\"Unsupported operation \" + ast.operation);\n          }\n          return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));\n      };\n      _AstToIrVisitor.prototype.visitChain = function (ast, mode) {\n          ensureStatementMode(mode, ast);\n          return this.visitAll(ast.expressions, mode);\n      };\n      _AstToIrVisitor.prototype.visitConditional = function (ast, mode) {\n          var value = this.visit(ast.condition, _Mode.Expression);\n          return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));\n      };\n      _AstToIrVisitor.prototype.visitPipe = function (ast, mode) {\n          var input = this.visit(ast.exp, _Mode.Expression);\n          var args = this.visitAll(ast.args, _Mode.Expression);\n          var value = this._nameResolver.callPipe(ast.name, input, args);\n          this.needsValueUnwrapper = true;\n          return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));\n      };\n      _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) {\n          return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));\n      };\n      _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) {\n          ensureExpressionMode(mode, ast);\n          return this._implicitReceiver;\n      };\n      _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) {\n          ensureExpressionMode(mode, ast);\n          var args = [literal(ast.expressions.length)];\n          for (var i = 0; i < ast.strings.length - 1; i++) {\n              args.push(literal(ast.strings[i]));\n              args.push(this.visit(ast.expressions[i], _Mode.Expression));\n          }\n          args.push(literal(ast.strings[ast.strings.length - 1]));\n          return importExpr(resolveIdentifier(Identifiers.interpolate)).callFn(args);\n      };\n      _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) {\n          return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));\n      };\n      _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) {\n          var obj = this.visit(ast.obj, _Mode.Expression);\n          var key = this.visit(ast.key, _Mode.Expression);\n          var value = this.visit(ast.value, _Mode.Expression);\n          return convertToStatementIfNeeded(mode, obj.key(key).set(value));\n      };\n      _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) {\n          return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralArray(this.visitAll(ast.expressions, mode)));\n      };\n      _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) {\n          var parts = [];\n          for (var i = 0; i < ast.keys.length; i++) {\n              parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]);\n          }\n          return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralMap(parts));\n      };\n      _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) {\n          return convertToStatementIfNeeded(mode, literal(ast.value));\n      };\n      _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) {\n          var leftMostSafe = this.leftMostSafeNode(ast);\n          if (leftMostSafe) {\n              return this.convertSafeAccess(ast, leftMostSafe, mode);\n          }\n          else {\n              var args = this.visitAll(ast.args, _Mode.Expression);\n              var result = null;\n              var receiver = this.visit(ast.receiver, _Mode.Expression);\n              if (receiver === this._implicitReceiver) {\n                  var varExpr = this._nameResolver.getLocal(ast.name);\n                  if (isPresent(varExpr)) {\n                      result = varExpr.callFn(args);\n                  }\n              }\n              if (isBlank(result)) {\n                  result = receiver.callMethod(ast.name, args);\n              }\n              return convertToStatementIfNeeded(mode, result);\n          }\n      };\n      _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) {\n          return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));\n      };\n      _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) {\n          var leftMostSafe = this.leftMostSafeNode(ast);\n          if (leftMostSafe) {\n              return this.convertSafeAccess(ast, leftMostSafe, mode);\n          }\n          else {\n              var result = null;\n              var receiver = this.visit(ast.receiver, _Mode.Expression);\n              if (receiver === this._implicitReceiver) {\n                  result = this._nameResolver.getLocal(ast.name);\n              }\n              if (isBlank(result)) {\n                  result = receiver.prop(ast.name);\n              }\n              return convertToStatementIfNeeded(mode, result);\n          }\n      };\n      _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) {\n          var receiver = this.visit(ast.receiver, _Mode.Expression);\n          if (receiver === this._implicitReceiver) {\n              var varExpr = this._nameResolver.getLocal(ast.name);\n              if (isPresent(varExpr)) {\n                  throw new Error('Cannot assign to a reference or variable!');\n              }\n          }\n          return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));\n      };\n      _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) {\n          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n      };\n      _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) {\n          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n      };\n      _AstToIrVisitor.prototype.visitAll = function (asts, mode) {\n          var _this = this;\n          return asts.map(function (ast) { return _this.visit(ast, mode); });\n      };\n      _AstToIrVisitor.prototype.visitQuote = function (ast, mode) {\n          throw new Error('Quotes are not supported for evaluation!');\n      };\n      _AstToIrVisitor.prototype.visit = function (ast, mode) {\n          var result = this._resultMap.get(ast);\n          if (result)\n              return result;\n          return (this._nodeMap.get(ast) || ast).visit(this, mode);\n      };\n      _AstToIrVisitor.prototype.convertSafeAccess = function (ast, leftMostSafe, mode) {\n          // If the expression contains a safe access node on the left it needs to be converted to\n          // an expression that guards the access to the member by checking the receiver for blank. As\n          // execution proceeds from left to right, the left most part of the expression must be guarded\n          // first but, because member access is left associative, the right side of the expression is at\n          // the top of the AST. The desired result requires lifting a copy of the the left part of the\n          // expression up to test it for blank before generating the unguarded version.\n          // Consider, for example the following expression: a?.b.c?.d.e\n          // This results in the ast:\n          //         .\n          //        / \\\n          //       ?.   e\n          //      /  \\\n          //     .    d\n          //    / \\\n          //   ?.  c\n          //  /  \\\n          // a    b\n          // The following tree should be generated:\n          //\n          //        /---- ? ----\\\n          //       /      |      \\\n          //     a   /--- ? ---\\  null\n          //        /     |     \\\n          //       .      .     null\n          //      / \\    / \\\n          //     .  c   .   e\n          //    / \\    / \\\n          //   a   b  ,   d\n          //         / \\\n          //        .   c\n          //       / \\\n          //      a   b\n          //\n          // Notice that the first guard condition is the left hand of the left most safe access node\n          // which comes in as leftMostSafe to this routine.\n          var guardedExpression = this.visit(leftMostSafe.receiver, mode);\n          var temporary;\n          if (this.needsTemporary(leftMostSafe.receiver)) {\n              // If the expression has method calls or pipes then we need to save the result into a\n              // temporary variable to avoid calling stateful or impure code more than once.\n              temporary = this.allocateTemporary();\n              // Preserve the result in the temporary variable\n              guardedExpression = temporary.set(guardedExpression);\n              // Ensure all further references to the guarded expression refer to the temporary instead.\n              this._resultMap.set(leftMostSafe.receiver, temporary);\n          }\n          var condition = guardedExpression.isBlank();\n          // Convert the ast to an unguarded access to the receiver's member. The map will substitute\n          // leftMostNode with its unguarded version in the call to `this.visit()`.\n          if (leftMostSafe instanceof SafeMethodCall) {\n              this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));\n          }\n          else {\n              this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));\n          }\n          // Recursively convert the node now without the guarded member access.\n          var access = this.visit(ast, mode);\n          // Remove the mapping. This is not strictly required as the converter only traverses each node\n          // once but is safer if the conversion is changed to traverse the nodes more than once.\n          this._nodeMap.delete(leftMostSafe);\n          // If we allcoated a temporary, release it.\n          if (temporary) {\n              this.releaseTemporary(temporary);\n          }\n          // Produce the conditional\n          return condition.conditional(literal(null), access);\n      };\n      // Given a expression of the form a?.b.c?.d.e the the left most safe node is\n      // the (a?.b). The . and ?. are left associative thus can be rewritten as:\n      // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or\n      // safe method call as this needs be transform initially to:\n      //   a == null ? null : a.c.b.c?.d.e\n      // then to:\n      //   a == null ? null : a.b.c == null ? null : a.b.c.d.e\n      _AstToIrVisitor.prototype.leftMostSafeNode = function (ast) {\n          var _this = this;\n          var visit = function (visitor, ast) {\n              return (_this._nodeMap.get(ast) || ast).visit(visitor);\n          };\n          return ast.visit({\n              visitBinary: function (ast) { return null; },\n              visitChain: function (ast) { return null; },\n              visitConditional: function (ast) { return null; },\n              visitFunctionCall: function (ast) { return null; },\n              visitImplicitReceiver: function (ast) { return null; },\n              visitInterpolation: function (ast) { return null; },\n              visitKeyedRead: function (ast) { return visit(this, ast.obj); },\n              visitKeyedWrite: function (ast) { return null; },\n              visitLiteralArray: function (ast) { return null; },\n              visitLiteralMap: function (ast) { return null; },\n              visitLiteralPrimitive: function (ast) { return null; },\n              visitMethodCall: function (ast) { return visit(this, ast.receiver); },\n              visitPipe: function (ast) { return null; },\n              visitPrefixNot: function (ast) { return null; },\n              visitPropertyRead: function (ast) { return visit(this, ast.receiver); },\n              visitPropertyWrite: function (ast) { return null; },\n              visitQuote: function (ast) { return null; },\n              visitSafeMethodCall: function (ast) { return visit(this, ast.receiver) || ast; },\n              visitSafePropertyRead: function (ast) {\n                  return visit(this, ast.receiver) || ast;\n              }\n          });\n      };\n      // Returns true of the AST includes a method or a pipe indicating that, if the\n      // expression is used as the target of a safe property or method access then\n      // the expression should be stored into a temporary variable.\n      _AstToIrVisitor.prototype.needsTemporary = function (ast) {\n          var _this = this;\n          var visit = function (visitor, ast) {\n              return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);\n          };\n          var visitSome = function (visitor, ast) {\n              return ast.some(function (ast) { return visit(visitor, ast); });\n          };\n          return ast.visit({\n              visitBinary: function (ast) { return visit(this, ast.left) || visit(this, ast.right); },\n              visitChain: function (ast) { return false; },\n              visitConditional: function (ast) {\n                  return visit(this, ast.condition) || visit(this, ast.trueExp) ||\n                      visit(this, ast.falseExp);\n              },\n              visitFunctionCall: function (ast) { return true; },\n              visitImplicitReceiver: function (ast) { return false; },\n              visitInterpolation: function (ast) { return visitSome(this, ast.expressions); },\n              visitKeyedRead: function (ast) { return false; },\n              visitKeyedWrite: function (ast) { return false; },\n              visitLiteralArray: function (ast) { return true; },\n              visitLiteralMap: function (ast) { return true; },\n              visitLiteralPrimitive: function (ast) { return false; },\n              visitMethodCall: function (ast) { return true; },\n              visitPipe: function (ast) { return true; },\n              visitPrefixNot: function (ast) { return visit(this, ast.expression); },\n              visitPropertyRead: function (ast) { return false; },\n              visitPropertyWrite: function (ast) { return false; },\n              visitQuote: function (ast) { return false; },\n              visitSafeMethodCall: function (ast) { return true; },\n              visitSafePropertyRead: function (ast) { return false; }\n          });\n      };\n      _AstToIrVisitor.prototype.allocateTemporary = function () {\n          var tempNumber = this._currentTemporary++;\n          this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);\n          return new ReadVarExpr(temporaryName(this.bindingIndex, tempNumber));\n      };\n      _AstToIrVisitor.prototype.releaseTemporary = function (temporary) {\n          this._currentTemporary--;\n          if (temporary.name != temporaryName(this.bindingIndex, this._currentTemporary)) {\n              throw new Error(\"Temporary \" + temporary.name + \" released out of order\");\n          }\n      };\n      return _AstToIrVisitor;\n  }());\n  function flattenStatements(arg, output) {\n      if (isArray(arg)) {\n          arg.forEach(function (entry) { return flattenStatements(entry, output); });\n      }\n      else {\n          output.push(arg);\n      }\n  }\n\n  var CompileElementAnimationOutput = (function () {\n      function CompileElementAnimationOutput(listener, output) {\n          this.listener = listener;\n          this.output = output;\n      }\n      return CompileElementAnimationOutput;\n  }());\n  var CompileEventListener = (function () {\n      function CompileEventListener(compileElement, eventTarget, eventName, listenerIndex) {\n          this.compileElement = compileElement;\n          this.eventTarget = eventTarget;\n          this.eventName = eventName;\n          this._hasComponentHostListener = false;\n          this._actionResultExprs = [];\n          this._method = new CompileMethod(compileElement.view);\n          this._methodName =\n              \"_handle_\" + santitizeEventName(eventName) + \"_\" + compileElement.nodeIndex + \"_\" + listenerIndex;\n          this._eventParam = new FnParam(EventHandlerVars.event.name, importType(this.compileElement.view.genConfig.renderTypes.renderEvent));\n      }\n      CompileEventListener.getOrCreate = function (compileElement, eventTarget, eventName, targetEventListeners) {\n          var listener = targetEventListeners.find(function (listener) { return listener.eventTarget == eventTarget && listener.eventName == eventName; });\n          if (isBlank(listener)) {\n              listener = new CompileEventListener(compileElement, eventTarget, eventName, targetEventListeners.length);\n              targetEventListeners.push(listener);\n          }\n          return listener;\n      };\n      Object.defineProperty(CompileEventListener.prototype, \"methodName\", {\n          get: function () { return this._methodName; },\n          enumerable: true,\n          configurable: true\n      });\n      CompileEventListener.prototype.addAction = function (hostEvent, directive, directiveInstance) {\n          if (isPresent(directive) && directive.isComponent) {\n              this._hasComponentHostListener = true;\n          }\n          this._method.resetDebugInfo(this.compileElement.nodeIndex, hostEvent);\n          var context = isPresent(directiveInstance) ? directiveInstance :\n              this.compileElement.view.componentContext;\n          var actionStmts = convertCdStatementToIr(this.compileElement.view, context, hostEvent.handler, this.compileElement.nodeIndex);\n          var lastIndex = actionStmts.length - 1;\n          if (lastIndex >= 0) {\n              var lastStatement = actionStmts[lastIndex];\n              var returnExpr = convertStmtIntoExpression(lastStatement);\n              var preventDefaultVar = variable(\"pd_\" + this._actionResultExprs.length);\n              this._actionResultExprs.push(preventDefaultVar);\n              if (isPresent(returnExpr)) {\n                  // Note: We need to cast the result of the method call to dynamic,\n                  // as it might be a void method!\n                  actionStmts[lastIndex] =\n                      preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false)))\n                          .toDeclStmt(null, [StmtModifier.Final]);\n              }\n          }\n          this._method.addStmts(actionStmts);\n      };\n      CompileEventListener.prototype.finishMethod = function () {\n          var markPathToRootStart = this._hasComponentHostListener ?\n              this.compileElement.appElement.prop('componentView') :\n              THIS_EXPR;\n          var resultExpr = literal(true);\n          this._actionResultExprs.forEach(function (expr) { resultExpr = resultExpr.and(expr); });\n          var stmts = [markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt()]\n              .concat(this._method.finish())\n              .concat([new ReturnStatement(resultExpr)]);\n          // private is fine here as no child view will reference the event handler...\n          this.compileElement.view.eventHandlerMethods.push(new ClassMethod(this._methodName, [this._eventParam], stmts, BOOL_TYPE, [StmtModifier.Private]));\n      };\n      CompileEventListener.prototype.listenToRenderer = function () {\n          var listenExpr;\n          var eventListener = THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(this._methodName).callMethod(BuiltinMethod.Bind, [THIS_EXPR])]);\n          if (isPresent(this.eventTarget)) {\n              listenExpr = ViewProperties.renderer.callMethod('listenGlobal', [literal(this.eventTarget), literal(this.eventName), eventListener]);\n          }\n          else {\n              listenExpr = ViewProperties.renderer.callMethod('listen', [this.compileElement.renderNode, literal(this.eventName), eventListener]);\n          }\n          var disposable = variable(\"disposable_\" + this.compileElement.view.disposables.length);\n          this.compileElement.view.disposables.push(disposable);\n          // private is fine here as no child view will reference the event handler...\n          this.compileElement.view.createMethod.addStmt(disposable.set(listenExpr).toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private]));\n      };\n      CompileEventListener.prototype.listenToAnimation = function (output) {\n          var outputListener = THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(this._methodName).callMethod(BuiltinMethod.Bind, [THIS_EXPR])]);\n          // tie the property callback method to the view animations map\n          var stmt = THIS_EXPR\n              .callMethod('registerAnimationOutput', [\n              this.compileElement.renderNode,\n              importExpr(resolveIdentifier(Identifiers.AnimationOutput)).instantiate([\n                  literal(output.name), literal(output.phase)\n              ]),\n              outputListener\n          ])\n              .toStmt();\n          this.compileElement.view.createMethod.addStmt(stmt);\n      };\n      CompileEventListener.prototype.listenToDirective = function (directiveInstance, observablePropName) {\n          var subscription = variable(\"subscription_\" + this.compileElement.view.subscriptions.length);\n          this.compileElement.view.subscriptions.push(subscription);\n          var eventListener = THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(this._methodName).callMethod(BuiltinMethod.Bind, [THIS_EXPR])]);\n          this.compileElement.view.createMethod.addStmt(subscription\n              .set(directiveInstance.prop(observablePropName)\n              .callMethod(BuiltinMethod.SubscribeObservable, [eventListener]))\n              .toDeclStmt(null, [StmtModifier.Final]));\n      };\n      return CompileEventListener;\n  }());\n  function collectEventListeners(hostEvents, dirs, compileElement) {\n      var eventListeners = [];\n      hostEvents.forEach(function (hostEvent) {\n          compileElement.view.bindings.push(new CompileBinding(compileElement, hostEvent));\n          var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);\n          listener.addAction(hostEvent, null, null);\n      });\n      dirs.forEach(function (directiveAst) {\n          var directiveInstance = compileElement.instances.get(identifierToken(directiveAst.directive.type).reference);\n          directiveAst.hostEvents.forEach(function (hostEvent) {\n              compileElement.view.bindings.push(new CompileBinding(compileElement, hostEvent));\n              var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);\n              listener.addAction(hostEvent, directiveAst.directive, directiveInstance);\n          });\n      });\n      eventListeners.forEach(function (listener) { return listener.finishMethod(); });\n      return eventListeners;\n  }\n  function bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners) {\n      StringMapWrapper.forEach(directiveAst.directive.outputs, function (eventName /** TODO #9100 */, observablePropName /** TODO #9100 */) {\n          eventListeners.filter(function (listener) { return listener.eventName == eventName; }).forEach(function (listener) {\n              listener.listenToDirective(directiveInstance, observablePropName);\n          });\n      });\n  }\n  function bindRenderOutputs(eventListeners) {\n      eventListeners.forEach(function (listener) { return listener.listenToRenderer(); });\n  }\n  function bindAnimationOutputs(eventListeners) {\n      eventListeners.forEach(function (entry) { entry.listener.listenToAnimation(entry.output); });\n  }\n  function convertStmtIntoExpression(stmt) {\n      if (stmt instanceof ExpressionStatement) {\n          return stmt.expr;\n      }\n      else if (stmt instanceof ReturnStatement) {\n          return stmt.value;\n      }\n      return null;\n  }\n  function santitizeEventName(name) {\n      return StringWrapper.replaceAll(name, /[^a-zA-Z_]/g, '_');\n  }\n\n  var STATE_IS_NEVER_CHECKED = THIS_EXPR.prop('numberOfChecks').identical(new LiteralExpr(0));\n  var NOT_THROW_ON_CHANGES = not(DetectChangesVars.throwOnChange);\n  function bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement) {\n      var view = compileElement.view;\n      var detectChangesInInputsMethod = view.detectChangesInInputsMethod;\n      var lifecycleHooks = directiveAst.directive.type.lifecycleHooks;\n      if (lifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 && directiveAst.inputs.length > 0) {\n          detectChangesInInputsMethod.addStmt(new IfStmt(DetectChangesVars.changes.notIdentical(NULL_EXPR), [directiveInstance.callMethod('ngOnChanges', [DetectChangesVars.changes]).toStmt()]));\n      }\n      if (lifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1) {\n          detectChangesInInputsMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED.and(NOT_THROW_ON_CHANGES), [directiveInstance.callMethod('ngOnInit', []).toStmt()]));\n      }\n      if (lifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1) {\n          detectChangesInInputsMethod.addStmt(new IfStmt(NOT_THROW_ON_CHANGES, [directiveInstance.callMethod('ngDoCheck', []).toStmt()]));\n      }\n  }\n  function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {\n      var view = compileElement.view;\n      var lifecycleHooks = directiveMeta.type.lifecycleHooks;\n      var afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;\n      afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n      if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1) {\n          afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));\n      }\n      if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1) {\n          afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());\n      }\n  }\n  function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {\n      var view = compileElement.view;\n      var lifecycleHooks = directiveMeta.type.lifecycleHooks;\n      var afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;\n      afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n      if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1) {\n          afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));\n      }\n      if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1) {\n          afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());\n      }\n  }\n  function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {\n      var onDestroyMethod = compileElement.view.destroyMethod;\n      onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n      if (provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {\n          onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy', []).toStmt());\n      }\n  }\n  function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {\n      var onDestroyMethod = view.destroyMethod;\n      if (pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {\n          onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());\n      }\n  }\n\n  function createBindFieldExpr(exprIndex) {\n      return THIS_EXPR.prop(\"_expr_\" + exprIndex);\n  }\n  function createCurrValueExpr(exprIndex) {\n      return variable(\"currVal_\" + exprIndex); // fix syntax highlighting: `\n  }\n  var _animationViewCheckedFlagMap = new Map();\n  function bind(view, currValExpr, fieldExpr, parsedExpression, context, actions, method, bindingIndex) {\n      var checkExpression = convertCdExpressionToIr(view, context, parsedExpression, DetectChangesVars.valUnwrapper, bindingIndex);\n      if (isBlank(checkExpression.expression)) {\n          // e.g. an empty expression was given\n          return;\n      }\n      if (checkExpression.temporaryCount) {\n          for (var i = 0; i < checkExpression.temporaryCount; i++) {\n              method.addStmt(temporaryDeclaration(bindingIndex, i));\n          }\n      }\n      // private is fine here as no child view will reference the cached value...\n      view.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private]));\n      view.createMethod.addStmt(THIS_EXPR.prop(fieldExpr.name)\n          .set(importExpr(resolveIdentifier(Identifiers.UNINITIALIZED)))\n          .toStmt());\n      if (checkExpression.needsValueUnwrapper) {\n          var initValueUnwrapperStmt = DetectChangesVars.valUnwrapper.callMethod('reset', []).toStmt();\n          method.addStmt(initValueUnwrapperStmt);\n      }\n      method.addStmt(currValExpr.set(checkExpression.expression).toDeclStmt(null, [StmtModifier.Final]));\n      var condition = importExpr(resolveIdentifier(Identifiers.checkBinding)).callFn([\n          DetectChangesVars.throwOnChange, fieldExpr, currValExpr\n      ]);\n      if (checkExpression.needsValueUnwrapper) {\n          condition = DetectChangesVars.valUnwrapper.prop('hasWrappedValue').or(condition);\n      }\n      method.addStmt(new IfStmt(condition, actions.concat([THIS_EXPR.prop(fieldExpr.name).set(currValExpr).toStmt()])));\n  }\n  function bindRenderText(boundText, compileNode, view) {\n      var bindingIndex = view.bindings.length;\n      view.bindings.push(new CompileBinding(compileNode, boundText));\n      var currValExpr = createCurrValueExpr(bindingIndex);\n      var valueField = createBindFieldExpr(bindingIndex);\n      view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);\n      bind(view, currValExpr, valueField, boundText.value, view.componentContext, [THIS_EXPR.prop('renderer')\n              .callMethod('setText', [compileNode.renderNode, currValExpr])\n              .toStmt()], view.detectChangesRenderPropertiesMethod, bindingIndex);\n  }\n  function bindAndWriteToRenderer(boundProps, context, compileElement, isHostProp) {\n      var view = compileElement.view;\n      var renderNode = compileElement.renderNode;\n      boundProps.forEach(function (boundProp) {\n          var bindingIndex = view.bindings.length;\n          view.bindings.push(new CompileBinding(compileElement, boundProp));\n          view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);\n          var fieldExpr = createBindFieldExpr(bindingIndex);\n          var currValExpr = createCurrValueExpr(bindingIndex);\n          var renderMethod;\n          var oldRenderValue = sanitizedValue(boundProp, fieldExpr);\n          var renderValue = sanitizedValue(boundProp, currValExpr);\n          var updateStmts = [];\n          switch (boundProp.type) {\n              case exports.PropertyBindingType.Property:\n                  if (view.genConfig.logBindingUpdate) {\n                      updateStmts.push(logBindingUpdateStmt(renderNode, boundProp.name, renderValue));\n                  }\n                  updateStmts.push(THIS_EXPR.prop('renderer')\n                      .callMethod('setElementProperty', [renderNode, literal(boundProp.name), renderValue])\n                      .toStmt());\n                  break;\n              case exports.PropertyBindingType.Attribute:\n                  renderValue =\n                      renderValue.isBlank().conditional(NULL_EXPR, renderValue.callMethod('toString', []));\n                  updateStmts.push(THIS_EXPR.prop('renderer')\n                      .callMethod('setElementAttribute', [renderNode, literal(boundProp.name), renderValue])\n                      .toStmt());\n                  break;\n              case exports.PropertyBindingType.Class:\n                  updateStmts.push(THIS_EXPR.prop('renderer')\n                      .callMethod('setElementClass', [renderNode, literal(boundProp.name), renderValue])\n                      .toStmt());\n                  break;\n              case exports.PropertyBindingType.Style:\n                  var strValue = renderValue.callMethod('toString', []);\n                  if (isPresent(boundProp.unit)) {\n                      strValue = strValue.plus(literal(boundProp.unit));\n                  }\n                  renderValue = renderValue.isBlank().conditional(NULL_EXPR, strValue);\n                  updateStmts.push(THIS_EXPR.prop('renderer')\n                      .callMethod('setElementStyle', [renderNode, literal(boundProp.name), renderValue])\n                      .toStmt());\n                  break;\n              case exports.PropertyBindingType.Animation:\n                  var animationName = boundProp.name;\n                  var targetViewExpr = THIS_EXPR;\n                  if (isHostProp) {\n                      targetViewExpr = compileElement.appElement.prop('componentView');\n                  }\n                  var animationFnExpr = targetViewExpr.prop('componentType').prop('animations').key(literal(animationName));\n                  // it's important to normalize the void value as `void` explicitly\n                  // so that the styles data can be obtained from the stringmap\n                  var emptyStateValue = literal(EMPTY_ANIMATION_STATE);\n                  // void => ...\n                  var oldRenderVar = variable('oldRenderVar');\n                  updateStmts.push(oldRenderVar.set(oldRenderValue).toDeclStmt());\n                  updateStmts.push(new IfStmt(oldRenderVar.equals(importExpr(resolveIdentifier(Identifiers.UNINITIALIZED))), [oldRenderVar.set(emptyStateValue).toStmt()]));\n                  // ... => void\n                  var newRenderVar = variable('newRenderVar');\n                  updateStmts.push(newRenderVar.set(renderValue).toDeclStmt());\n                  updateStmts.push(new IfStmt(newRenderVar.equals(importExpr(resolveIdentifier(Identifiers.UNINITIALIZED))), [newRenderVar.set(emptyStateValue).toStmt()]));\n                  updateStmts.push(animationFnExpr.callFn([THIS_EXPR, renderNode, oldRenderVar, newRenderVar]).toStmt());\n                  view.detachMethod.addStmt(animationFnExpr.callFn([THIS_EXPR, renderNode, oldRenderValue, emptyStateValue])\n                      .toStmt());\n                  if (!_animationViewCheckedFlagMap.get(view)) {\n                      _animationViewCheckedFlagMap.set(view, true);\n                      var triggerStmt = THIS_EXPR.callMethod('triggerQueuedAnimations', []).toStmt();\n                      view.afterViewLifecycleCallbacksMethod.addStmt(triggerStmt);\n                      view.detachMethod.addStmt(triggerStmt);\n                  }\n                  break;\n          }\n          bind(view, currValExpr, fieldExpr, boundProp.value, context, updateStmts, view.detectChangesRenderPropertiesMethod, view.bindings.length);\n      });\n  }\n  function sanitizedValue(boundProp, renderValue) {\n      var enumValue;\n      switch (boundProp.securityContext) {\n          case _angular_core.SecurityContext.NONE:\n              return renderValue; // No sanitization needed.\n          case _angular_core.SecurityContext.HTML:\n              enumValue = 'HTML';\n              break;\n          case _angular_core.SecurityContext.STYLE:\n              enumValue = 'STYLE';\n              break;\n          case _angular_core.SecurityContext.SCRIPT:\n              enumValue = 'SCRIPT';\n              break;\n          case _angular_core.SecurityContext.URL:\n              enumValue = 'URL';\n              break;\n          case _angular_core.SecurityContext.RESOURCE_URL:\n              enumValue = 'RESOURCE_URL';\n              break;\n          default:\n              throw new Error(\"internal error, unexpected SecurityContext \" + boundProp.securityContext + \".\");\n      }\n      var ctx = ViewProperties.viewUtils.prop('sanitizer');\n      var args = [importExpr(resolveIdentifier(Identifiers.SecurityContext)).prop(enumValue), renderValue];\n      return ctx.callMethod('sanitize', args);\n  }\n  function bindRenderInputs(boundProps, compileElement) {\n      bindAndWriteToRenderer(boundProps, compileElement.view.componentContext, compileElement, false);\n  }\n  function bindDirectiveHostProps(directiveAst, directiveInstance, compileElement) {\n      bindAndWriteToRenderer(directiveAst.hostProperties, directiveInstance, compileElement, true);\n  }\n  function bindDirectiveInputs(directiveAst, directiveInstance, compileElement) {\n      if (directiveAst.inputs.length === 0) {\n          return;\n      }\n      var view = compileElement.view;\n      var detectChangesInInputsMethod = view.detectChangesInInputsMethod;\n      detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n      var lifecycleHooks = directiveAst.directive.type.lifecycleHooks;\n      var calcChangesMap = lifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1;\n      var isOnPushComp = directiveAst.directive.isComponent &&\n          !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);\n      if (calcChangesMap) {\n          detectChangesInInputsMethod.addStmt(DetectChangesVars.changes.set(NULL_EXPR).toStmt());\n      }\n      if (isOnPushComp) {\n          detectChangesInInputsMethod.addStmt(DetectChangesVars.changed.set(literal(false)).toStmt());\n      }\n      directiveAst.inputs.forEach(function (input) {\n          var bindingIndex = view.bindings.length;\n          view.bindings.push(new CompileBinding(compileElement, input));\n          detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);\n          var fieldExpr = createBindFieldExpr(bindingIndex);\n          var currValExpr = createCurrValueExpr(bindingIndex);\n          var statements = [directiveInstance.prop(input.directiveName).set(currValExpr).toStmt()];\n          if (calcChangesMap) {\n              statements.push(new IfStmt(DetectChangesVars.changes.identical(NULL_EXPR), [DetectChangesVars.changes\n                      .set(literalMap([], new MapType(importType(resolveIdentifier(Identifiers.SimpleChange)))))\n                      .toStmt()]));\n              statements.push(DetectChangesVars.changes.key(literal(input.directiveName))\n                  .set(importExpr(resolveIdentifier(Identifiers.SimpleChange))\n                  .instantiate([fieldExpr, currValExpr]))\n                  .toStmt());\n          }\n          if (isOnPushComp) {\n              statements.push(DetectChangesVars.changed.set(literal(true)).toStmt());\n          }\n          if (view.genConfig.logBindingUpdate) {\n              statements.push(logBindingUpdateStmt(compileElement.renderNode, input.directiveName, currValExpr));\n          }\n          bind(view, currValExpr, fieldExpr, input.value, view.componentContext, statements, detectChangesInInputsMethod, bindingIndex);\n      });\n      if (isOnPushComp) {\n          detectChangesInInputsMethod.addStmt(new IfStmt(DetectChangesVars.changed, [\n              compileElement.appElement.prop('componentView').callMethod('markAsCheckOnce', []).toStmt()\n          ]));\n      }\n  }\n  function logBindingUpdateStmt(renderNode, propName, value) {\n      var tryStmt = THIS_EXPR.prop('renderer')\n          .callMethod('setBindingDebugInfo', [\n          renderNode, literal(\"ng-reflect-\" + camelCaseToDashCase(propName)),\n          value.isBlank().conditional(NULL_EXPR, value.callMethod('toString', []))\n      ])\n          .toStmt();\n      var catchStmt = THIS_EXPR.prop('renderer')\n          .callMethod('setBindingDebugInfo', [\n          renderNode, literal(\"ng-reflect-\" + camelCaseToDashCase(propName)),\n          literal('[ERROR] Exception while trying to serialize the value')\n      ])\n          .toStmt();\n      return new TryCatchStmt([tryStmt], [catchStmt]);\n  }\n\n  function bindView(view, parsedTemplate, animationOutputs) {\n      var visitor = new ViewBinderVisitor(view, animationOutputs);\n      templateVisitAll(visitor, parsedTemplate);\n      view.pipes.forEach(function (pipe) { bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view); });\n  }\n  var ViewBinderVisitor = (function () {\n      function ViewBinderVisitor(view, animationOutputs) {\n          var _this = this;\n          this.view = view;\n          this.animationOutputs = animationOutputs;\n          this._nodeIndex = 0;\n          this._animationOutputsMap = {};\n          animationOutputs.forEach(function (entry) { _this._animationOutputsMap[entry.fullPropertyName] = entry; });\n      }\n      ViewBinderVisitor.prototype.visitBoundText = function (ast, parent) {\n          var node = this.view.nodes[this._nodeIndex++];\n          bindRenderText(ast, node, this.view);\n          return null;\n      };\n      ViewBinderVisitor.prototype.visitText = function (ast, parent) {\n          this._nodeIndex++;\n          return null;\n      };\n      ViewBinderVisitor.prototype.visitNgContent = function (ast, parent) { return null; };\n      ViewBinderVisitor.prototype.visitElement = function (ast, parent) {\n          var _this = this;\n          var compileElement = this.view.nodes[this._nodeIndex++];\n          var eventListeners = [];\n          var animationEventListeners = [];\n          collectEventListeners(ast.outputs, ast.directives, compileElement).forEach(function (entry) {\n              // TODO: figure out how to abstract this `if` statement elsewhere\n              if (entry.eventName[0] == '@') {\n                  var animationOutputName = entry.eventName.substr(1);\n                  var output = _this._animationOutputsMap[animationOutputName];\n                  // no need to report an error here since the parser will\n                  // have caught the missing animation trigger definition\n                  if (output) {\n                      animationEventListeners.push(new CompileElementAnimationOutput(entry, output));\n                  }\n              }\n              else {\n                  eventListeners.push(entry);\n              }\n          });\n          bindAnimationOutputs(animationEventListeners);\n          bindRenderInputs(ast.inputs, compileElement);\n          bindRenderOutputs(eventListeners);\n          ast.directives.forEach(function (directiveAst) {\n              var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);\n              bindDirectiveInputs(directiveAst, directiveInstance, compileElement);\n              bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement);\n              bindDirectiveHostProps(directiveAst, directiveInstance, compileElement);\n              bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);\n          });\n          templateVisitAll(this, ast.children, compileElement);\n          // afterContent and afterView lifecycles need to be called bottom up\n          // so that children are notified before parents\n          ast.directives.forEach(function (directiveAst) {\n              var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);\n              bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);\n              bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);\n          });\n          ast.providers.forEach(function (providerAst) {\n              var providerInstance = compileElement.instances.get(providerAst.token.reference);\n              bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);\n          });\n          return null;\n      };\n      ViewBinderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {\n          var compileElement = this.view.nodes[this._nodeIndex++];\n          var eventListeners = collectEventListeners(ast.outputs, ast.directives, compileElement);\n          ast.directives.forEach(function (directiveAst) {\n              var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);\n              bindDirectiveInputs(directiveAst, directiveInstance, compileElement);\n              bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement);\n              bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);\n              bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);\n              bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);\n          });\n          ast.providers.forEach(function (providerAst) {\n              var providerInstance = compileElement.instances.get(providerAst.token.reference);\n              bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);\n          });\n          bindView(compileElement.embeddedView, ast.children, this.animationOutputs);\n          return null;\n      };\n      ViewBinderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };\n      ViewBinderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };\n      ViewBinderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {\n          return null;\n      };\n      ViewBinderVisitor.prototype.visitReference = function (ast, ctx) { return null; };\n      ViewBinderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };\n      ViewBinderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };\n      ViewBinderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };\n      return ViewBinderVisitor;\n  }());\n\n  var IMPLICIT_TEMPLATE_VAR = '\\$implicit';\n  var CLASS_ATTR$1 = 'class';\n  var STYLE_ATTR = 'style';\n  var NG_CONTAINER_TAG = 'ng-container';\n  var parentRenderNodeVar = variable('parentRenderNode');\n  var rootSelectorVar = variable('rootSelector');\n  var ViewFactoryDependency = (function () {\n      function ViewFactoryDependency(comp, placeholder) {\n          this.comp = comp;\n          this.placeholder = placeholder;\n      }\n      return ViewFactoryDependency;\n  }());\n  var ComponentFactoryDependency = (function () {\n      function ComponentFactoryDependency(comp, placeholder) {\n          this.comp = comp;\n          this.placeholder = placeholder;\n      }\n      return ComponentFactoryDependency;\n  }());\n  function buildView(view, template, targetDependencies) {\n      var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);\n      templateVisitAll(builderVisitor, template, view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent);\n      return builderVisitor.nestedViewCount;\n  }\n  function finishView(view, targetStatements) {\n      view.afterNodes();\n      createViewTopLevelStmts(view, targetStatements);\n      view.nodes.forEach(function (node) {\n          if (node instanceof CompileElement && node.hasEmbeddedView) {\n              finishView(node.embeddedView, targetStatements);\n          }\n      });\n  }\n  var ViewBuilderVisitor = (function () {\n      function ViewBuilderVisitor(view, targetDependencies) {\n          this.view = view;\n          this.targetDependencies = targetDependencies;\n          this.nestedViewCount = 0;\n          this._animationCompiler = new AnimationCompiler();\n      }\n      ViewBuilderVisitor.prototype._isRootNode = function (parent) { return parent.view !== this.view; };\n      ViewBuilderVisitor.prototype._addRootNodeAndProject = function (node) {\n          var projectedNode = _getOuterContainerOrSelf(node);\n          var parent = projectedNode.parent;\n          var ngContentIndex = projectedNode.sourceAst.ngContentIndex;\n          var vcAppEl = (node instanceof CompileElement && node.hasViewContainer) ? node.appElement : null;\n          if (this._isRootNode(parent)) {\n              // store appElement as root node only for ViewContainers\n              if (this.view.viewType !== ViewType.COMPONENT) {\n                  this.view.rootNodesOrAppElements.push(isPresent(vcAppEl) ? vcAppEl : node.renderNode);\n              }\n          }\n          else if (isPresent(parent.component) && isPresent(ngContentIndex)) {\n              parent.addContentNode(ngContentIndex, isPresent(vcAppEl) ? vcAppEl : node.renderNode);\n          }\n      };\n      ViewBuilderVisitor.prototype._getParentRenderNode = function (parent) {\n          parent = _getOuterContainerParentOrSelf(parent);\n          if (this._isRootNode(parent)) {\n              if (this.view.viewType === ViewType.COMPONENT) {\n                  return parentRenderNodeVar;\n              }\n              else {\n                  // root node of an embedded/host view\n                  return NULL_EXPR;\n              }\n          }\n          else {\n              return isPresent(parent.component) &&\n                  parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ?\n                  NULL_EXPR :\n                  parent.renderNode;\n          }\n      };\n      ViewBuilderVisitor.prototype.visitBoundText = function (ast, parent) {\n          return this._visitText(ast, '', parent);\n      };\n      ViewBuilderVisitor.prototype.visitText = function (ast, parent) {\n          return this._visitText(ast, ast.value, parent);\n      };\n      ViewBuilderVisitor.prototype._visitText = function (ast, value, parent) {\n          var fieldName = \"_text_\" + this.view.nodes.length;\n          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));\n          var renderNode = THIS_EXPR.prop(fieldName);\n          var compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);\n          var createRenderNode = THIS_EXPR.prop(fieldName)\n              .set(ViewProperties.renderer.callMethod('createText', [\n              this._getParentRenderNode(parent), literal(value),\n              this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)\n          ]))\n              .toStmt();\n          this.view.nodes.push(compileNode);\n          this.view.createMethod.addStmt(createRenderNode);\n          this._addRootNodeAndProject(compileNode);\n          return renderNode;\n      };\n      ViewBuilderVisitor.prototype.visitNgContent = function (ast, parent) {\n          // the projected nodes originate from a different view, so we don't\n          // have debug information for them...\n          this.view.createMethod.resetDebugInfo(null, ast);\n          var parentRenderNode = this._getParentRenderNode(parent);\n          var nodesExpression = ViewProperties.projectableNodes.key(literal(ast.index), new ArrayType(importType(this.view.genConfig.renderTypes.renderNode)));\n          if (parentRenderNode !== NULL_EXPR) {\n              this.view.createMethod.addStmt(ViewProperties.renderer\n                  .callMethod('projectNodes', [\n                  parentRenderNode,\n                  importExpr(resolveIdentifier(Identifiers.flattenNestedViewRenderNodes))\n                      .callFn([nodesExpression])\n              ])\n                  .toStmt());\n          }\n          else if (this._isRootNode(parent)) {\n              if (this.view.viewType !== ViewType.COMPONENT) {\n                  // store root nodes only for embedded/host views\n                  this.view.rootNodesOrAppElements.push(nodesExpression);\n              }\n          }\n          else {\n              if (isPresent(parent.component) && isPresent(ast.ngContentIndex)) {\n                  parent.addContentNode(ast.ngContentIndex, nodesExpression);\n              }\n          }\n          return null;\n      };\n      ViewBuilderVisitor.prototype.visitElement = function (ast, parent) {\n          var _this = this;\n          var nodeIndex = this.view.nodes.length;\n          var createRenderNodeExpr;\n          var debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);\n          if (nodeIndex === 0 && this.view.viewType === ViewType.HOST) {\n              createRenderNodeExpr = THIS_EXPR.callMethod('selectOrCreateHostElement', [literal(ast.name), rootSelectorVar, debugContextExpr]);\n          }\n          else {\n              if (ast.name === NG_CONTAINER_TAG) {\n                  createRenderNodeExpr = ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);\n              }\n              else {\n                  createRenderNodeExpr = ViewProperties.renderer.callMethod('createElement', [this._getParentRenderNode(parent), literal(ast.name), debugContextExpr]);\n              }\n          }\n          var fieldName = \"_el_\" + nodeIndex;\n          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement)));\n          this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());\n          var renderNode = THIS_EXPR.prop(fieldName);\n          var directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });\n          var component = directives.find(function (directive) { return directive.isComponent; });\n          var htmlAttrs = _readHtmlAttrs(ast.attrs);\n          var attrNameAndValues = _mergeHtmlAndDirectiveAttrs(htmlAttrs, directives);\n          for (var i = 0; i < attrNameAndValues.length; i++) {\n              var attrName = attrNameAndValues[i][0];\n              if (ast.name !== NG_CONTAINER_TAG) {\n                  // <ng-container> are not rendered in the DOM\n                  var attrValue = attrNameAndValues[i][1];\n                  this.view.createMethod.addStmt(ViewProperties.renderer\n                      .callMethod('setElementAttribute', [renderNode, literal(attrName), literal(attrValue)])\n                      .toStmt());\n              }\n          }\n          var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references);\n          this.view.nodes.push(compileElement);\n          var compViewExpr = null;\n          if (isPresent(component)) {\n              var nestedComponentIdentifier = new CompileIdentifierMetadata({ name: getViewFactoryName(component, 0) });\n              this.targetDependencies.push(new ViewFactoryDependency(component.type, nestedComponentIdentifier));\n              var entryComponentIdentifiers = component.entryComponents.map(function (entryComponent) {\n                  var id = new CompileIdentifierMetadata({ name: entryComponent.name });\n                  _this.targetDependencies.push(new ComponentFactoryDependency(entryComponent, id));\n                  return id;\n              });\n              compileElement.createComponentFactoryResolver(entryComponentIdentifiers);\n              compViewExpr = variable(\"compView_\" + nodeIndex); // fix highlighting: `\n              compileElement.setComponentView(compViewExpr);\n              this.view.createMethod.addStmt(compViewExpr\n                  .set(importExpr(nestedComponentIdentifier).callFn([\n                  ViewProperties.viewUtils, compileElement.injector, compileElement.appElement\n              ]))\n                  .toDeclStmt());\n          }\n          compileElement.beforeChildren();\n          this._addRootNodeAndProject(compileElement);\n          templateVisitAll(this, ast.children, compileElement);\n          compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);\n          if (isPresent(compViewExpr)) {\n              var codeGenContentNodes;\n              if (this.view.component.type.isHost) {\n                  codeGenContentNodes = ViewProperties.projectableNodes;\n              }\n              else {\n                  codeGenContentNodes = literalArr(compileElement.contentNodesByNgContentIndex.map(function (nodes) { return createFlatArray(nodes); }));\n              }\n              this.view.createMethod.addStmt(compViewExpr\n                  .callMethod('create', [compileElement.getComponent(), codeGenContentNodes, NULL_EXPR])\n                  .toStmt());\n          }\n          return null;\n      };\n      ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {\n          var nodeIndex = this.view.nodes.length;\n          var fieldName = \"_anchor_\" + nodeIndex;\n          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment)));\n          this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName)\n              .set(ViewProperties.renderer.callMethod('createTemplateAnchor', [\n              this._getParentRenderNode(parent),\n              this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)\n          ]))\n              .toStmt());\n          var renderNode = THIS_EXPR.prop(fieldName);\n          var templateVariableBindings = ast.variables.map(function (varAst) { return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name]; });\n          var directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });\n          var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references);\n          this.view.nodes.push(compileElement);\n          var compiledAnimations = this._animationCompiler.compileComponent(this.view.component, [ast]);\n          this.nestedViewCount++;\n          var embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, compiledAnimations.triggers, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings);\n          this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);\n          compileElement.beforeChildren();\n          this._addRootNodeAndProject(compileElement);\n          compileElement.afterChildren(0);\n          return null;\n      };\n      ViewBuilderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };\n      ViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };\n      ViewBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {\n          return null;\n      };\n      ViewBuilderVisitor.prototype.visitReference = function (ast, ctx) { return null; };\n      ViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };\n      ViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };\n      ViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };\n      return ViewBuilderVisitor;\n  }());\n  /**\n   * Walks up the nodes while the direct parent is a container.\n   *\n   * Returns the outer container or the node itself when it is not a direct child of a container.\n   *\n   * @internal\n   */\n  function _getOuterContainerOrSelf(node) {\n      var view = node.view;\n      while (_isNgContainer(node.parent, view)) {\n          node = node.parent;\n      }\n      return node;\n  }\n  /**\n   * Walks up the nodes while they are container and returns the first parent which is not.\n   *\n   * Returns the parent of the outer container or the node itself when it is not a container.\n   *\n   * @internal\n   */\n  function _getOuterContainerParentOrSelf(el) {\n      var view = el.view;\n      while (_isNgContainer(el, view)) {\n          el = el.parent;\n      }\n      return el;\n  }\n  function _isNgContainer(node, view) {\n      return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG &&\n          node.view === view;\n  }\n  function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {\n      var result = {};\n      StringMapWrapper.forEach(declaredHtmlAttrs, function (value, key) { result[key] = value; });\n      directives.forEach(function (directiveMeta) {\n          StringMapWrapper.forEach(directiveMeta.hostAttributes, function (value, name) {\n              var prevValue = result[name];\n              result[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;\n          });\n      });\n      return mapToKeyValueArray(result);\n  }\n  function _readHtmlAttrs(attrs) {\n      var htmlAttrs = {};\n      attrs.forEach(function (ast) { htmlAttrs[ast.name] = ast.value; });\n      return htmlAttrs;\n  }\n  function mergeAttributeValue(attrName, attrValue1, attrValue2) {\n      if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {\n          return attrValue1 + \" \" + attrValue2;\n      }\n      else {\n          return attrValue2;\n      }\n  }\n  function mapToKeyValueArray(data) {\n      var entryArray = [];\n      StringMapWrapper.forEach(data, function (value, name) {\n          entryArray.push([name, value]);\n      });\n      // We need to sort to get a defined output order\n      // for tests and for caching generated artifacts...\n      ListWrapper.sort(entryArray, function (entry1, entry2) { return StringWrapper.compare(entry1[0], entry2[0]); });\n      return entryArray;\n  }\n  function createViewTopLevelStmts(view, targetStatements) {\n      var nodeDebugInfosVar = NULL_EXPR;\n      if (view.genConfig.genDebugInfo) {\n          nodeDebugInfosVar = variable(\"nodeDebugInfos_\" + view.component.type.name + view.viewIndex); // fix highlighting: `\n          targetStatements.push(nodeDebugInfosVar\n              .set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(new ExternalType(resolveIdentifier(Identifiers.StaticNodeDebugInfo)), [TypeModifier.Const])))\n              .toDeclStmt(null, [StmtModifier.Final]));\n      }\n      var renderCompTypeVar = variable(\"renderType_\" + view.component.type.name); // fix highlighting: `\n      if (view.viewIndex === 0) {\n          targetStatements.push(renderCompTypeVar.set(NULL_EXPR)\n              .toDeclStmt(importType(resolveIdentifier(Identifiers.RenderComponentType))));\n      }\n      var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);\n      targetStatements.push(viewClass);\n      targetStatements.push(createViewFactory(view, viewClass, renderCompTypeVar));\n  }\n  function createStaticNodeDebugInfo(node) {\n      var compileElement = node instanceof CompileElement ? node : null;\n      var providerTokens = [];\n      var componentToken = NULL_EXPR;\n      var varTokenEntries = [];\n      if (isPresent(compileElement)) {\n          providerTokens = compileElement.getProviderTokens();\n          if (isPresent(compileElement.component)) {\n              componentToken = createDiTokenExpression(identifierToken(compileElement.component.type));\n          }\n          StringMapWrapper.forEach(compileElement.referenceTokens, function (token, varName) {\n              varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR]);\n          });\n      }\n      return importExpr(resolveIdentifier(Identifiers.StaticNodeDebugInfo))\n          .instantiate([\n          literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])),\n          componentToken,\n          literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))\n      ], importType(resolveIdentifier(Identifiers.StaticNodeDebugInfo), null, [TypeModifier.Const]));\n  }\n  function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {\n      var viewConstructorArgs = [\n          new FnParam(ViewConstructorVars.viewUtils.name, importType(resolveIdentifier(Identifiers.ViewUtils))),\n          new FnParam(ViewConstructorVars.parentInjector.name, importType(resolveIdentifier(Identifiers.Injector))),\n          new FnParam(ViewConstructorVars.declarationEl.name, importType(resolveIdentifier(Identifiers.AppElement)))\n      ];\n      var superConstructorArgs = [\n          variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType),\n          ViewConstructorVars.viewUtils, ViewConstructorVars.parentInjector,\n          ViewConstructorVars.declarationEl,\n          ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))\n      ];\n      if (view.genConfig.genDebugInfo) {\n          superConstructorArgs.push(nodeDebugInfosVar);\n      }\n      var viewConstructor = new ClassMethod(null, viewConstructorArgs, [SUPER_EXPR.callFn(superConstructorArgs).toStmt()]);\n      var viewMethods = [\n          new ClassMethod('createInternal', [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(resolveIdentifier(Identifiers.AppElement))),\n          new ClassMethod('injectorGetInternal', [\n              new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE),\n              // Note: Can't use o.INT_TYPE here as the method in AppView uses number\n              new FnParam(InjectMethodVars.requestNodeIndex.name, NUMBER_TYPE),\n              new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)\n          ], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars.notFoundResult), DYNAMIC_TYPE),\n          new ClassMethod('detectChangesInternal', [new FnParam(DetectChangesVars.throwOnChange.name, BOOL_TYPE)], generateDetectChangesMethod(view)),\n          new ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()),\n          new ClassMethod('destroyInternal', [], view.destroyMethod.finish()),\n          new ClassMethod('detachInternal', [], view.detachMethod.finish())\n      ].concat(view.eventHandlerMethods);\n      var superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView;\n      var viewClass = new ClassStmt(view.className, importExpr(resolveIdentifier(superClass), [getContextType(view)]), view.fields, view.getters, viewConstructor, viewMethods.filter(function (method) { return method.body.length > 0; }));\n      return viewClass;\n  }\n  function createViewFactory(view, viewClass, renderCompTypeVar) {\n      var viewFactoryArgs = [\n          new FnParam(ViewConstructorVars.viewUtils.name, importType(resolveIdentifier(Identifiers.ViewUtils))),\n          new FnParam(ViewConstructorVars.parentInjector.name, importType(resolveIdentifier(Identifiers.Injector))),\n          new FnParam(ViewConstructorVars.declarationEl.name, importType(resolveIdentifier(Identifiers.AppElement)))\n      ];\n      var initRenderCompTypeStmts = [];\n      var templateUrlInfo;\n      if (view.component.template.templateUrl == view.component.type.moduleUrl) {\n          templateUrlInfo =\n              view.component.type.moduleUrl + \" class \" + view.component.type.name + \" - inline template\";\n      }\n      else {\n          templateUrlInfo = view.component.template.templateUrl;\n      }\n      if (view.viewIndex === 0) {\n          var animationsExpr = literalMap(view.animations.map(function (entry) { return [entry.name, entry.fnVariable]; }));\n          initRenderCompTypeStmts = [new IfStmt(renderCompTypeVar.identical(NULL_EXPR), [\n                  renderCompTypeVar\n                      .set(ViewConstructorVars.viewUtils.callMethod('createRenderComponentType', [\n                      literal(templateUrlInfo),\n                      literal(view.component.template.ngContentSelectors.length),\n                      ViewEncapsulationEnum.fromValue(view.component.template.encapsulation), view.styles,\n                      animationsExpr\n                  ]))\n                      .toStmt()\n              ])];\n      }\n      return fn(viewFactoryArgs, initRenderCompTypeStmts.concat([new ReturnStatement(variable(viewClass.name)\n              .instantiate(viewClass.constructorMethod.params.map(function (param) { return variable(param.name); })))]), importType(resolveIdentifier(Identifiers.AppView), [getContextType(view)]))\n          .toDeclStmt(view.viewFactory.name, [StmtModifier.Final]);\n  }\n  function generateCreateMethod(view) {\n      var parentRenderNodeExpr = NULL_EXPR;\n      var parentRenderNodeStmts = [];\n      if (view.viewType === ViewType.COMPONENT) {\n          parentRenderNodeExpr = ViewProperties.renderer.callMethod('createViewRoot', [THIS_EXPR.prop('declarationAppElement').prop('nativeElement')]);\n          parentRenderNodeStmts =\n              [parentRenderNodeVar.set(parentRenderNodeExpr)\n                      .toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])];\n      }\n      var resultExpr;\n      if (view.viewType === ViewType.HOST) {\n          resultExpr = view.nodes[0].appElement;\n      }\n      else {\n          resultExpr = NULL_EXPR;\n      }\n      return parentRenderNodeStmts.concat(view.createMethod.finish(), [\n          THIS_EXPR\n              .callMethod('init', [\n              createFlatArray(view.rootNodesOrAppElements),\n              literalArr(view.nodes.map(function (node) { return node.renderNode; })), literalArr(view.disposables),\n              literalArr(view.subscriptions)\n          ])\n              .toStmt(),\n          new ReturnStatement(resultExpr)\n      ]);\n  }\n  function generateDetectChangesMethod(view) {\n      var stmts = [];\n      if (view.detectChangesInInputsMethod.isEmpty() && view.updateContentQueriesMethod.isEmpty() &&\n          view.afterContentLifecycleCallbacksMethod.isEmpty() &&\n          view.detectChangesRenderPropertiesMethod.isEmpty() &&\n          view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty()) {\n          return stmts;\n      }\n      ListWrapper.addAll(stmts, view.detectChangesInInputsMethod.finish());\n      stmts.push(THIS_EXPR.callMethod('detectContentChildrenChanges', [DetectChangesVars.throwOnChange])\n          .toStmt());\n      var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());\n      if (afterContentStmts.length > 0) {\n          stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterContentStmts));\n      }\n      ListWrapper.addAll(stmts, view.detectChangesRenderPropertiesMethod.finish());\n      stmts.push(THIS_EXPR.callMethod('detectViewChildrenChanges', [DetectChangesVars.throwOnChange])\n          .toStmt());\n      var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());\n      if (afterViewStmts.length > 0) {\n          stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterViewStmts));\n      }\n      var varStmts = [];\n      var readVars = findReadVarNames(stmts);\n      if (SetWrapper.has(readVars, DetectChangesVars.changed.name)) {\n          varStmts.push(DetectChangesVars.changed.set(literal(true)).toDeclStmt(BOOL_TYPE));\n      }\n      if (SetWrapper.has(readVars, DetectChangesVars.changes.name)) {\n          varStmts.push(DetectChangesVars.changes.set(NULL_EXPR)\n              .toDeclStmt(new MapType(importType(resolveIdentifier(Identifiers.SimpleChange)))));\n      }\n      if (SetWrapper.has(readVars, DetectChangesVars.valUnwrapper.name)) {\n          varStmts.push(DetectChangesVars.valUnwrapper\n              .set(importExpr(resolveIdentifier(Identifiers.ValueUnwrapper)).instantiate([]))\n              .toDeclStmt(null, [StmtModifier.Final]));\n      }\n      return varStmts.concat(stmts);\n  }\n  function addReturnValuefNotEmpty(statements, value) {\n      if (statements.length > 0) {\n          return statements.concat([new ReturnStatement(value)]);\n      }\n      else {\n          return statements;\n      }\n  }\n  function getContextType(view) {\n      if (view.viewType === ViewType.COMPONENT) {\n          return importType(view.component.type);\n      }\n      return DYNAMIC_TYPE;\n  }\n  function getChangeDetectionMode(view) {\n      var mode;\n      if (view.viewType === ViewType.COMPONENT) {\n          mode = isDefaultChangeDetectionStrategy(view.component.changeDetection) ?\n              ChangeDetectorStatus.CheckAlways :\n              ChangeDetectorStatus.CheckOnce;\n      }\n      else {\n          mode = ChangeDetectorStatus.CheckAlways;\n      }\n      return mode;\n  }\n\n  var ViewCompileResult = (function () {\n      function ViewCompileResult(statements, viewFactoryVar, dependencies) {\n          this.statements = statements;\n          this.viewFactoryVar = viewFactoryVar;\n          this.dependencies = dependencies;\n      }\n      return ViewCompileResult;\n  }());\n  var ViewCompiler = (function () {\n      function ViewCompiler(_genConfig) {\n          this._genConfig = _genConfig;\n          this._animationCompiler = new AnimationCompiler();\n      }\n      ViewCompiler.prototype.compileComponent = function (component, template, styles, pipes) {\n          var dependencies = [];\n          var compiledAnimations = this._animationCompiler.compileComponent(component, template);\n          var statements = [];\n          var animationTriggers = compiledAnimations.triggers;\n          animationTriggers.forEach(function (entry) {\n              statements.push(entry.statesMapStatement);\n              statements.push(entry.fnStatement);\n          });\n          var view = new CompileView(component, this._genConfig, pipes, styles, animationTriggers, 0, CompileElement.createNull(), []);\n          buildView(view, template, dependencies);\n          // Need to separate binding from creation to be able to refer to\n          // variables that have been declared after usage.\n          bindView(view, template, compiledAnimations.outputs);\n          finishView(view, statements);\n          return new ViewCompileResult(statements, view.viewFactory.name, dependencies);\n      };\n      ViewCompiler.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      ViewCompiler.ctorParameters = [\n          { type: CompilerConfig, },\n      ];\n      return ViewCompiler;\n  }());\n\n  var SourceModule = (function () {\n      function SourceModule(moduleUrl, source) {\n          this.moduleUrl = moduleUrl;\n          this.source = source;\n      }\n      return SourceModule;\n  }());\n  var NgModulesSummary = (function () {\n      function NgModulesSummary(ngModuleByComponent) {\n          this.ngModuleByComponent = ngModuleByComponent;\n      }\n      return NgModulesSummary;\n  }());\n  var OfflineCompiler = (function () {\n      function OfflineCompiler(_metadataResolver, _directiveNormalizer, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _outputEmitter, _localeId, _translationFormat) {\n          this._metadataResolver = _metadataResolver;\n          this._directiveNormalizer = _directiveNormalizer;\n          this._templateParser = _templateParser;\n          this._styleCompiler = _styleCompiler;\n          this._viewCompiler = _viewCompiler;\n          this._ngModuleCompiler = _ngModuleCompiler;\n          this._outputEmitter = _outputEmitter;\n          this._localeId = _localeId;\n          this._translationFormat = _translationFormat;\n      }\n      OfflineCompiler.prototype.analyzeModules = function (ngModules) {\n          var _this = this;\n          var ngModuleByComponent = new Map();\n          ngModules.forEach(function (ngModule) {\n              var ngModuleMeta = _this._metadataResolver.getNgModuleMetadata(ngModule);\n              ngModuleMeta.declaredDirectives.forEach(function (dirMeta) {\n                  if (dirMeta.isComponent) {\n                      ngModuleByComponent.set(dirMeta.type.reference, ngModuleMeta);\n                  }\n              });\n          });\n          return new NgModulesSummary(ngModuleByComponent);\n      };\n      OfflineCompiler.prototype.clearCache = function () {\n          this._directiveNormalizer.clearCache();\n          this._metadataResolver.clearCache();\n      };\n      OfflineCompiler.prototype.compile = function (moduleUrl, ngModulesSummary, components, ngModules) {\n          var _this = this;\n          var fileSuffix = _splitTypescriptSuffix(moduleUrl)[1];\n          var statements = [];\n          var exportedVars = [];\n          var outputSourceModules = [];\n          // compile all ng modules\n          exportedVars.push.apply(exportedVars, ngModules.map(function (ngModuleType) { return _this._compileModule(ngModuleType, statements); }));\n          // compile components\n          return Promise\n              .all(components.map(function (compType) {\n              var compMeta = _this._metadataResolver.getDirectiveMetadata(compType);\n              var ngModule = ngModulesSummary.ngModuleByComponent.get(compType);\n              if (!ngModule) {\n                  throw new Error(\"Cannot determine the module for component \" + compMeta.type.name + \"!\");\n              }\n              return Promise\n                  .all([compMeta].concat(ngModule.transitiveModule.directives).map(function (dirMeta) { return _this._directiveNormalizer.normalizeDirective(dirMeta).asyncResult; }))\n                  .then(function (normalizedCompWithDirectives) {\n                  var compMeta = normalizedCompWithDirectives[0];\n                  var dirMetas = normalizedCompWithDirectives.slice(1);\n                  _assertComponent(compMeta);\n                  // compile styles\n                  var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);\n                  stylesCompileResults.externalStylesheets.forEach(function (compiledStyleSheet) {\n                      outputSourceModules.push(_this._codgenStyles(compiledStyleSheet, fileSuffix));\n                  });\n                  // compile components\n                  exportedVars.push(_this._compileComponentFactory(compMeta, fileSuffix, statements));\n                  exportedVars.push(_this._compileComponent(compMeta, dirMetas, ngModule.transitiveModule.pipes, ngModule.schemas, stylesCompileResults.componentStylesheet, fileSuffix, statements));\n              });\n          }))\n              .then(function () {\n              if (statements.length > 0) {\n                  outputSourceModules.unshift(_this._codegenSourceModule(_ngfactoryModuleUrl(moduleUrl), statements, exportedVars));\n              }\n              return outputSourceModules;\n          });\n      };\n      OfflineCompiler.prototype._compileModule = function (ngModuleType, targetStatements) {\n          var ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);\n          var appCompileResult = this._ngModuleCompiler.compile(ngModule, [\n              new CompileProviderMetadata({ token: resolveIdentifierToken(Identifiers.LOCALE_ID), useValue: this._localeId }),\n              new CompileProviderMetadata({\n                  token: resolveIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),\n                  useValue: this._translationFormat\n              })\n          ]);\n          appCompileResult.dependencies.forEach(function (dep) {\n              dep.placeholder.name = _componentFactoryName(dep.comp);\n              dep.placeholder.moduleUrl = _ngfactoryModuleUrl(dep.comp.moduleUrl);\n          });\n          targetStatements.push.apply(targetStatements, appCompileResult.statements);\n          return appCompileResult.ngModuleFactoryVar;\n      };\n      OfflineCompiler.prototype._compileComponentFactory = function (compMeta, fileSuffix, targetStatements) {\n          var hostMeta = createHostComponentMeta(compMeta);\n          var hostViewFactoryVar = this._compileComponent(hostMeta, [compMeta], [], [], null, fileSuffix, targetStatements);\n          var compFactoryVar = _componentFactoryName(compMeta.type);\n          targetStatements.push(variable(compFactoryVar)\n              .set(importExpr(resolveIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)])\n              .instantiate([\n              literal(compMeta.selector), variable(hostViewFactoryVar),\n              importExpr(compMeta.type)\n          ], importType(resolveIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const])))\n              .toDeclStmt(null, [StmtModifier.Final]));\n          return compFactoryVar;\n      };\n      OfflineCompiler.prototype._compileComponent = function (compMeta, directives, pipes, schemas, componentStyles, fileSuffix, targetStatements) {\n          var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, schemas, compMeta.type.name);\n          var stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);\n          var viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes);\n          if (componentStyles) {\n              ListWrapper.addAll(targetStatements, _resolveStyleStatements(componentStyles, fileSuffix));\n          }\n          ListWrapper.addAll(targetStatements, _resolveViewStatements(viewResult));\n          return viewResult.viewFactoryVar;\n      };\n      OfflineCompiler.prototype._codgenStyles = function (stylesCompileResult, fileSuffix) {\n          _resolveStyleStatements(stylesCompileResult, fileSuffix);\n          return this._codegenSourceModule(_stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);\n      };\n      OfflineCompiler.prototype._codegenSourceModule = function (moduleUrl, statements, exportedVars) {\n          return new SourceModule(moduleUrl, this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));\n      };\n      return OfflineCompiler;\n  }());\n  function _resolveViewStatements(compileResult) {\n      compileResult.dependencies.forEach(function (dep) {\n          if (dep instanceof ViewFactoryDependency) {\n              var vfd = dep;\n              vfd.placeholder.moduleUrl = _ngfactoryModuleUrl(vfd.comp.moduleUrl);\n          }\n          else if (dep instanceof ComponentFactoryDependency) {\n              var cfd = dep;\n              cfd.placeholder.name = _componentFactoryName(cfd.comp);\n              cfd.placeholder.moduleUrl = _ngfactoryModuleUrl(cfd.comp.moduleUrl);\n          }\n      });\n      return compileResult.statements;\n  }\n  function _resolveStyleStatements(compileResult, fileSuffix) {\n      compileResult.dependencies.forEach(function (dep) {\n          dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix);\n      });\n      return compileResult.statements;\n  }\n  function _ngfactoryModuleUrl(compUrl) {\n      var urlWithSuffix = _splitTypescriptSuffix(compUrl);\n      return urlWithSuffix[0] + \".ngfactory\" + urlWithSuffix[1];\n  }\n  function _componentFactoryName(comp) {\n      return comp.name + \"NgFactory\";\n  }\n  function _stylesModuleUrl(stylesheetUrl, shim, suffix) {\n      return shim ? stylesheetUrl + \".shim\" + suffix : \"\" + stylesheetUrl + suffix;\n  }\n  function _assertComponent(meta) {\n      if (!meta.isComponent) {\n          throw new Error(\"Could not compile '\" + meta.type.name + \"' because it is not a component.\");\n      }\n  }\n  function _splitTypescriptSuffix(path) {\n      if (/\\.d\\.ts$/.test(path)) {\n          return [path.substring(0, path.length - 5), '.ts'];\n      }\n      var lastDot = path.lastIndexOf('.');\n      if (lastDot !== -1) {\n          return [path.substring(0, lastDot), path.substring(lastDot)];\n      }\n      else {\n          return [path, ''];\n      }\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  /**\n   * An interface for retrieving documents by URL that the compiler uses\n   * to load templates.\n   */\n  var ResourceLoader = (function () {\n      function ResourceLoader() {\n      }\n      ResourceLoader.prototype.get = function (url) { return null; };\n      return ResourceLoader;\n  }());\n\n  var _ASSET_SCHEME = 'asset:';\n  function createOfflineCompileUrlResolver() {\n      return new UrlResolver(_ASSET_SCHEME);\n  }\n  /**\n   * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.\n   */\n  var DEFAULT_PACKAGE_URL_PROVIDER = {\n      provide: _angular_core.PACKAGE_ROOT_URL,\n      useValue: '/'\n  };\n  /**\n   * Used by the {@link Compiler} when resolving HTML and CSS template URLs.\n   *\n   * This class can be overridden by the application developer to create custom behavior.\n   *\n   * See {@link Compiler}\n   *\n   * ## Example\n   *\n   * {@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}\n   *\n   * @security  When compiling templates at runtime, you must\n   * ensure that the entire template comes from a trusted source.\n   * Attacker-controlled data introduced by a template could expose your\n   * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n   */\n  var UrlResolver = (function () {\n      function UrlResolver(_packagePrefix) {\n          if (_packagePrefix === void 0) { _packagePrefix = null; }\n          this._packagePrefix = _packagePrefix;\n      }\n      /**\n       * Resolves the `url` given the `baseUrl`:\n       * - when the `url` is null, the `baseUrl` is returned,\n       * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of\n       * `baseUrl` and `url`,\n       * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is\n       * returned as is (ignoring the `baseUrl`)\n       */\n      UrlResolver.prototype.resolve = function (baseUrl, url) {\n          var resolvedUrl = url;\n          if (isPresent(baseUrl) && baseUrl.length > 0) {\n              resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);\n          }\n          var resolvedParts = _split(resolvedUrl);\n          var prefix = this._packagePrefix;\n          if (isPresent(prefix) && isPresent(resolvedParts) &&\n              resolvedParts[_ComponentIndex.Scheme] == 'package') {\n              var path = resolvedParts[_ComponentIndex.Path];\n              if (this._packagePrefix === _ASSET_SCHEME) {\n                  var pathSegements = path.split(/\\//);\n                  resolvedUrl = \"asset:\" + pathSegements[0] + \"/lib/\" + pathSegements.slice(1).join('/');\n              }\n              else {\n                  prefix = StringWrapper.stripRight(prefix, '/');\n                  path = StringWrapper.stripLeft(path, '/');\n                  return prefix + \"/\" + path;\n              }\n          }\n          return resolvedUrl;\n      };\n      UrlResolver.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      UrlResolver.ctorParameters = [\n          { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PACKAGE_ROOT_URL,] },] },\n      ];\n      return UrlResolver;\n  }());\n  /**\n   * Extract the scheme of a URL.\n   */\n  function getUrlScheme(url) {\n      var match = _split(url);\n      return (match && match[_ComponentIndex.Scheme]) || '';\n  }\n  // The code below is adapted from Traceur:\n  // https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js\n  /**\n   * Builds a URI string from already-encoded parts.\n   *\n   * No encoding is performed.  Any component may be omitted as either null or\n   * undefined.\n   *\n   * @param opt_scheme The scheme such as 'http'.\n   * @param opt_userInfo The user name before the '@'.\n   * @param opt_domain The domain such as 'www.google.com', already\n   *     URI-encoded.\n   * @param opt_port The port number.\n   * @param opt_path The path, already URI-encoded.  If it is not\n   *     empty, it must begin with a slash.\n   * @param opt_queryData The URI-encoded query data.\n   * @param opt_fragment The URI-encoded fragment identifier.\n   * @return The fully combined URI.\n   */\n  function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {\n      var out = [];\n      if (isPresent(opt_scheme)) {\n          out.push(opt_scheme + ':');\n      }\n      if (isPresent(opt_domain)) {\n          out.push('//');\n          if (isPresent(opt_userInfo)) {\n              out.push(opt_userInfo + '@');\n          }\n          out.push(opt_domain);\n          if (isPresent(opt_port)) {\n              out.push(':' + opt_port);\n          }\n      }\n      if (isPresent(opt_path)) {\n          out.push(opt_path);\n      }\n      if (isPresent(opt_queryData)) {\n          out.push('?' + opt_queryData);\n      }\n      if (isPresent(opt_fragment)) {\n          out.push('#' + opt_fragment);\n      }\n      return out.join('');\n  }\n  /**\n   * A regular expression for breaking a URI into its component parts.\n   *\n   * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says\n   * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\n   * disambiguation method used by POSIX regular expressions, it is natural and\n   * commonplace to use a regular expression for parsing the potential five\n   * components of a URI reference.\n   *\n   * The following line is the regular expression for breaking-down a\n   * well-formed URI reference into its components.\n   *\n   * <pre>\n   * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n   *  12            3  4          5       6  7        8 9\n   * </pre>\n   *\n   * The numbers in the second line above are only to assist readability; they\n   * indicate the reference points for each subexpression (i.e., each paired\n   * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\n   * For example, matching the above expression to\n   * <pre>\n   *     http://www.ics.uci.edu/pub/ietf/uri/#Related\n   * </pre>\n   * results in the following subexpression matches:\n   * <pre>\n   *    $1 = http:\n   *    $2 = http\n   *    $3 = //www.ics.uci.edu\n   *    $4 = www.ics.uci.edu\n   *    $5 = /pub/ietf/uri/\n   *    $6 = <undefined>\n   *    $7 = <undefined>\n   *    $8 = #Related\n   *    $9 = Related\n   * </pre>\n   * where <undefined> indicates that the component is not present, as is the\n   * case for the query component in the above example. Therefore, we can\n   * determine the value of the five components as\n   * <pre>\n   *    scheme    = $2\n   *    authority = $4\n   *    path      = $5\n   *    query     = $7\n   *    fragment  = $9\n   * </pre>\n   *\n   * The regular expression has been modified slightly to expose the\n   * userInfo, domain, and port separately from the authority.\n   * The modified version yields\n   * <pre>\n   *    $1 = http              scheme\n   *    $2 = <undefined>       userInfo -\\\n   *    $3 = www.ics.uci.edu   domain     | authority\n   *    $4 = <undefined>       port     -/\n   *    $5 = /pub/ietf/uri/    path\n   *    $6 = <undefined>       query without ?\n   *    $7 = Related           fragment without #\n   * </pre>\n   * @type {!RegExp}\n   * @internal\n   */\n  var _splitRe = new RegExp('^' +\n      '(?:' +\n      '([^:/?#.]+)' +\n      // used by other URL parts such as :,\n      // ?, /, #, and .\n      ':)?' +\n      '(?://' +\n      '(?:([^/?#]*)@)?' +\n      '([\\\\w\\\\d\\\\-\\\\u0100-\\\\uffff.%]*)' +\n      // digits, dashes, dots, percent\n      // escapes, and unicode characters.\n      '(?::([0-9]+))?' +\n      ')?' +\n      '([^?#]+)?' +\n      '(?:\\\\?([^#]*))?' +\n      '(?:#(.*))?' +\n      '$');\n  /**\n   * The index of each URI component in the return value of goog.uri.utils.split.\n   * @enum {number}\n   */\n  var _ComponentIndex;\n  (function (_ComponentIndex) {\n      _ComponentIndex[_ComponentIndex[\"Scheme\"] = 1] = \"Scheme\";\n      _ComponentIndex[_ComponentIndex[\"UserInfo\"] = 2] = \"UserInfo\";\n      _ComponentIndex[_ComponentIndex[\"Domain\"] = 3] = \"Domain\";\n      _ComponentIndex[_ComponentIndex[\"Port\"] = 4] = \"Port\";\n      _ComponentIndex[_ComponentIndex[\"Path\"] = 5] = \"Path\";\n      _ComponentIndex[_ComponentIndex[\"QueryData\"] = 6] = \"QueryData\";\n      _ComponentIndex[_ComponentIndex[\"Fragment\"] = 7] = \"Fragment\";\n  })(_ComponentIndex || (_ComponentIndex = {}));\n  /**\n   * Splits a URI into its component parts.\n   *\n   * Each component can be accessed via the component indices; for example:\n   * <pre>\n   * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];\n   * </pre>\n   *\n   * @param uri The URI string to examine.\n   * @return Each component still URI-encoded.\n   *     Each component that is present will contain the encoded value, whereas\n   *     components that are not present will be undefined or empty, depending\n   *     on the browser's regular expression implementation.  Never null, since\n   *     arbitrary strings may still look like path names.\n   */\n  function _split(uri) {\n      return uri.match(_splitRe);\n  }\n  /**\n    * Removes dot segments in given path component, as described in\n    * RFC 3986, section 5.2.4.\n    *\n    * @param path A non-empty path component.\n    * @return Path component with removed dot segments.\n    */\n  function _removeDotSegments(path) {\n      if (path == '/')\n          return '/';\n      var leadingSlash = path[0] == '/' ? '/' : '';\n      var trailingSlash = path[path.length - 1] === '/' ? '/' : '';\n      var segments = path.split('/');\n      var out = [];\n      var up = 0;\n      for (var pos = 0; pos < segments.length; pos++) {\n          var segment = segments[pos];\n          switch (segment) {\n              case '':\n              case '.':\n                  break;\n              case '..':\n                  if (out.length > 0) {\n                      out.pop();\n                  }\n                  else {\n                      up++;\n                  }\n                  break;\n              default:\n                  out.push(segment);\n          }\n      }\n      if (leadingSlash == '') {\n          while (up-- > 0) {\n              out.unshift('..');\n          }\n          if (out.length === 0)\n              out.push('.');\n      }\n      return leadingSlash + out.join('/') + trailingSlash;\n  }\n  /**\n   * Takes an array of the parts from split and canonicalizes the path part\n   * and then joins all the parts.\n   */\n  function _joinAndCanonicalizePath(parts) {\n      var path = parts[_ComponentIndex.Path];\n      path = isBlank(path) ? '' : _removeDotSegments(path);\n      parts[_ComponentIndex.Path] = path;\n      return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);\n  }\n  /**\n   * Resolves a URL.\n   * @param base The URL acting as the base URL.\n   * @param to The URL to resolve.\n   */\n  function _resolveUrl(base, url) {\n      var parts = _split(encodeURI(url));\n      var baseParts = _split(base);\n      if (isPresent(parts[_ComponentIndex.Scheme])) {\n          return _joinAndCanonicalizePath(parts);\n      }\n      else {\n          parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];\n      }\n      for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {\n          if (isBlank(parts[i])) {\n              parts[i] = baseParts[i];\n          }\n      }\n      if (parts[_ComponentIndex.Path][0] == '/') {\n          return _joinAndCanonicalizePath(parts);\n      }\n      var path = baseParts[_ComponentIndex.Path];\n      if (isBlank(path))\n          path = '/';\n      var index = path.lastIndexOf('/');\n      path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];\n      parts[_ComponentIndex.Path] = path;\n      return _joinAndCanonicalizePath(parts);\n  }\n\n  var DirectiveNormalizer = (function () {\n      function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {\n          this._resourceLoader = _resourceLoader;\n          this._urlResolver = _urlResolver;\n          this._htmlParser = _htmlParser;\n          this._config = _config;\n          this._resourceLoaderCache = new Map();\n      }\n      DirectiveNormalizer.prototype.clearCache = function () { this._resourceLoaderCache.clear(); };\n      DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {\n          var _this = this;\n          if (!normalizedDirective.isComponent) {\n              return;\n          }\n          this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);\n          normalizedDirective.template.externalStylesheets.forEach(function (stylesheet) { _this._resourceLoaderCache.delete(stylesheet.moduleUrl); });\n      };\n      DirectiveNormalizer.prototype._fetch = function (url) {\n          var result = this._resourceLoaderCache.get(url);\n          if (!result) {\n              result = this._resourceLoader.get(url);\n              this._resourceLoaderCache.set(url, result);\n          }\n          return result;\n      };\n      DirectiveNormalizer.prototype.normalizeDirective = function (directive) {\n          var _this = this;\n          if (!directive.isComponent) {\n              // For non components there is nothing to be normalized yet.\n              return new SyncAsyncResult(directive, Promise.resolve(directive));\n          }\n          var normalizedTemplateSync = null;\n          var normalizedTemplateAsync;\n          if (isPresent(directive.template.template)) {\n              normalizedTemplateSync = this.normalizeTemplateSync(directive.type, directive.template);\n              normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);\n          }\n          else if (directive.template.templateUrl) {\n              normalizedTemplateAsync = this.normalizeTemplateAsync(directive.type, directive.template);\n          }\n          else {\n              throw new Error(\"No template specified for component \" + directive.type.name);\n          }\n          if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {\n              // sync case\n              var normalizedDirective = _cloneDirectiveWithTemplate(directive, normalizedTemplateSync);\n              return new SyncAsyncResult(normalizedDirective, Promise.resolve(normalizedDirective));\n          }\n          else {\n              // async case\n              return new SyncAsyncResult(null, normalizedTemplateAsync\n                  .then(function (normalizedTemplate) { return _this.normalizeExternalStylesheets(normalizedTemplate); })\n                  .then(function (normalizedTemplate) {\n                  return _cloneDirectiveWithTemplate(directive, normalizedTemplate);\n              }));\n          }\n      };\n      DirectiveNormalizer.prototype.normalizeTemplateSync = function (directiveType, template) {\n          return this.normalizeLoadedTemplate(directiveType, template, template.template, directiveType.moduleUrl);\n      };\n      DirectiveNormalizer.prototype.normalizeTemplateAsync = function (directiveType, template) {\n          var _this = this;\n          var templateUrl = this._urlResolver.resolve(directiveType.moduleUrl, template.templateUrl);\n          return this._fetch(templateUrl)\n              .then(function (value) { return _this.normalizeLoadedTemplate(directiveType, template, value, templateUrl); });\n      };\n      DirectiveNormalizer.prototype.normalizeLoadedTemplate = function (directiveType, templateMeta, template, templateAbsUrl) {\n          var interpolationConfig = InterpolationConfig.fromArray(templateMeta.interpolation);\n          var rootNodesAndErrors = this._htmlParser.parse(template, directiveType.name, false, interpolationConfig);\n          if (rootNodesAndErrors.errors.length > 0) {\n              var errorString = rootNodesAndErrors.errors.join('\\n');\n              throw new Error(\"Template parse errors:\\n\" + errorString);\n          }\n          var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({\n              styles: templateMeta.styles,\n              styleUrls: templateMeta.styleUrls,\n              moduleUrl: directiveType.moduleUrl\n          }));\n          var visitor = new TemplatePreparseVisitor();\n          visitAll(visitor, rootNodesAndErrors.rootNodes);\n          var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));\n          var allStyles = templateMetadataStyles.styles.concat(templateStyles.styles);\n          var allStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);\n          var encapsulation = templateMeta.encapsulation;\n          if (isBlank(encapsulation)) {\n              encapsulation = this._config.defaultEncapsulation;\n          }\n          if (encapsulation === _angular_core.ViewEncapsulation.Emulated && allStyles.length === 0 &&\n              allStyleUrls.length === 0) {\n              encapsulation = _angular_core.ViewEncapsulation.None;\n          }\n          return new CompileTemplateMetadata({\n              encapsulation: encapsulation,\n              template: template,\n              templateUrl: templateAbsUrl,\n              styles: allStyles,\n              styleUrls: allStyleUrls,\n              externalStylesheets: templateMeta.externalStylesheets,\n              ngContentSelectors: visitor.ngContentSelectors,\n              animations: templateMeta.animations,\n              interpolation: templateMeta.interpolation\n          });\n      };\n      DirectiveNormalizer.prototype.normalizeExternalStylesheets = function (templateMeta) {\n          return this._loadMissingExternalStylesheets(templateMeta.styleUrls)\n              .then(function (externalStylesheets) { return new CompileTemplateMetadata({\n              encapsulation: templateMeta.encapsulation,\n              template: templateMeta.template,\n              templateUrl: templateMeta.templateUrl,\n              styles: templateMeta.styles,\n              styleUrls: templateMeta.styleUrls,\n              externalStylesheets: externalStylesheets,\n              ngContentSelectors: templateMeta.ngContentSelectors,\n              animations: templateMeta.animations,\n              interpolation: templateMeta.interpolation\n          }); });\n      };\n      DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {\n          var _this = this;\n          if (loadedStylesheets === void 0) { loadedStylesheets = new Map(); }\n          return Promise\n              .all(styleUrls.filter(function (styleUrl) { return !loadedStylesheets.has(styleUrl); })\n              .map(function (styleUrl) { return _this._fetch(styleUrl).then(function (loadedStyle) {\n              var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));\n              loadedStylesheets.set(styleUrl, stylesheet);\n              return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);\n          }); }))\n              .then(function (_) { return MapWrapper.values(loadedStylesheets); });\n      };\n      DirectiveNormalizer.prototype.normalizeStylesheet = function (stylesheet) {\n          var _this = this;\n          var allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)\n              .map(function (url) { return _this._urlResolver.resolve(stylesheet.moduleUrl, url); });\n          var allStyles = stylesheet.styles.map(function (style) {\n              var styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);\n              allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);\n              return styleWithImports.style;\n          });\n          return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: stylesheet.moduleUrl });\n      };\n      DirectiveNormalizer.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      DirectiveNormalizer.ctorParameters = [\n          { type: ResourceLoader, },\n          { type: UrlResolver, },\n          { type: HtmlParser, },\n          { type: CompilerConfig, },\n      ];\n      return DirectiveNormalizer;\n  }());\n  var TemplatePreparseVisitor = (function () {\n      function TemplatePreparseVisitor() {\n          this.ngContentSelectors = [];\n          this.styles = [];\n          this.styleUrls = [];\n          this.ngNonBindableStackCount = 0;\n      }\n      TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {\n          var preparsedElement = preparseElement(ast);\n          switch (preparsedElement.type) {\n              case PreparsedElementType.NG_CONTENT:\n                  if (this.ngNonBindableStackCount === 0) {\n                      this.ngContentSelectors.push(preparsedElement.selectAttr);\n                  }\n                  break;\n              case PreparsedElementType.STYLE:\n                  var textContent = '';\n                  ast.children.forEach(function (child) {\n                      if (child instanceof Text) {\n                          textContent += child.value;\n                      }\n                  });\n                  this.styles.push(textContent);\n                  break;\n              case PreparsedElementType.STYLESHEET:\n                  this.styleUrls.push(preparsedElement.hrefAttr);\n                  break;\n              default:\n                  break;\n          }\n          if (preparsedElement.nonBindable) {\n              this.ngNonBindableStackCount++;\n          }\n          visitAll(this, ast.children);\n          if (preparsedElement.nonBindable) {\n              this.ngNonBindableStackCount--;\n          }\n          return null;\n      };\n      TemplatePreparseVisitor.prototype.visitComment = function (ast, context) { return null; };\n      TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) { return null; };\n      TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null; };\n      TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) { return null; };\n      TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) { return null; };\n      return TemplatePreparseVisitor;\n  }());\n  function _cloneDirectiveWithTemplate(directive, template) {\n      return new CompileDirectiveMetadata({\n          type: directive.type,\n          isComponent: directive.isComponent,\n          selector: directive.selector,\n          exportAs: directive.exportAs,\n          changeDetection: directive.changeDetection,\n          inputs: directive.inputs,\n          outputs: directive.outputs,\n          hostListeners: directive.hostListeners,\n          hostProperties: directive.hostProperties,\n          hostAttributes: directive.hostAttributes,\n          providers: directive.providers,\n          viewProviders: directive.viewProviders,\n          queries: directive.queries,\n          viewQueries: directive.viewQueries,\n          entryComponents: directive.entryComponents,\n          template: template\n      });\n  }\n\n  function _isDirectiveMetadata(type) {\n      return type instanceof _angular_core.DirectiveMetadata;\n  }\n  /*\n   * Resolve a `Type` for {@link DirectiveMetadata}.\n   *\n   * This interface can be overridden by the application developer to create custom behavior.\n   *\n   * See {@link Compiler}\n   */\n  var DirectiveResolver = (function () {\n      function DirectiveResolver(_reflector) {\n          if (_reflector === void 0) { _reflector = reflector; }\n          this._reflector = _reflector;\n      }\n      /**\n       * Return {@link DirectiveMetadata} for a given `Type`.\n       */\n      DirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {\n          if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n          var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));\n          if (isPresent(typeMetadata)) {\n              var metadata = typeMetadata.find(_isDirectiveMetadata);\n              if (isPresent(metadata)) {\n                  var propertyMetadata = this._reflector.propMetadata(type);\n                  return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);\n              }\n          }\n          if (throwIfNotFound) {\n              throw new Error(\"No Directive annotation found on \" + stringify(type));\n          }\n          return null;\n      };\n      DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {\n          var inputs = [];\n          var outputs = [];\n          var host = {};\n          var queries = {};\n          StringMapWrapper.forEach(propertyMetadata, function (metadata, propName) {\n              metadata.forEach(function (a) {\n                  if (a instanceof _angular_core.InputMetadata) {\n                      if (isPresent(a.bindingPropertyName)) {\n                          inputs.push(propName + \": \" + a.bindingPropertyName);\n                      }\n                      else {\n                          inputs.push(propName);\n                      }\n                  }\n                  else if (a instanceof _angular_core.OutputMetadata) {\n                      if (isPresent(a.bindingPropertyName)) {\n                          outputs.push(propName + \": \" + a.bindingPropertyName);\n                      }\n                      else {\n                          outputs.push(propName);\n                      }\n                  }\n                  else if (a instanceof _angular_core.HostBindingMetadata) {\n                      if (isPresent(a.hostPropertyName)) {\n                          host[(\"[\" + a.hostPropertyName + \"]\")] = propName;\n                      }\n                      else {\n                          host[(\"[\" + propName + \"]\")] = propName;\n                      }\n                  }\n                  else if (a instanceof _angular_core.HostListenerMetadata) {\n                      var args = isPresent(a.args) ? a.args.join(', ') : '';\n                      host[(\"(\" + a.eventName + \")\")] = propName + \"(\" + args + \")\";\n                  }\n                  else if (a instanceof _angular_core.QueryMetadata) {\n                      queries[propName] = a;\n                  }\n              });\n          });\n          return this._merge(dm, inputs, outputs, host, queries, directiveType);\n      };\n      DirectiveResolver.prototype._extractPublicName = function (def) { return splitAtColon(def, [null, def])[1].trim(); };\n      DirectiveResolver.prototype._merge = function (dm, inputs, outputs, host, queries, directiveType) {\n          var _this = this;\n          var mergedInputs;\n          if (isPresent(dm.inputs)) {\n              var inputNames_1 = dm.inputs.map(function (def) { return _this._extractPublicName(def); });\n              inputs.forEach(function (inputDef) {\n                  var publicName = _this._extractPublicName(inputDef);\n                  if (inputNames_1.indexOf(publicName) > -1) {\n                      throw new Error(\"Input '\" + publicName + \"' defined multiple times in '\" + stringify(directiveType) + \"'\");\n                  }\n              });\n              mergedInputs = dm.inputs.concat(inputs);\n          }\n          else {\n              mergedInputs = inputs;\n          }\n          var mergedOutputs;\n          if (isPresent(dm.outputs)) {\n              var outputNames_1 = dm.outputs.map(function (def) { return _this._extractPublicName(def); });\n              outputs.forEach(function (outputDef) {\n                  var publicName = _this._extractPublicName(outputDef);\n                  if (outputNames_1.indexOf(publicName) > -1) {\n                      throw new Error(\"Output event '\" + publicName + \"' defined multiple times in '\" + stringify(directiveType) + \"'\");\n                  }\n              });\n              mergedOutputs = dm.outputs.concat(outputs);\n          }\n          else {\n              mergedOutputs = outputs;\n          }\n          var mergedHost = isPresent(dm.host) ? StringMapWrapper.merge(dm.host, host) : host;\n          var mergedQueries = isPresent(dm.queries) ? StringMapWrapper.merge(dm.queries, queries) : queries;\n          if (dm instanceof _angular_core.ComponentMetadata) {\n              return new _angular_core.ComponentMetadata({\n                  selector: dm.selector,\n                  inputs: mergedInputs,\n                  outputs: mergedOutputs,\n                  host: mergedHost,\n                  exportAs: dm.exportAs,\n                  moduleId: dm.moduleId,\n                  queries: mergedQueries,\n                  changeDetection: dm.changeDetection,\n                  providers: dm.providers,\n                  viewProviders: dm.viewProviders,\n                  entryComponents: dm.entryComponents,\n                  template: dm.template,\n                  templateUrl: dm.templateUrl,\n                  styles: dm.styles,\n                  styleUrls: dm.styleUrls,\n                  encapsulation: dm.encapsulation,\n                  animations: dm.animations,\n                  interpolation: dm.interpolation\n              });\n          }\n          else {\n              return new _angular_core.DirectiveMetadata({\n                  selector: dm.selector,\n                  inputs: mergedInputs,\n                  outputs: mergedOutputs,\n                  host: mergedHost,\n                  exportAs: dm.exportAs,\n                  queries: mergedQueries,\n                  providers: dm.providers\n              });\n          }\n      };\n      DirectiveResolver.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      DirectiveResolver.ctorParameters = [\n          { type: ReflectorReader, },\n      ];\n      return DirectiveResolver;\n  }());\n\n  var LIFECYCLE_INTERFACES = MapWrapper.createFromPairs([\n      [LifecycleHooks.OnInit, _angular_core.OnInit],\n      [LifecycleHooks.OnDestroy, _angular_core.OnDestroy],\n      [LifecycleHooks.DoCheck, _angular_core.DoCheck],\n      [LifecycleHooks.OnChanges, _angular_core.OnChanges],\n      [LifecycleHooks.AfterContentInit, _angular_core.AfterContentInit],\n      [LifecycleHooks.AfterContentChecked, _angular_core.AfterContentChecked],\n      [LifecycleHooks.AfterViewInit, _angular_core.AfterViewInit],\n      [LifecycleHooks.AfterViewChecked, _angular_core.AfterViewChecked],\n  ]);\n  var LIFECYCLE_PROPS = MapWrapper.createFromPairs([\n      [LifecycleHooks.OnInit, 'ngOnInit'],\n      [LifecycleHooks.OnDestroy, 'ngOnDestroy'],\n      [LifecycleHooks.DoCheck, 'ngDoCheck'],\n      [LifecycleHooks.OnChanges, 'ngOnChanges'],\n      [LifecycleHooks.AfterContentInit, 'ngAfterContentInit'],\n      [LifecycleHooks.AfterContentChecked, 'ngAfterContentChecked'],\n      [LifecycleHooks.AfterViewInit, 'ngAfterViewInit'],\n      [LifecycleHooks.AfterViewChecked, 'ngAfterViewChecked'],\n  ]);\n  function hasLifecycleHook(hook, token) {\n      var lcInterface = LIFECYCLE_INTERFACES.get(hook);\n      var lcProp = LIFECYCLE_PROPS.get(hook);\n      return reflector.hasLifecycleHook(token, lcInterface, lcProp);\n  }\n\n  function _isNgModuleMetadata(obj) {\n      return obj instanceof _angular_core.NgModuleMetadata;\n  }\n  /**\n   * Resolves types to {@link NgModuleMetadata}.\n   */\n  var NgModuleResolver = (function () {\n      function NgModuleResolver(_reflector) {\n          if (_reflector === void 0) { _reflector = reflector; }\n          this._reflector = _reflector;\n      }\n      NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {\n          if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n          var ngModuleMeta = this._reflector.annotations(type).find(_isNgModuleMetadata);\n          if (isPresent(ngModuleMeta)) {\n              return ngModuleMeta;\n          }\n          else {\n              if (throwIfNotFound) {\n                  throw new Error(\"No NgModule metadata found for '\" + stringify(type) + \"'.\");\n              }\n              return null;\n          }\n      };\n      NgModuleResolver.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      NgModuleResolver.ctorParameters = [\n          { type: ReflectorReader, },\n      ];\n      return NgModuleResolver;\n  }());\n\n  function _isPipeMetadata(type) {\n      return type instanceof _angular_core.PipeMetadata;\n  }\n  /**\n   * Resolve a `Type` for {@link PipeMetadata}.\n   *\n   * This interface can be overridden by the application developer to create custom behavior.\n   *\n   * See {@link Compiler}\n   */\n  var PipeResolver = (function () {\n      function PipeResolver(_reflector) {\n          if (_reflector === void 0) { _reflector = reflector; }\n          this._reflector = _reflector;\n      }\n      /**\n       * Return {@link PipeMetadata} for a given `Type`.\n       */\n      PipeResolver.prototype.resolve = function (type, throwIfNotFound) {\n          if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n          var metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));\n          if (isPresent(metas)) {\n              var annotation = metas.find(_isPipeMetadata);\n              if (isPresent(annotation)) {\n                  return annotation;\n              }\n          }\n          if (throwIfNotFound) {\n              throw new Error(\"No Pipe decorator found on \" + stringify(type));\n          }\n          return null;\n      };\n      PipeResolver.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      PipeResolver.ctorParameters = [\n          { type: ReflectorReader, },\n      ];\n      return PipeResolver;\n  }());\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$14 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var CompileMetadataResolver = (function () {\n      function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _schemaRegistry, _reflector) {\n          if (_reflector === void 0) { _reflector = reflector; }\n          this._ngModuleResolver = _ngModuleResolver;\n          this._directiveResolver = _directiveResolver;\n          this._pipeResolver = _pipeResolver;\n          this._schemaRegistry = _schemaRegistry;\n          this._reflector = _reflector;\n          this._directiveCache = new Map();\n          this._pipeCache = new Map();\n          this._ngModuleCache = new Map();\n          this._ngModuleOfTypes = new Map();\n          this._anonymousTypes = new Map();\n          this._anonymousTypeIndex = 0;\n      }\n      CompileMetadataResolver.prototype.sanitizeTokenName = function (token) {\n          var identifier = stringify(token);\n          if (identifier.indexOf('(') >= 0) {\n              // case: anonymous functions!\n              var found = this._anonymousTypes.get(token);\n              if (isBlank(found)) {\n                  this._anonymousTypes.set(token, this._anonymousTypeIndex++);\n                  found = this._anonymousTypes.get(token);\n              }\n              identifier = \"anonymous_token_\" + found + \"_\";\n          }\n          return sanitizeIdentifier(identifier);\n      };\n      CompileMetadataResolver.prototype.clearCacheFor = function (type) {\n          this._directiveCache.delete(type);\n          this._pipeCache.delete(type);\n          this._ngModuleOfTypes.delete(type);\n          // Clear all of the NgModuleMetadata as they contain transitive information!\n          this._ngModuleCache.clear();\n      };\n      CompileMetadataResolver.prototype.clearCache = function () {\n          this._directiveCache.clear();\n          this._pipeCache.clear();\n          this._ngModuleCache.clear();\n          this._ngModuleOfTypes.clear();\n      };\n      CompileMetadataResolver.prototype.getAnimationEntryMetadata = function (entry) {\n          var _this = this;\n          var defs = entry.definitions.map(function (def) { return _this.getAnimationStateMetadata(def); });\n          return new CompileAnimationEntryMetadata(entry.name, defs);\n      };\n      CompileMetadataResolver.prototype.getAnimationStateMetadata = function (value) {\n          if (value instanceof _angular_core.AnimationStateDeclarationMetadata) {\n              var styles = this.getAnimationStyleMetadata(value.styles);\n              return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);\n          }\n          else if (value instanceof _angular_core.AnimationStateTransitionMetadata) {\n              return new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this.getAnimationMetadata(value.steps));\n          }\n          return null;\n      };\n      CompileMetadataResolver.prototype.getAnimationStyleMetadata = function (value) {\n          return new CompileAnimationStyleMetadata(value.offset, value.styles);\n      };\n      CompileMetadataResolver.prototype.getAnimationMetadata = function (value) {\n          var _this = this;\n          if (value instanceof _angular_core.AnimationStyleMetadata) {\n              return this.getAnimationStyleMetadata(value);\n          }\n          else if (value instanceof _angular_core.AnimationKeyframesSequenceMetadata) {\n              return new CompileAnimationKeyframesSequenceMetadata(value.steps.map(function (entry) { return _this.getAnimationStyleMetadata(entry); }));\n          }\n          else if (value instanceof _angular_core.AnimationAnimateMetadata) {\n              var animateData = this\n                  .getAnimationMetadata(value.styles);\n              return new CompileAnimationAnimateMetadata(value.timings, animateData);\n          }\n          else if (value instanceof _angular_core.AnimationWithStepsMetadata) {\n              var steps = value.steps.map(function (step) { return _this.getAnimationMetadata(step); });\n              if (value instanceof _angular_core.AnimationGroupMetadata) {\n                  return new CompileAnimationGroupMetadata(steps);\n              }\n              else {\n                  return new CompileAnimationSequenceMetadata(steps);\n              }\n          }\n          return null;\n      };\n      CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType, throwIfNotFound) {\n          var _this = this;\n          if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n          directiveType = _angular_core.resolveForwardRef(directiveType);\n          var meta = this._directiveCache.get(directiveType);\n          if (isBlank(meta)) {\n              var dirMeta = this._directiveResolver.resolve(directiveType, throwIfNotFound);\n              if (!dirMeta) {\n                  return null;\n              }\n              var templateMeta = null;\n              var changeDetectionStrategy = null;\n              var viewProviders = [];\n              var moduleUrl = staticTypeModuleUrl(directiveType);\n              var entryComponentMetadata = [];\n              var selector = dirMeta.selector;\n              if (dirMeta instanceof _angular_core.ComponentMetadata) {\n                  var cmpMeta = dirMeta;\n                  assertArrayOfStrings('styles', cmpMeta.styles);\n                  assertInterpolationSymbols('interpolation', cmpMeta.interpolation);\n                  var animations = isPresent(cmpMeta.animations) ?\n                      cmpMeta.animations.map(function (e) { return _this.getAnimationEntryMetadata(e); }) :\n                      null;\n                  assertArrayOfStrings('styles', cmpMeta.styles);\n                  assertArrayOfStrings('styleUrls', cmpMeta.styleUrls);\n                  templateMeta = new CompileTemplateMetadata({\n                      encapsulation: cmpMeta.encapsulation,\n                      template: cmpMeta.template,\n                      templateUrl: cmpMeta.templateUrl,\n                      styles: cmpMeta.styles,\n                      styleUrls: cmpMeta.styleUrls,\n                      animations: animations,\n                      interpolation: cmpMeta.interpolation\n                  });\n                  changeDetectionStrategy = cmpMeta.changeDetection;\n                  if (isPresent(dirMeta.viewProviders)) {\n                      viewProviders = this.getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, \"viewProviders for \\\"\" + stringify(directiveType) + \"\\\"\");\n                  }\n                  moduleUrl = componentModuleUrl(this._reflector, directiveType, cmpMeta);\n                  if (cmpMeta.entryComponents) {\n                      entryComponentMetadata =\n                          flattenArray(cmpMeta.entryComponents)\n                              .map(function (type) { return _this.getTypeMetadata(type, staticTypeModuleUrl(type)); })\n                              .concat(entryComponentMetadata);\n                  }\n                  if (!selector) {\n                      selector = this._schemaRegistry.getDefaultComponentElementName();\n                  }\n              }\n              else {\n                  if (!selector) {\n                      throw new Error(\"Directive \" + stringify(directiveType) + \" has no selector, please add it!\");\n                  }\n              }\n              var providers = [];\n              if (isPresent(dirMeta.providers)) {\n                  providers = this.getProvidersMetadata(dirMeta.providers, entryComponentMetadata, \"providers for \\\"\" + stringify(directiveType) + \"\\\"\");\n              }\n              var queries = [];\n              var viewQueries = [];\n              if (isPresent(dirMeta.queries)) {\n                  queries = this.getQueriesMetadata(dirMeta.queries, false, directiveType);\n                  viewQueries = this.getQueriesMetadata(dirMeta.queries, true, directiveType);\n              }\n              meta = CompileDirectiveMetadata.create({\n                  selector: selector,\n                  exportAs: dirMeta.exportAs,\n                  isComponent: isPresent(templateMeta),\n                  type: this.getTypeMetadata(directiveType, moduleUrl),\n                  template: templateMeta,\n                  changeDetection: changeDetectionStrategy,\n                  inputs: dirMeta.inputs,\n                  outputs: dirMeta.outputs,\n                  host: dirMeta.host,\n                  providers: providers,\n                  viewProviders: viewProviders,\n                  queries: queries,\n                  viewQueries: viewQueries,\n                  entryComponents: entryComponentMetadata\n              });\n              this._directiveCache.set(directiveType, meta);\n          }\n          return meta;\n      };\n      CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType, throwIfNotFound) {\n          var _this = this;\n          if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n          moduleType = _angular_core.resolveForwardRef(moduleType);\n          var compileMeta = this._ngModuleCache.get(moduleType);\n          if (!compileMeta) {\n              var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);\n              if (!meta) {\n                  return null;\n              }\n              var declaredDirectives_1 = [];\n              var exportedDirectives_1 = [];\n              var declaredPipes_1 = [];\n              var exportedPipes_1 = [];\n              var importedModules_1 = [];\n              var exportedModules_1 = [];\n              var providers_1 = [];\n              var entryComponents_1 = [];\n              var bootstrapComponents = [];\n              var schemas = [];\n              if (meta.imports) {\n                  flattenArray(meta.imports).forEach(function (importedType) {\n                      var importedModuleType;\n                      if (isValidType(importedType)) {\n                          importedModuleType = importedType;\n                      }\n                      else if (importedType && importedType.ngModule) {\n                          var moduleWithProviders = importedType;\n                          importedModuleType = moduleWithProviders.ngModule;\n                          if (moduleWithProviders.providers) {\n                              providers_1.push.apply(providers_1, _this.getProvidersMetadata(moduleWithProviders.providers, entryComponents_1, \"provider for the NgModule '\" + stringify(importedModuleType) + \"'\"));\n                          }\n                      }\n                      if (importedModuleType) {\n                          var importedMeta = _this.getNgModuleMetadata(importedModuleType, false);\n                          if (importedMeta === null) {\n                              throw new Error(\"Unexpected \" + _this._getTypeDescriptor(importedType) + \" '\" + stringify(importedType) + \"' imported by the module '\" + stringify(moduleType) + \"'\");\n                          }\n                          importedModules_1.push(importedMeta);\n                      }\n                      else {\n                          throw new Error(\"Unexpected value '\" + stringify(importedType) + \"' imported by the module '\" + stringify(moduleType) + \"'\");\n                      }\n                  });\n              }\n              if (meta.exports) {\n                  flattenArray(meta.exports).forEach(function (exportedType) {\n                      if (!isValidType(exportedType)) {\n                          throw new Error(\"Unexpected value '\" + stringify(exportedType) + \"' exported by the module '\" + stringify(moduleType) + \"'\");\n                      }\n                      var exportedDirMeta;\n                      var exportedPipeMeta;\n                      var exportedModuleMeta;\n                      if (exportedDirMeta = _this.getDirectiveMetadata(exportedType, false)) {\n                          exportedDirectives_1.push(exportedDirMeta);\n                      }\n                      else if (exportedPipeMeta = _this.getPipeMetadata(exportedType, false)) {\n                          exportedPipes_1.push(exportedPipeMeta);\n                      }\n                      else if (exportedModuleMeta = _this.getNgModuleMetadata(exportedType, false)) {\n                          exportedModules_1.push(exportedModuleMeta);\n                      }\n                      else {\n                          throw new Error(\"Unexpected \" + _this._getTypeDescriptor(exportedType) + \" '\" + stringify(exportedType) + \"' exported by the module '\" + stringify(moduleType) + \"'\");\n                      }\n                  });\n              }\n              // Note: This will be modified later, so we rely on\n              // getting a new instance every time!\n              var transitiveModule_1 = this._getTransitiveNgModuleMetadata(importedModules_1, exportedModules_1);\n              if (meta.declarations) {\n                  flattenArray(meta.declarations).forEach(function (declaredType) {\n                      if (!isValidType(declaredType)) {\n                          throw new Error(\"Unexpected value '\" + stringify(declaredType) + \"' declared by the module '\" + stringify(moduleType) + \"'\");\n                      }\n                      var declaredDirMeta;\n                      var declaredPipeMeta;\n                      if (declaredDirMeta = _this.getDirectiveMetadata(declaredType, false)) {\n                          _this._addDirectiveToModule(declaredDirMeta, moduleType, transitiveModule_1, declaredDirectives_1, true);\n                      }\n                      else if (declaredPipeMeta = _this.getPipeMetadata(declaredType, false)) {\n                          _this._addPipeToModule(declaredPipeMeta, moduleType, transitiveModule_1, declaredPipes_1, true);\n                      }\n                      else {\n                          throw new Error(\"Unexpected \" + _this._getTypeDescriptor(declaredType) + \" '\" + stringify(declaredType) + \"' declared by the module '\" + stringify(moduleType) + \"'\");\n                      }\n                  });\n              }\n              // The providers of the module have to go last\n              // so that they overwrite any other provider we already added.\n              if (meta.providers) {\n                  providers_1.push.apply(providers_1, this.getProvidersMetadata(meta.providers, entryComponents_1, \"provider for the NgModule '\" + stringify(moduleType) + \"'\"));\n              }\n              if (meta.entryComponents) {\n                  entryComponents_1.push.apply(entryComponents_1, flattenArray(meta.entryComponents)\n                      .map(function (type) { return _this.getTypeMetadata(type, staticTypeModuleUrl(type)); }));\n              }\n              if (meta.bootstrap) {\n                  bootstrapComponents.push.apply(bootstrapComponents, flattenArray(meta.bootstrap)\n                      .map(function (type) { return _this.getTypeMetadata(type, staticTypeModuleUrl(type)); }));\n              }\n              entryComponents_1.push.apply(entryComponents_1, bootstrapComponents);\n              if (meta.schemas) {\n                  schemas.push.apply(schemas, flattenArray(meta.schemas));\n              }\n              (_a = transitiveModule_1.entryComponents).push.apply(_a, entryComponents_1);\n              (_b = transitiveModule_1.providers).push.apply(_b, providers_1);\n              compileMeta = new CompileNgModuleMetadata({\n                  type: this.getTypeMetadata(moduleType, staticTypeModuleUrl(moduleType)),\n                  providers: providers_1,\n                  entryComponents: entryComponents_1,\n                  bootstrapComponents: bootstrapComponents,\n                  schemas: schemas,\n                  declaredDirectives: declaredDirectives_1,\n                  exportedDirectives: exportedDirectives_1,\n                  declaredPipes: declaredPipes_1,\n                  exportedPipes: exportedPipes_1,\n                  importedModules: importedModules_1,\n                  exportedModules: exportedModules_1,\n                  transitiveModule: transitiveModule_1\n              });\n              transitiveModule_1.modules.push(compileMeta);\n              this._verifyModule(compileMeta);\n              this._ngModuleCache.set(moduleType, compileMeta);\n          }\n          return compileMeta;\n          var _a, _b;\n      };\n      CompileMetadataResolver.prototype._verifyModule = function (moduleMeta) {\n          moduleMeta.exportedDirectives.forEach(function (dirMeta) {\n              if (!moduleMeta.transitiveModule.directivesSet.has(dirMeta.type.reference)) {\n                  throw new Error(\"Can't export directive \" + stringify(dirMeta.type.reference) + \" from \" + stringify(moduleMeta.type.reference) + \" as it was neither declared nor imported!\");\n              }\n          });\n          moduleMeta.exportedPipes.forEach(function (pipeMeta) {\n              if (!moduleMeta.transitiveModule.pipesSet.has(pipeMeta.type.reference)) {\n                  throw new Error(\"Can't export pipe \" + stringify(pipeMeta.type.reference) + \" from \" + stringify(moduleMeta.type.reference) + \" as it was neither declared nor imported!\");\n              }\n          });\n      };\n      CompileMetadataResolver.prototype._getTypeDescriptor = function (type) {\n          if (this._directiveResolver.resolve(type, false) !== null) {\n              return 'directive';\n          }\n          else if (this._pipeResolver.resolve(type, false) !== null) {\n              return 'pipe';\n          }\n          else if (this._ngModuleResolver.resolve(type, false) !== null) {\n              return 'module';\n          }\n          else if (type.provide) {\n              return 'provider';\n          }\n          else {\n              return 'value';\n          }\n      };\n      CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {\n          var oldModule = this._ngModuleOfTypes.get(type);\n          if (oldModule && oldModule !== moduleType) {\n              throw new Error(\"Type \" + stringify(type) + \" is part of the declarations of 2 modules: \" + stringify(oldModule) + \" and \" + stringify(moduleType) + \"!\");\n          }\n          this._ngModuleOfTypes.set(type, moduleType);\n      };\n      CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {\n          // collect `providers` / `entryComponents` from all imported and all exported modules\n          var transitiveModules = getTransitiveModules(importedModules.concat(exportedModules), true);\n          var providers = flattenArray(transitiveModules.map(function (ngModule) { return ngModule.providers; }));\n          var entryComponents = flattenArray(transitiveModules.map(function (ngModule) { return ngModule.entryComponents; }));\n          var transitiveExportedModules = getTransitiveModules(importedModules, false);\n          var directives = flattenArray(transitiveExportedModules.map(function (ngModule) { return ngModule.exportedDirectives; }));\n          var pipes = flattenArray(transitiveExportedModules.map(function (ngModule) { return ngModule.exportedPipes; }));\n          return new TransitiveCompileNgModuleMetadata(transitiveModules, providers, entryComponents, directives, pipes);\n      };\n      CompileMetadataResolver.prototype._addDirectiveToModule = function (dirMeta, moduleType, transitiveModule, declaredDirectives, force) {\n          if (force === void 0) { force = false; }\n          if (force || !transitiveModule.directivesSet.has(dirMeta.type.reference)) {\n              transitiveModule.directivesSet.add(dirMeta.type.reference);\n              transitiveModule.directives.push(dirMeta);\n              declaredDirectives.push(dirMeta);\n              this._addTypeToModule(dirMeta.type.reference, moduleType);\n              return true;\n          }\n          return false;\n      };\n      CompileMetadataResolver.prototype._addPipeToModule = function (pipeMeta, moduleType, transitiveModule, declaredPipes, force) {\n          if (force === void 0) { force = false; }\n          if (force || !transitiveModule.pipesSet.has(pipeMeta.type.reference)) {\n              transitiveModule.pipesSet.add(pipeMeta.type.reference);\n              transitiveModule.pipes.push(pipeMeta);\n              declaredPipes.push(pipeMeta);\n              this._addTypeToModule(pipeMeta.type.reference, moduleType);\n              return true;\n          }\n          return false;\n      };\n      CompileMetadataResolver.prototype.getTypeMetadata = function (type, moduleUrl, dependencies) {\n          if (dependencies === void 0) { dependencies = null; }\n          type = _angular_core.resolveForwardRef(type);\n          return new CompileTypeMetadata({\n              name: this.sanitizeTokenName(type),\n              moduleUrl: moduleUrl,\n              reference: type,\n              diDeps: this.getDependenciesMetadata(type, dependencies),\n              lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return hasLifecycleHook(hook, type); }),\n          });\n      };\n      CompileMetadataResolver.prototype.getFactoryMetadata = function (factory, moduleUrl, dependencies) {\n          if (dependencies === void 0) { dependencies = null; }\n          factory = _angular_core.resolveForwardRef(factory);\n          return new CompileFactoryMetadata({\n              name: this.sanitizeTokenName(factory),\n              moduleUrl: moduleUrl,\n              reference: factory,\n              diDeps: this.getDependenciesMetadata(factory, dependencies)\n          });\n      };\n      CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType, throwIfNotFound) {\n          if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n          pipeType = _angular_core.resolveForwardRef(pipeType);\n          var meta = this._pipeCache.get(pipeType);\n          if (isBlank(meta)) {\n              var pipeMeta = this._pipeResolver.resolve(pipeType, throwIfNotFound);\n              if (!pipeMeta) {\n                  return null;\n              }\n              meta = new CompilePipeMetadata({\n                  type: this.getTypeMetadata(pipeType, staticTypeModuleUrl(pipeType)),\n                  name: pipeMeta.name,\n                  pure: pipeMeta.pure\n              });\n              this._pipeCache.set(pipeType, meta);\n          }\n          return meta;\n      };\n      CompileMetadataResolver.prototype.getDependenciesMetadata = function (typeOrFunc, dependencies) {\n          var _this = this;\n          var hasUnknownDeps = false;\n          var params = isPresent(dependencies) ? dependencies : this._reflector.parameters(typeOrFunc);\n          if (isBlank(params)) {\n              params = [];\n          }\n          var dependenciesMetadata = params.map(function (param) {\n              var isAttribute = false;\n              var isHost = false;\n              var isSelf = false;\n              var isSkipSelf = false;\n              var isOptional = false;\n              var query = null;\n              var viewQuery = null;\n              var token = null;\n              if (isArray(param)) {\n                  param.forEach(function (paramEntry) {\n                      if (paramEntry instanceof _angular_core.HostMetadata) {\n                          isHost = true;\n                      }\n                      else if (paramEntry instanceof _angular_core.SelfMetadata) {\n                          isSelf = true;\n                      }\n                      else if (paramEntry instanceof _angular_core.SkipSelfMetadata) {\n                          isSkipSelf = true;\n                      }\n                      else if (paramEntry instanceof _angular_core.OptionalMetadata) {\n                          isOptional = true;\n                      }\n                      else if (paramEntry instanceof _angular_core.AttributeMetadata) {\n                          isAttribute = true;\n                          token = paramEntry.attributeName;\n                      }\n                      else if (paramEntry instanceof _angular_core.QueryMetadata) {\n                          if (paramEntry.isViewQuery) {\n                              viewQuery = paramEntry;\n                          }\n                          else {\n                              query = paramEntry;\n                          }\n                      }\n                      else if (paramEntry instanceof _angular_core.InjectMetadata) {\n                          token = paramEntry.token;\n                      }\n                      else if (isValidType(paramEntry) && isBlank(token)) {\n                          token = paramEntry;\n                      }\n                  });\n              }\n              else {\n                  token = param;\n              }\n              if (isBlank(token)) {\n                  hasUnknownDeps = true;\n                  return null;\n              }\n              return new CompileDiDependencyMetadata({\n                  isAttribute: isAttribute,\n                  isHost: isHost,\n                  isSelf: isSelf,\n                  isSkipSelf: isSkipSelf,\n                  isOptional: isOptional,\n                  query: isPresent(query) ? _this.getQueryMetadata(query, null, typeOrFunc) : null,\n                  viewQuery: isPresent(viewQuery) ? _this.getQueryMetadata(viewQuery, null, typeOrFunc) : null,\n                  token: _this.getTokenMetadata(token)\n              });\n          });\n          if (hasUnknownDeps) {\n              var depsTokens = dependenciesMetadata.map(function (dep) { return dep ? stringify(dep.token) : '?'; })\n                  .join(', ');\n              throw new Error(\"Can't resolve all parameters for \" + stringify(typeOrFunc) + \": (\" + depsTokens + \").\");\n          }\n          return dependenciesMetadata;\n      };\n      CompileMetadataResolver.prototype.getTokenMetadata = function (token) {\n          token = _angular_core.resolveForwardRef(token);\n          var compileToken;\n          if (isString(token)) {\n              compileToken = new CompileTokenMetadata({ value: token });\n          }\n          else {\n              compileToken = new CompileTokenMetadata({\n                  identifier: new CompileIdentifierMetadata({\n                      reference: token,\n                      name: this.sanitizeTokenName(token),\n                      moduleUrl: staticTypeModuleUrl(token)\n                  })\n              });\n          }\n          return compileToken;\n      };\n      CompileMetadataResolver.prototype.getProvidersMetadata = function (providers, targetEntryComponents, debugInfo) {\n          var _this = this;\n          var compileProviders = [];\n          providers.forEach(function (provider, providerIdx) {\n              provider = _angular_core.resolveForwardRef(provider);\n              if (provider && typeof provider == 'object' && provider.hasOwnProperty('provide')) {\n                  provider = new ProviderMeta(provider.provide, provider);\n              }\n              var compileProvider;\n              if (isArray(provider)) {\n                  compileProvider = _this.getProvidersMetadata(provider, targetEntryComponents, debugInfo);\n              }\n              else if (provider instanceof ProviderMeta) {\n                  var tokenMeta = _this.getTokenMetadata(provider.token);\n                  if (tokenMeta.reference ===\n                      resolveIdentifierToken(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS).reference) {\n                      targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(provider));\n                  }\n                  else {\n                      compileProvider = _this.getProviderMetadata(provider);\n                  }\n              }\n              else if (isValidType(provider)) {\n                  compileProvider = _this.getTypeMetadata(provider, staticTypeModuleUrl(provider));\n              }\n              else {\n                  var providersInfo = providers.reduce(function (soFar, seenProvider, seenProviderIdx) {\n                      if (seenProviderIdx < providerIdx) {\n                          soFar.push(\"\" + stringify(seenProvider));\n                      }\n                      else if (seenProviderIdx == providerIdx) {\n                          soFar.push(\"?\" + stringify(seenProvider) + \"?\");\n                      }\n                      else if (seenProviderIdx == providerIdx + 1) {\n                          soFar.push('...');\n                      }\n                      return soFar;\n                  }, [])\n                      .join(', ');\n                  throw new Error(\"Invalid \" + (debugInfo ? debugInfo : 'provider') + \" - only instances of Provider and Type are allowed, got: [\" + providersInfo + \"]\");\n              }\n              if (compileProvider) {\n                  compileProviders.push(compileProvider);\n              }\n          });\n          return compileProviders;\n      };\n      CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider) {\n          var _this = this;\n          var components = [];\n          var collectedIdentifiers = [];\n          if (provider.useFactory || provider.useExisting || provider.useClass) {\n              throw new Error(\"The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!\");\n          }\n          if (!provider.multi) {\n              throw new Error(\"The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!\");\n          }\n          convertToCompileValue(provider.useValue, collectedIdentifiers);\n          collectedIdentifiers.forEach(function (identifier) {\n              var dirMeta = _this.getDirectiveMetadata(identifier.reference, false);\n              if (dirMeta) {\n                  components.push(dirMeta.type);\n              }\n          });\n          return components;\n      };\n      CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {\n          var compileDeps;\n          var compileTypeMetadata = null;\n          var compileFactoryMetadata = null;\n          if (isPresent(provider.useClass)) {\n              compileTypeMetadata = this.getTypeMetadata(provider.useClass, staticTypeModuleUrl(provider.useClass), provider.dependencies);\n              compileDeps = compileTypeMetadata.diDeps;\n          }\n          else if (isPresent(provider.useFactory)) {\n              compileFactoryMetadata = this.getFactoryMetadata(provider.useFactory, staticTypeModuleUrl(provider.useFactory), provider.dependencies);\n              compileDeps = compileFactoryMetadata.diDeps;\n          }\n          return new CompileProviderMetadata({\n              token: this.getTokenMetadata(provider.token),\n              useClass: compileTypeMetadata,\n              useValue: convertToCompileValue(provider.useValue, []),\n              useFactory: compileFactoryMetadata,\n              useExisting: isPresent(provider.useExisting) ? this.getTokenMetadata(provider.useExisting) :\n                  null,\n              deps: compileDeps,\n              multi: provider.multi\n          });\n      };\n      CompileMetadataResolver.prototype.getQueriesMetadata = function (queries, isViewQuery, directiveType) {\n          var _this = this;\n          var res = [];\n          StringMapWrapper.forEach(queries, function (query, propertyName) {\n              if (query.isViewQuery === isViewQuery) {\n                  res.push(_this.getQueryMetadata(query, propertyName, directiveType));\n              }\n          });\n          return res;\n      };\n      CompileMetadataResolver.prototype.getQueryMetadata = function (q, propertyName, typeOrFunc) {\n          var _this = this;\n          var selectors;\n          if (q.isVarBindingQuery) {\n              selectors = q.varBindings.map(function (varName) { return _this.getTokenMetadata(varName); });\n          }\n          else {\n              if (!isPresent(q.selector)) {\n                  throw new Error(\"Can't construct a query for the property \\\"\" + propertyName + \"\\\" of \\\"\" + stringify(typeOrFunc) + \"\\\" since the query selector wasn't defined.\");\n              }\n              selectors = [this.getTokenMetadata(q.selector)];\n          }\n          return new CompileQueryMetadata({\n              selectors: selectors,\n              first: q.first,\n              descendants: q.descendants,\n              propertyName: propertyName,\n              read: isPresent(q.read) ? this.getTokenMetadata(q.read) : null\n          });\n      };\n      CompileMetadataResolver.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      CompileMetadataResolver.ctorParameters = [\n          { type: NgModuleResolver, },\n          { type: DirectiveResolver, },\n          { type: PipeResolver, },\n          { type: ElementSchemaRegistry, },\n          { type: ReflectorReader, },\n      ];\n      return CompileMetadataResolver;\n  }());\n  function getTransitiveModules(modules, includeImports, targetModules, visitedModules) {\n      if (targetModules === void 0) { targetModules = []; }\n      if (visitedModules === void 0) { visitedModules = new Set(); }\n      modules.forEach(function (ngModule) {\n          if (!visitedModules.has(ngModule.type.reference)) {\n              visitedModules.add(ngModule.type.reference);\n              var nestedModules = includeImports ?\n                  ngModule.importedModules.concat(ngModule.exportedModules) :\n                  ngModule.exportedModules;\n              getTransitiveModules(nestedModules, includeImports, targetModules, visitedModules);\n              // Add after recursing so imported/exported modules are before the module itself.\n              // This is important for overwriting providers of imported modules!\n              targetModules.push(ngModule);\n          }\n      });\n      return targetModules;\n  }\n  function flattenArray(tree, out) {\n      if (out === void 0) { out = []; }\n      if (tree) {\n          for (var i = 0; i < tree.length; i++) {\n              var item = _angular_core.resolveForwardRef(tree[i]);\n              if (isArray(item)) {\n                  flattenArray(item, out);\n              }\n              else {\n                  out.push(item);\n              }\n          }\n      }\n      return out;\n  }\n  function isValidType(value) {\n      return isStaticSymbol(value) || (value instanceof _angular_core.Type);\n  }\n  function staticTypeModuleUrl(value) {\n      return isStaticSymbol(value) ? value.filePath : null;\n  }\n  function componentModuleUrl(reflector, type, cmpMetadata) {\n      if (isStaticSymbol(type)) {\n          return staticTypeModuleUrl(type);\n      }\n      if (isPresent(cmpMetadata.moduleId)) {\n          var moduleId = cmpMetadata.moduleId;\n          var scheme = getUrlScheme(moduleId);\n          return isPresent(scheme) && scheme.length > 0 ? moduleId :\n              \"package:\" + moduleId + MODULE_SUFFIX;\n      }\n      return reflector.importUri(type);\n  }\n  function convertToCompileValue(value, targetIdentifiers) {\n      return visitValue(value, new _CompileValueConverter(), targetIdentifiers);\n  }\n  var _CompileValueConverter = (function (_super) {\n      __extends$14(_CompileValueConverter, _super);\n      function _CompileValueConverter() {\n          _super.apply(this, arguments);\n      }\n      _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {\n          var identifier;\n          if (isStaticSymbol(value)) {\n              identifier = new CompileIdentifierMetadata({ name: value.name, moduleUrl: value.filePath, reference: value });\n          }\n          else {\n              identifier = new CompileIdentifierMetadata({ reference: value });\n          }\n          targetIdentifiers.push(identifier);\n          return identifier;\n      };\n      return _CompileValueConverter;\n  }(ValueTransformer));\n\n  var ComponentFactoryDependency$1 = (function () {\n      function ComponentFactoryDependency(comp, placeholder) {\n          this.comp = comp;\n          this.placeholder = placeholder;\n      }\n      return ComponentFactoryDependency;\n  }());\n  var NgModuleCompileResult = (function () {\n      function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {\n          this.statements = statements;\n          this.ngModuleFactoryVar = ngModuleFactoryVar;\n          this.dependencies = dependencies;\n      }\n      return NgModuleCompileResult;\n  }());\n  var NgModuleCompiler = (function () {\n      function NgModuleCompiler() {\n      }\n      NgModuleCompiler.prototype.compile = function (ngModuleMeta, extraProviders) {\n          var sourceFileName = isPresent(ngModuleMeta.type.moduleUrl) ?\n              \"in NgModule \" + ngModuleMeta.type.name + \" in \" + ngModuleMeta.type.moduleUrl :\n              \"in NgModule \" + ngModuleMeta.type.name;\n          var sourceFile = new ParseSourceFile('', sourceFileName);\n          var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));\n          var deps = [];\n          var bootstrapComponentFactories = [];\n          var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function (entryComponent) {\n              var id = new CompileIdentifierMetadata({ name: entryComponent.name });\n              if (ngModuleMeta.bootstrapComponents.indexOf(entryComponent) > -1) {\n                  bootstrapComponentFactories.push(id);\n              }\n              deps.push(new ComponentFactoryDependency$1(entryComponent, id));\n              return id;\n          });\n          var builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);\n          var providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);\n          providerParser.parse().forEach(function (provider) { return builder.addProvider(provider); });\n          var injectorClass = builder.build();\n          var ngModuleFactoryVar = ngModuleMeta.type.name + \"NgFactory\";\n          var ngModuleFactoryStmt = variable(ngModuleFactoryVar)\n              .set(importExpr(resolveIdentifier(Identifiers.NgModuleFactory))\n              .instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(resolveIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const])))\n              .toDeclStmt(null, [StmtModifier.Final]);\n          return new NgModuleCompileResult([injectorClass, ngModuleFactoryStmt], ngModuleFactoryVar, deps);\n      };\n      NgModuleCompiler.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      NgModuleCompiler.ctorParameters = [];\n      return NgModuleCompiler;\n  }());\n  var _InjectorBuilder = (function () {\n      function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {\n          this._ngModuleMeta = _ngModuleMeta;\n          this._entryComponentFactories = _entryComponentFactories;\n          this._bootstrapComponentFactories = _bootstrapComponentFactories;\n          this._sourceSpan = _sourceSpan;\n          this._tokens = [];\n          this._instances = new Map();\n          this._fields = [];\n          this._createStmts = [];\n          this._destroyStmts = [];\n          this._getters = [];\n      }\n      _InjectorBuilder.prototype.addProvider = function (resolvedProvider) {\n          var _this = this;\n          var providerValueExpressions = resolvedProvider.providers.map(function (provider) { return _this._getProviderValue(provider); });\n          var propName = \"_\" + resolvedProvider.token.name + \"_\" + this._instances.size;\n          var instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);\n          if (resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {\n              this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());\n          }\n          this._tokens.push(resolvedProvider.token);\n          this._instances.set(resolvedProvider.token.reference, instance);\n      };\n      _InjectorBuilder.prototype.build = function () {\n          var _this = this;\n          var getMethodStmts = this._tokens.map(function (token) {\n              var providerExpr = _this._instances.get(token.reference);\n              return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);\n          });\n          var methods = [\n              new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)),\n              new ClassMethod('getInternal', [\n                  new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE),\n                  new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE)\n              ], getMethodStmts.concat([new ReturnStatement(InjectMethodVars$1.notFoundResult)]), DYNAMIC_TYPE),\n              new ClassMethod('destroyInternal', [], this._destroyStmts),\n          ];\n          var ctor = new ClassMethod(null, [new FnParam(InjectorProps.parent.name, importType(resolveIdentifier(Identifiers.Injector)))], [SUPER_EXPR\n                  .callFn([\n                  variable(InjectorProps.parent.name),\n                  literalArr(this._entryComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); })),\n                  literalArr(this._bootstrapComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); }))\n              ])\n                  .toStmt()]);\n          var injClassName = this._ngModuleMeta.type.name + \"Injector\";\n          return new ClassStmt(injClassName, importExpr(resolveIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]), this._fields, this._getters, ctor, methods);\n      };\n      _InjectorBuilder.prototype._getProviderValue = function (provider) {\n          var _this = this;\n          var result;\n          if (isPresent(provider.useExisting)) {\n              result = this._getDependency(new CompileDiDependencyMetadata({ token: provider.useExisting }));\n          }\n          else if (isPresent(provider.useFactory)) {\n              var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;\n              var depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });\n              result = importExpr(provider.useFactory).callFn(depsExpr);\n          }\n          else if (isPresent(provider.useClass)) {\n              var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;\n              var depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });\n              result =\n                  importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));\n          }\n          else {\n              result = convertValueToOutputAst(provider.useValue);\n          }\n          return result;\n      };\n      _InjectorBuilder.prototype._createProviderProperty = function (propName, provider, providerValueExpressions, isMulti, isEager) {\n          var resolvedProviderValueExpr;\n          var type;\n          if (isMulti) {\n              resolvedProviderValueExpr = literalArr(providerValueExpressions);\n              type = new ArrayType(DYNAMIC_TYPE);\n          }\n          else {\n              resolvedProviderValueExpr = providerValueExpressions[0];\n              type = providerValueExpressions[0].type;\n          }\n          if (isBlank(type)) {\n              type = DYNAMIC_TYPE;\n          }\n          if (isEager) {\n              this._fields.push(new ClassField(propName, type));\n              this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());\n          }\n          else {\n              var internalField = \"_\" + propName;\n              this._fields.push(new ClassField(internalField, type));\n              // Note: Equals is important for JS so that it also checks the undefined case!\n              var getterStmts = [\n                  new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]),\n                  new ReturnStatement(THIS_EXPR.prop(internalField))\n              ];\n              this._getters.push(new ClassGetter(propName, getterStmts, type));\n          }\n          return THIS_EXPR.prop(propName);\n      };\n      _InjectorBuilder.prototype._getDependency = function (dep) {\n          var result = null;\n          if (dep.isValue) {\n              result = literal(dep.value);\n          }\n          if (!dep.isSkipSelf) {\n              if (dep.token &&\n                  (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference ||\n                      dep.token.reference ===\n                          resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference)) {\n                  result = THIS_EXPR;\n              }\n              if (isBlank(result)) {\n                  result = this._instances.get(dep.token.reference);\n              }\n          }\n          if (isBlank(result)) {\n              var args = [createDiTokenExpression(dep.token)];\n              if (dep.isOptional) {\n                  args.push(NULL_EXPR);\n              }\n              result = InjectorProps.parent.callMethod('get', args);\n          }\n          return result;\n      };\n      return _InjectorBuilder;\n  }());\n  var InjectorProps = (function () {\n      function InjectorProps() {\n      }\n      InjectorProps.parent = THIS_EXPR.prop('parent');\n      return InjectorProps;\n  }());\n  var InjectMethodVars$1 = (function () {\n      function InjectMethodVars() {\n      }\n      InjectMethodVars.token = variable('token');\n      InjectMethodVars.notFoundResult = variable('notFoundResult');\n      return InjectMethodVars;\n  }());\n\n  var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\n  var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\n  var CATCH_ERROR_VAR$2 = variable('error');\n  var CATCH_STACK_VAR$2 = variable('stack');\n  var _EmittedLine = (function () {\n      function _EmittedLine(indent) {\n          this.indent = indent;\n          this.parts = [];\n      }\n      return _EmittedLine;\n  }());\n  var EmitterVisitorContext = (function () {\n      function EmitterVisitorContext(_exportedVars, _indent) {\n          this._exportedVars = _exportedVars;\n          this._indent = _indent;\n          this._classes = [];\n          this._lines = [new _EmittedLine(_indent)];\n      }\n      EmitterVisitorContext.createRoot = function (exportedVars) {\n          return new EmitterVisitorContext(exportedVars, 0);\n      };\n      Object.defineProperty(EmitterVisitorContext.prototype, \"_currentLine\", {\n          get: function () { return this._lines[this._lines.length - 1]; },\n          enumerable: true,\n          configurable: true\n      });\n      EmitterVisitorContext.prototype.isExportedVar = function (varName) { return this._exportedVars.indexOf(varName) !== -1; };\n      EmitterVisitorContext.prototype.println = function (lastPart) {\n          if (lastPart === void 0) { lastPart = ''; }\n          this.print(lastPart, true);\n      };\n      EmitterVisitorContext.prototype.lineIsEmpty = function () { return this._currentLine.parts.length === 0; };\n      EmitterVisitorContext.prototype.print = function (part, newLine) {\n          if (newLine === void 0) { newLine = false; }\n          if (part.length > 0) {\n              this._currentLine.parts.push(part);\n          }\n          if (newLine) {\n              this._lines.push(new _EmittedLine(this._indent));\n          }\n      };\n      EmitterVisitorContext.prototype.removeEmptyLastLine = function () {\n          if (this.lineIsEmpty()) {\n              this._lines.pop();\n          }\n      };\n      EmitterVisitorContext.prototype.incIndent = function () {\n          this._indent++;\n          this._currentLine.indent = this._indent;\n      };\n      EmitterVisitorContext.prototype.decIndent = function () {\n          this._indent--;\n          this._currentLine.indent = this._indent;\n      };\n      EmitterVisitorContext.prototype.pushClass = function (clazz) { this._classes.push(clazz); };\n      EmitterVisitorContext.prototype.popClass = function () { return this._classes.pop(); };\n      Object.defineProperty(EmitterVisitorContext.prototype, \"currentClass\", {\n          get: function () {\n              return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      EmitterVisitorContext.prototype.toSource = function () {\n          var lines = this._lines;\n          if (lines[lines.length - 1].parts.length === 0) {\n              lines = lines.slice(0, lines.length - 1);\n          }\n          return lines\n              .map(function (line) {\n              if (line.parts.length > 0) {\n                  return _createIndent(line.indent) + line.parts.join('');\n              }\n              else {\n                  return '';\n              }\n          })\n              .join('\\n');\n      };\n      return EmitterVisitorContext;\n  }());\n  var AbstractEmitterVisitor = (function () {\n      function AbstractEmitterVisitor(_escapeDollarInStrings) {\n          this._escapeDollarInStrings = _escapeDollarInStrings;\n      }\n      AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) {\n          stmt.expr.visitExpression(this, ctx);\n          ctx.println(';');\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) {\n          ctx.print(\"return \");\n          stmt.value.visitExpression(this, ctx);\n          ctx.println(';');\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) {\n          ctx.print(\"if (\");\n          stmt.condition.visitExpression(this, ctx);\n          ctx.print(\") {\");\n          var hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;\n          if (stmt.trueCase.length <= 1 && !hasElseCase) {\n              ctx.print(\" \");\n              this.visitAllStatements(stmt.trueCase, ctx);\n              ctx.removeEmptyLastLine();\n              ctx.print(\" \");\n          }\n          else {\n              ctx.println();\n              ctx.incIndent();\n              this.visitAllStatements(stmt.trueCase, ctx);\n              ctx.decIndent();\n              if (hasElseCase) {\n                  ctx.println(\"} else {\");\n                  ctx.incIndent();\n                  this.visitAllStatements(stmt.falseCase, ctx);\n                  ctx.decIndent();\n              }\n          }\n          ctx.println(\"}\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) {\n          ctx.print(\"throw \");\n          stmt.error.visitExpression(this, ctx);\n          ctx.println(\";\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) {\n          var lines = stmt.comment.split('\\n');\n          lines.forEach(function (line) { ctx.println(\"// \" + line); });\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) {\n          var lineWasEmpty = ctx.lineIsEmpty();\n          if (!lineWasEmpty) {\n              ctx.print('(');\n          }\n          ctx.print(expr.name + \" = \");\n          expr.value.visitExpression(this, ctx);\n          if (!lineWasEmpty) {\n              ctx.print(')');\n          }\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) {\n          var lineWasEmpty = ctx.lineIsEmpty();\n          if (!lineWasEmpty) {\n              ctx.print('(');\n          }\n          expr.receiver.visitExpression(this, ctx);\n          ctx.print(\"[\");\n          expr.index.visitExpression(this, ctx);\n          ctx.print(\"] = \");\n          expr.value.visitExpression(this, ctx);\n          if (!lineWasEmpty) {\n              ctx.print(')');\n          }\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) {\n          var lineWasEmpty = ctx.lineIsEmpty();\n          if (!lineWasEmpty) {\n              ctx.print('(');\n          }\n          expr.receiver.visitExpression(this, ctx);\n          ctx.print(\".\" + expr.name + \" = \");\n          expr.value.visitExpression(this, ctx);\n          if (!lineWasEmpty) {\n              ctx.print(')');\n          }\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) {\n          expr.receiver.visitExpression(this, ctx);\n          var name = expr.name;\n          if (isPresent(expr.builtin)) {\n              name = this.getBuiltinMethodName(expr.builtin);\n              if (isBlank(name)) {\n                  // some builtins just mean to skip the call.\n                  return null;\n              }\n          }\n          ctx.print(\".\" + name + \"(\");\n          this.visitAllExpressions(expr.args, ctx, \",\");\n          ctx.print(\")\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {\n          expr.fn.visitExpression(this, ctx);\n          ctx.print(\"(\");\n          this.visitAllExpressions(expr.args, ctx, ',');\n          ctx.print(\")\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {\n          var varName = ast.name;\n          if (isPresent(ast.builtin)) {\n              switch (ast.builtin) {\n                  case BuiltinVar.Super:\n                      varName = 'super';\n                      break;\n                  case BuiltinVar.This:\n                      varName = 'this';\n                      break;\n                  case BuiltinVar.CatchError:\n                      varName = CATCH_ERROR_VAR$2.name;\n                      break;\n                  case BuiltinVar.CatchStack:\n                      varName = CATCH_STACK_VAR$2.name;\n                      break;\n                  default:\n                      throw new Error(\"Unknown builtin variable \" + ast.builtin);\n              }\n          }\n          ctx.print(varName);\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {\n          ctx.print(\"new \");\n          ast.classExpr.visitExpression(this, ctx);\n          ctx.print(\"(\");\n          this.visitAllExpressions(ast.args, ctx, ',');\n          ctx.print(\")\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx, absentValue) {\n          if (absentValue === void 0) { absentValue = 'null'; }\n          var value = ast.value;\n          if (isString(value)) {\n              ctx.print(escapeIdentifier(value, this._escapeDollarInStrings));\n          }\n          else if (isBlank(value)) {\n              ctx.print(absentValue);\n          }\n          else {\n              ctx.print(\"\" + value);\n          }\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) {\n          ctx.print(\"(\");\n          ast.condition.visitExpression(this, ctx);\n          ctx.print('? ');\n          ast.trueCase.visitExpression(this, ctx);\n          ctx.print(': ');\n          ast.falseCase.visitExpression(this, ctx);\n          ctx.print(\")\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) {\n          ctx.print('!');\n          ast.condition.visitExpression(this, ctx);\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {\n          var opStr;\n          switch (ast.operator) {\n              case BinaryOperator.Equals:\n                  opStr = '==';\n                  break;\n              case BinaryOperator.Identical:\n                  opStr = '===';\n                  break;\n              case BinaryOperator.NotEquals:\n                  opStr = '!=';\n                  break;\n              case BinaryOperator.NotIdentical:\n                  opStr = '!==';\n                  break;\n              case BinaryOperator.And:\n                  opStr = '&&';\n                  break;\n              case BinaryOperator.Or:\n                  opStr = '||';\n                  break;\n              case BinaryOperator.Plus:\n                  opStr = '+';\n                  break;\n              case BinaryOperator.Minus:\n                  opStr = '-';\n                  break;\n              case BinaryOperator.Divide:\n                  opStr = '/';\n                  break;\n              case BinaryOperator.Multiply:\n                  opStr = '*';\n                  break;\n              case BinaryOperator.Modulo:\n                  opStr = '%';\n                  break;\n              case BinaryOperator.Lower:\n                  opStr = '<';\n                  break;\n              case BinaryOperator.LowerEquals:\n                  opStr = '<=';\n                  break;\n              case BinaryOperator.Bigger:\n                  opStr = '>';\n                  break;\n              case BinaryOperator.BiggerEquals:\n                  opStr = '>=';\n                  break;\n              default:\n                  throw new Error(\"Unknown operator \" + ast.operator);\n          }\n          ctx.print(\"(\");\n          ast.lhs.visitExpression(this, ctx);\n          ctx.print(\" \" + opStr + \" \");\n          ast.rhs.visitExpression(this, ctx);\n          ctx.print(\")\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) {\n          ast.receiver.visitExpression(this, ctx);\n          ctx.print(\".\");\n          ctx.print(ast.name);\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) {\n          ast.receiver.visitExpression(this, ctx);\n          ctx.print(\"[\");\n          ast.index.visitExpression(this, ctx);\n          ctx.print(\"]\");\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {\n          var useNewLine = ast.entries.length > 1;\n          ctx.print(\"[\", useNewLine);\n          ctx.incIndent();\n          this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);\n          ctx.decIndent();\n          ctx.print(\"]\", useNewLine);\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {\n          var _this = this;\n          var useNewLine = ast.entries.length > 1;\n          ctx.print(\"{\", useNewLine);\n          ctx.incIndent();\n          this.visitAllObjects(function (entry /** TODO #9100 */) {\n              ctx.print(escapeIdentifier(entry[0], _this._escapeDollarInStrings, false) + \": \");\n              entry[1].visitExpression(_this, ctx);\n          }, ast.entries, ctx, ',', useNewLine);\n          ctx.decIndent();\n          ctx.print(\"}\", useNewLine);\n          return null;\n      };\n      AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator, newLine) {\n          var _this = this;\n          if (newLine === void 0) { newLine = false; }\n          this.visitAllObjects(function (expr /** TODO #9100 */) { return expr.visitExpression(_this, ctx); }, expressions, ctx, separator, newLine);\n      };\n      AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator, newLine) {\n          if (newLine === void 0) { newLine = false; }\n          for (var i = 0; i < expressions.length; i++) {\n              if (i > 0) {\n                  ctx.print(separator, newLine);\n              }\n              handler(expressions[i]);\n          }\n          if (newLine) {\n              ctx.println();\n          }\n      };\n      AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) {\n          var _this = this;\n          statements.forEach(function (stmt) { return stmt.visitStatement(_this, ctx); });\n      };\n      return AbstractEmitterVisitor;\n  }());\n  function escapeIdentifier(input, escapeDollar, alwaysQuote) {\n      if (alwaysQuote === void 0) { alwaysQuote = true; }\n      if (isBlank(input)) {\n          return null;\n      }\n      var body = StringWrapper.replaceAllMapped(input, _SINGLE_QUOTE_ESCAPE_STRING_RE, function (match /** TODO #9100 */) {\n          if (match[0] == '$') {\n              return escapeDollar ? '\\\\$' : '$';\n          }\n          else if (match[0] == '\\n') {\n              return '\\\\n';\n          }\n          else if (match[0] == '\\r') {\n              return '\\\\r';\n          }\n          else {\n              return \"\\\\\" + match[0];\n          }\n      });\n      var requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\n      return requiresQuotes ? \"'\" + body + \"'\" : body;\n  }\n  function _createIndent(count) {\n      var res = '';\n      for (var i = 0; i < count; i++) {\n          res += '  ';\n      }\n      return res;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$15 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var _debugModuleUrl = 'asset://debug/lib';\n  function debugOutputAstAsTypeScript(ast) {\n      var converter = new _TsEmitterVisitor(_debugModuleUrl);\n      var ctx = EmitterVisitorContext.createRoot([]);\n      var asts;\n      if (isArray(ast)) {\n          asts = ast;\n      }\n      else {\n          asts = [ast];\n      }\n      asts.forEach(function (ast) {\n          if (ast instanceof Statement) {\n              ast.visitStatement(converter, ctx);\n          }\n          else if (ast instanceof Expression) {\n              ast.visitExpression(converter, ctx);\n          }\n          else if (ast instanceof Type$1) {\n              ast.visitType(converter, ctx);\n          }\n          else {\n              throw new Error(\"Don't know how to print debug info for \" + ast);\n          }\n      });\n      return ctx.toSource();\n  }\n  var TypeScriptEmitter = (function () {\n      function TypeScriptEmitter(_importGenerator) {\n          this._importGenerator = _importGenerator;\n      }\n      TypeScriptEmitter.prototype.emitStatements = function (moduleUrl, stmts, exportedVars) {\n          var _this = this;\n          var converter = new _TsEmitterVisitor(moduleUrl);\n          var ctx = EmitterVisitorContext.createRoot(exportedVars);\n          converter.visitAllStatements(stmts, ctx);\n          var srcParts = [];\n          converter.importsWithPrefixes.forEach(function (prefix, importedModuleUrl) {\n              // Note: can't write the real word for import as it screws up system.js auto detection...\n              srcParts.push(\"imp\" +\n                  (\"ort * as \" + prefix + \" from '\" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + \"';\"));\n          });\n          srcParts.push(ctx.toSource());\n          return srcParts.join('\\n');\n      };\n      return TypeScriptEmitter;\n  }());\n  var _TsEmitterVisitor = (function (_super) {\n      __extends$15(_TsEmitterVisitor, _super);\n      function _TsEmitterVisitor(_moduleUrl) {\n          _super.call(this, false);\n          this._moduleUrl = _moduleUrl;\n          this.importsWithPrefixes = new Map();\n      }\n      _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) {\n          if (defaultType === void 0) { defaultType = 'any'; }\n          if (isPresent(t)) {\n              t.visitType(this, ctx);\n          }\n          else {\n              ctx.print(defaultType);\n          }\n      };\n      _TsEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {\n          _super.prototype.visitLiteralExpr.call(this, ast, ctx, '(null as any)');\n      };\n      _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {\n          this._visitIdentifier(ast.value, ast.typeParams, ctx);\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {\n          if (ctx.isExportedVar(stmt.name)) {\n              ctx.print(\"export \");\n          }\n          if (stmt.hasModifier(StmtModifier.Final)) {\n              ctx.print(\"const\");\n          }\n          else {\n              ctx.print(\"var\");\n          }\n          ctx.print(\" \" + stmt.name + \":\");\n          this.visitType(stmt.type, ctx);\n          ctx.print(\" = \");\n          stmt.value.visitExpression(this, ctx);\n          ctx.println(\";\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {\n          ctx.print(\"(<\");\n          ast.type.visitType(this, ctx);\n          ctx.print(\">\");\n          ast.value.visitExpression(this, ctx);\n          ctx.print(\")\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {\n          var _this = this;\n          ctx.pushClass(stmt);\n          if (ctx.isExportedVar(stmt.name)) {\n              ctx.print(\"export \");\n          }\n          ctx.print(\"class \" + stmt.name);\n          if (isPresent(stmt.parent)) {\n              ctx.print(\" extends \");\n              stmt.parent.visitExpression(this, ctx);\n          }\n          ctx.println(\" {\");\n          ctx.incIndent();\n          stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx); });\n          if (isPresent(stmt.constructorMethod)) {\n              this._visitClassConstructor(stmt, ctx);\n          }\n          stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx); });\n          stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx); });\n          ctx.decIndent();\n          ctx.println(\"}\");\n          ctx.popClass();\n          return null;\n      };\n      _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) {\n          if (field.hasModifier(StmtModifier.Private)) {\n              // comment out as a workaround for #10967\n              ctx.print(\"/*private*/ \");\n          }\n          ctx.print(field.name);\n          ctx.print(':');\n          this.visitType(field.type, ctx);\n          ctx.println(\";\");\n      };\n      _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {\n          if (getter.hasModifier(StmtModifier.Private)) {\n              ctx.print(\"private \");\n          }\n          ctx.print(\"get \" + getter.name + \"()\");\n          ctx.print(':');\n          this.visitType(getter.type, ctx);\n          ctx.println(\" {\");\n          ctx.incIndent();\n          this.visitAllStatements(getter.body, ctx);\n          ctx.decIndent();\n          ctx.println(\"}\");\n      };\n      _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {\n          ctx.print(\"constructor(\");\n          this._visitParams(stmt.constructorMethod.params, ctx);\n          ctx.println(\") {\");\n          ctx.incIndent();\n          this.visitAllStatements(stmt.constructorMethod.body, ctx);\n          ctx.decIndent();\n          ctx.println(\"}\");\n      };\n      _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {\n          if (method.hasModifier(StmtModifier.Private)) {\n              ctx.print(\"private \");\n          }\n          ctx.print(method.name + \"(\");\n          this._visitParams(method.params, ctx);\n          ctx.print(\"):\");\n          this.visitType(method.type, ctx, 'void');\n          ctx.println(\" {\");\n          ctx.incIndent();\n          this.visitAllStatements(method.body, ctx);\n          ctx.decIndent();\n          ctx.println(\"}\");\n      };\n      _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {\n          ctx.print(\"(\");\n          this._visitParams(ast.params, ctx);\n          ctx.print(\"):\");\n          this.visitType(ast.type, ctx, 'void');\n          ctx.println(\" => {\");\n          ctx.incIndent();\n          this.visitAllStatements(ast.statements, ctx);\n          ctx.decIndent();\n          ctx.print(\"}\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {\n          if (ctx.isExportedVar(stmt.name)) {\n              ctx.print(\"export \");\n          }\n          ctx.print(\"function \" + stmt.name + \"(\");\n          this._visitParams(stmt.params, ctx);\n          ctx.print(\"):\");\n          this.visitType(stmt.type, ctx, 'void');\n          ctx.println(\" {\");\n          ctx.incIndent();\n          this.visitAllStatements(stmt.statements, ctx);\n          ctx.decIndent();\n          ctx.println(\"}\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {\n          ctx.println(\"try {\");\n          ctx.incIndent();\n          this.visitAllStatements(stmt.bodyStmts, ctx);\n          ctx.decIndent();\n          ctx.println(\"} catch (\" + CATCH_ERROR_VAR$2.name + \") {\");\n          ctx.incIndent();\n          var catchStmts = [CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop('stack')).toDeclStmt(null, [\n                  StmtModifier.Final\n              ])].concat(stmt.catchStmts);\n          this.visitAllStatements(catchStmts, ctx);\n          ctx.decIndent();\n          ctx.println(\"}\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) {\n          var typeStr;\n          switch (type.name) {\n              case BuiltinTypeName.Bool:\n                  typeStr = 'boolean';\n                  break;\n              case BuiltinTypeName.Dynamic:\n                  typeStr = 'any';\n                  break;\n              case BuiltinTypeName.Function:\n                  typeStr = 'Function';\n                  break;\n              case BuiltinTypeName.Number:\n                  typeStr = 'number';\n                  break;\n              case BuiltinTypeName.Int:\n                  typeStr = 'number';\n                  break;\n              case BuiltinTypeName.String:\n                  typeStr = 'string';\n                  break;\n              default:\n                  throw new Error(\"Unsupported builtin type \" + type.name);\n          }\n          ctx.print(typeStr);\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitExternalType = function (ast, ctx) {\n          this._visitIdentifier(ast.value, ast.typeParams, ctx);\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) {\n          this.visitType(type.of, ctx);\n          ctx.print(\"[]\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) {\n          ctx.print(\"{[key: string]:\");\n          this.visitType(type.valueType, ctx);\n          ctx.print(\"}\");\n          return null;\n      };\n      _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {\n          var name;\n          switch (method) {\n              case BuiltinMethod.ConcatArray:\n                  name = 'concat';\n                  break;\n              case BuiltinMethod.SubscribeObservable:\n                  name = 'subscribe';\n                  break;\n              case BuiltinMethod.Bind:\n                  name = 'bind';\n                  break;\n              default:\n                  throw new Error(\"Unknown builtin method: \" + method);\n          }\n          return name;\n      };\n      _TsEmitterVisitor.prototype._visitParams = function (params, ctx) {\n          var _this = this;\n          this.visitAllObjects(function (param /** TODO #9100 */) {\n              ctx.print(param.name);\n              ctx.print(':');\n              _this.visitType(param.type, ctx);\n          }, params, ctx, ',');\n      };\n      _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {\n          var _this = this;\n          if (isBlank(value.name)) {\n              throw new Error(\"Internal error: unknown identifier \" + value);\n          }\n          if (isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {\n              var prefix = this.importsWithPrefixes.get(value.moduleUrl);\n              if (isBlank(prefix)) {\n                  prefix = \"import\" + this.importsWithPrefixes.size;\n                  this.importsWithPrefixes.set(value.moduleUrl, prefix);\n              }\n              ctx.print(prefix + \".\");\n          }\n          if (value.reference && value.reference.members) {\n              ctx.print(value.reference.name);\n              ctx.print('.');\n              ctx.print(value.reference.members.join('.'));\n          }\n          else {\n              ctx.print(value.name);\n          }\n          if (isPresent(typeParams) && typeParams.length > 0) {\n              ctx.print(\"<\");\n              this.visitAllObjects(function (type /** TODO #9100 */) { return type.visitType(_this, ctx); }, typeParams, ctx, ',');\n              ctx.print(\">\");\n          }\n      };\n      return _TsEmitterVisitor;\n  }(AbstractEmitterVisitor));\n\n  function interpretStatements(statements, resultVar) {\n      var stmtsWithReturn = statements.concat([new ReturnStatement(variable(resultVar))]);\n      var ctx = new _ExecutionContext(null, null, null, new Map());\n      var visitor = new StatementInterpreter();\n      var result = visitor.visitAllStatements(stmtsWithReturn, ctx);\n      return isPresent(result) ? result.value : null;\n  }\n  function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {\n      var childCtx = ctx.createChildWihtLocalVars();\n      for (var i = 0; i < varNames.length; i++) {\n          childCtx.vars.set(varNames[i], varValues[i]);\n      }\n      var result = visitor.visitAllStatements(statements, childCtx);\n      return isPresent(result) ? result.value : null;\n  }\n  var _ExecutionContext = (function () {\n      function _ExecutionContext(parent, instance, className, vars) {\n          this.parent = parent;\n          this.instance = instance;\n          this.className = className;\n          this.vars = vars;\n      }\n      _ExecutionContext.prototype.createChildWihtLocalVars = function () {\n          return new _ExecutionContext(this, this.instance, this.className, new Map());\n      };\n      return _ExecutionContext;\n  }());\n  var ReturnValue = (function () {\n      function ReturnValue(value) {\n          this.value = value;\n      }\n      return ReturnValue;\n  }());\n  function createDynamicClass(_classStmt, _ctx, _visitor) {\n      var propertyDescriptors = {};\n      _classStmt.getters.forEach(function (getter) {\n          // Note: use `function` instead of arrow function to capture `this`\n          propertyDescriptors[getter.name] = {\n              configurable: false,\n              get: function () {\n                  var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n                  return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);\n              }\n          };\n      });\n      _classStmt.methods.forEach(function (method) {\n          var paramNames = method.params.map(function (param) { return param.name; });\n          // Note: use `function` instead of arrow function to capture `this`\n          propertyDescriptors[method.name] = {\n              writable: false,\n              configurable: false,\n              value: function () {\n                  var args = [];\n                  for (var _i = 0; _i < arguments.length; _i++) {\n                      args[_i - 0] = arguments[_i];\n                  }\n                  var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n                  return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);\n              }\n          };\n      });\n      var ctorParamNames = _classStmt.constructorMethod.params.map(function (param) { return param.name; });\n      // Note: use `function` instead of arrow function to capture `this`\n      var ctor = function () {\n          var _this = this;\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i - 0] = arguments[_i];\n          }\n          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n          _classStmt.fields.forEach(function (field) { _this[field.name] = undefined; });\n          _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);\n      };\n      var superClass = _classStmt.parent.visitExpression(_visitor, _ctx);\n      ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);\n      return ctor;\n  }\n  var StatementInterpreter = (function () {\n      function StatementInterpreter() {\n      }\n      StatementInterpreter.prototype.debugAst = function (ast) { return debugOutputAstAsTypeScript(ast); };\n      StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) {\n          ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));\n          return null;\n      };\n      StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) {\n          var value = expr.value.visitExpression(this, ctx);\n          var currCtx = ctx;\n          while (currCtx != null) {\n              if (currCtx.vars.has(expr.name)) {\n                  currCtx.vars.set(expr.name, value);\n                  return value;\n              }\n              currCtx = currCtx.parent;\n          }\n          throw new Error(\"Not declared variable \" + expr.name);\n      };\n      StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) {\n          var varName = ast.name;\n          if (isPresent(ast.builtin)) {\n              switch (ast.builtin) {\n                  case BuiltinVar.Super:\n                      return ctx.instance.__proto__;\n                  case BuiltinVar.This:\n                      return ctx.instance;\n                  case BuiltinVar.CatchError:\n                      varName = CATCH_ERROR_VAR$1;\n                      break;\n                  case BuiltinVar.CatchStack:\n                      varName = CATCH_STACK_VAR$1;\n                      break;\n                  default:\n                      throw new Error(\"Unknown builtin variable \" + ast.builtin);\n              }\n          }\n          var currCtx = ctx;\n          while (currCtx != null) {\n              if (currCtx.vars.has(varName)) {\n                  return currCtx.vars.get(varName);\n              }\n              currCtx = currCtx.parent;\n          }\n          throw new Error(\"Not declared variable \" + varName);\n      };\n      StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) {\n          var receiver = expr.receiver.visitExpression(this, ctx);\n          var index = expr.index.visitExpression(this, ctx);\n          var value = expr.value.visitExpression(this, ctx);\n          receiver[index] = value;\n          return value;\n      };\n      StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) {\n          var receiver = expr.receiver.visitExpression(this, ctx);\n          var value = expr.value.visitExpression(this, ctx);\n          receiver[expr.name] = value;\n          return value;\n      };\n      StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) {\n          var receiver = expr.receiver.visitExpression(this, ctx);\n          var args = this.visitAllExpressions(expr.args, ctx);\n          var result;\n          if (isPresent(expr.builtin)) {\n              switch (expr.builtin) {\n                  case BuiltinMethod.ConcatArray:\n                      result = ListWrapper.concat(receiver, args[0]);\n                      break;\n                  case BuiltinMethod.SubscribeObservable:\n                      result = receiver.subscribe({ next: args[0] });\n                      break;\n                  case BuiltinMethod.Bind:\n                      result = receiver.bind(args[0]);\n                      break;\n                  default:\n                      throw new Error(\"Unknown builtin method \" + expr.builtin);\n              }\n          }\n          else {\n              result = receiver[expr.name].apply(receiver, args);\n          }\n          return result;\n      };\n      StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) {\n          var args = this.visitAllExpressions(stmt.args, ctx);\n          var fnExpr = stmt.fn;\n          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {\n              ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);\n              return null;\n          }\n          else {\n              var fn = stmt.fn.visitExpression(this, ctx);\n              return fn.apply(null, args);\n          }\n      };\n      StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) {\n          return new ReturnValue(stmt.value.visitExpression(this, ctx));\n      };\n      StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) {\n          var clazz = createDynamicClass(stmt, ctx, this);\n          ctx.vars.set(stmt.name, clazz);\n          return null;\n      };\n      StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) {\n          return stmt.expr.visitExpression(this, ctx);\n      };\n      StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) {\n          var condition = stmt.condition.visitExpression(this, ctx);\n          if (condition) {\n              return this.visitAllStatements(stmt.trueCase, ctx);\n          }\n          else if (isPresent(stmt.falseCase)) {\n              return this.visitAllStatements(stmt.falseCase, ctx);\n          }\n          return null;\n      };\n      StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) {\n          try {\n              return this.visitAllStatements(stmt.bodyStmts, ctx);\n          }\n          catch (e) {\n              var childCtx = ctx.createChildWihtLocalVars();\n              childCtx.vars.set(CATCH_ERROR_VAR$1, e);\n              childCtx.vars.set(CATCH_STACK_VAR$1, e.stack);\n              return this.visitAllStatements(stmt.catchStmts, childCtx);\n          }\n      };\n      StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) {\n          throw stmt.error.visitExpression(this, ctx);\n      };\n      StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) { return null; };\n      StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) {\n          var args = this.visitAllExpressions(ast.args, ctx);\n          var clazz = ast.classExpr.visitExpression(this, ctx);\n          return new (clazz.bind.apply(clazz, [void 0].concat(args)))();\n      };\n      StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) { return ast.value; };\n      StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) {\n          return ast.value.reference;\n      };\n      StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) {\n          if (ast.condition.visitExpression(this, ctx)) {\n              return ast.trueCase.visitExpression(this, ctx);\n          }\n          else if (isPresent(ast.falseCase)) {\n              return ast.falseCase.visitExpression(this, ctx);\n          }\n          return null;\n      };\n      StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) {\n          return !ast.condition.visitExpression(this, ctx);\n      };\n      StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) {\n          return ast.value.visitExpression(this, ctx);\n      };\n      StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) {\n          var paramNames = ast.params.map(function (param) { return param.name; });\n          return _declareFn(paramNames, ast.statements, ctx, this);\n      };\n      StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {\n          var paramNames = stmt.params.map(function (param) { return param.name; });\n          ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));\n          return null;\n      };\n      StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) {\n          var _this = this;\n          var lhs = function () { return ast.lhs.visitExpression(_this, ctx); };\n          var rhs = function () { return ast.rhs.visitExpression(_this, ctx); };\n          switch (ast.operator) {\n              case BinaryOperator.Equals:\n                  return lhs() == rhs();\n              case BinaryOperator.Identical:\n                  return lhs() === rhs();\n              case BinaryOperator.NotEquals:\n                  return lhs() != rhs();\n              case BinaryOperator.NotIdentical:\n                  return lhs() !== rhs();\n              case BinaryOperator.And:\n                  return lhs() && rhs();\n              case BinaryOperator.Or:\n                  return lhs() || rhs();\n              case BinaryOperator.Plus:\n                  return lhs() + rhs();\n              case BinaryOperator.Minus:\n                  return lhs() - rhs();\n              case BinaryOperator.Divide:\n                  return lhs() / rhs();\n              case BinaryOperator.Multiply:\n                  return lhs() * rhs();\n              case BinaryOperator.Modulo:\n                  return lhs() % rhs();\n              case BinaryOperator.Lower:\n                  return lhs() < rhs();\n              case BinaryOperator.LowerEquals:\n                  return lhs() <= rhs();\n              case BinaryOperator.Bigger:\n                  return lhs() > rhs();\n              case BinaryOperator.BiggerEquals:\n                  return lhs() >= rhs();\n              default:\n                  throw new Error(\"Unknown operator \" + ast.operator);\n          }\n      };\n      StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) {\n          var result;\n          var receiver = ast.receiver.visitExpression(this, ctx);\n          result = receiver[ast.name];\n          return result;\n      };\n      StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) {\n          var receiver = ast.receiver.visitExpression(this, ctx);\n          var prop = ast.index.visitExpression(this, ctx);\n          return receiver[prop];\n      };\n      StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) {\n          return this.visitAllExpressions(ast.entries, ctx);\n      };\n      StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) {\n          var _this = this;\n          var result = {};\n          ast.entries.forEach(function (entry) { return result[entry[0]] =\n              entry[1].visitExpression(_this, ctx); });\n          return result;\n      };\n      StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) {\n          var _this = this;\n          return expressions.map(function (expr) { return expr.visitExpression(_this, ctx); });\n      };\n      StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) {\n          for (var i = 0; i < statements.length; i++) {\n              var stmt = statements[i];\n              var val = stmt.visitStatement(this, ctx);\n              if (val instanceof ReturnValue) {\n                  return val;\n              }\n          }\n          return null;\n      };\n      return StatementInterpreter;\n  }());\n  function _declareFn(varNames, statements, ctx, visitor) {\n      return function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i - 0] = arguments[_i];\n          }\n          return _executeFunctionStatements(varNames, args, statements, ctx, visitor);\n      };\n  }\n  var CATCH_ERROR_VAR$1 = 'error';\n  var CATCH_STACK_VAR$1 = 'stack';\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$17 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var AbstractJsEmitterVisitor = (function (_super) {\n      __extends$17(AbstractJsEmitterVisitor, _super);\n      function AbstractJsEmitterVisitor() {\n          _super.call(this, false);\n      }\n      AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {\n          var _this = this;\n          ctx.pushClass(stmt);\n          this._visitClassConstructor(stmt, ctx);\n          if (isPresent(stmt.parent)) {\n              ctx.print(stmt.name + \".prototype = Object.create(\");\n              stmt.parent.visitExpression(this, ctx);\n              ctx.println(\".prototype);\");\n          }\n          stmt.getters.forEach(function (getter) { return _this._visitClassGetter(stmt, getter, ctx); });\n          stmt.methods.forEach(function (method) { return _this._visitClassMethod(stmt, method, ctx); });\n          ctx.popClass();\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {\n          ctx.print(\"function \" + stmt.name + \"(\");\n          if (isPresent(stmt.constructorMethod)) {\n              this._visitParams(stmt.constructorMethod.params, ctx);\n          }\n          ctx.println(\") {\");\n          ctx.incIndent();\n          if (isPresent(stmt.constructorMethod)) {\n              if (stmt.constructorMethod.body.length > 0) {\n                  ctx.println(\"var self = this;\");\n                  this.visitAllStatements(stmt.constructorMethod.body, ctx);\n              }\n          }\n          ctx.decIndent();\n          ctx.println(\"}\");\n      };\n      AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) {\n          ctx.println(\"Object.defineProperty(\" + stmt.name + \".prototype, '\" + getter.name + \"', { get: function() {\");\n          ctx.incIndent();\n          if (getter.body.length > 0) {\n              ctx.println(\"var self = this;\");\n              this.visitAllStatements(getter.body, ctx);\n          }\n          ctx.decIndent();\n          ctx.println(\"}});\");\n      };\n      AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) {\n          ctx.print(stmt.name + \".prototype.\" + method.name + \" = function(\");\n          this._visitParams(method.params, ctx);\n          ctx.println(\") {\");\n          ctx.incIndent();\n          if (method.body.length > 0) {\n              ctx.println(\"var self = this;\");\n              this.visitAllStatements(method.body, ctx);\n          }\n          ctx.decIndent();\n          ctx.println(\"};\");\n      };\n      AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {\n          if (ast.builtin === BuiltinVar.This) {\n              ctx.print('self');\n          }\n          else if (ast.builtin === BuiltinVar.Super) {\n              throw new Error(\"'super' needs to be handled at a parent ast node, not at the variable level!\");\n          }\n          else {\n              _super.prototype.visitReadVarExpr.call(this, ast, ctx);\n          }\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {\n          ctx.print(\"var \" + stmt.name + \" = \");\n          stmt.value.visitExpression(this, ctx);\n          ctx.println(\";\");\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {\n          ast.value.visitExpression(this, ctx);\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {\n          var fnExpr = expr.fn;\n          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {\n              ctx.currentClass.parent.visitExpression(this, ctx);\n              ctx.print(\".call(this\");\n              if (expr.args.length > 0) {\n                  ctx.print(\", \");\n                  this.visitAllExpressions(expr.args, ctx, ',');\n              }\n              ctx.print(\")\");\n          }\n          else {\n              _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);\n          }\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {\n          ctx.print(\"function(\");\n          this._visitParams(ast.params, ctx);\n          ctx.println(\") {\");\n          ctx.incIndent();\n          this.visitAllStatements(ast.statements, ctx);\n          ctx.decIndent();\n          ctx.print(\"}\");\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {\n          ctx.print(\"function \" + stmt.name + \"(\");\n          this._visitParams(stmt.params, ctx);\n          ctx.println(\") {\");\n          ctx.incIndent();\n          this.visitAllStatements(stmt.statements, ctx);\n          ctx.decIndent();\n          ctx.println(\"}\");\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {\n          ctx.println(\"try {\");\n          ctx.incIndent();\n          this.visitAllStatements(stmt.bodyStmts, ctx);\n          ctx.decIndent();\n          ctx.println(\"} catch (\" + CATCH_ERROR_VAR$2.name + \") {\");\n          ctx.incIndent();\n          var catchStmts = [CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop('stack')).toDeclStmt(null, [\n                  StmtModifier.Final\n              ])].concat(stmt.catchStmts);\n          this.visitAllStatements(catchStmts, ctx);\n          ctx.decIndent();\n          ctx.println(\"}\");\n          return null;\n      };\n      AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) {\n          this.visitAllObjects(function (param /** TODO #9100 */) { return ctx.print(param.name); }, params, ctx, ',');\n      };\n      AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {\n          var name;\n          switch (method) {\n              case BuiltinMethod.ConcatArray:\n                  name = 'concat';\n                  break;\n              case BuiltinMethod.SubscribeObservable:\n                  name = 'subscribe';\n                  break;\n              case BuiltinMethod.Bind:\n                  name = 'bind';\n                  break;\n              default:\n                  throw new Error(\"Unknown builtin method: \" + method);\n          }\n          return name;\n      };\n      return AbstractJsEmitterVisitor;\n  }(AbstractEmitterVisitor));\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$16 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  function jitStatements(sourceUrl, statements, resultVar) {\n      var converter = new JitEmitterVisitor();\n      var ctx = EmitterVisitorContext.createRoot([resultVar]);\n      converter.visitAllStatements(statements, ctx);\n      return evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());\n  }\n  var JitEmitterVisitor = (function (_super) {\n      __extends$16(JitEmitterVisitor, _super);\n      function JitEmitterVisitor() {\n          _super.apply(this, arguments);\n          this._evalArgNames = [];\n          this._evalArgValues = [];\n      }\n      JitEmitterVisitor.prototype.getArgs = function () {\n          var result = {};\n          for (var i = 0; i < this._evalArgNames.length; i++) {\n              result[this._evalArgNames[i]] = this._evalArgValues[i];\n          }\n          return result;\n      };\n      JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {\n          var value = ast.value.reference;\n          var id = this._evalArgValues.indexOf(value);\n          if (id === -1) {\n              id = this._evalArgValues.length;\n              this._evalArgValues.push(value);\n              var name = isPresent(ast.value.name) ? sanitizeIdentifier(ast.value.name) : 'val';\n              this._evalArgNames.push(sanitizeIdentifier(\"jit_\" + name + id));\n          }\n          ctx.print(this._evalArgNames[id]);\n          return null;\n      };\n      return JitEmitterVisitor;\n  }(AbstractJsEmitterVisitor));\n\n  /**\n   * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n   *\n   * Please make sure to keep to edits in sync with the source file.\n   *\n   * Source:\n   * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n   *\n   * The original file level comment is reproduced below\n   */\n  /*\n    This is a limited shim for ShadowDOM css styling.\n    https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n\n    The intention here is to support only the styling features which can be\n    relatively simply implemented. The goal is to allow users to avoid the\n    most obvious pitfalls and do so without compromising performance significantly.\n    For ShadowDOM styling that's not covered here, a set of best practices\n    can be provided that should allow users to accomplish more complex styling.\n\n    The following is a list of specific ShadowDOM styling features and a brief\n    discussion of the approach used to shim.\n\n    Shimmed features:\n\n    * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n    element using the :host rule. To shim this feature, the :host styles are\n    reformatted and prefixed with a given scope name and promoted to a\n    document level stylesheet.\n    For example, given a scope name of .foo, a rule like this:\n\n      :host {\n          background: red;\n        }\n      }\n\n    becomes:\n\n      .foo {\n        background: red;\n      }\n\n    * encapsulation: Styles defined within ShadowDOM, apply only to\n    dom inside the ShadowDOM. Polymer uses one of two techniques to implement\n    this feature.\n\n    By default, rules are prefixed with the host element tag name\n    as a descendant selector. This ensures styling does not leak out of the 'top'\n    of the element's ShadowDOM. For example,\n\n    div {\n        font-weight: bold;\n      }\n\n    becomes:\n\n    x-foo div {\n        font-weight: bold;\n      }\n\n    becomes:\n\n\n    Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\n    selectors are scoped by adding an attribute selector suffix to each\n    simple selector that contains the host element tag name. Each element\n    in the element's ShadowDOM template is also given the scope attribute.\n    Thus, these rules match only elements that have the scope attribute.\n    For example, given a scope name of x-foo, a rule like this:\n\n      div {\n        font-weight: bold;\n      }\n\n    becomes:\n\n      div[x-foo] {\n        font-weight: bold;\n      }\n\n    Note that elements that are dynamically added to a scope must have the scope\n    selector added to them manually.\n\n    * upper/lower bound encapsulation: Styles which are defined outside a\n    shadowRoot should not cross the ShadowDOM boundary and should not apply\n    inside a shadowRoot.\n\n    This styling behavior is not emulated. Some possible ways to do this that\n    were rejected due to complexity and/or performance concerns include: (1) reset\n    every possible property for every possible selector for a given scope name;\n    (2) re-implement css in javascript.\n\n    As an alternative, users should make sure to use selectors\n    specific to the scope in which they are working.\n\n    * ::distributed: This behavior is not emulated. It's often not necessary\n    to style the contents of a specific insertion point and instead, descendants\n    of the host element can be styled selectively. Users can also create an\n    extra node around an insertion point and style that node's contents\n    via descendent selectors. For example, with a shadowRoot like this:\n\n      <style>\n        ::content(div) {\n          background: red;\n        }\n      </style>\n      <content></content>\n\n    could become:\n\n      <style>\n        / *@polyfill .content-container div * /\n        ::content(div) {\n          background: red;\n        }\n      </style>\n      <div class=\"content-container\">\n        <content></content>\n      </div>\n\n    Note the use of @polyfill in the comment above a ShadowDOM specific style\n    declaration. This is a directive to the styling shim to use the selector\n    in comments in lieu of the next selector when running under polyfill.\n  */\n  var ShadowCss = (function () {\n      function ShadowCss() {\n          this.strictStyling = true;\n      }\n      /*\n      * Shim some cssText with the given selector. Returns cssText that can\n      * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).\n      *\n      * When strictStyling is true:\n      * - selector is the attribute added to all elements inside the host,\n      * - hostSelector is the attribute added to the host itself.\n      */\n      ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {\n          if (hostSelector === void 0) { hostSelector = ''; }\n          var sourceMappingUrl = extractSourceMappingUrl(cssText);\n          cssText = stripComments(cssText);\n          cssText = this._insertDirectives(cssText);\n          return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;\n      };\n      ShadowCss.prototype._insertDirectives = function (cssText) {\n          cssText = this._insertPolyfillDirectivesInCssText(cssText);\n          return this._insertPolyfillRulesInCssText(cssText);\n      };\n      /*\n       * Process styles to convert native ShadowDOM rules that will trip\n       * up the css parser; we rely on decorating the stylesheet with inert rules.\n       *\n       * For example, we convert this rule:\n       *\n       * polyfill-next-selector { content: ':host menu-item'; }\n       * ::content menu-item {\n       *\n       * to this:\n       *\n       * scopeName menu-item {\n       *\n      **/\n      ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {\n          // Difference with webcomponents.js: does not handle comments\n          return StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function (m /** TODO #9100 */) { return m[1] + '{'; });\n      };\n      /*\n       * Process styles to add rules which will only apply under the polyfill\n       *\n       * For example, we convert this rule:\n       *\n       * polyfill-rule {\n       *   content: ':host menu-item';\n       * ...\n       * }\n       *\n       * to this:\n       *\n       * scopeName menu-item {...}\n       *\n      **/\n      ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {\n          // Difference with webcomponents.js: does not handle comments\n          return StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function (m /** TODO #9100 */) {\n              var rule = m[0];\n              rule = StringWrapper.replace(rule, m[1], '');\n              rule = StringWrapper.replace(rule, m[2], '');\n              return m[3] + rule;\n          });\n      };\n      /* Ensure styles are scoped. Pseudo-scoping takes a rule like:\n       *\n       *  .foo {... }\n       *\n       *  and converts this to\n       *\n       *  scopeName .foo { ... }\n      */\n      ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {\n          var unscoped = this._extractUnscopedRulesFromCssText(cssText);\n          cssText = this._insertPolyfillHostInCssText(cssText);\n          cssText = this._convertColonHost(cssText);\n          cssText = this._convertColonHostContext(cssText);\n          cssText = this._convertShadowDOMSelectors(cssText);\n          if (isPresent(scopeSelector)) {\n              cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);\n          }\n          cssText = cssText + '\\n' + unscoped;\n          return cssText.trim();\n      };\n      /*\n       * Process styles to add rules which will only apply under the polyfill\n       * and do not process via CSSOM. (CSSOM is destructive to rules on rare\n       * occasions, e.g. -webkit-calc on Safari.)\n       * For example, we convert this rule:\n       *\n       * @polyfill-unscoped-rule {\n       *   content: 'menu-item';\n       * ... }\n       *\n       * to this:\n       *\n       * menu-item {...}\n       *\n      **/\n      ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {\n          // Difference with webcomponents.js: does not handle comments\n          var r = '';\n          var m;\n          _cssContentUnscopedRuleRe.lastIndex = 0;\n          while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {\n              var rule = m[0];\n              rule = StringWrapper.replace(rule, m[2], '');\n              rule = StringWrapper.replace(rule, m[1], m[3]);\n              r += rule + '\\n\\n';\n          }\n          return r;\n      };\n      /*\n       * convert a rule like :host(.foo) > .bar { }\n       *\n       * to\n       *\n       * scopeName.foo > .bar\n      */\n      ShadowCss.prototype._convertColonHost = function (cssText) {\n          return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);\n      };\n      /*\n       * convert a rule like :host-context(.foo) > .bar { }\n       *\n       * to\n       *\n       * scopeName.foo > .bar, .foo scopeName > .bar { }\n       *\n       * and\n       *\n       * :host-context(.foo:host) .bar { ... }\n       *\n       * to\n       *\n       * scopeName.foo .bar { ... }\n      */\n      ShadowCss.prototype._convertColonHostContext = function (cssText) {\n          return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);\n      };\n      ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {\n          // p1 = :host, p2 = contents of (), p3 rest of rule\n          return StringWrapper.replaceAllMapped(cssText, regExp, function (m /** TODO #9100 */) {\n              if (isPresent(m[2])) {\n                  var parts = m[2].split(','), r = [];\n                  for (var i = 0; i < parts.length; i++) {\n                      var p = parts[i];\n                      if (isBlank(p))\n                          break;\n                      p = p.trim();\n                      r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n                  }\n                  return r.join(',');\n              }\n              else {\n                  return _polyfillHostNoCombinator + m[3];\n              }\n          });\n      };\n      ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {\n          if (StringWrapper.contains(part, _polyfillHost)) {\n              return this._colonHostPartReplacer(host, part, suffix);\n          }\n          else {\n              return host + part + suffix + ', ' + part + ' ' + host + suffix;\n          }\n      };\n      ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {\n          return host + StringWrapper.replace(part, _polyfillHost, '') + suffix;\n      };\n      /*\n       * Convert combinators like ::shadow and pseudo-elements like ::content\n       * by replacing with space.\n      */\n      ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {\n          return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return StringWrapper.replaceAll(result, pattern, ' '); }, cssText);\n      };\n      // change a selector like 'div' to 'name div'\n      ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {\n          var _this = this;\n          return processRules(cssText, function (rule) {\n              var selector = rule.selector;\n              var content = rule.content;\n              if (rule.selector[0] != '@' || rule.selector.startsWith('@page')) {\n                  selector =\n                      _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);\n              }\n              else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports')) {\n                  content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);\n              }\n              return new CssRule(selector, content);\n          });\n      };\n      ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {\n          var _this = this;\n          return selector.split(',')\n              .map(function (part) { return part.trim().split(_shadowDeepSelectors); })\n              .map(function (deepParts) {\n              var shallowPart = deepParts[0], otherParts = deepParts.slice(1);\n              var applyScope = function (shallowPart) {\n                  if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n                      return strict ?\n                          _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :\n                          _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);\n                  }\n                  else {\n                      return shallowPart;\n                  }\n              };\n              return [applyScope(shallowPart)].concat(otherParts).join(' ');\n          })\n              .join(', ');\n      };\n      ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {\n          var re = this._makeScopeMatcher(scopeSelector);\n          return !re.test(selector);\n      };\n      ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {\n          var lre = /\\[/g;\n          var rre = /\\]/g;\n          scopeSelector = StringWrapper.replaceAll(scopeSelector, lre, '\\\\[');\n          scopeSelector = StringWrapper.replaceAll(scopeSelector, rre, '\\\\]');\n          return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n      };\n      ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {\n          // Difference from webcomponents.js: scopeSelector could not be an array\n          return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n      };\n      // scope via name and [is=name]\n      ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {\n          // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n          _polyfillHostRe.lastIndex = 0;\n          if (_polyfillHostRe.test(selector)) {\n              var replaceBy = this.strictStyling ? \"[\" + hostSelector + \"]\" : scopeSelector;\n              selector = StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);\n              return StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' ');\n          }\n          else {\n              return scopeSelector + ' ' + selector;\n          }\n      };\n      // return a selector with [name] suffix on each simple selector\n      // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */\n      ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {\n          var _this = this;\n          var isRe = /\\[is=([^\\]]*)\\]/g;\n          scopeSelector = scopeSelector.replace(isRe, function (_) {\n              var parts = [];\n              for (var _i = 1; _i < arguments.length; _i++) {\n                  parts[_i - 1] = arguments[_i];\n              }\n              return parts[0];\n          });\n          var attrName = '[' + scopeSelector + ']';\n          var _scopeSelectorPart = function (p) {\n              var scopedP = p.trim();\n              if (scopedP.length == 0) {\n                  return '';\n              }\n              if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n                  scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n              }\n              else {\n                  // remove :host since it should be unnecessary\n                  var t = p.replace(_polyfillHostRe, '');\n                  if (t.length > 0) {\n                      var matches = t.match(/([^:]*)(:*)(.*)/);\n                      if (matches !== null) {\n                          scopedP = matches[1] + attrName + matches[2] + matches[3];\n                      }\n                  }\n              }\n              return scopedP;\n          };\n          var sep = /( |>|\\+|~)\\s*/g;\n          var scopeAfter = selector.indexOf(_polyfillHostNoCombinator);\n          var scoped = '';\n          var startIndex = 0;\n          var res;\n          while ((res = sep.exec(selector)) !== null) {\n              var separator = res[1];\n              var part = selector.slice(startIndex, res.index).trim();\n              // if a selector appears before :host-context it should not be shimmed as it\n              // matches on ancestor elements and not on elements in the host's shadow\n              var scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;\n              scoped += scopedPart + \" \" + separator + \" \";\n              startIndex = sep.lastIndex;\n          }\n          return scoped + _scopeSelectorPart(selector.substring(startIndex));\n      };\n      ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {\n          return selector.replace(_colonHostContextRe, _polyfillHostContext)\n              .replace(_colonHostRe, _polyfillHost);\n      };\n      return ShadowCss;\n  }());\n  var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\\s]*?['\"](.*?)['\"][;\\s]*}([^{]*?){/gim;\n  var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\\s]*['\"](.*?)['\"])[;\\s]*[^}]*}/gim;\n  var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\\s]*['\"](.*?)['\"])[;\\s]*[^}]*}/gim;\n  var _polyfillHost = '-shadowcsshost';\n  // note: :host-context pre-processed to -shadowcsshostcontext.\n  var _polyfillHostContext = '-shadowcsscontext';\n  var _parenSuffix = ')(?:\\\\((' +\n      '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n      ')\\\\))?([^,{]*)';\n  var _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\n  var _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\n  var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\n  var _shadowDOMSelectorsRe = [\n      /::shadow/g,\n      /::content/g,\n      // Deprecated selectors\n      /\\/shadow-deep\\//g,\n      /\\/shadow\\//g,\n  ];\n  var _shadowDeepSelectors = /(?:>>>)|(?:\\/deep\\/)/g;\n  var _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\n  var _polyfillHostRe = /-shadowcsshost/gim;\n  var _colonHostRe = /:host/gim;\n  var _colonHostContextRe = /:host-context/gim;\n  var _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\n  function stripComments(input) {\n      return StringWrapper.replaceAllMapped(input, _commentRe, function (_ /** TODO #9100 */) { return ''; });\n  }\n  // all comments except inline source mapping (\"/* #sourceMappingURL= ... */\")\n  var _sourceMappingUrlRe = /[\\s\\S]*(\\/\\*\\s*#\\s*sourceMappingURL=[\\s\\S]+?\\*\\/)\\s*$/;\n  function extractSourceMappingUrl(input) {\n      var matcher = input.match(_sourceMappingUrlRe);\n      return matcher ? matcher[1] : '';\n  }\n  var _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\n  var _curlyRe = /([{}])/g;\n  var OPEN_CURLY = '{';\n  var CLOSE_CURLY = '}';\n  var BLOCK_PLACEHOLDER = '%BLOCK%';\n  var CssRule = (function () {\n      function CssRule(selector, content) {\n          this.selector = selector;\n          this.content = content;\n      }\n      return CssRule;\n  }());\n  function processRules(input, ruleCallback) {\n      var inputWithEscapedBlocks = escapeBlocks(input);\n      var nextBlockIndex = 0;\n      return StringWrapper.replaceAllMapped(inputWithEscapedBlocks.escapedString, _ruleRe, function (m /** TODO #9100 */) {\n          var selector = m[2];\n          var content = '';\n          var suffix = m[4];\n          var contentPrefix = '';\n          if (isPresent(m[4]) && m[4].startsWith('{' + BLOCK_PLACEHOLDER)) {\n              content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n              suffix = m[4].substring(BLOCK_PLACEHOLDER.length + 1);\n              contentPrefix = '{';\n          }\n          var rule = ruleCallback(new CssRule(selector, content));\n          return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n      });\n  }\n  var StringWithEscapedBlocks = (function () {\n      function StringWithEscapedBlocks(escapedString, blocks) {\n          this.escapedString = escapedString;\n          this.blocks = blocks;\n      }\n      return StringWithEscapedBlocks;\n  }());\n  function escapeBlocks(input) {\n      var inputParts = StringWrapper.split(input, _curlyRe);\n      var resultParts = [];\n      var escapedBlocks = [];\n      var bracketCount = 0;\n      var currentBlockParts = [];\n      for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n          var part = inputParts[partIndex];\n          if (part == CLOSE_CURLY) {\n              bracketCount--;\n          }\n          if (bracketCount > 0) {\n              currentBlockParts.push(part);\n          }\n          else {\n              if (currentBlockParts.length > 0) {\n                  escapedBlocks.push(currentBlockParts.join(''));\n                  resultParts.push(BLOCK_PLACEHOLDER);\n                  currentBlockParts = [];\n              }\n              resultParts.push(part);\n          }\n          if (part == OPEN_CURLY) {\n              bracketCount++;\n          }\n      }\n      if (currentBlockParts.length > 0) {\n          escapedBlocks.push(currentBlockParts.join(''));\n          resultParts.push(BLOCK_PLACEHOLDER);\n      }\n      return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n  }\n\n  var COMPONENT_VARIABLE = '%COMP%';\n  var HOST_ATTR = \"_nghost-\" + COMPONENT_VARIABLE;\n  var CONTENT_ATTR = \"_ngcontent-\" + COMPONENT_VARIABLE;\n  var StylesCompileDependency = (function () {\n      function StylesCompileDependency(moduleUrl, isShimmed, valuePlaceholder) {\n          this.moduleUrl = moduleUrl;\n          this.isShimmed = isShimmed;\n          this.valuePlaceholder = valuePlaceholder;\n      }\n      return StylesCompileDependency;\n  }());\n  var StylesCompileResult = (function () {\n      function StylesCompileResult(componentStylesheet, externalStylesheets) {\n          this.componentStylesheet = componentStylesheet;\n          this.externalStylesheets = externalStylesheets;\n      }\n      return StylesCompileResult;\n  }());\n  var CompiledStylesheet = (function () {\n      function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {\n          this.statements = statements;\n          this.stylesVar = stylesVar;\n          this.dependencies = dependencies;\n          this.isShimmed = isShimmed;\n          this.meta = meta;\n      }\n      return CompiledStylesheet;\n  }());\n  var StyleCompiler = (function () {\n      function StyleCompiler(_urlResolver) {\n          this._urlResolver = _urlResolver;\n          this._shadowCss = new ShadowCss();\n      }\n      StyleCompiler.prototype.compileComponent = function (comp) {\n          var _this = this;\n          var externalStylesheets = [];\n          var componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({\n              styles: comp.template.styles,\n              styleUrls: comp.template.styleUrls,\n              moduleUrl: comp.type.moduleUrl\n          }), true);\n          comp.template.externalStylesheets.forEach(function (stylesheetMeta) {\n              var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);\n              externalStylesheets.push(compiledStylesheet);\n          });\n          return new StylesCompileResult(componentStylesheet, externalStylesheets);\n      };\n      StyleCompiler.prototype._compileStyles = function (comp, stylesheet, isComponentStylesheet) {\n          var _this = this;\n          var shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated;\n          var styleExpressions = stylesheet.styles.map(function (plainStyle) { return literal(_this._shimIfNeeded(plainStyle, shim)); });\n          var dependencies = [];\n          for (var i = 0; i < stylesheet.styleUrls.length; i++) {\n              var identifier = new CompileIdentifierMetadata({ name: getStylesVarName(null) });\n              dependencies.push(new StylesCompileDependency(stylesheet.styleUrls[i], shim, identifier));\n              styleExpressions.push(new ExternalExpr(identifier));\n          }\n          // styles variable contains plain strings and arrays of other styles arrays (recursive),\n          // so we set its type to dynamic.\n          var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);\n          var stmt = variable(stylesVar)\n              .set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])))\n              .toDeclStmt(null, [StmtModifier.Final]);\n          return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);\n      };\n      StyleCompiler.prototype._shimIfNeeded = function (style, shim) {\n          return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;\n      };\n      StyleCompiler.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      StyleCompiler.ctorParameters = [\n          { type: UrlResolver, },\n      ];\n      return StyleCompiler;\n  }());\n  function getStylesVarName(component) {\n      var result = \"styles\";\n      if (component) {\n          result += \"_\" + component.type.name;\n      }\n      return result;\n  }\n\n  /**\n   * An internal module of the Angular compiler that begins with component types,\n   * extracts templates, and eventually produces a compiled version of the component\n   * ready for linking into an application.\n   *\n   * @security  When compiling templates at runtime, you must ensure that the entire template comes\n   * from a trusted source. Attacker-controlled data introduced by a template could expose your\n   * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).\n   */\n  var RuntimeCompiler = (function () {\n      function RuntimeCompiler(_injector, _metadataResolver, _templateNormalizer, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _compilerConfig) {\n          this._injector = _injector;\n          this._metadataResolver = _metadataResolver;\n          this._templateNormalizer = _templateNormalizer;\n          this._templateParser = _templateParser;\n          this._styleCompiler = _styleCompiler;\n          this._viewCompiler = _viewCompiler;\n          this._ngModuleCompiler = _ngModuleCompiler;\n          this._compilerConfig = _compilerConfig;\n          this._compiledTemplateCache = new Map();\n          this._compiledHostTemplateCache = new Map();\n          this._compiledNgModuleCache = new Map();\n      }\n      Object.defineProperty(RuntimeCompiler.prototype, \"injector\", {\n          get: function () { return this._injector; },\n          enumerable: true,\n          configurable: true\n      });\n      RuntimeCompiler.prototype.compileModuleSync = function (moduleType) {\n          return this._compileModuleAndComponents(moduleType, true).syncResult;\n      };\n      RuntimeCompiler.prototype.compileModuleAsync = function (moduleType) {\n          return this._compileModuleAndComponents(moduleType, false).asyncResult;\n      };\n      RuntimeCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n          return this._compileModuleAndAllComponents(moduleType, true).syncResult;\n      };\n      RuntimeCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n          return this._compileModuleAndAllComponents(moduleType, false).asyncResult;\n      };\n      RuntimeCompiler.prototype._compileModuleAndComponents = function (moduleType, isSync) {\n          var componentPromise = this._compileComponents(moduleType, isSync);\n          var ngModuleFactory = this._compileModule(moduleType);\n          return new SyncAsyncResult(ngModuleFactory, componentPromise.then(function () { return ngModuleFactory; }));\n      };\n      RuntimeCompiler.prototype._compileModuleAndAllComponents = function (moduleType, isSync) {\n          var _this = this;\n          var componentPromise = this._compileComponents(moduleType, isSync);\n          var ngModuleFactory = this._compileModule(moduleType);\n          var moduleMeta = this._metadataResolver.getNgModuleMetadata(moduleType);\n          var componentFactories = [];\n          var templates = new Set();\n          moduleMeta.transitiveModule.modules.forEach(function (moduleMeta) {\n              moduleMeta.declaredDirectives.forEach(function (dirMeta) {\n                  if (dirMeta.isComponent) {\n                      var template = _this._createCompiledHostTemplate(dirMeta.type.reference);\n                      templates.add(template);\n                      componentFactories.push(template.proxyComponentFactory);\n                  }\n              });\n          });\n          var syncResult = new _angular_core.ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n          // Note: host components themselves can always be compiled synchronously as they have an\n          // inline template. However, we still need to wait for the components that they\n          // reference to be loaded / compiled.\n          var compile = function () {\n              templates.forEach(function (template) { _this._compileTemplate(template); });\n              return syncResult;\n          };\n          var asyncResult = isSync ? Promise.resolve(compile()) : componentPromise.then(compile);\n          return new SyncAsyncResult(syncResult, asyncResult);\n      };\n      RuntimeCompiler.prototype._compileModule = function (moduleType) {\n          var _this = this;\n          var ngModuleFactory = this._compiledNgModuleCache.get(moduleType);\n          if (!ngModuleFactory) {\n              var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);\n              // Always provide a bound Compiler\n              var extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, { useFactory: function () { return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference); } }))];\n              var compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);\n              compileResult.dependencies.forEach(function (dep) {\n                  dep.placeholder.reference =\n                      _this._assertComponentKnown(dep.comp.reference, true).proxyComponentFactory;\n                  dep.placeholder.name = \"compFactory_\" + dep.comp.name;\n              });\n              if (!this._compilerConfig.useJit) {\n                  ngModuleFactory =\n                      interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar);\n              }\n              else {\n                  ngModuleFactory = jitStatements(moduleMeta_1.type.name + \".ngfactory.js\", compileResult.statements, compileResult.ngModuleFactoryVar);\n              }\n              this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);\n          }\n          return ngModuleFactory;\n      };\n      /**\n       * @internal\n       */\n      RuntimeCompiler.prototype._compileComponents = function (mainModule, isSync) {\n          var _this = this;\n          var templates = new Set();\n          var loadingPromises = [];\n          var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);\n          ngModule.transitiveModule.modules.forEach(function (localModuleMeta) {\n              localModuleMeta.declaredDirectives.forEach(function (dirMeta) {\n                  if (dirMeta.isComponent) {\n                      templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));\n                      dirMeta.entryComponents.forEach(function (entryComponentType) {\n                          templates.add(_this._createCompiledHostTemplate(entryComponentType.reference));\n                      });\n                  }\n              });\n              localModuleMeta.entryComponents.forEach(function (entryComponentType) {\n                  templates.add(_this._createCompiledHostTemplate(entryComponentType.reference));\n                  // TODO: what about entryComponents of entryComponents?\n              });\n          });\n          templates.forEach(function (template) {\n              if (template.loading) {\n                  if (isSync) {\n                      throw new ComponentStillLoadingError(template.compType.reference);\n                  }\n                  else {\n                      loadingPromises.push(template.loading);\n                  }\n              }\n          });\n          var compile = function () { templates.forEach(function (template) { _this._compileTemplate(template); }); };\n          if (isSync) {\n              compile();\n              return Promise.resolve(null);\n          }\n          else {\n              return Promise.all(loadingPromises).then(compile);\n          }\n      };\n      RuntimeCompiler.prototype.clearCacheFor = function (type) {\n          this._compiledNgModuleCache.delete(type);\n          this._metadataResolver.clearCacheFor(type);\n          this._compiledHostTemplateCache.delete(type);\n          var compiledTemplate = this._compiledTemplateCache.get(type);\n          if (compiledTemplate) {\n              this._templateNormalizer.clearCacheFor(compiledTemplate.normalizedCompMeta);\n              this._compiledTemplateCache.delete(type);\n          }\n      };\n      RuntimeCompiler.prototype.clearCache = function () {\n          this._metadataResolver.clearCache();\n          this._compiledTemplateCache.clear();\n          this._compiledHostTemplateCache.clear();\n          this._templateNormalizer.clearCache();\n          this._compiledNgModuleCache.clear();\n      };\n      RuntimeCompiler.prototype._createCompiledHostTemplate = function (compType) {\n          var compiledTemplate = this._compiledHostTemplateCache.get(compType);\n          if (isBlank(compiledTemplate)) {\n              var compMeta = this._metadataResolver.getDirectiveMetadata(compType);\n              assertComponent(compMeta);\n              var hostMeta = createHostComponentMeta(compMeta);\n              compiledTemplate = new CompiledTemplate(true, compMeta.selector, compMeta.type, [compMeta], [], [], this._templateNormalizer.normalizeDirective(hostMeta));\n              this._compiledHostTemplateCache.set(compType, compiledTemplate);\n          }\n          return compiledTemplate;\n      };\n      RuntimeCompiler.prototype._createCompiledTemplate = function (compMeta, ngModule) {\n          var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);\n          if (isBlank(compiledTemplate)) {\n              assertComponent(compMeta);\n              compiledTemplate = new CompiledTemplate(false, compMeta.selector, compMeta.type, ngModule.transitiveModule.directives, ngModule.transitiveModule.pipes, ngModule.schemas, this._templateNormalizer.normalizeDirective(compMeta));\n              this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);\n          }\n          return compiledTemplate;\n      };\n      RuntimeCompiler.prototype._assertComponentKnown = function (compType, isHost) {\n          var compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) :\n              this._compiledTemplateCache.get(compType);\n          if (!compiledTemplate) {\n              if (isHost) {\n                  throw new Error(\"Illegal state: Compiled view for component \" + stringify(compType) + \" does not exist!\");\n              }\n              else {\n                  throw new Error(\"Component \" + stringify(compType) + \" is not part of any NgModule or the module has not been imported into your module.\");\n              }\n          }\n          return compiledTemplate;\n      };\n      RuntimeCompiler.prototype._assertComponentLoaded = function (compType, isHost) {\n          var compiledTemplate = this._assertComponentKnown(compType, isHost);\n          if (compiledTemplate.loading) {\n              throw new Error(\"Illegal state: CompiledTemplate for \" + stringify(compType) + \" (isHost: \" + isHost + \") is still loading!\");\n          }\n          return compiledTemplate;\n      };\n      RuntimeCompiler.prototype._compileTemplate = function (template) {\n          var _this = this;\n          if (template.isCompiled) {\n              return;\n          }\n          var compMeta = template.normalizedCompMeta;\n          var externalStylesheetsByModuleUrl = new Map();\n          var stylesCompileResult = this._styleCompiler.compileComponent(compMeta);\n          stylesCompileResult.externalStylesheets.forEach(function (r) { externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r); });\n          this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);\n          var viewCompMetas = template.viewComponentTypes.map(function (compType) { return _this._assertComponentLoaded(compType, false).normalizedCompMeta; });\n          var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, template.viewDirectives.concat(viewCompMetas), template.viewPipes, template.schemas, compMeta.type.name);\n          var compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), template.viewPipes);\n          compileResult.dependencies.forEach(function (dep) {\n              var depTemplate;\n              if (dep instanceof ViewFactoryDependency) {\n                  var vfd = dep;\n                  depTemplate = _this._assertComponentLoaded(vfd.comp.reference, false);\n                  vfd.placeholder.reference = depTemplate.proxyViewFactory;\n                  vfd.placeholder.name = \"viewFactory_\" + vfd.comp.name;\n              }\n              else if (dep instanceof ComponentFactoryDependency) {\n                  var cfd = dep;\n                  depTemplate = _this._assertComponentLoaded(cfd.comp.reference, true);\n                  cfd.placeholder.reference = depTemplate.proxyComponentFactory;\n                  cfd.placeholder.name = \"compFactory_\" + cfd.comp.name;\n              }\n          });\n          var statements = stylesCompileResult.componentStylesheet.statements.concat(compileResult.statements);\n          var factory;\n          if (!this._compilerConfig.useJit) {\n              factory = interpretStatements(statements, compileResult.viewFactoryVar);\n          }\n          else {\n              factory = jitStatements(\"\" + template.compType.name + (template.isHost ? '_Host' : '') + \".ngfactory.js\", statements, compileResult.viewFactoryVar);\n          }\n          template.compiled(factory);\n      };\n      RuntimeCompiler.prototype._resolveStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {\n          var _this = this;\n          result.dependencies.forEach(function (dep, i) {\n              var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);\n              var nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);\n              dep.valuePlaceholder.reference = nestedStylesArr;\n              dep.valuePlaceholder.name = \"importedStyles\" + i;\n          });\n      };\n      RuntimeCompiler.prototype._resolveAndEvalStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {\n          this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);\n          if (!this._compilerConfig.useJit) {\n              return interpretStatements(result.statements, result.stylesVar);\n          }\n          else {\n              return jitStatements(result.meta.moduleUrl + \".css.js\", result.statements, result.stylesVar);\n          }\n      };\n      RuntimeCompiler.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      RuntimeCompiler.ctorParameters = [\n          { type: _angular_core.Injector, },\n          { type: CompileMetadataResolver, },\n          { type: DirectiveNormalizer, },\n          { type: TemplateParser, },\n          { type: StyleCompiler, },\n          { type: ViewCompiler, },\n          { type: NgModuleCompiler, },\n          { type: CompilerConfig, },\n      ];\n      return RuntimeCompiler;\n  }());\n  var CompiledTemplate = (function () {\n      function CompiledTemplate(isHost, selector, compType, viewDirectivesAndComponents, viewPipes, schemas, _normalizeResult) {\n          var _this = this;\n          this.isHost = isHost;\n          this.compType = compType;\n          this.viewPipes = viewPipes;\n          this.schemas = schemas;\n          this._viewFactory = null;\n          this.loading = null;\n          this._normalizedCompMeta = null;\n          this.isCompiled = false;\n          this.isCompiledWithDeps = false;\n          this.viewComponentTypes = [];\n          this.viewDirectives = [];\n          viewDirectivesAndComponents.forEach(function (dirMeta) {\n              if (dirMeta.isComponent) {\n                  _this.viewComponentTypes.push(dirMeta.type.reference);\n              }\n              else {\n                  _this.viewDirectives.push(dirMeta);\n              }\n          });\n          this.proxyViewFactory = function () {\n              var args = [];\n              for (var _i = 0; _i < arguments.length; _i++) {\n                  args[_i - 0] = arguments[_i];\n              }\n              if (!_this._viewFactory) {\n                  throw new Error(\"Illegal state: CompiledTemplate for \" + stringify(_this.compType) + \" is not compiled yet!\");\n              }\n              return _this._viewFactory.apply(null, args);\n          };\n          this.proxyComponentFactory = isHost ?\n              new _angular_core.ComponentFactory(selector, this.proxyViewFactory, compType.reference) :\n              null;\n          if (_normalizeResult.syncResult) {\n              this._normalizedCompMeta = _normalizeResult.syncResult;\n          }\n          else {\n              this.loading = _normalizeResult.asyncResult.then(function (normalizedCompMeta) {\n                  _this._normalizedCompMeta = normalizedCompMeta;\n                  _this.loading = null;\n              });\n          }\n      }\n      Object.defineProperty(CompiledTemplate.prototype, \"normalizedCompMeta\", {\n          get: function () {\n              if (this.loading) {\n                  throw new Error(\"Template is still loading for \" + this.compType.name + \"!\");\n              }\n              return this._normalizedCompMeta;\n          },\n          enumerable: true,\n          configurable: true\n      });\n      CompiledTemplate.prototype.compiled = function (viewFactory) {\n          this._viewFactory = viewFactory;\n          this.isCompiled = true;\n      };\n      CompiledTemplate.prototype.depsCompiled = function () { this.isCompiledWithDeps = true; };\n      return CompiledTemplate;\n  }());\n  function assertComponent(meta) {\n      if (!meta.isComponent) {\n          throw new Error(\"Could not compile '\" + meta.type.name + \"' because it is not a component.\");\n      }\n  }\n  /**\n   * Implements `Compiler` by delegating to the RuntimeCompiler using a known module.\n   */\n  var ModuleBoundCompiler = (function () {\n      function ModuleBoundCompiler(_delegate, _ngModule) {\n          this._delegate = _delegate;\n          this._ngModule = _ngModule;\n      }\n      Object.defineProperty(ModuleBoundCompiler.prototype, \"_injector\", {\n          get: function () { return this._delegate.injector; },\n          enumerable: true,\n          configurable: true\n      });\n      ModuleBoundCompiler.prototype.compileModuleSync = function (moduleType) {\n          return this._delegate.compileModuleSync(moduleType);\n      };\n      ModuleBoundCompiler.prototype.compileModuleAsync = function (moduleType) {\n          return this._delegate.compileModuleAsync(moduleType);\n      };\n      ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n          return this._delegate.compileModuleAndAllComponentsSync(moduleType);\n      };\n      ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n          return this._delegate.compileModuleAndAllComponentsAsync(moduleType);\n      };\n      /**\n       * Clears all caches\n       */\n      ModuleBoundCompiler.prototype.clearCache = function () { this._delegate.clearCache(); };\n      /**\n       * Clears the cache for the given component/ngModule.\n       */\n      ModuleBoundCompiler.prototype.clearCacheFor = function (type) { this._delegate.clearCacheFor(type); };\n      return ModuleBoundCompiler;\n  }());\n\n  // =================================================================================================\n  // =================================================================================================\n  // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n  // =================================================================================================\n  // =================================================================================================\n  //\n  //        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!\n  //                               Reach out to mprobst for details.\n  //\n  // =================================================================================================\n  /** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */\n  var SECURITY_SCHEMA = {};\n  function registerContext(ctx, specs) {\n      for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {\n          var spec = specs_1[_i];\n          SECURITY_SCHEMA[spec.toLowerCase()] = ctx;\n      }\n  }\n  // Case is insignificant below, all element and attribute names are lower-cased for lookup.\n  registerContext(_angular_core.SecurityContext.HTML, [\n      'iframe|srcdoc',\n      '*|innerHTML',\n      '*|outerHTML',\n  ]);\n  registerContext(_angular_core.SecurityContext.STYLE, ['*|style']);\n  // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.\n  registerContext(_angular_core.SecurityContext.URL, [\n      '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',\n      'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',\n      'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',\n      'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',\n  ]);\n  registerContext(_angular_core.SecurityContext.RESOURCE_URL, [\n      'applet|code',\n      'applet|codebase',\n      'base|href',\n      'embed|src',\n      'frame|src',\n      'head|profile',\n      'html|manifest',\n      'iframe|src',\n      'link|href',\n      'media|src',\n      'object|codebase',\n      'object|data',\n      'script|src',\n  ]);\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  var __extends$18 = (this && this.__extends) || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  var BOOLEAN = 'boolean';\n  var NUMBER = 'number';\n  var STRING = 'string';\n  var OBJECT = 'object';\n  /**\n   * This array represents the DOM schema. It encodes inheritance, properties, and events.\n   *\n   * ## Overview\n   *\n   * Each line represents one kind of element. The `element_inheritance` and properties are joined\n   * using `element_inheritance|properties` syntax.\n   *\n   * ## Element Inheritance\n   *\n   * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.\n   * Here the individual elements are separated by `,` (commas). Every element in the list\n   * has identical properties.\n   *\n   * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is\n   * specified then `\"\"` (blank) element is assumed.\n   *\n   * NOTE: The blank element inherits from root `*` element, the super element of all elements.\n   *\n   * NOTE an element prefix such as `:svg:` has no special meaning to the schema.\n   *\n   * ## Properties\n   *\n   * Each element has a set of properties separated by `,` (commas). Each property can be prefixed\n   * by a special character designating its type:\n   *\n   * - (no prefix): property is a string.\n   * - `*`: property represents an event.\n   * - `!`: property is a boolean.\n   * - `#`: property is a number.\n   * - `%`: property is an object.\n   *\n   * ## Query\n   *\n   * The class creates an internal squas representation which allows to easily answer the query of\n   * if a given property exist on a given element.\n   *\n   * NOTE: We don't yet support querying for types or events.\n   * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,\n   *       see dom_element_schema_registry_spec.ts\n   */\n  // =================================================================================================\n  // =================================================================================================\n  // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n  // =================================================================================================\n  // =================================================================================================\n  //\n  //                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!\n  //\n  // Newly added properties must be security reviewed and assigned an appropriate SecurityContext in\n  // dom_security_schema.ts. Reach out to mprobst & rjamet for details.\n  //\n  // =================================================================================================\n  var SCHEMA = ([\n      '*|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop',\n      'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^*|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n      'media^abbr|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume',\n      ':svg:^abbr|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',\n      ':svg:graphics^:svg:|',\n      ':svg:animation^:svg:|*begin,*end,*repeat',\n      ':svg:geometry^:svg:|',\n      ':svg:componentTransferFunction^:svg:|',\n      ':svg:gradient^:svg:|',\n      ':svg:textContent^:svg:graphics|',\n      ':svg:textPositioning^:svg:textContent|',\n      'abbr^*|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n      'a^abbr|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',\n      'area^abbr|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username',\n      'audio^media|',\n      'br^abbr|clear',\n      'base^abbr|href,target',\n      'body^abbr|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',\n      'button^abbr|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',\n      'canvas^abbr|#height,#width',\n      'content^abbr|select',\n      'dl^abbr|!compact',\n      'datalist^abbr|',\n      'details^abbr|!open',\n      'dialog^abbr|!open,returnValue',\n      'dir^abbr|!compact',\n      'div^abbr|align',\n      'embed^abbr|align,height,name,src,type,width',\n      'fieldset^abbr|!disabled,name',\n      'font^abbr|color,face,size',\n      'form^abbr|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',\n      'frame^abbr|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',\n      'frameset^abbr|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',\n      'hr^abbr|align,color,!noShade,size,width',\n      'head^abbr|',\n      'h1,h2,h3,h4,h5,h6^abbr|align',\n      'html^abbr|version',\n      'iframe^abbr|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',\n      'img^abbr|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',\n      'input^abbr|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',\n      'keygen^abbr|!autofocus,challenge,!disabled,keytype,name',\n      'li^abbr|type,#value',\n      'label^abbr|htmlFor',\n      'legend^abbr|align',\n      'link^abbr|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type',\n      'map^abbr|name',\n      'marquee^abbr|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',\n      'menu^abbr|!compact',\n      'meta^abbr|content,httpEquiv,name,scheme',\n      'meter^abbr|#high,#low,#max,#min,#optimum,#value',\n      'ins,del^abbr|cite,dateTime',\n      'ol^abbr|!compact,!reversed,#start,type',\n      'object^abbr|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',\n      'optgroup^abbr|!disabled,label',\n      'option^abbr|!defaultSelected,!disabled,label,!selected,text,value',\n      'output^abbr|defaultValue,%htmlFor,name,value',\n      'p^abbr|align',\n      'param^abbr|name,type,value,valueType',\n      'picture^abbr|',\n      'pre^abbr|#width',\n      'progress^abbr|#max,#value',\n      'q,blockquote,cite^abbr|',\n      'script^abbr|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',\n      'select^abbr|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',\n      'shadow^abbr|',\n      'source^abbr|media,sizes,src,srcset,type',\n      'span^abbr|',\n      'style^abbr|!disabled,media,type',\n      'caption^abbr|align',\n      'th,td^abbr|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',\n      'col,colgroup^abbr|align,ch,chOff,#span,vAlign,width',\n      'table^abbr|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',\n      'tr^abbr|align,bgColor,ch,chOff,vAlign',\n      'tfoot,thead,tbody^abbr|align,ch,chOff,vAlign',\n      'template^abbr|',\n      'textarea^abbr|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',\n      'title^abbr|text',\n      'track^abbr|!default,kind,label,src,srclang',\n      'ul^abbr|!compact,type',\n      'unknown^abbr|',\n      'video^media|#height,poster,#width',\n      ':svg:a^:svg:graphics|',\n      ':svg:animate^:svg:animation|',\n      ':svg:animateMotion^:svg:animation|',\n      ':svg:animateTransform^:svg:animation|',\n      ':svg:circle^:svg:geometry|',\n      ':svg:clipPath^:svg:graphics|',\n      ':svg:cursor^:svg:|',\n      ':svg:defs^:svg:graphics|',\n      ':svg:desc^:svg:|',\n      ':svg:discard^:svg:|',\n      ':svg:ellipse^:svg:geometry|',\n      ':svg:feBlend^:svg:|',\n      ':svg:feColorMatrix^:svg:|',\n      ':svg:feComponentTransfer^:svg:|',\n      ':svg:feComposite^:svg:|',\n      ':svg:feConvolveMatrix^:svg:|',\n      ':svg:feDiffuseLighting^:svg:|',\n      ':svg:feDisplacementMap^:svg:|',\n      ':svg:feDistantLight^:svg:|',\n      ':svg:feDropShadow^:svg:|',\n      ':svg:feFlood^:svg:|',\n      ':svg:feFuncA^:svg:componentTransferFunction|',\n      ':svg:feFuncB^:svg:componentTransferFunction|',\n      ':svg:feFuncG^:svg:componentTransferFunction|',\n      ':svg:feFuncR^:svg:componentTransferFunction|',\n      ':svg:feGaussianBlur^:svg:|',\n      ':svg:feImage^:svg:|',\n      ':svg:feMerge^:svg:|',\n      ':svg:feMergeNode^:svg:|',\n      ':svg:feMorphology^:svg:|',\n      ':svg:feOffset^:svg:|',\n      ':svg:fePointLight^:svg:|',\n      ':svg:feSpecularLighting^:svg:|',\n      ':svg:feSpotLight^:svg:|',\n      ':svg:feTile^:svg:|',\n      ':svg:feTurbulence^:svg:|',\n      ':svg:filter^:svg:|',\n      ':svg:foreignObject^:svg:graphics|',\n      ':svg:g^:svg:graphics|',\n      ':svg:image^:svg:graphics|',\n      ':svg:line^:svg:geometry|',\n      ':svg:linearGradient^:svg:gradient|',\n      ':svg:mpath^:svg:|',\n      ':svg:marker^:svg:|',\n      ':svg:mask^:svg:|',\n      ':svg:metadata^:svg:|',\n      ':svg:path^:svg:geometry|',\n      ':svg:pattern^:svg:|',\n      ':svg:polygon^:svg:geometry|',\n      ':svg:polyline^:svg:geometry|',\n      ':svg:radialGradient^:svg:gradient|',\n      ':svg:rect^:svg:geometry|',\n      ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',\n      ':svg:script^:svg:|type',\n      ':svg:set^:svg:animation|',\n      ':svg:stop^:svg:|',\n      ':svg:style^:svg:|!disabled,media,title,type',\n      ':svg:switch^:svg:graphics|',\n      ':svg:symbol^:svg:|',\n      ':svg:tspan^:svg:textPositioning|',\n      ':svg:text^:svg:textPositioning|',\n      ':svg:textPath^:svg:textContent|',\n      ':svg:title^:svg:|',\n      ':svg:use^:svg:graphics|',\n      ':svg:view^:svg:|#zoomAndPan',\n  ]);\n  var _ATTR_TO_PROP = {\n      'class': 'className',\n      'formaction': 'formAction',\n      'innerHtml': 'innerHTML',\n      'readonly': 'readOnly',\n      'tabindex': 'tabIndex'\n  };\n  var DomElementSchemaRegistry = (function (_super) {\n      __extends$18(DomElementSchemaRegistry, _super);\n      function DomElementSchemaRegistry() {\n          var _this = this;\n          _super.call(this);\n          this._schema = {};\n          SCHEMA.forEach(function (encodedType) {\n              var _a = encodedType.split('|'), strType = _a[0], strProperties = _a[1];\n              var properties = strProperties.split(',');\n              var _b = strType.split('^'), typeNames = _b[0], superName = _b[1];\n              var type = {};\n              typeNames.split(',').forEach(function (tag) { return _this._schema[tag.toLowerCase()] = type; });\n              var superType = _this._schema[superName];\n              if (superType) {\n                  Object.keys(superType).forEach(function (prop) { type[prop] = superType[prop]; });\n              }\n              properties.forEach(function (property) {\n                  if (property.length > 0) {\n                      switch (property[0]) {\n                          case '*':\n                              // We don't yet support events.\n                              // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events\n                              // will\n                              // almost certainly introduce bad XSS vulnerabilities.\n                              // type[property.substring(1)] = EVENT;\n                              break;\n                          case '!':\n                              type[property.substring(1)] = BOOLEAN;\n                              break;\n                          case '#':\n                              type[property.substring(1)] = NUMBER;\n                              break;\n                          case '%':\n                              type[property.substring(1)] = OBJECT;\n                              break;\n                          default:\n                              type[property] = STRING;\n                      }\n                  }\n              });\n          });\n      }\n      DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) {\n          if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {\n              return true;\n          }\n          if (tagName.indexOf('-') > -1) {\n              if (tagName === 'ng-container' || tagName === 'ng-content') {\n                  return false;\n              }\n              if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {\n                  // Can't tell now as we don't know which properties a custom element will get\n                  // once it is instantiated\n                  return true;\n              }\n          }\n          var elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];\n          return !!elementProperties[propName];\n      };\n      DomElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {\n          if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {\n              return true;\n          }\n          if (tagName.indexOf('-') > -1) {\n              if (tagName === 'ng-container' || tagName === 'ng-content') {\n                  return true;\n              }\n              if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {\n                  // Allow any custom elements\n                  return true;\n              }\n          }\n          return !!this._schema[tagName.toLowerCase()];\n      };\n      /**\n       * securityContext returns the security context for the given property on the given DOM tag.\n       *\n       * Tag and property name are statically known and cannot change at runtime, i.e. it is not\n       * possible to bind a value into a changing attribute or tag name.\n       *\n       * The filtering is white list based. All attributes in the schema above are assumed to have the\n       * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known\n       * attack vectors are assigned their appropriate context.\n       */\n      DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName) {\n          // Make sure comparisons are case insensitive, so that case differences between attribute and\n          // property names do not have a security impact.\n          tagName = tagName.toLowerCase();\n          propName = propName.toLowerCase();\n          var ctx = SECURITY_SCHEMA[tagName + '|' + propName];\n          if (ctx) {\n              return ctx;\n          }\n          ctx = SECURITY_SCHEMA['*|' + propName];\n          return ctx ? ctx : _angular_core.SecurityContext.NONE;\n      };\n      DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) { return _ATTR_TO_PROP[propName] || propName; };\n      DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { return 'ng-component'; };\n      DomElementSchemaRegistry.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      DomElementSchemaRegistry.ctorParameters = [];\n      return DomElementSchemaRegistry;\n  }(ElementSchemaRegistry));\n\n  var _NO_RESOURCE_LOADER = {\n      get: function (url) {\n          throw new Error(\"No ResourceLoader implementation has been provided. Can't read the url \\\"\" + url + \"\\\"\");\n      }\n  };\n  /**\n   * A set of providers that provide `RuntimeCompiler` and its dependencies to use for\n   * template compilation.\n   */\n  var COMPILER_PROVIDERS = [\n      { provide: Reflector, useValue: reflector },\n      { provide: ReflectorReader, useExisting: Reflector },\n      { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER },\n      Console,\n      Lexer,\n      Parser,\n      HtmlParser,\n      {\n          provide: I18NHtmlParser,\n          useFactory: function (parser, translations, format) {\n              return new I18NHtmlParser(parser, translations, format);\n          },\n          deps: [\n              HtmlParser,\n              [new _angular_core.OptionalMetadata(), new _angular_core.Inject(_angular_core.TRANSLATIONS)],\n              [new _angular_core.OptionalMetadata(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)],\n          ]\n      },\n      TemplateParser,\n      DirectiveNormalizer,\n      CompileMetadataResolver,\n      DEFAULT_PACKAGE_URL_PROVIDER,\n      StyleCompiler,\n      ViewCompiler,\n      NgModuleCompiler,\n      { provide: CompilerConfig, useValue: new CompilerConfig() },\n      RuntimeCompiler,\n      { provide: _angular_core.Compiler, useExisting: RuntimeCompiler },\n      DomElementSchemaRegistry,\n      { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },\n      UrlResolver,\n      DirectiveResolver,\n      PipeResolver,\n      NgModuleResolver\n  ];\n  var RuntimeCompilerFactory = (function () {\n      function RuntimeCompilerFactory(defaultOptions) {\n          this._defaultOptions = [{\n                  useDebug: _angular_core.isDevMode(),\n                  useJit: true,\n                  defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated\n              }].concat(defaultOptions);\n      }\n      RuntimeCompilerFactory.prototype.createCompiler = function (options) {\n          if (options === void 0) { options = []; }\n          var mergedOptions = _mergeOptions(this._defaultOptions.concat(options));\n          var injector = _angular_core.ReflectiveInjector.resolveAndCreate([\n              COMPILER_PROVIDERS, {\n                  provide: CompilerConfig,\n                  useFactory: function () {\n                      return new CompilerConfig({\n                          // let explicit values from the compiler options overwrite options\n                          // from the app providers. E.g. important for the testing platform.\n                          genDebugInfo: mergedOptions.useDebug,\n                          // let explicit values from the compiler options overwrite options\n                          // from the app providers\n                          useJit: mergedOptions.useJit,\n                          // let explicit values from the compiler options overwrite options\n                          // from the app providers\n                          defaultEncapsulation: mergedOptions.defaultEncapsulation,\n                          logBindingUpdate: mergedOptions.useDebug\n                      });\n                  },\n                  deps: []\n              },\n              mergedOptions.providers\n          ]);\n          return injector.get(_angular_core.Compiler);\n      };\n      RuntimeCompilerFactory.decorators = [\n          { type: _angular_core.Injectable },\n      ];\n      /** @nocollapse */\n      RuntimeCompilerFactory.ctorParameters = [\n          { type: Array, decorators: [{ type: _angular_core.Inject, args: [_angular_core.COMPILER_OPTIONS,] },] },\n      ];\n      return RuntimeCompilerFactory;\n  }());\n  function _initReflector() {\n      reflector.reflectionCapabilities = new ReflectionCapabilities();\n  }\n  /**\n   * A platform that included corePlatform and the compiler.\n   *\n   * @experimental\n   */\n  var platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, 'coreDynamic', [\n      { provide: _angular_core.COMPILER_OPTIONS, useValue: {}, multi: true },\n      { provide: _angular_core.CompilerFactory, useClass: RuntimeCompilerFactory },\n      { provide: _angular_core.PLATFORM_INITIALIZER, useValue: _initReflector, multi: true },\n  ]);\n  function _mergeOptions(optionsArr) {\n      return {\n          useDebug: _lastDefined(optionsArr.map(function (options) { return options.useDebug; })),\n          useJit: _lastDefined(optionsArr.map(function (options) { return options.useJit; })),\n          defaultEncapsulation: _lastDefined(optionsArr.map(function (options) { return options.defaultEncapsulation; })),\n          providers: _mergeArrays(optionsArr.map(function (options) { return options.providers; }))\n      };\n  }\n  function _lastDefined(args) {\n      for (var i = args.length - 1; i >= 0; i--) {\n          if (args[i] !== undefined) {\n              return args[i];\n          }\n      }\n      return undefined;\n  }\n  function _mergeArrays(parts) {\n      var result = [];\n      parts.forEach(function (part) { return part && result.push.apply(result, part); });\n      return result;\n  }\n\n  /**\n   * @license\n   * Copyright Google Inc. All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  // asset:<package-name>/<realm>/<path-to-module>\n  var _ASSET_URL_RE = /asset:([^\\/]+)\\/([^\\/]+)\\/(.+)/;\n  /**\n   * Interface that defines how import statements should be generated.\n   */\n  var ImportGenerator = (function () {\n      function ImportGenerator() {\n      }\n      ImportGenerator.parseAssetUrl = function (url) { return AssetUrl.parse(url); };\n      return ImportGenerator;\n  }());\n  var AssetUrl = (function () {\n      function AssetUrl(packageName, firstLevelDir, modulePath) {\n          this.packageName = packageName;\n          this.firstLevelDir = firstLevelDir;\n          this.modulePath = modulePath;\n      }\n      AssetUrl.parse = function (url, allowNonMatching) {\n          if (allowNonMatching === void 0) { allowNonMatching = true; }\n          var match = url.match(_ASSET_URL_RE);\n          if (match !== null) {\n              return new AssetUrl(match[1], match[2], match[3]);\n          }\n          if (allowNonMatching) {\n              return null;\n          }\n          throw new Error(\"Url \" + url + \" is not a valid asset: url\");\n      };\n      return AssetUrl;\n  }());\n\n  var __compiler_private__ = {\n      SelectorMatcher: SelectorMatcher,\n      CssSelector: CssSelector,\n      AssetUrl: AssetUrl,\n      ImportGenerator: ImportGenerator,\n      CompileMetadataResolver: CompileMetadataResolver,\n      HtmlParser: HtmlParser,\n      InterpolationConfig: InterpolationConfig,\n      DirectiveNormalizer: DirectiveNormalizer,\n      Lexer: Lexer,\n      Parser: Parser,\n      ParseLocation: ParseLocation,\n      ParseError: ParseError,\n      ParseErrorLevel: ParseErrorLevel,\n      ParseSourceFile: ParseSourceFile,\n      ParseSourceSpan: ParseSourceSpan,\n      TemplateParser: TemplateParser,\n      DomElementSchemaRegistry: DomElementSchemaRegistry,\n      StyleCompiler: StyleCompiler,\n      ViewCompiler: ViewCompiler,\n      NgModuleCompiler: NgModuleCompiler,\n      TypeScriptEmitter: TypeScriptEmitter\n  };\n\n  exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;\n  exports.CompileDiDependencyMetadata = CompileDiDependencyMetadata;\n  exports.CompileDirectiveMetadata = CompileDirectiveMetadata;\n  exports.CompileFactoryMetadata = CompileFactoryMetadata;\n  exports.CompileIdentifierMetadata = CompileIdentifierMetadata;\n  exports.CompileMetadataWithIdentifier = CompileMetadataWithIdentifier;\n  exports.CompilePipeMetadata = CompilePipeMetadata;\n  exports.CompileProviderMetadata = CompileProviderMetadata;\n  exports.CompileQueryMetadata = CompileQueryMetadata;\n  exports.CompileTemplateMetadata = CompileTemplateMetadata;\n  exports.CompileTokenMetadata = CompileTokenMetadata;\n  exports.CompileTypeMetadata = CompileTypeMetadata;\n  exports.CompilerConfig = CompilerConfig;\n  exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;\n  exports.DirectiveResolver = DirectiveResolver;\n  exports.NgModuleResolver = NgModuleResolver;\n  exports.OfflineCompiler = OfflineCompiler;\n  exports.PipeResolver = PipeResolver;\n  exports.RenderTypes = RenderTypes;\n  exports.ResourceLoader = ResourceLoader;\n  exports.RuntimeCompiler = RuntimeCompiler;\n  exports.SourceModule = SourceModule;\n  exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;\n  exports.UrlResolver = UrlResolver;\n  exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;\n  exports.platformCoreDynamic = platformCoreDynamic;\n  exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;\n  exports.InterpolationConfig = InterpolationConfig;\n  exports.ElementSchemaRegistry = ElementSchemaRegistry;\n  exports.I18NHtmlParser = I18NHtmlParser;\n  exports.MessageBundle = MessageBundle;\n  exports.Xliff = Xliff;\n  exports.Xmb = Xmb;\n  exports.Xtb = Xtb;\n  exports.TextAst = TextAst;\n  exports.BoundTextAst = BoundTextAst;\n  exports.AttrAst = AttrAst;\n  exports.BoundElementPropertyAst = BoundElementPropertyAst;\n  exports.BoundEventAst = BoundEventAst;\n  exports.ReferenceAst = ReferenceAst;\n  exports.VariableAst = VariableAst;\n  exports.ElementAst = ElementAst;\n  exports.EmbeddedTemplateAst = EmbeddedTemplateAst;\n  exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;\n  exports.DirectiveAst = DirectiveAst;\n  exports.ProviderAst = ProviderAst;\n  exports.NgContentAst = NgContentAst;\n  exports.templateVisitAll = templateVisitAll;\n  exports.__compiler_private__ = __compiler_private__;\n\n}));\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * @license Angular v2.0.0-rc.6\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n     true ? factory(exports, __webpack_require__(4), __webpack_require__(5)) :\n    typeof define === 'function' && define.amd ? define(['exports', 'rxjs/Subject', 'rxjs/Observable'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}),global.Rx,global.Rx));\n}(this, function (exports,rxjs_Subject,rxjs_Observable) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var globalScope;\n    if (typeof window === 'undefined') {\n        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n            globalScope = self;\n        }\n        else {\n            globalScope = global;\n        }\n    }\n    else {\n        globalScope = window;\n    }\n    function scheduleMicroTask(fn) {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n    // Need to declare a new variable for global here since TypeScript\n    // exports the original value of the symbol.\n    var global$1 = globalScope;\n    function getTypeNameForDebugging(type) {\n        if (type['name']) {\n            return type['name'];\n        }\n        return typeof type;\n    }\n    var Math = global$1.Math;\n    // TODO: remove calls to assert in production environment\n    // Note: Can't just export this and import in in other files\n    // as `assert` is a reserved keyword in Dart\n    global$1.assert = function assert(condition) {\n        // TODO: to be fixed properly via #2830, noop for now\n    };\n    function isPresent(obj) {\n        return obj !== undefined && obj !== null;\n    }\n    function isBlank(obj) {\n        return obj === undefined || obj === null;\n    }\n    function isString(obj) {\n        return typeof obj === 'string';\n    }\n    function isFunction(obj) {\n        return typeof obj === 'function';\n    }\n    function isPromise(obj) {\n        // allow any Promise/A+ compliant thenable.\n        // It's up to the caller to ensure that obj.then conforms to the spec\n        return isPresent(obj) && isFunction(obj.then);\n    }\n    function isArray(obj) {\n        return Array.isArray(obj);\n    }\n    function stringify(token) {\n        if (typeof token === 'string') {\n            return token;\n        }\n        if (token === undefined || token === null) {\n            return '' + token;\n        }\n        if (token.overriddenName) {\n            return token.overriddenName;\n        }\n        if (token.name) {\n            return token.name;\n        }\n        var res = token.toString();\n        var newLineIndex = res.indexOf('\\n');\n        return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);\n    }\n    var StringWrapper = (function () {\n        function StringWrapper() {\n        }\n        StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };\n        StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };\n        StringWrapper.split = function (s, regExp) { return s.split(regExp); };\n        StringWrapper.equals = function (s, s2) { return s === s2; };\n        StringWrapper.stripLeft = function (s, charVal) {\n            if (s && s.length) {\n                var pos = 0;\n                for (var i = 0; i < s.length; i++) {\n                    if (s[i] != charVal)\n                        break;\n                    pos++;\n                }\n                s = s.substring(pos);\n            }\n            return s;\n        };\n        StringWrapper.stripRight = function (s, charVal) {\n            if (s && s.length) {\n                var pos = s.length;\n                for (var i = s.length - 1; i >= 0; i--) {\n                    if (s[i] != charVal)\n                        break;\n                    pos--;\n                }\n                s = s.substring(0, pos);\n            }\n            return s;\n        };\n        StringWrapper.replace = function (s, from, replace) {\n            return s.replace(from, replace);\n        };\n        StringWrapper.replaceAll = function (s, from, replace) {\n            return s.replace(from, replace);\n        };\n        StringWrapper.slice = function (s, from, to) {\n            if (from === void 0) { from = 0; }\n            if (to === void 0) { to = null; }\n            return s.slice(from, to === null ? undefined : to);\n        };\n        StringWrapper.replaceAllMapped = function (s, from, cb) {\n            return s.replace(from, function () {\n                var matches = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    matches[_i - 0] = arguments[_i];\n                }\n                // Remove offset & string from the result array\n                matches.splice(-2, 2);\n                // The callback receives match, p1, ..., pn\n                return cb(matches);\n            });\n        };\n        StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };\n        StringWrapper.compare = function (a, b) {\n            if (a < b) {\n                return -1;\n            }\n            else if (a > b) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        };\n        return StringWrapper;\n    }());\n    var NumberWrapper = (function () {\n        function NumberWrapper() {\n        }\n        NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };\n        NumberWrapper.equal = function (a, b) { return a === b; };\n        NumberWrapper.parseIntAutoRadix = function (text) {\n            var result = parseInt(text);\n            if (isNaN(result)) {\n                throw new Error('Invalid integer literal when parsing ' + text);\n            }\n            return result;\n        };\n        NumberWrapper.parseInt = function (text, radix) {\n            if (radix == 10) {\n                if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n                    return parseInt(text, radix);\n                }\n            }\n            else if (radix == 16) {\n                if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n                    return parseInt(text, radix);\n                }\n            }\n            else {\n                var result = parseInt(text, radix);\n                if (!isNaN(result)) {\n                    return result;\n                }\n            }\n            throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);\n        };\n        // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.\n        NumberWrapper.parseFloat = function (text) { return parseFloat(text); };\n        Object.defineProperty(NumberWrapper, \"NaN\", {\n            get: function () { return NaN; },\n            enumerable: true,\n            configurable: true\n        });\n        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\n        NumberWrapper.isNaN = function (value) { return isNaN(value); };\n        NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };\n        return NumberWrapper;\n    }());\n    // JS has NaN !== NaN\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n    // JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)\n    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n    function getMapKey(value) {\n        return value;\n    }\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n    function print(obj) {\n        console.log(obj);\n    }\n    function warn(obj) {\n        console.warn(obj);\n    }\n    var _symbolIterator = null;\n    function getSymbolIterator() {\n        if (isBlank(_symbolIterator)) {\n            if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {\n                _symbolIterator = Symbol.iterator;\n            }\n            else {\n                // es6-shim specific logic\n                var keys = Object.getOwnPropertyNames(Map.prototype);\n                for (var i = 0; i < keys.length; ++i) {\n                    var key = keys[i];\n                    if (key !== 'entries' && key !== 'size' &&\n                        Map.prototype[key] === Map.prototype['entries']) {\n                        _symbolIterator = key;\n                    }\n                }\n            }\n        }\n        return _symbolIterator;\n    }\n    function isPrimitive(obj) {\n        return !isJsObject(obj);\n    }\n\n    /**\n     * Allows to refer to references which are not yet defined.\n     *\n     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n     * DI is declared,\n     * but not yet defined. It is also used when the `token` which we use when creating a query is not\n     * yet defined.\n     *\n     * ### Example\n     * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n     * @experimental\n     */\n    function forwardRef(forwardRefFn) {\n        forwardRefFn.__forward_ref__ = forwardRef;\n        forwardRefFn.toString = function () { return stringify(this()); };\n        return forwardRefFn;\n    }\n    /**\n     * Lazily retrieves the reference value from a forwardRef.\n     *\n     * Acts as the identity function when given a non-forward-ref value.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\n     *\n     * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n     *\n     * See: {@link forwardRef}\n     * @experimental\n     */\n    function resolveForwardRef(type) {\n        if (isFunction(type) && type.hasOwnProperty('__forward_ref__') &&\n            type.__forward_ref__ === forwardRef) {\n            return type();\n        }\n        else {\n            return type;\n        }\n    }\n\n    /**\n     * A parameter metadata that specifies a dependency.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/6uHYJK?p=preview))\n     *\n     * ```typescript\n     * class Engine {}\n     *\n     * @Injectable()\n     * class Car {\n     *   engine;\n     *   constructor(@Inject(\"MyEngine\") engine:Engine) {\n     *     this.engine = engine;\n     *   }\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([\n     *  {provide: \"MyEngine\", useClass: Engine},\n     *  Car\n     * ]);\n     *\n     * expect(injector.get(Car).engine instanceof Engine).toBe(true);\n     * ```\n     *\n     * When `@Inject()` is not present, {@link Injector} will use the type annotation of the parameter.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * class Engine {}\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine: Engine) {} //same as constructor(@Inject(Engine) engine:Engine)\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([Engine, Car]);\n     * expect(injector.get(Car).engine instanceof Engine).toBe(true);\n     * ```\n     * @stable\n     */\n    var InjectMetadata = (function () {\n        function InjectMetadata(token) {\n            this.token = token;\n        }\n        InjectMetadata.prototype.toString = function () { return \"@Inject(\" + stringify(this.token) + \")\"; };\n        return InjectMetadata;\n    }());\n    /**\n     * A parameter metadata that marks a dependency as optional. {@link Injector} provides `null` if\n     * the dependency is not found.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/AsryOm?p=preview))\n     *\n     * ```typescript\n     * class Engine {}\n     *\n     * @Injectable()\n     * class Car {\n     *   engine;\n     *   constructor(@Optional() engine:Engine) {\n     *     this.engine = engine;\n     *   }\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([Car]);\n     * expect(injector.get(Car).engine).toBeNull();\n     * ```\n     * @stable\n     */\n    var OptionalMetadata = (function () {\n        function OptionalMetadata() {\n        }\n        OptionalMetadata.prototype.toString = function () { return \"@Optional()\"; };\n        return OptionalMetadata;\n    }());\n    /**\n     * `DependencyMetadata` is used by the framework to extend DI.\n     * This is internal to Angular and should not be used directly.\n     * @stable\n     */\n    var DependencyMetadata = (function () {\n        function DependencyMetadata() {\n        }\n        Object.defineProperty(DependencyMetadata.prototype, \"token\", {\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        return DependencyMetadata;\n    }());\n    /**\n     * A marker metadata that marks a class as available to {@link Injector} for creation.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Wk4DMQ?p=preview))\n     *\n     * ```typescript\n     * @Injectable()\n     * class UsefulService {}\n     *\n     * @Injectable()\n     * class NeedsService {\n     *   constructor(public service:UsefulService) {}\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);\n     * expect(injector.get(NeedsService).service instanceof UsefulService).toBe(true);\n     * ```\n     * {@link Injector} will throw {@link NoAnnotationError} when trying to instantiate a class that\n     * does not have `@Injectable` marker, as shown in the example below.\n     *\n     * ```typescript\n     * class UsefulService {}\n     *\n     * class NeedsService {\n     *   constructor(public service:UsefulService) {}\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);\n     * expect(() => injector.get(NeedsService)).toThrowError();\n     * ```\n     * @stable\n     */\n    var InjectableMetadata = (function () {\n        function InjectableMetadata() {\n        }\n        return InjectableMetadata;\n    }());\n    /**\n     * Specifies that an {@link Injector} should retrieve a dependency only from itself.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/NeagAg?p=preview))\n     *\n     * ```typescript\n     * class Dependency {\n     * }\n     *\n     * @Injectable()\n     * class NeedsDependency {\n     *   dependency;\n     *   constructor(@Self() dependency:Dependency) {\n     *     this.dependency = dependency;\n     *   }\n     * }\n     *\n     * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);\n     * var nd = inj.get(NeedsDependency);\n     *\n     * expect(nd.dependency instanceof Dependency).toBe(true);\n     *\n     * var inj = Injector.resolveAndCreate([Dependency]);\n     * var child = inj.resolveAndCreateChild([NeedsDependency]);\n     * expect(() => child.get(NeedsDependency)).toThrowError();\n     * ```\n     * @stable\n     */\n    var SelfMetadata = (function () {\n        function SelfMetadata() {\n        }\n        SelfMetadata.prototype.toString = function () { return \"@Self()\"; };\n        return SelfMetadata;\n    }());\n    /**\n     * Specifies that the dependency resolution should start from the parent injector.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Wchdzb?p=preview))\n     *\n     * ```typescript\n     * class Dependency {\n     * }\n     *\n     * @Injectable()\n     * class NeedsDependency {\n     *   dependency;\n     *   constructor(@SkipSelf() dependency:Dependency) {\n     *     this.dependency = dependency;\n     *   }\n     * }\n     *\n     * var parent = Injector.resolveAndCreate([Dependency]);\n     * var child = parent.resolveAndCreateChild([NeedsDependency]);\n     * expect(child.get(NeedsDependency).dependency instanceof Depedency).toBe(true);\n     *\n     * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);\n     * expect(() => inj.get(NeedsDependency)).toThrowError();\n     * ```\n     * @stable\n     */\n    var SkipSelfMetadata = (function () {\n        function SkipSelfMetadata() {\n        }\n        SkipSelfMetadata.prototype.toString = function () { return \"@SkipSelf()\"; };\n        return SkipSelfMetadata;\n    }());\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * closest host.\n     *\n     * In Angular, a component element is automatically declared as a host for all the injectors in\n     * its view.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/GX79pV?p=preview))\n     *\n     * In the following example `App` contains `ParentCmp`, which contains `ChildDirective`.\n     * So `ParentCmp` is the host of `ChildDirective`.\n     *\n     * `ChildDirective` depends on two services: `HostService` and `OtherService`.\n     * `HostService` is defined at `ParentCmp`, and `OtherService` is defined at `App`.\n     *\n     *```typescript\n     * class OtherService {}\n     * class HostService {}\n     *\n     * @Directive({\n     *   selector: 'child-directive'\n     * })\n     * class ChildDirective {\n     *   constructor(@Optional() @Host() os:OtherService, @Optional() @Host() hs:HostService){\n     *     console.log(\"os is null\", os);\n     *     console.log(\"hs is NOT null\", hs);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'parent-cmp',\n     *   providers: [HostService],\n     *   template: `\n     *     Dir: <child-directive></child-directive>\n     *   `,\n     *   directives: [ChildDirective]\n     * })\n     * class ParentCmp {\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   providers: [OtherService],\n     *   template: `\n     *     Parent: <parent-cmp></parent-cmp>\n     *   `,\n     *   directives: [ParentCmp]\n     * })\n     * class App {\n     * }\n     *```\n     * @stable\n     */\n    var HostMetadata = (function () {\n        function HostMetadata() {\n        }\n        HostMetadata.prototype.toString = function () { return \"@Host()\"; };\n        return HostMetadata;\n    }());\n\n    var _nextClassId = 0;\n    function extractAnnotation(annotation) {\n        if (isFunction(annotation) && annotation.hasOwnProperty('annotation')) {\n            // it is a decorator, extract annotation\n            annotation = annotation.annotation;\n        }\n        return annotation;\n    }\n    function applyParams(fnOrArray, key) {\n        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||\n            fnOrArray === Number || fnOrArray === Array) {\n            throw new Error(\"Can not use native \" + stringify(fnOrArray) + \" as constructor\");\n        }\n        if (isFunction(fnOrArray)) {\n            return fnOrArray;\n        }\n        else if (fnOrArray instanceof Array) {\n            var annotations = fnOrArray;\n            var annoLength = annotations.length - 1;\n            var fn = fnOrArray[annoLength];\n            if (!isFunction(fn)) {\n                throw new Error(\"Last position of Class method array must be Function in key \" + key + \" was '\" + stringify(fn) + \"'\");\n            }\n            if (annoLength != fn.length) {\n                throw new Error(\"Number of annotations (\" + annoLength + \") does not match number of arguments (\" + fn.length + \") in the function: \" + stringify(fn));\n            }\n            var paramsAnnotations = [];\n            for (var i = 0, ii = annotations.length - 1; i < ii; i++) {\n                var paramAnnotations = [];\n                paramsAnnotations.push(paramAnnotations);\n                var annotation = annotations[i];\n                if (annotation instanceof Array) {\n                    for (var j = 0; j < annotation.length; j++) {\n                        paramAnnotations.push(extractAnnotation(annotation[j]));\n                    }\n                }\n                else if (isFunction(annotation)) {\n                    paramAnnotations.push(extractAnnotation(annotation));\n                }\n                else {\n                    paramAnnotations.push(annotation);\n                }\n            }\n            Reflect.defineMetadata('parameters', paramsAnnotations, fn);\n            return fn;\n        }\n        else {\n            throw new Error(\"Only Function or Array is supported in Class definition for key '\" + key + \"' is '\" + stringify(fnOrArray) + \"'\");\n        }\n    }\n    /**\n     * Provides a way for expressing ES6 classes with parameter annotations in ES5.\n     *\n     * ## Basic Example\n     *\n     * ```\n     * var Greeter = ng.Class({\n     *   constructor: function(name) {\n     *     this.name = name;\n     *   },\n     *\n     *   greet: function() {\n     *     alert('Hello ' + this.name + '!');\n     *   }\n     * });\n     * ```\n     *\n     * is equivalent to ES6:\n     *\n     * ```\n     * class Greeter {\n     *   constructor(name) {\n     *     this.name = name;\n     *   }\n     *\n     *   greet() {\n     *     alert('Hello ' + this.name + '!');\n     *   }\n     * }\n     * ```\n     *\n     * or equivalent to ES5:\n     *\n     * ```\n     * var Greeter = function (name) {\n     *   this.name = name;\n     * }\n     *\n     * Greeter.prototype.greet = function () {\n     *   alert('Hello ' + this.name + '!');\n     * }\n     * ```\n     *\n     * ### Example with parameter annotations\n     *\n     * ```\n     * var MyService = ng.Class({\n     *   constructor: [String, [new Query(), QueryList], function(name, queryList) {\n     *     ...\n     *   }]\n     * });\n     * ```\n     *\n     * is equivalent to ES6:\n     *\n     * ```\n     * class MyService {\n     *   constructor(name: string, @Query() queryList: QueryList) {\n     *     ...\n     *   }\n     * }\n     * ```\n     *\n     * ### Example with inheritance\n     *\n     * ```\n     * var Shape = ng.Class({\n     *   constructor: (color) {\n     *     this.color = color;\n     *   }\n     * });\n     *\n     * var Square = ng.Class({\n     *   extends: Shape,\n     *   constructor: function(color, size) {\n     *     Shape.call(this, color);\n     *     this.size = size;\n     *   }\n     * });\n     * ```\n     * @stable\n     */\n    function Class(clsDef) {\n        var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');\n        var proto = constructor.prototype;\n        if (clsDef.hasOwnProperty('extends')) {\n            if (isFunction(clsDef.extends)) {\n                constructor.prototype = proto =\n                    Object.create(clsDef.extends.prototype);\n            }\n            else {\n                throw new Error(\"Class definition 'extends' property must be a constructor function was: \" + stringify(clsDef.extends));\n            }\n        }\n        for (var key in clsDef) {\n            if (key != 'extends' && key != 'prototype' && clsDef.hasOwnProperty(key)) {\n                proto[key] = applyParams(clsDef[key], key);\n            }\n        }\n        if (this && this.annotations instanceof Array) {\n            Reflect.defineMetadata('annotations', this.annotations, constructor);\n        }\n        var constructorName = constructor['name'];\n        if (!constructorName || constructorName === 'constructor') {\n            constructor['overriddenName'] = \"class\" + _nextClassId++;\n        }\n        return constructor;\n    }\n    var Reflect = global$1.Reflect;\n    function makeDecorator(annotationCls, chainFn) {\n        if (chainFn === void 0) { chainFn = null; }\n        function DecoratorFactory(objOrType) {\n            if (!(Reflect && Reflect.getMetadata)) {\n                throw 'reflect-metadata shim is required when using class decorators';\n            }\n            var annotationInstance = new annotationCls(objOrType);\n            if (this instanceof annotationCls) {\n                return annotationInstance;\n            }\n            else {\n                var chainAnnotation = isFunction(this) && this.annotations instanceof Array ? this.annotations : [];\n                chainAnnotation.push(annotationInstance);\n                var TypeDecorator = function TypeDecorator(cls) {\n                    var annotations = Reflect.getOwnMetadata('annotations', cls) || [];\n                    annotations.push(annotationInstance);\n                    Reflect.defineMetadata('annotations', annotations, cls);\n                    return cls;\n                };\n                TypeDecorator.annotations = chainAnnotation;\n                TypeDecorator.Class = Class;\n                if (chainFn)\n                    chainFn(TypeDecorator);\n                return TypeDecorator;\n            }\n        }\n        DecoratorFactory.prototype = Object.create(annotationCls.prototype);\n        DecoratorFactory.annotationCls = annotationCls;\n        return DecoratorFactory;\n    }\n    function makeParamDecorator(annotationCls) {\n        function ParamDecoratorFactory() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var annotationInstance = Object.create(annotationCls.prototype);\n            annotationCls.apply(annotationInstance, args);\n            if (this instanceof annotationCls) {\n                return annotationInstance;\n            }\n            else {\n                ParamDecorator.annotation = annotationInstance;\n                return ParamDecorator;\n            }\n            function ParamDecorator(cls, unusedKey, index) {\n                var parameters = Reflect.getMetadata('parameters', cls) || [];\n                // there might be gaps if some in between parameters do not have annotations.\n                // we pad with nulls.\n                while (parameters.length <= index) {\n                    parameters.push(null);\n                }\n                parameters[index] = parameters[index] || [];\n                var annotationsForParam = parameters[index];\n                annotationsForParam.push(annotationInstance);\n                Reflect.defineMetadata('parameters', parameters, cls);\n                return cls;\n            }\n        }\n        ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype);\n        ParamDecoratorFactory.annotationCls = annotationCls;\n        return ParamDecoratorFactory;\n    }\n    function makePropDecorator(annotationCls) {\n        function PropDecoratorFactory() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var decoratorInstance = Object.create(annotationCls.prototype);\n            annotationCls.apply(decoratorInstance, args);\n            if (this instanceof annotationCls) {\n                return decoratorInstance;\n            }\n            else {\n                return function PropDecorator(target, name) {\n                    var meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};\n                    meta[name] = meta[name] || [];\n                    meta[name].unshift(decoratorInstance);\n                    Reflect.defineMetadata('propMetadata', meta, target.constructor);\n                };\n            }\n        }\n        PropDecoratorFactory.prototype = Object.create(annotationCls.prototype);\n        PropDecoratorFactory.annotationCls = annotationCls;\n        return PropDecoratorFactory;\n    }\n\n    /**\n     * Factory for creating {@link InjectMetadata}.\n     * @stable\n     * @Annotation\n     */\n    var Inject = makeParamDecorator(InjectMetadata);\n    /**\n     * Factory for creating {@link OptionalMetadata}.\n     * @stable\n     * @Annotation\n     */\n    var Optional = makeParamDecorator(OptionalMetadata);\n    /**\n     * Factory for creating {@link InjectableMetadata}.\n     * @stable\n     * @Annotation\n     */\n    var Injectable = makeDecorator(InjectableMetadata);\n    /**\n     * Factory for creating {@link SelfMetadata}.\n     * @stable\n     * @Annotation\n     */\n    var Self = makeParamDecorator(SelfMetadata);\n    /**\n     * Factory for creating {@link HostMetadata}.\n     * @stable\n     * @Annotation\n     */\n    var Host = makeParamDecorator(HostMetadata);\n    /**\n     * Factory for creating {@link SkipSelfMetadata}.\n     * @stable\n     * @Annotation\n     */\n    var SkipSelf = makeParamDecorator(SkipSelfMetadata);\n\n    /**\n     * Creates a token that can be used in a DI Provider.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))\n     *\n     * ```typescript\n     * var t = new OpaqueToken(\"value\");\n     *\n     * var injector = Injector.resolveAndCreate([\n     *   {provide: t, useValue: \"bindingValue\"}\n     * ]);\n     *\n     * expect(injector.get(t)).toEqual(\"bindingValue\");\n     * ```\n     *\n     * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions\n     * caused by multiple providers using the same string as two different tokens.\n     *\n     * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better\n     * error messages.\n     * @stable\n     */\n    // so that metadata is gathered for this class\n    var OpaqueToken = (function () {\n        function OpaqueToken(_desc) {\n            this._desc = _desc;\n        }\n        OpaqueToken.prototype.toString = function () { return \"Token \" + this._desc; };\n        OpaqueToken.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        OpaqueToken.ctorParameters = [\n            null,\n        ];\n        return OpaqueToken;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * This token can be used to create a virtual provider that will populate the\n     * `entryComponents` fields of components and ng modules based on its `useValue`.\n     * All components that are referenced in the `useValue` value (either directly\n     * or in a nested array or map) will be added to the `entryComponents` property.\n     *\n     * ### Example\n     * The following example shows how the router can populate the `entryComponents`\n     * field of an NgModule based on the router configuration which refers\n     * to components.\n     *\n     * ```typescript\n     * // helper function inside the router\n     * function provideRoutes(routes) {\n     *   return [\n     *     {provide: ROUTES, useValue: routes},\n     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n     *   ];\n     * }\n     *\n     * // user code\n     * let routes = [\n     *   {path: '/root', component: RootComp},\n     *   {path: /teams', component: TeamsComp}\n     * ];\n     *\n     * @NgModule({\n     *   providers: [provideRoutes(routes)]\n     * })\n     * class ModuleWithRoutes {}\n     * ```\n     *\n     * @experimental\n     */\n    var ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');\n    /**\n     * Specifies that a constant attribute value should be injected.\n     *\n     * The directive can inject constant string literals of host element attributes.\n     *\n     * ### Example\n     *\n     * Suppose we have an `<input>` element and want to know its `type`.\n     *\n     * ```html\n     * <input type=\"text\">\n     * ```\n     *\n     * A decorator can inject string literal `text` like so:\n     *\n     * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n     * @stable\n     */\n    var AttributeMetadata = (function (_super) {\n        __extends(AttributeMetadata, _super);\n        function AttributeMetadata(attributeName) {\n            _super.call(this);\n            this.attributeName = attributeName;\n        }\n        Object.defineProperty(AttributeMetadata.prototype, \"token\", {\n            get: function () {\n                // Normally one would default a token to a type of an injected value but here\n                // the type of a variable is \"string\" and we can't use primitive type as a return value\n                // so we use instance of Attribute instead. This doesn't matter much in practice as arguments\n                // with @Attribute annotation are injected by ElementInjector that doesn't take tokens into\n                // account.\n                return this;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        AttributeMetadata.prototype.toString = function () { return \"@Attribute(\" + stringify(this.attributeName) + \")\"; };\n        return AttributeMetadata;\n    }(DependencyMetadata));\n    /**\n     * Declares an injectable parameter to be a live list of directives or variable\n     * bindings from the content children of a directive.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))\n     *\n     * Assume that `<tabs>` component would like to get a list its children `<pane>`\n     * components as shown in this example:\n     *\n     * ```html\n     * <tabs>\n     *   <pane title=\"Overview\">...</pane>\n     *   <pane *ngFor=\"let o of objects\" [title]=\"o.title\">{{o.text}}</pane>\n     * </tabs>\n     * ```\n     *\n     * The preferred solution is to query for `Pane` directives using this decorator.\n     *\n     * ```javascript\n     * @Component({\n     *   selector: 'pane',\n     *   inputs: ['title']\n     * })\n     * class Pane {\n     *   title:string;\n     * }\n     *\n     * @Component({\n     *  selector: 'tabs',\n     *  template: `\n     *    <ul>\n     *      <li *ngFor=\"let pane of panes\">{{pane.title}}</li>\n     *    </ul>\n     *    <ng-content></ng-content>\n     *  `\n     * })\n     * class Tabs {\n     *   @ContentChildren(Pane) panes: QueryList<Pane>;\n     * }\n     * ```\n     *\n     * A query can look for variable bindings by passing in a string with desired binding symbol.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview))\n     * ```html\n     * <seeker>\n     *   <div #findme>...</div>\n     * </seeker>\n     *\n     * @Component({ selector: 'seeker' })\n     * class Seeker {\n     *   @ContentChildren('findme') elList;\n     * }\n     * ```\n     *\n     * In this case the object that is injected depend on the type of the variable\n     * binding. It can be an ElementRef, a directive or a component.\n     *\n     * Passing in a comma separated list of variable bindings will query for all of them.\n     *\n     * ```html\n     * <seeker>\n     *   <div #find-me>...</div>\n     *   <div #find-me-too>...</div>\n     * </seeker>\n     *\n     *  @Component({\n     *   selector: 'seeker'\n     * })\n     * class Seeker {\n     *   @ContentChildren('findMe, findMeToo') elList: QueryList<ElementRef>;\n     * }\n     * ```\n     *\n     * Configure whether query looks for direct children or all descendants\n     * of the querying element, by using the `descendants` parameter.\n     * It is set to `false` by default.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview))\n     * ```html\n     * <container #first>\n     *   <item>a</item>\n     *   <item>b</item>\n     *   <container #second>\n     *     <item>c</item>\n     *   </container>\n     * </container>\n     * ```\n     *\n     * When querying for items, the first container will see only `a` and `b` by default,\n     * but with `ContentChildren(TextDirective, {descendants: true})` it will see `c` too.\n     *\n     * The queried directives are kept in a depth-first pre-order with respect to their\n     * positions in the DOM.\n     *\n     * ContentChildren does not look deep into any subcomponent views.\n     *\n     * ContentChildren is updated as part of the change-detection cycle. Since change detection\n     * happens after construction of a directive, QueryList will always be empty when observed in the\n     * constructor.\n     *\n     * The injected object is an unmodifiable live list.\n     * See {@link QueryList} for more details.\n     * @stable\n     */\n    var QueryMetadata = (function (_super) {\n        __extends(QueryMetadata, _super);\n        function QueryMetadata(_selector, _a) {\n            var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d, _e = _b.read, read = _e === void 0 ? null : _e;\n            _super.call(this);\n            this._selector = _selector;\n            this.descendants = descendants;\n            this.first = first;\n            this.read = read;\n        }\n        Object.defineProperty(QueryMetadata.prototype, \"isViewQuery\", {\n            /**\n             * always `false` to differentiate it with {@link ViewQueryMetadata}.\n             */\n            get: function () { return false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryMetadata.prototype, \"selector\", {\n            /**\n             * what this is querying for.\n             */\n            get: function () { return resolveForwardRef(this._selector); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryMetadata.prototype, \"isVarBindingQuery\", {\n            /**\n             * whether this is querying for a variable binding or a directive.\n             */\n            get: function () { return isString(this.selector); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryMetadata.prototype, \"varBindings\", {\n            /**\n             * returns a list of variable bindings this is querying for.\n             * Only applicable if this is a variable bindings query.\n             */\n            get: function () { return StringWrapper.split(this.selector, /\\s*,\\s*/g); },\n            enumerable: true,\n            configurable: true\n        });\n        QueryMetadata.prototype.toString = function () { return \"@Query(\" + stringify(this.selector) + \")\"; };\n        return QueryMetadata;\n    }(DependencyMetadata));\n    // TODO: add an example after ContentChildren and ViewChildren are in master\n    /**\n     * Configures a content query.\n     *\n     * Content queries are set before the `ngAfterContentInit` callback is called.\n     *\n     * ### Example\n     *\n     * ```\n     * @Directive({\n     *   selector: 'someDir'\n     * })\n     * class SomeDir {\n     *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;\n     *\n     *   ngAfterContentInit() {\n     *     // contentChildren is set\n     *   }\n     * }\n     * ```\n     * @stable\n     */\n    var ContentChildrenMetadata = (function (_super) {\n        __extends(ContentChildrenMetadata, _super);\n        function ContentChildrenMetadata(_selector, _a) {\n            var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.read, read = _d === void 0 ? null : _d;\n            _super.call(this, _selector, { descendants: descendants, read: read });\n        }\n        return ContentChildrenMetadata;\n    }(QueryMetadata));\n    // TODO: add an example after ContentChild and ViewChild are in master\n    /**\n     * Configures a content query.\n     *\n     * Content queries are set before the `ngAfterContentInit` callback is called.\n     *\n     * ### Example\n     *\n     * ```\n     * @Directive({\n     *   selector: 'someDir'\n     * })\n     * class SomeDir {\n     *   @ContentChild(ChildDirective) contentChild;\n     *\n     *   ngAfterContentInit() {\n     *     // contentChild is set\n     *   }\n     * }\n     * ```\n     * @stable\n     */\n    var ContentChildMetadata = (function (_super) {\n        __extends(ContentChildMetadata, _super);\n        function ContentChildMetadata(_selector, _a) {\n            var _b = (_a === void 0 ? {} : _a).read, read = _b === void 0 ? null : _b;\n            _super.call(this, _selector, { descendants: true, first: true, read: read });\n        }\n        return ContentChildMetadata;\n    }(QueryMetadata));\n    /**\n     * Similar to {@link ContentChildMetadata}, but querying the component view, instead\n     * of the content children.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview))\n     *\n     * ```javascript\n     * @Component({\n     *   ...,\n     *   template: `\n     *     <item> a </item>\n     *     <item> b </item>\n     *     <item> c </item>\n     *   `\n     * })\n     * class MyComponent {\n     *   shown: boolean;\n     *\n     *   constructor(private @ViewChildren(Item) items:QueryList<Item>) {\n     *     items.changes.subscribe(() => console.log(items.length));\n     *   }\n     * }\n     * ```\n     *\n     * As `shown` is flipped between true and false, items will contain zero of one\n     * items.\n     *\n     * Specifies that a {@link QueryList} should be injected.\n     *\n     * The injected object is an iterable and observable live list.\n     * See {@link QueryList} for more details.\n     * @stable\n     */\n    var ViewQueryMetadata = (function (_super) {\n        __extends(ViewQueryMetadata, _super);\n        function ViewQueryMetadata(_selector, _a) {\n            var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d, _e = _b.read, read = _e === void 0 ? null : _e;\n            _super.call(this, _selector, { descendants: descendants, first: first, read: read });\n        }\n        Object.defineProperty(ViewQueryMetadata.prototype, \"isViewQuery\", {\n            /**\n             * always `true` to differentiate it with {@link QueryMetadata}.\n             */\n            get: function () { return true; },\n            enumerable: true,\n            configurable: true\n        });\n        return ViewQueryMetadata;\n    }(QueryMetadata));\n    /**\n     * Declares a list of child element references.\n     *\n     * Angular automatically updates the list when the DOM is updated.\n     *\n     * `ViewChildren` takes an argument to select elements.\n     *\n     * - If the argument is a type, directives or components with the type will be bound.\n     *\n     * - If the argument is a string, the string is interpreted as a list of comma-separated selectors.\n     * For each selector, an element containing the matching template variable (e.g. `#child`) will be\n     * bound.\n     *\n     * View children are set before the `ngAfterViewInit` callback is called.\n     *\n     * ### Example\n     *\n     * With type selector:\n     *\n     * ```\n     * @Component({\n     *   selector: 'child-cmp',\n     *   template: '<p>child</p>'\n     * })\n     * class ChildCmp {\n     *   doSomething() {}\n     * }\n     *\n     * @Component({\n     *   selector: 'some-cmp',\n     *   template: `\n     *     <child-cmp></child-cmp>\n     *     <child-cmp></child-cmp>\n     *     <child-cmp></child-cmp>\n     *   `,\n     *   directives: [ChildCmp]\n     * })\n     * class SomeCmp {\n     *   @ViewChildren(ChildCmp) children:QueryList<ChildCmp>;\n     *\n     *   ngAfterViewInit() {\n     *     // children are set\n     *     this.children.toArray().forEach((child)=>child.doSomething());\n     *   }\n     * }\n     * ```\n     *\n     * With string selector:\n     *\n     * ```\n     * @Component({\n     *   selector: 'child-cmp',\n     *   template: '<p>child</p>'\n     * })\n     * class ChildCmp {\n     *   doSomething() {}\n     * }\n     *\n     * @Component({\n     *   selector: 'some-cmp',\n     *   template: `\n     *     <child-cmp #child1></child-cmp>\n     *     <child-cmp #child2></child-cmp>\n     *     <child-cmp #child3></child-cmp>\n     *   `,\n     *   directives: [ChildCmp]\n     * })\n     * class SomeCmp {\n     *   @ViewChildren('child1,child2,child3') children:QueryList<ChildCmp>;\n     *\n     *   ngAfterViewInit() {\n     *     // children are set\n     *     this.children.toArray().forEach((child)=>child.doSomething());\n     *   }\n     * }\n     * ```\n     * @stable\n     */\n    var ViewChildrenMetadata = (function (_super) {\n        __extends(ViewChildrenMetadata, _super);\n        function ViewChildrenMetadata(_selector, _a) {\n            var _b = (_a === void 0 ? {} : _a).read, read = _b === void 0 ? null : _b;\n            _super.call(this, _selector, { descendants: true, read: read });\n        }\n        ViewChildrenMetadata.prototype.toString = function () { return \"@ViewChildren(\" + stringify(this.selector) + \")\"; };\n        return ViewChildrenMetadata;\n    }(ViewQueryMetadata));\n    /**\n     *\n     * Declares a reference of child element.\n     *\n     * `ViewChildren` takes an argument to select elements.\n     *\n     * - If the argument is a type, a directive or a component with the type will be bound.\n     *\n     If the argument is a string, the string is interpreted as a selector. An element containing the\n     matching template variable (e.g. `#child`) will be bound.\n     *\n     * In either case, `@ViewChild()` assigns the first (looking from above) element if there are\n     multiple matches.\n     *\n     * View child is set before the `ngAfterViewInit` callback is called.\n     *\n     * ### Example\n     *\n     * With type selector:\n     *\n     * ```\n     * @Component({\n     *   selector: 'child-cmp',\n     *   template: '<p>child</p>'\n     * })\n     * class ChildCmp {\n     *   doSomething() {}\n     * }\n     *\n     * @Component({\n     *   selector: 'some-cmp',\n     *   template: '<child-cmp></child-cmp>',\n     *   directives: [ChildCmp]\n     * })\n     * class SomeCmp {\n     *   @ViewChild(ChildCmp) child:ChildCmp;\n     *\n     *   ngAfterViewInit() {\n     *     // child is set\n     *     this.child.doSomething();\n     *   }\n     * }\n     * ```\n     *\n     * With string selector:\n     *\n     * ```\n     * @Component({\n     *   selector: 'child-cmp',\n     *   template: '<p>child</p>'\n     * })\n     * class ChildCmp {\n     *   doSomething() {}\n     * }\n     *\n     * @Component({\n     *   selector: 'some-cmp',\n     *   template: '<child-cmp #child></child-cmp>',\n     *   directives: [ChildCmp]\n     * })\n     * class SomeCmp {\n     *   @ViewChild('child') child:ChildCmp;\n     *\n     *   ngAfterViewInit() {\n     *     // child is set\n     *     this.child.doSomething();\n     *   }\n     * }\n     * ```\n     * @stable\n     */\n    var ViewChildMetadata = (function (_super) {\n        __extends(ViewChildMetadata, _super);\n        function ViewChildMetadata(_selector, _a) {\n            var _b = (_a === void 0 ? {} : _a).read, read = _b === void 0 ? null : _b;\n            _super.call(this, _selector, { descendants: true, first: true, read: read });\n        }\n        return ViewChildMetadata;\n    }(ViewQueryMetadata));\n\n    /**\n     * Describes within the change detector which strategy will be used the next time change\n     * detection is triggered.\n     * @stable\n     */\n    exports.ChangeDetectionStrategy;\n    (function (ChangeDetectionStrategy) {\n        /**\n         * `OnPush` means that the change detector's mode will be set to `CheckOnce` during hydration.\n         */\n        ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n        /**\n         * `Default` means that the change detector's mode will be set to `CheckAlways` during hydration.\n         */\n        ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n    })(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));\n    /**\n     * Describes the status of the detector.\n     */\n    var ChangeDetectorStatus;\n    (function (ChangeDetectorStatus) {\n        /**\n         * `CheckedOnce` means that after calling detectChanges the mode of the change detector\n         * will become `Checked`.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"CheckOnce\"] = 0] = \"CheckOnce\";\n        /**\n         * `Checked` means that the change detector should be skipped until its mode changes to\n         * `CheckOnce`.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Checked\"] = 1] = \"Checked\";\n        /**\n         * `CheckAlways` means that after calling detectChanges the mode of the change detector\n         * will remain `CheckAlways`.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"CheckAlways\"] = 2] = \"CheckAlways\";\n        /**\n         * `Detached` means that the change detector sub tree is not a part of the main tree and\n         * should be skipped.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Detached\"] = 3] = \"Detached\";\n        /**\n         * `Errored` means that the change detector encountered an error checking a binding\n         * or calling a directive lifecycle method and is now in an inconsistent state. Change\n         * detectors in this state will no longer detect changes.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Errored\"] = 4] = \"Errored\";\n        /**\n         * `Destroyed` means that the change detector is destroyed.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Destroyed\"] = 5] = \"Destroyed\";\n    })(ChangeDetectorStatus || (ChangeDetectorStatus = {}));\n    /**\n     * List of possible {@link ChangeDetectionStrategy} values.\n     */\n    var CHANGE_DETECTION_STRATEGY_VALUES = [\n        exports.ChangeDetectionStrategy.OnPush,\n        exports.ChangeDetectionStrategy.Default,\n    ];\n    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n        return isBlank(changeDetectionStrategy) ||\n            changeDetectionStrategy === exports.ChangeDetectionStrategy.Default;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    function unimplemented() {\n        throw new Error('unimplemented');\n    }\n    /**\n     * @stable\n     */\n    var BaseError = (function (_super) {\n        __extends$2(BaseError, _super);\n        function BaseError(message) {\n            // Errors don't use current this, instead they create a new instance.\n            // We have to do forward all of our api to the nativeInstance.\n            var nativeError = _super.call(this, message);\n            this._nativeError = nativeError;\n        }\n        Object.defineProperty(BaseError.prototype, \"message\", {\n            get: function () { return this._nativeError.message; },\n            set: function (message) { this._nativeError.message = message; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BaseError.prototype, \"name\", {\n            get: function () { return this._nativeError.name; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BaseError.prototype, \"stack\", {\n            get: function () { return this._nativeError.stack; },\n            set: function (value) { this._nativeError.stack = value; },\n            enumerable: true,\n            configurable: true\n        });\n        BaseError.prototype.toString = function () { return this._nativeError.toString(); };\n        return BaseError;\n    }(Error));\n    /**\n     * @stable\n     */\n    var WrappedError = (function (_super) {\n        __extends$2(WrappedError, _super);\n        function WrappedError(message, error) {\n            _super.call(this, message + \" caused by: \" + (error instanceof Error ? error.message : error));\n            this.originalError = error;\n        }\n        Object.defineProperty(WrappedError.prototype, \"stack\", {\n            get: function () {\n                return (this.originalError instanceof Error ? this.originalError : this._nativeError)\n                    .stack;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return WrappedError;\n    }(BaseError));\n\n    var _THROW_IF_NOT_FOUND = new Object();\n    var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    var _NullInjector = (function () {\n        function _NullInjector() {\n        }\n        _NullInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n            if (notFoundValue === _THROW_IF_NOT_FOUND) {\n                throw new Error(\"No provider for \" + stringify(token) + \"!\");\n            }\n            return notFoundValue;\n        };\n        return _NullInjector;\n    }());\n    /**\n     * @stable\n     */\n    var Injector = (function () {\n        function Injector() {\n        }\n        /**\n         * Retrieves an instance from the injector based on the provided token.\n         * If not found:\n         * - Throws {@link NoProviderError} if no `notFoundValue` that is not equal to\n         * Injector.THROW_IF_NOT_FOUND is given\n         * - Returns the `notFoundValue` otherwise\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/HeXSHg?p=preview))\n         *\n         * ```typescript\n         * var injector = ReflectiveInjector.resolveAndCreate([\n         *   {provide: \"validToken\", useValue: \"Value\"}\n         * ]);\n         * expect(injector.get(\"validToken\")).toEqual(\"Value\");\n         * expect(() => injector.get(\"invalidToken\")).toThrowError();\n         * ```\n         *\n         * `Injector` returns itself when given `Injector` as a token.\n         *\n         * ```typescript\n         * var injector = ReflectiveInjector.resolveAndCreate([]);\n         * expect(injector.get(Injector)).toBe(injector);\n         * ```\n         */\n        Injector.prototype.get = function (token, notFoundValue) { return unimplemented(); };\n        Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n        Injector.NULL = new _NullInjector();\n        return Injector;\n    }());\n\n    var Map$1 = global$1.Map;\n    var Set = global$1.Set;\n    // Safari and Internet Explorer do not support the iterable parameter to the\n    // Map constructor.  We work around that by manually adding the items.\n    var createMapFromPairs = (function () {\n        try {\n            if (new Map$1([[1, 2]]).size === 1) {\n                return function createMapFromPairs(pairs) { return new Map$1(pairs); };\n            }\n        }\n        catch (e) {\n        }\n        return function createMapAndPopulateFromPairs(pairs) {\n            var map = new Map$1();\n            for (var i = 0; i < pairs.length; i++) {\n                var pair = pairs[i];\n                map.set(pair[0], pair[1]);\n            }\n            return map;\n        };\n    })();\n    var createMapFromMap = (function () {\n        try {\n            if (new Map$1(new Map$1())) {\n                return function createMapFromMap(m) { return new Map$1(m); };\n            }\n        }\n        catch (e) {\n        }\n        return function createMapAndPopulateFromMap(m) {\n            var map = new Map$1();\n            m.forEach(function (v, k) { map.set(k, v); });\n            return map;\n        };\n    })();\n    var _clearValues = (function () {\n        if ((new Map$1()).keys().next) {\n            return function _clearValues(m) {\n                var keyIterator = m.keys();\n                var k;\n                while (!((k = keyIterator.next()).done)) {\n                    m.set(k.value, null);\n                }\n            };\n        }\n        else {\n            return function _clearValuesWithForeEach(m) {\n                m.forEach(function (v, k) { m.set(k, null); });\n            };\n        }\n    })();\n    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from\n    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from\n    var _arrayFromMap = (function () {\n        try {\n            if ((new Map$1()).values().next) {\n                return function createArrayFromMap(m, getValues) {\n                    return getValues ? Array.from(m.values()) : Array.from(m.keys());\n                };\n            }\n        }\n        catch (e) {\n        }\n        return function createArrayFromMapWithForeach(m, getValues) {\n            var res = ListWrapper.createFixedSize(m.size), i = 0;\n            m.forEach(function (v, k) {\n                res[i] = getValues ? v : k;\n                i++;\n            });\n            return res;\n        };\n    })();\n    var MapWrapper = (function () {\n        function MapWrapper() {\n        }\n        MapWrapper.clone = function (m) { return createMapFromMap(m); };\n        MapWrapper.createFromStringMap = function (stringMap) {\n            var result = new Map$1();\n            for (var prop in stringMap) {\n                result.set(prop, stringMap[prop]);\n            }\n            return result;\n        };\n        MapWrapper.toStringMap = function (m) {\n            var r = {};\n            m.forEach(function (v, k) { return r[k] = v; });\n            return r;\n        };\n        MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };\n        MapWrapper.clearValues = function (m) { _clearValues(m); };\n        MapWrapper.iterable = function (m) { return m; };\n        MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };\n        MapWrapper.values = function (m) { return _arrayFromMap(m, true); };\n        return MapWrapper;\n    }());\n    /**\n     * Wraps Javascript Objects\n     */\n    var StringMapWrapper = (function () {\n        function StringMapWrapper() {\n        }\n        StringMapWrapper.create = function () {\n            // Note: We are not using Object.create(null) here due to\n            // performance!\n            // http://jsperf.com/ng2-object-create-null\n            return {};\n        };\n        StringMapWrapper.contains = function (map, key) {\n            return map.hasOwnProperty(key);\n        };\n        StringMapWrapper.get = function (map, key) {\n            return map.hasOwnProperty(key) ? map[key] : undefined;\n        };\n        StringMapWrapper.set = function (map, key, value) { map[key] = value; };\n        StringMapWrapper.keys = function (map) { return Object.keys(map); };\n        StringMapWrapper.values = function (map) {\n            return Object.keys(map).map(function (k) { return map[k]; });\n        };\n        StringMapWrapper.isEmpty = function (map) {\n            for (var prop in map) {\n                return false;\n            }\n            return true;\n        };\n        StringMapWrapper.delete = function (map, key) { delete map[key]; };\n        StringMapWrapper.forEach = function (map, callback) {\n            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {\n                var k = _a[_i];\n                callback(map[k], k);\n            }\n        };\n        StringMapWrapper.merge = function (m1, m2) {\n            var m = {};\n            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n                var k = _a[_i];\n                m[k] = m1[k];\n            }\n            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n                var k = _c[_b];\n                m[k] = m2[k];\n            }\n            return m;\n        };\n        StringMapWrapper.equals = function (m1, m2) {\n            var k1 = Object.keys(m1);\n            var k2 = Object.keys(m2);\n            if (k1.length != k2.length) {\n                return false;\n            }\n            var key;\n            for (var i = 0; i < k1.length; i++) {\n                key = k1[i];\n                if (m1[key] !== m2[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return StringMapWrapper;\n    }());\n    var ListWrapper = (function () {\n        function ListWrapper() {\n        }\n        // JS has no way to express a statically fixed size list, but dart does so we\n        // keep both methods.\n        ListWrapper.createFixedSize = function (size) { return new Array(size); };\n        ListWrapper.createGrowableSize = function (size) { return new Array(size); };\n        ListWrapper.clone = function (array) { return array.slice(0); };\n        ListWrapper.forEachWithIndex = function (array, fn) {\n            for (var i = 0; i < array.length; i++) {\n                fn(array[i], i);\n            }\n        };\n        ListWrapper.first = function (array) {\n            if (!array)\n                return null;\n            return array[0];\n        };\n        ListWrapper.last = function (array) {\n            if (!array || array.length == 0)\n                return null;\n            return array[array.length - 1];\n        };\n        ListWrapper.indexOf = function (array, value, startIndex) {\n            if (startIndex === void 0) { startIndex = 0; }\n            return array.indexOf(value, startIndex);\n        };\n        ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };\n        ListWrapper.reversed = function (array) {\n            var a = ListWrapper.clone(array);\n            return a.reverse();\n        };\n        ListWrapper.concat = function (a, b) { return a.concat(b); };\n        ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };\n        ListWrapper.removeAt = function (list, index) {\n            var res = list[index];\n            list.splice(index, 1);\n            return res;\n        };\n        ListWrapper.removeAll = function (list, items) {\n            for (var i = 0; i < items.length; ++i) {\n                var index = list.indexOf(items[i]);\n                list.splice(index, 1);\n            }\n        };\n        ListWrapper.remove = function (list, el) {\n            var index = list.indexOf(el);\n            if (index > -1) {\n                list.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        ListWrapper.clear = function (list) { list.length = 0; };\n        ListWrapper.isEmpty = function (list) { return list.length == 0; };\n        ListWrapper.fill = function (list, value, start, end) {\n            if (start === void 0) { start = 0; }\n            if (end === void 0) { end = null; }\n            list.fill(value, start, end === null ? list.length : end);\n        };\n        ListWrapper.equals = function (a, b) {\n            if (a.length != b.length)\n                return false;\n            for (var i = 0; i < a.length; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        };\n        ListWrapper.slice = function (l, from, to) {\n            if (from === void 0) { from = 0; }\n            if (to === void 0) { to = null; }\n            return l.slice(from, to === null ? undefined : to);\n        };\n        ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };\n        ListWrapper.sort = function (l, compareFn) {\n            if (isPresent(compareFn)) {\n                l.sort(compareFn);\n            }\n            else {\n                l.sort();\n            }\n        };\n        ListWrapper.toString = function (l) { return l.toString(); };\n        ListWrapper.toJSON = function (l) { return JSON.stringify(l); };\n        ListWrapper.maximum = function (list, predicate) {\n            if (list.length == 0) {\n                return null;\n            }\n            var solution = null;\n            var maxValue = -Infinity;\n            for (var index = 0; index < list.length; index++) {\n                var candidate = list[index];\n                if (isBlank(candidate)) {\n                    continue;\n                }\n                var candidateValue = predicate(candidate);\n                if (candidateValue > maxValue) {\n                    solution = candidate;\n                    maxValue = candidateValue;\n                }\n            }\n            return solution;\n        };\n        ListWrapper.flatten = function (list) {\n            var target = [];\n            _flattenArray(list, target);\n            return target;\n        };\n        ListWrapper.addAll = function (list, source) {\n            for (var i = 0; i < source.length; i++) {\n                list.push(source[i]);\n            }\n        };\n        return ListWrapper;\n    }());\n    function _flattenArray(source, target) {\n        if (isPresent(source)) {\n            for (var i = 0; i < source.length; i++) {\n                var item = source[i];\n                if (isArray(item)) {\n                    _flattenArray(item, target);\n                }\n                else {\n                    target.push(item);\n                }\n            }\n        }\n        return target;\n    }\n    function isListLikeIterable(obj) {\n        if (!isJsObject(obj))\n            return false;\n        return isArray(obj) ||\n            (!(obj instanceof Map$1) &&\n                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n    }\n    function areIterablesEqual(a, b, comparator) {\n        var iterator1 = a[getSymbolIterator()]();\n        var iterator2 = b[getSymbolIterator()]();\n        while (true) {\n            var item1 = iterator1.next();\n            var item2 = iterator2.next();\n            if (item1.done && item2.done)\n                return true;\n            if (item1.done || item2.done)\n                return false;\n            if (!comparator(item1.value, item2.value))\n                return false;\n        }\n    }\n    function iterateListLike(obj, fn) {\n        if (isArray(obj)) {\n            for (var i = 0; i < obj.length; i++) {\n                fn(obj[i]);\n            }\n        }\n        else {\n            var iterator = obj[getSymbolIterator()]();\n            var item;\n            while (!((item = iterator.next()).done)) {\n                fn(item.value);\n            }\n        }\n    }\n    // Safari and Internet Explorer do not support the iterable parameter to the\n    // Set constructor.  We work around that by manually adding the items.\n    var createSetFromList = (function () {\n        var test = new Set([1, 2, 3]);\n        if (test.size === 3) {\n            return function createSetFromList(lst) { return new Set(lst); };\n        }\n        else {\n            return function createSetAndPopulateFromList(lst) {\n                var res = new Set(lst);\n                if (res.size !== lst.length) {\n                    for (var i = 0; i < lst.length; i++) {\n                        res.add(lst[i]);\n                    }\n                }\n                return res;\n            };\n        }\n    })();\n    var SetWrapper = (function () {\n        function SetWrapper() {\n        }\n        SetWrapper.createFromList = function (lst) { return createSetFromList(lst); };\n        SetWrapper.has = function (s, key) { return s.has(key); };\n        SetWrapper.delete = function (m, k) { m.delete(k); };\n        return SetWrapper;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    function findFirstClosedCycle(keys) {\n        var res = [];\n        for (var i = 0; i < keys.length; ++i) {\n            if (ListWrapper.contains(res, keys[i])) {\n                res.push(keys[i]);\n                return res;\n            }\n            res.push(keys[i]);\n        }\n        return res;\n    }\n    function constructResolvingPath(keys) {\n        if (keys.length > 1) {\n            var reversed = findFirstClosedCycle(ListWrapper.reversed(keys));\n            var tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n            return ' (' + tokenStrs.join(' -> ') + ')';\n        }\n        return '';\n    }\n    /**\n     * Base class for all errors arising from misconfigured providers.\n     * @stable\n     */\n    var AbstractProviderError = (function (_super) {\n        __extends$3(AbstractProviderError, _super);\n        function AbstractProviderError(injector, key, constructResolvingMessage) {\n            _super.call(this, 'DI Error');\n            this.keys = [key];\n            this.injectors = [injector];\n            this.constructResolvingMessage = constructResolvingMessage;\n            this.message = this.constructResolvingMessage(this.keys);\n        }\n        AbstractProviderError.prototype.addKey = function (injector, key) {\n            this.injectors.push(injector);\n            this.keys.push(key);\n            this.message = this.constructResolvingMessage(this.keys);\n        };\n        return AbstractProviderError;\n    }(BaseError));\n    /**\n     * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the\n     * {@link Injector} does not have a {@link Provider} for the given key.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\n     *\n     * ```typescript\n     * class A {\n     *   constructor(b:B) {}\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n     * ```\n     * @stable\n     */\n    var NoProviderError = (function (_super) {\n        __extends$3(NoProviderError, _super);\n        function NoProviderError(injector, key) {\n            _super.call(this, injector, key, function (keys) {\n                var first = stringify(ListWrapper.first(keys).token);\n                return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n            });\n        }\n        return NoProviderError;\n    }(AbstractProviderError));\n    /**\n     * Thrown when dependencies form a cycle.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\n     *\n     * ```typescript\n     * var injector = Injector.resolveAndCreate([\n     *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n     *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n     * ]);\n     *\n     * expect(() => injector.get(\"one\")).toThrowError();\n     * ```\n     *\n     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n     * @stable\n     */\n    var CyclicDependencyError = (function (_super) {\n        __extends$3(CyclicDependencyError, _super);\n        function CyclicDependencyError(injector, key) {\n            _super.call(this, injector, key, function (keys) {\n                return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n            });\n        }\n        return CyclicDependencyError;\n    }(AbstractProviderError));\n    /**\n     * Thrown when a constructing type returns with an Error.\n     *\n     * The `InstantiationError` class contains the original error plus the dependency graph which caused\n     * this object to be instantiated.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\n     *\n     * ```typescript\n     * class A {\n     *   constructor() {\n     *     throw new Error('message');\n     *   }\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([A]);\n\n     * try {\n     *   injector.get(A);\n     * } catch (e) {\n     *   expect(e instanceof InstantiationError).toBe(true);\n     *   expect(e.originalException.message).toEqual(\"message\");\n     *   expect(e.originalStack).toBeDefined();\n     * }\n     * ```\n     * @stable\n     */\n    var InstantiationError = (function (_super) {\n        __extends$3(InstantiationError, _super);\n        function InstantiationError(injector, originalException, originalStack, key) {\n            _super.call(this, 'DI Error', originalException);\n            this.keys = [key];\n            this.injectors = [injector];\n        }\n        InstantiationError.prototype.addKey = function (injector, key) {\n            this.injectors.push(injector);\n            this.keys.push(key);\n        };\n        Object.defineProperty(InstantiationError.prototype, \"message\", {\n            get: function () {\n                var first = stringify(ListWrapper.first(this.keys).token);\n                return this.originalError.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(this.keys) + \".\";\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(InstantiationError.prototype, \"causeKey\", {\n            get: function () { return this.keys[0]; },\n            enumerable: true,\n            configurable: true\n        });\n        return InstantiationError;\n    }(WrappedError));\n    /**\n     * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}\n     * creation.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\n     *\n     * ```typescript\n     * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n     * ```\n     * @stable\n     */\n    var InvalidProviderError = (function (_super) {\n        __extends$3(InvalidProviderError, _super);\n        function InvalidProviderError(provider) {\n            _super.call(this, \"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n        }\n        return InvalidProviderError;\n    }(BaseError));\n    /**\n     * Thrown when the class has no annotation information.\n     *\n     * Lack of annotation information prevents the {@link Injector} from determining which dependencies\n     * need to be injected into the constructor.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\n     *\n     * ```typescript\n     * class A {\n     *   constructor(b) {}\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n     * ```\n     *\n     * This error is also thrown when the class not marked with {@link Injectable} has parameter types.\n     *\n     * ```typescript\n     * class B {}\n     *\n     * class A {\n     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n     * ```\n     * @stable\n     */\n    var NoAnnotationError = (function (_super) {\n        __extends$3(NoAnnotationError, _super);\n        function NoAnnotationError(typeOrFunc, params) {\n            _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));\n        }\n        NoAnnotationError._genMessage = function (typeOrFunc, params) {\n            var signature = [];\n            for (var i = 0, ii = params.length; i < ii; i++) {\n                var parameter = params[i];\n                if (isBlank(parameter) || parameter.length == 0) {\n                    signature.push('?');\n                }\n                else {\n                    signature.push(parameter.map(stringify).join(' '));\n                }\n            }\n            return 'Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n                signature.join(', ') + '). ' +\n                'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n                stringify(typeOrFunc) + '\\' is decorated with Injectable.';\n        };\n        return NoAnnotationError;\n    }(BaseError));\n    /**\n     * Thrown when getting an object by index.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\n     *\n     * ```typescript\n     * class A {}\n     *\n     * var injector = Injector.resolveAndCreate([A]);\n     *\n     * expect(() => injector.getAt(100)).toThrowError();\n     * ```\n     * @stable\n     */\n    var OutOfBoundsError = (function (_super) {\n        __extends$3(OutOfBoundsError, _super);\n        function OutOfBoundsError(index) {\n            _super.call(this, \"Index \" + index + \" is out-of-bounds.\");\n        }\n        return OutOfBoundsError;\n    }(BaseError));\n    // TODO: add a working example after alpha38 is released\n    /**\n     * Thrown when a multi provider and a regular provider are bound to the same token.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * expect(() => Injector.resolveAndCreate([\n     *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n     *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n     * ])).toThrowError();\n     * ```\n     */\n    var MixingMultiProvidersWithRegularProvidersError = (function (_super) {\n        __extends$3(MixingMultiProvidersWithRegularProvidersError, _super);\n        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n            _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' +\n                provider2.toString());\n        }\n        return MixingMultiProvidersWithRegularProvidersError;\n    }(BaseError));\n\n    /**\n     * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n     *\n     * Keys have:\n     * - a system-wide unique `id`.\n     * - a `token`.\n     *\n     * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n     * the\n     * injector to store created objects in a more efficient way.\n     *\n     * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n     * resolving\n     * providers.\n     * @experimental\n     */\n    var ReflectiveKey = (function () {\n        /**\n         * Private\n         */\n        function ReflectiveKey(token, id) {\n            this.token = token;\n            this.id = id;\n            if (isBlank(token)) {\n                throw new Error('Token must be defined!');\n            }\n        }\n        Object.defineProperty(ReflectiveKey.prototype, \"displayName\", {\n            /**\n             * Returns a stringified token.\n             */\n            get: function () { return stringify(this.token); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Retrieves a `Key` for a token.\n         */\n        ReflectiveKey.get = function (token) {\n            return _globalKeyRegistry.get(resolveForwardRef(token));\n        };\n        Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n            /**\n             * @returns the number of keys registered in the system.\n             */\n            get: function () { return _globalKeyRegistry.numberOfKeys; },\n            enumerable: true,\n            configurable: true\n        });\n        return ReflectiveKey;\n    }());\n    /**\n     * @internal\n     */\n    var KeyRegistry = (function () {\n        function KeyRegistry() {\n            this._allKeys = new Map();\n        }\n        KeyRegistry.prototype.get = function (token) {\n            if (token instanceof ReflectiveKey)\n                return token;\n            if (this._allKeys.has(token)) {\n                return this._allKeys.get(token);\n            }\n            var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n            this._allKeys.set(token, newKey);\n            return newKey;\n        };\n        Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n            get: function () { return this._allKeys.size; },\n            enumerable: true,\n            configurable: true\n        });\n        return KeyRegistry;\n    }());\n    var _globalKeyRegistry = new KeyRegistry();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Runtime representation a type that a Component or other object is instances of.\n     *\n     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n     * the `MyCustomComponent` constructor function.\n     *\n     * @stable\n     */\n    var Type = Function;\n\n    var ReflectionCapabilities = (function () {\n        function ReflectionCapabilities(reflect) {\n            this._reflect = reflect || global$1.Reflect;\n        }\n        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };\n        ReflectionCapabilities.prototype.factory = function (t) {\n            var prototype = t.prototype;\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                var instance = Object.create(prototype);\n                t.apply(instance, args);\n                return instance;\n            };\n        };\n        /** @internal */\n        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes /** TODO #9100 */, paramAnnotations /** TODO #9100 */) {\n            var result;\n            if (typeof paramTypes === 'undefined') {\n                result = new Array(paramAnnotations.length);\n            }\n            else {\n                result = new Array(paramTypes.length);\n            }\n            for (var i = 0; i < result.length; i++) {\n                // TS outputs Object for parameters without types, while Traceur omits\n                // the annotations. For now we preserve the Traceur behavior to aid\n                // migration, but this can be revisited.\n                if (typeof paramTypes === 'undefined') {\n                    result[i] = [];\n                }\n                else if (paramTypes[i] != Object) {\n                    result[i] = [paramTypes[i]];\n                }\n                else {\n                    result[i] = [];\n                }\n                if (isPresent(paramAnnotations) && isPresent(paramAnnotations[i])) {\n                    result[i] = result[i].concat(paramAnnotations[i]);\n                }\n            }\n            return result;\n        };\n        ReflectionCapabilities.prototype.parameters = function (typeOrFunc) {\n            // Prefer the direct API.\n            if (isPresent(typeOrFunc.parameters)) {\n                return typeOrFunc.parameters;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            if (isPresent(typeOrFunc.ctorParameters)) {\n                var ctorParameters = typeOrFunc.ctorParameters;\n                var paramTypes_1 = ctorParameters.map(function (ctorParam /** TODO #9100 */) { return ctorParam && ctorParam.type; });\n                var paramAnnotations_1 = ctorParameters.map(function (ctorParam /** TODO #9100 */) {\n                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n                });\n                return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);\n            }\n            // API for metadata created by invoking the decorators.\n            if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {\n                var paramAnnotations = this._reflect.getMetadata('parameters', typeOrFunc);\n                var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOrFunc);\n                if (isPresent(paramTypes) || isPresent(paramAnnotations)) {\n                    return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n                }\n            }\n            // The array has to be filled with `undefined` because holes would be skipped by `some`\n            var parameters = new Array(typeOrFunc.length);\n            parameters.fill(undefined);\n            return parameters;\n        };\n        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {\n            // Prefer the direct API.\n            if (isPresent(typeOrFunc.annotations)) {\n                var annotations = typeOrFunc.annotations;\n                if (isFunction(annotations) && annotations.annotations) {\n                    annotations = annotations.annotations;\n                }\n                return annotations;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            if (isPresent(typeOrFunc.decorators)) {\n                return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n            }\n            // API for metadata created by invoking the decorators.\n            if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {\n                var annotations = this._reflect.getMetadata('annotations', typeOrFunc);\n                if (isPresent(annotations))\n                    return annotations;\n            }\n            return [];\n        };\n        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {\n            // Prefer the direct API.\n            if (isPresent(typeOrFunc.propMetadata)) {\n                var propMetadata = typeOrFunc.propMetadata;\n                if (isFunction(propMetadata) && propMetadata.propMetadata) {\n                    propMetadata = propMetadata.propMetadata;\n                }\n                return propMetadata;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            if (isPresent(typeOrFunc.propDecorators)) {\n                var propDecorators_1 = typeOrFunc.propDecorators;\n                var propMetadata_1 = {};\n                Object.keys(propDecorators_1).forEach(function (prop) {\n                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n                });\n                return propMetadata_1;\n            }\n            // API for metadata created by invoking the decorators.\n            if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {\n                var propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);\n                if (isPresent(propMetadata))\n                    return propMetadata;\n            }\n            return {};\n        };\n        // Note: JavaScript does not support to query for interfaces during runtime.\n        // However, we can't throw here as the reflector will always call this method\n        // when asked for a lifecycle interface as this is what we check in Dart.\n        ReflectionCapabilities.prototype.interfaces = function (type) { return []; };\n        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcInterface, lcProperty) {\n            if (!(type instanceof Type))\n                return false;\n            var proto = type.prototype;\n            return !!proto[lcProperty];\n        };\n        ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };\n        ReflectionCapabilities.prototype.setter = function (name) {\n            return new Function('o', 'v', 'return o.' + name + ' = v;');\n        };\n        ReflectionCapabilities.prototype.method = function (name) {\n            var functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n            return new Function('o', 'args', functionBody);\n        };\n        // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n        ReflectionCapabilities.prototype.importUri = function (type) {\n            // StaticSymbol\n            if (typeof type === 'object' && type['filePath']) {\n                return type['filePath'];\n            }\n            // Runtime type\n            return \"./\" + stringify(type);\n        };\n        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return runtime; };\n        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };\n        return ReflectionCapabilities;\n    }());\n    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n        if (!decoratorInvocations) {\n            return [];\n        }\n        return decoratorInvocations.map(function (decoratorInvocation) {\n            var decoratorType = decoratorInvocation.type;\n            var annotationCls = decoratorType.annotationCls;\n            var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n            var annotation = Object.create(annotationCls.prototype);\n            annotationCls.apply(annotation, annotationArgs);\n            return annotation;\n        });\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Provides read-only access to reflection data about symbols. Used internally by Angular\n     * to power dependency injection and compilation.\n     */\n    var ReflectorReader = (function () {\n        function ReflectorReader() {\n        }\n        return ReflectorReader;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Provides access to reflection data about symbols. Used internally by Angular\n     * to power dependency injection and compilation.\n     */\n    var Reflector = (function (_super) {\n        __extends$4(Reflector, _super);\n        function Reflector(reflectionCapabilities) {\n            _super.call(this);\n            /** @internal */\n            this._injectableInfo = new Map$1();\n            /** @internal */\n            this._getters = new Map$1();\n            /** @internal */\n            this._setters = new Map$1();\n            /** @internal */\n            this._methods = new Map$1();\n            this._usedKeys = null;\n            this.reflectionCapabilities = reflectionCapabilities;\n        }\n        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };\n        Reflector.prototype.isReflectionEnabled = function () { return this.reflectionCapabilities.isReflectionEnabled(); };\n        /**\n         * Causes `this` reflector to track keys used to access\n         * {@link ReflectionInfo} objects.\n         */\n        Reflector.prototype.trackUsage = function () { this._usedKeys = new Set(); };\n        /**\n         * Lists types for which reflection information was not requested since\n         * {@link #trackUsage} was called. This list could later be audited as\n         * potential dead code.\n         */\n        Reflector.prototype.listUnusedKeys = function () {\n            var _this = this;\n            if (this._usedKeys == null) {\n                throw new Error('Usage tracking is disabled');\n            }\n            var allTypes = MapWrapper.keys(this._injectableInfo);\n            return allTypes.filter(function (key) { return !SetWrapper.has(_this._usedKeys, key); });\n        };\n        Reflector.prototype.registerFunction = function (func, funcInfo) {\n            this._injectableInfo.set(func, funcInfo);\n        };\n        Reflector.prototype.registerType = function (type, typeInfo) {\n            this._injectableInfo.set(type, typeInfo);\n        };\n        Reflector.prototype.registerGetters = function (getters) { _mergeMaps(this._getters, getters); };\n        Reflector.prototype.registerSetters = function (setters) { _mergeMaps(this._setters, setters); };\n        Reflector.prototype.registerMethods = function (methods) { _mergeMaps(this._methods, methods); };\n        Reflector.prototype.factory = function (type) {\n            if (this._containsReflectionInfo(type)) {\n                var res = this._getReflectionInfo(type).factory;\n                return isPresent(res) ? res : null;\n            }\n            else {\n                return this.reflectionCapabilities.factory(type);\n            }\n        };\n        Reflector.prototype.parameters = function (typeOrFunc) {\n            if (this._injectableInfo.has(typeOrFunc)) {\n                var res = this._getReflectionInfo(typeOrFunc).parameters;\n                return isPresent(res) ? res : [];\n            }\n            else {\n                return this.reflectionCapabilities.parameters(typeOrFunc);\n            }\n        };\n        Reflector.prototype.annotations = function (typeOrFunc) {\n            if (this._injectableInfo.has(typeOrFunc)) {\n                var res = this._getReflectionInfo(typeOrFunc).annotations;\n                return isPresent(res) ? res : [];\n            }\n            else {\n                return this.reflectionCapabilities.annotations(typeOrFunc);\n            }\n        };\n        Reflector.prototype.propMetadata = function (typeOrFunc) {\n            if (this._injectableInfo.has(typeOrFunc)) {\n                var res = this._getReflectionInfo(typeOrFunc).propMetadata;\n                return isPresent(res) ? res : {};\n            }\n            else {\n                return this.reflectionCapabilities.propMetadata(typeOrFunc);\n            }\n        };\n        Reflector.prototype.interfaces = function (type) {\n            if (this._injectableInfo.has(type)) {\n                var res = this._getReflectionInfo(type).interfaces;\n                return isPresent(res) ? res : [];\n            }\n            else {\n                return this.reflectionCapabilities.interfaces(type);\n            }\n        };\n        Reflector.prototype.hasLifecycleHook = function (type, lcInterface, lcProperty) {\n            var interfaces = this.interfaces(type);\n            if (interfaces.indexOf(lcInterface) !== -1) {\n                return true;\n            }\n            else {\n                return this.reflectionCapabilities.hasLifecycleHook(type, lcInterface, lcProperty);\n            }\n        };\n        Reflector.prototype.getter = function (name) {\n            if (this._getters.has(name)) {\n                return this._getters.get(name);\n            }\n            else {\n                return this.reflectionCapabilities.getter(name);\n            }\n        };\n        Reflector.prototype.setter = function (name) {\n            if (this._setters.has(name)) {\n                return this._setters.get(name);\n            }\n            else {\n                return this.reflectionCapabilities.setter(name);\n            }\n        };\n        Reflector.prototype.method = function (name) {\n            if (this._methods.has(name)) {\n                return this._methods.get(name);\n            }\n            else {\n                return this.reflectionCapabilities.method(name);\n            }\n        };\n        /** @internal */\n        Reflector.prototype._getReflectionInfo = function (typeOrFunc) {\n            if (isPresent(this._usedKeys)) {\n                this._usedKeys.add(typeOrFunc);\n            }\n            return this._injectableInfo.get(typeOrFunc);\n        };\n        /** @internal */\n        Reflector.prototype._containsReflectionInfo = function (typeOrFunc) { return this._injectableInfo.has(typeOrFunc); };\n        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };\n        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {\n            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);\n        };\n        Reflector.prototype.resolveEnum = function (identifier, name) {\n            return this.reflectionCapabilities.resolveEnum(identifier, name);\n        };\n        return Reflector;\n    }(ReflectorReader));\n    function _mergeMaps(target, config) {\n        StringMapWrapper.forEach(config, function (v, k) { return target.set(k, v); });\n    }\n\n    /**\n     * The {@link Reflector} used internally in Angular to access metadata\n     * about symbols.\n     */\n    var reflector = new Reflector(new ReflectionCapabilities());\n\n    /**\n     * `Dependency` is used by the framework to extend DI.\n     * This is internal to Angular and should not be used directly.\n     */\n    var ReflectiveDependency = (function () {\n        function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {\n            this.key = key;\n            this.optional = optional;\n            this.lowerBoundVisibility = lowerBoundVisibility;\n            this.upperBoundVisibility = upperBoundVisibility;\n            this.properties = properties;\n        }\n        ReflectiveDependency.fromKey = function (key) {\n            return new ReflectiveDependency(key, false, null, null, []);\n        };\n        return ReflectiveDependency;\n    }());\n    var _EMPTY_LIST = [];\n    var ResolvedReflectiveProvider_ = (function () {\n        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n            this.key = key;\n            this.resolvedFactories = resolvedFactories;\n            this.multiProvider = multiProvider;\n        }\n        Object.defineProperty(ResolvedReflectiveProvider_.prototype, \"resolvedFactory\", {\n            get: function () { return this.resolvedFactories[0]; },\n            enumerable: true,\n            configurable: true\n        });\n        return ResolvedReflectiveProvider_;\n    }());\n    /**\n     * An internal resolved representation of a factory function created by resolving {@link\n     * Provider}.\n     * @experimental\n     */\n    var ResolvedReflectiveFactory = (function () {\n        function ResolvedReflectiveFactory(\n            /**\n             * Factory function which can return an instance of an object represented by a key.\n             */\n            factory,\n            /**\n             * Arguments (dependencies) to the `factory` function.\n             */\n            dependencies) {\n            this.factory = factory;\n            this.dependencies = dependencies;\n        }\n        return ResolvedReflectiveFactory;\n    }());\n    /**\n     * Resolve a single provider.\n     */\n    function resolveReflectiveFactory(provider) {\n        var factoryFn;\n        var resolvedDeps;\n        if (isPresent(provider.useClass)) {\n            var useClass = resolveForwardRef(provider.useClass);\n            factoryFn = reflector.factory(useClass);\n            resolvedDeps = _dependenciesFor(useClass);\n        }\n        else if (isPresent(provider.useExisting)) {\n            factoryFn = function (aliasInstance) { return aliasInstance; };\n            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n        }\n        else if (isPresent(provider.useFactory)) {\n            factoryFn = provider.useFactory;\n            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n        }\n        else {\n            factoryFn = function () { return provider.useValue; };\n            resolvedDeps = _EMPTY_LIST;\n        }\n        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n    }\n    /**\n     * Converts the {@link Provider} into {@link ResolvedProvider}.\n     *\n     * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains\n     * convenience provider syntax.\n     */\n    function resolveReflectiveProvider(provider) {\n        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);\n    }\n    /**\n     * Resolve a list of Providers.\n     */\n    function resolveReflectiveProviders(providers) {\n        var normalized = _normalizeProviders(providers, []);\n        var resolved = normalized.map(resolveReflectiveProvider);\n        return MapWrapper.values(mergeResolvedReflectiveProviders(resolved, new Map()));\n    }\n    /**\n     * Merges a list of ResolvedProviders into a list where\n     * each key is contained exactly once and multi providers\n     * have been merged.\n     */\n    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n        for (var i = 0; i < providers.length; i++) {\n            var provider = providers[i];\n            var existing = normalizedProvidersMap.get(provider.key.id);\n            if (isPresent(existing)) {\n                if (provider.multiProvider !== existing.multiProvider) {\n                    throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);\n                }\n                if (provider.multiProvider) {\n                    for (var j = 0; j < provider.resolvedFactories.length; j++) {\n                        existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                    }\n                }\n                else {\n                    normalizedProvidersMap.set(provider.key.id, provider);\n                }\n            }\n            else {\n                var resolvedProvider;\n                if (provider.multiProvider) {\n                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, ListWrapper.clone(provider.resolvedFactories), provider.multiProvider);\n                }\n                else {\n                    resolvedProvider = provider;\n                }\n                normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n            }\n        }\n        return normalizedProvidersMap;\n    }\n    function _normalizeProviders(providers, res) {\n        providers.forEach(function (b) {\n            if (b instanceof Type) {\n                res.push({ provide: b, useClass: b });\n            }\n            else if (b && typeof b == 'object' && b.provide !== undefined) {\n                res.push(b);\n            }\n            else if (b instanceof Array) {\n                _normalizeProviders(b, res);\n            }\n            else {\n                throw new InvalidProviderError(b);\n            }\n        });\n        return res;\n    }\n    function constructDependencies(typeOrFunc, dependencies) {\n        if (isBlank(dependencies)) {\n            return _dependenciesFor(typeOrFunc);\n        }\n        else {\n            var params = dependencies.map(function (t) { return [t]; });\n            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params); });\n        }\n    }\n    function _dependenciesFor(typeOrFunc) {\n        var params = reflector.parameters(typeOrFunc);\n        if (isBlank(params))\n            return [];\n        if (params.some(isBlank)) {\n            throw new NoAnnotationError(typeOrFunc, params);\n        }\n        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n    }\n    function _extractToken(typeOrFunc /** TODO #9100 */, metadata /** TODO #9100 */ /*any[] | any*/, params) {\n        var depProps = [];\n        var token = null;\n        var optional = false;\n        if (!isArray(metadata)) {\n            if (metadata instanceof InjectMetadata) {\n                return _createDependency(metadata.token, optional, null, null, depProps);\n            }\n            else {\n                return _createDependency(metadata, optional, null, null, depProps);\n            }\n        }\n        var lowerBoundVisibility = null;\n        var upperBoundVisibility = null;\n        for (var i = 0; i < metadata.length; ++i) {\n            var paramMetadata = metadata[i];\n            if (paramMetadata instanceof Type) {\n                token = paramMetadata;\n            }\n            else if (paramMetadata instanceof InjectMetadata) {\n                token = paramMetadata.token;\n            }\n            else if (paramMetadata instanceof OptionalMetadata) {\n                optional = true;\n            }\n            else if (paramMetadata instanceof SelfMetadata) {\n                upperBoundVisibility = paramMetadata;\n            }\n            else if (paramMetadata instanceof HostMetadata) {\n                upperBoundVisibility = paramMetadata;\n            }\n            else if (paramMetadata instanceof SkipSelfMetadata) {\n                lowerBoundVisibility = paramMetadata;\n            }\n            else if (paramMetadata instanceof DependencyMetadata) {\n                if (isPresent(paramMetadata.token)) {\n                    token = paramMetadata.token;\n                }\n                depProps.push(paramMetadata);\n            }\n        }\n        token = resolveForwardRef(token);\n        if (isPresent(token)) {\n            return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);\n        }\n        else {\n            throw new NoAnnotationError(typeOrFunc, params);\n        }\n    }\n    function _createDependency(token /** TODO #9100 */, optional /** TODO #9100 */, lowerBoundVisibility /** TODO #9100 */, upperBoundVisibility /** TODO #9100 */, depProps /** TODO #9100 */) {\n        return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);\n    }\n\n    // avoid unused import when Type union types are erased\n    // Threshold for the dynamic version\n    var _MAX_CONSTRUCTION_COUNTER = 10;\n    var UNDEFINED = new Object();\n    var ReflectiveProtoInjectorInlineStrategy = (function () {\n        function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {\n            this.provider0 = null;\n            this.provider1 = null;\n            this.provider2 = null;\n            this.provider3 = null;\n            this.provider4 = null;\n            this.provider5 = null;\n            this.provider6 = null;\n            this.provider7 = null;\n            this.provider8 = null;\n            this.provider9 = null;\n            this.keyId0 = null;\n            this.keyId1 = null;\n            this.keyId2 = null;\n            this.keyId3 = null;\n            this.keyId4 = null;\n            this.keyId5 = null;\n            this.keyId6 = null;\n            this.keyId7 = null;\n            this.keyId8 = null;\n            this.keyId9 = null;\n            var length = providers.length;\n            if (length > 0) {\n                this.provider0 = providers[0];\n                this.keyId0 = providers[0].key.id;\n            }\n            if (length > 1) {\n                this.provider1 = providers[1];\n                this.keyId1 = providers[1].key.id;\n            }\n            if (length > 2) {\n                this.provider2 = providers[2];\n                this.keyId2 = providers[2].key.id;\n            }\n            if (length > 3) {\n                this.provider3 = providers[3];\n                this.keyId3 = providers[3].key.id;\n            }\n            if (length > 4) {\n                this.provider4 = providers[4];\n                this.keyId4 = providers[4].key.id;\n            }\n            if (length > 5) {\n                this.provider5 = providers[5];\n                this.keyId5 = providers[5].key.id;\n            }\n            if (length > 6) {\n                this.provider6 = providers[6];\n                this.keyId6 = providers[6].key.id;\n            }\n            if (length > 7) {\n                this.provider7 = providers[7];\n                this.keyId7 = providers[7].key.id;\n            }\n            if (length > 8) {\n                this.provider8 = providers[8];\n                this.keyId8 = providers[8].key.id;\n            }\n            if (length > 9) {\n                this.provider9 = providers[9];\n                this.keyId9 = providers[9].key.id;\n            }\n        }\n        ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function (index) {\n            if (index == 0)\n                return this.provider0;\n            if (index == 1)\n                return this.provider1;\n            if (index == 2)\n                return this.provider2;\n            if (index == 3)\n                return this.provider3;\n            if (index == 4)\n                return this.provider4;\n            if (index == 5)\n                return this.provider5;\n            if (index == 6)\n                return this.provider6;\n            if (index == 7)\n                return this.provider7;\n            if (index == 8)\n                return this.provider8;\n            if (index == 9)\n                return this.provider9;\n            throw new OutOfBoundsError(index);\n        };\n        ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) {\n            return new ReflectiveInjectorInlineStrategy(injector, this);\n        };\n        return ReflectiveProtoInjectorInlineStrategy;\n    }());\n    var ReflectiveProtoInjectorDynamicStrategy = (function () {\n        function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {\n            this.providers = providers;\n            var len = providers.length;\n            this.keyIds = ListWrapper.createFixedSize(len);\n            for (var i = 0; i < len; i++) {\n                this.keyIds[i] = providers[i].key.id;\n            }\n        }\n        ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function (index) {\n            if (index < 0 || index >= this.providers.length) {\n                throw new OutOfBoundsError(index);\n            }\n            return this.providers[index];\n        };\n        ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) {\n            return new ReflectiveInjectorDynamicStrategy(this, ei);\n        };\n        return ReflectiveProtoInjectorDynamicStrategy;\n    }());\n    var ReflectiveProtoInjector = (function () {\n        function ReflectiveProtoInjector(providers) {\n            this.numberOfProviders = providers.length;\n            this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ?\n                new ReflectiveProtoInjectorDynamicStrategy(this, providers) :\n                new ReflectiveProtoInjectorInlineStrategy(this, providers);\n        }\n        ReflectiveProtoInjector.fromResolvedProviders = function (providers) {\n            return new ReflectiveProtoInjector(providers);\n        };\n        ReflectiveProtoInjector.prototype.getProviderAtIndex = function (index) {\n            return this._strategy.getProviderAtIndex(index);\n        };\n        return ReflectiveProtoInjector;\n    }());\n    var ReflectiveInjectorInlineStrategy = (function () {\n        function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {\n            this.injector = injector;\n            this.protoStrategy = protoStrategy;\n            this.obj0 = UNDEFINED;\n            this.obj1 = UNDEFINED;\n            this.obj2 = UNDEFINED;\n            this.obj3 = UNDEFINED;\n            this.obj4 = UNDEFINED;\n            this.obj5 = UNDEFINED;\n            this.obj6 = UNDEFINED;\n            this.obj7 = UNDEFINED;\n            this.obj8 = UNDEFINED;\n            this.obj9 = UNDEFINED;\n        }\n        ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };\n        ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function (provider) {\n            return this.injector._new(provider);\n        };\n        ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function (keyId) {\n            var p = this.protoStrategy;\n            var inj = this.injector;\n            if (p.keyId0 === keyId) {\n                if (this.obj0 === UNDEFINED) {\n                    this.obj0 = inj._new(p.provider0);\n                }\n                return this.obj0;\n            }\n            if (p.keyId1 === keyId) {\n                if (this.obj1 === UNDEFINED) {\n                    this.obj1 = inj._new(p.provider1);\n                }\n                return this.obj1;\n            }\n            if (p.keyId2 === keyId) {\n                if (this.obj2 === UNDEFINED) {\n                    this.obj2 = inj._new(p.provider2);\n                }\n                return this.obj2;\n            }\n            if (p.keyId3 === keyId) {\n                if (this.obj3 === UNDEFINED) {\n                    this.obj3 = inj._new(p.provider3);\n                }\n                return this.obj3;\n            }\n            if (p.keyId4 === keyId) {\n                if (this.obj4 === UNDEFINED) {\n                    this.obj4 = inj._new(p.provider4);\n                }\n                return this.obj4;\n            }\n            if (p.keyId5 === keyId) {\n                if (this.obj5 === UNDEFINED) {\n                    this.obj5 = inj._new(p.provider5);\n                }\n                return this.obj5;\n            }\n            if (p.keyId6 === keyId) {\n                if (this.obj6 === UNDEFINED) {\n                    this.obj6 = inj._new(p.provider6);\n                }\n                return this.obj6;\n            }\n            if (p.keyId7 === keyId) {\n                if (this.obj7 === UNDEFINED) {\n                    this.obj7 = inj._new(p.provider7);\n                }\n                return this.obj7;\n            }\n            if (p.keyId8 === keyId) {\n                if (this.obj8 === UNDEFINED) {\n                    this.obj8 = inj._new(p.provider8);\n                }\n                return this.obj8;\n            }\n            if (p.keyId9 === keyId) {\n                if (this.obj9 === UNDEFINED) {\n                    this.obj9 = inj._new(p.provider9);\n                }\n                return this.obj9;\n            }\n            return UNDEFINED;\n        };\n        ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function (index) {\n            if (index == 0)\n                return this.obj0;\n            if (index == 1)\n                return this.obj1;\n            if (index == 2)\n                return this.obj2;\n            if (index == 3)\n                return this.obj3;\n            if (index == 4)\n                return this.obj4;\n            if (index == 5)\n                return this.obj5;\n            if (index == 6)\n                return this.obj6;\n            if (index == 7)\n                return this.obj7;\n            if (index == 8)\n                return this.obj8;\n            if (index == 9)\n                return this.obj9;\n            throw new OutOfBoundsError(index);\n        };\n        ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () { return _MAX_CONSTRUCTION_COUNTER; };\n        return ReflectiveInjectorInlineStrategy;\n    }());\n    var ReflectiveInjectorDynamicStrategy = (function () {\n        function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {\n            this.protoStrategy = protoStrategy;\n            this.injector = injector;\n            this.objs = ListWrapper.createFixedSize(protoStrategy.providers.length);\n            ListWrapper.fill(this.objs, UNDEFINED);\n        }\n        ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };\n        ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function (provider) {\n            return this.injector._new(provider);\n        };\n        ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId) {\n            var p = this.protoStrategy;\n            for (var i = 0; i < p.keyIds.length; i++) {\n                if (p.keyIds[i] === keyId) {\n                    if (this.objs[i] === UNDEFINED) {\n                        this.objs[i] = this.injector._new(p.providers[i]);\n                    }\n                    return this.objs[i];\n                }\n            }\n            return UNDEFINED;\n        };\n        ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function (index) {\n            if (index < 0 || index >= this.objs.length) {\n                throw new OutOfBoundsError(index);\n            }\n            return this.objs[index];\n        };\n        ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () { return this.objs.length; };\n        return ReflectiveInjectorDynamicStrategy;\n    }());\n    /**\n     * A ReflectiveDependency injection container used for instantiating objects and resolving\n     * dependencies.\n     *\n     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n     * constructor dependencies.\n     *\n     * In typical use, application code asks for the dependencies in the constructor and they are\n     * resolved by the `Injector`.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n     *\n     * The following example creates an `Injector` configured to create `Engine` and `Car`.\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * var car = injector.get(Car);\n     * expect(car instanceof Car).toBe(true);\n     * expect(car.engine instanceof Engine).toBe(true);\n     * ```\n     *\n     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n     * resolve all of the object's dependencies automatically.\n     *\n     * @stable\n     */\n    var ReflectiveInjector = (function () {\n        function ReflectiveInjector() {\n        }\n        /**\n         * Turns an array of provider definitions into an array of resolved providers.\n         *\n         * A resolution is a process of flattening multiple nested arrays and converting individual\n         * providers into an array of {@link ResolvedReflectiveProvider}s.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\n         *\n         * ```typescript\n         * @Injectable()\n         * class Engine {\n         * }\n         *\n         * @Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n         *\n         * expect(providers.length).toEqual(2);\n         *\n         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n         * expect(providers[0].key.displayName).toBe(\"Car\");\n         * expect(providers[0].dependencies.length).toEqual(1);\n         * expect(providers[0].factory).toBeDefined();\n         *\n         * expect(providers[1].key.displayName).toBe(\"Engine\");\n         * });\n         * ```\n         *\n         * See {@link ReflectiveInjector#fromResolvedProviders} for more info.\n         */\n        ReflectiveInjector.resolve = function (providers) {\n            return resolveReflectiveProviders(providers);\n        };\n        /**\n         * Resolves an array of providers and creates an injector from those providers.\n         *\n         * The passed-in providers can be an array of `Type`, {@link Provider},\n         * or a recursive array of more providers.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\n         *\n         * ```typescript\n         * @Injectable()\n         * class Engine {\n         * }\n         *\n         * @Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n         * expect(injector.get(Car) instanceof Car).toBe(true);\n         * ```\n         *\n         * This function is slower than the corresponding `fromResolvedProviders`\n         * because it needs to resolve the passed-in providers first.\n         * See {@link Injector#resolve} and {@link Injector#fromResolvedProviders}.\n         */\n        ReflectiveInjector.resolveAndCreate = function (providers, parent) {\n            if (parent === void 0) { parent = null; }\n            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n        };\n        /**\n         * Creates an injector from previously resolved providers.\n         *\n         * This API is the recommended way to construct injectors in performance-sensitive parts.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\n         *\n         * ```typescript\n         * @Injectable()\n         * class Engine {\n         * }\n         *\n         * @Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var providers = ReflectiveInjector.resolve([Car, Engine]);\n         * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n         * expect(injector.get(Car) instanceof Car).toBe(true);\n         * ```\n         * @experimental\n         */\n        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {\n            if (parent === void 0) { parent = null; }\n            return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);\n        };\n        Object.defineProperty(ReflectiveInjector.prototype, \"parent\", {\n            /**\n             * Parent of this injector.\n             *\n             * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n             * -->\n             *\n             * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))\n             *\n             * ```typescript\n             * var parent = ReflectiveInjector.resolveAndCreate([]);\n             * var child = parent.resolveAndCreateChild([]);\n             * expect(child.parent).toBe(parent);\n             * ```\n             */\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Resolves an array of providers and creates a child injector from those providers.\n         *\n         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n         * -->\n         *\n         * The passed-in providers can be an array of `Type`, {@link Provider},\n         * or a recursive array of more providers.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))\n         *\n         * ```typescript\n         * class ParentProvider {}\n         * class ChildProvider {}\n         *\n         * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n         * var child = parent.resolveAndCreateChild([ChildProvider]);\n         *\n         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n         * ```\n         *\n         * This function is slower than the corresponding `createChildFromResolved`\n         * because it needs to resolve the passed-in providers first.\n         * See {@link Injector#resolve} and {@link Injector#createChildFromResolved}.\n         */\n        ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { return unimplemented(); };\n        /**\n         * Creates a child injector from previously resolved providers.\n         *\n         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n         * -->\n         *\n         * This API is the recommended way to construct injectors in performance-sensitive parts.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))\n         *\n         * ```typescript\n         * class ParentProvider {}\n         * class ChildProvider {}\n         *\n         * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n         * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n         *\n         * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n         * var child = parent.createChildFromResolved(childProviders);\n         *\n         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n         * ```\n         */\n        ReflectiveInjector.prototype.createChildFromResolved = function (providers) {\n            return unimplemented();\n        };\n        /**\n         * Resolves a provider and instantiates an object in the context of the injector.\n         *\n         * The created object does not get cached by the injector.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))\n         *\n         * ```typescript\n         * @Injectable()\n         * class Engine {\n         * }\n         *\n         * @Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n         *\n         * var car = injector.resolveAndInstantiate(Car);\n         * expect(car.engine).toBe(injector.get(Engine));\n         * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n         * ```\n         */\n        ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { return unimplemented(); };\n        /**\n         * Instantiates an object using a resolved provider in the context of the injector.\n         *\n         * The created object does not get cached by the injector.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))\n         *\n         * ```typescript\n         * @Injectable()\n         * class Engine {\n         * }\n         *\n         * @Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n         * var carProvider = ReflectiveInjector.resolve([Car])[0];\n         * var car = injector.instantiateResolved(carProvider);\n         * expect(car.engine).toBe(injector.get(Engine));\n         * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n         * ```\n         */\n        ReflectiveInjector.prototype.instantiateResolved = function (provider) { return unimplemented(); };\n        return ReflectiveInjector;\n    }());\n    var ReflectiveInjector_ = (function () {\n        /**\n         * Private\n         */\n        function ReflectiveInjector_(_proto /* ProtoInjector */, _parent) {\n            if (_parent === void 0) { _parent = null; }\n            /** @internal */\n            this._constructionCounter = 0;\n            this._proto = _proto;\n            this._parent = _parent;\n            this._strategy = _proto._strategy.createInjectorStrategy(this);\n        }\n        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            return this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue);\n        };\n        ReflectiveInjector_.prototype.getAt = function (index) { return this._strategy.getObjAtIndex(index); };\n        Object.defineProperty(ReflectiveInjector_.prototype, \"parent\", {\n            get: function () { return this._parent; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ReflectiveInjector_.prototype, \"internalStrategy\", {\n            /**\n             * @internal\n             * Internal. Do not use.\n             * We return `any` not to export the InjectorStrategy type.\n             */\n            get: function () { return this._strategy; },\n            enumerable: true,\n            configurable: true\n        });\n        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {\n            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n            return this.createChildFromResolved(ResolvedReflectiveProviders);\n        };\n        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {\n            var proto = new ReflectiveProtoInjector(providers);\n            var inj = new ReflectiveInjector_(proto);\n            inj._parent = this;\n            return inj;\n        };\n        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {\n            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n        };\n        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {\n            return this._instantiateProvider(provider);\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._new = function (provider) {\n            if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {\n                throw new CyclicDependencyError(this, provider.key);\n            }\n            return this._instantiateProvider(provider);\n        };\n        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {\n            if (provider.multiProvider) {\n                var res = ListWrapper.createFixedSize(provider.resolvedFactories.length);\n                for (var i = 0; i < provider.resolvedFactories.length; ++i) {\n                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n                }\n                return res;\n            }\n            else {\n                return this._instantiate(provider, provider.resolvedFactories[0]);\n            }\n        };\n        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {\n            var factory = ResolvedReflectiveFactory.factory;\n            var deps = ResolvedReflectiveFactory.dependencies;\n            var length = deps.length;\n            var d0;\n            var d1;\n            var d2;\n            var d3;\n            var d4;\n            var d5;\n            var d6;\n            var d7;\n            var d8;\n            var d9;\n            var d10;\n            var d11;\n            var d12;\n            var d13;\n            var d14;\n            var d15;\n            var d16;\n            var d17;\n            var d18;\n            var d19;\n            try {\n                d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;\n                d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;\n                d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;\n                d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;\n                d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;\n                d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;\n                d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;\n                d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;\n                d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;\n                d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;\n                d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;\n                d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;\n                d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;\n                d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;\n                d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;\n                d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;\n                d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;\n                d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;\n                d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;\n                d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;\n            }\n            catch (e) {\n                if (e instanceof AbstractProviderError || e instanceof InstantiationError) {\n                    e.addKey(this, provider.key);\n                }\n                throw e;\n            }\n            var obj;\n            try {\n                switch (length) {\n                    case 0:\n                        obj = factory();\n                        break;\n                    case 1:\n                        obj = factory(d0);\n                        break;\n                    case 2:\n                        obj = factory(d0, d1);\n                        break;\n                    case 3:\n                        obj = factory(d0, d1, d2);\n                        break;\n                    case 4:\n                        obj = factory(d0, d1, d2, d3);\n                        break;\n                    case 5:\n                        obj = factory(d0, d1, d2, d3, d4);\n                        break;\n                    case 6:\n                        obj = factory(d0, d1, d2, d3, d4, d5);\n                        break;\n                    case 7:\n                        obj = factory(d0, d1, d2, d3, d4, d5, d6);\n                        break;\n                    case 8:\n                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);\n                        break;\n                    case 9:\n                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);\n                        break;\n                    case 10:\n                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);\n                        break;\n                    case 11:\n                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);\n                        break;\n                    case 12:\n                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);\n                        break;\n                    case 13:\n                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);\n                        break;\n                    case 14:\n                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);\n                        break;\n                    case 15:\n                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);\n                        break;\n                    case 16:\n                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);\n                        break;\n                    case 17:\n                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);\n                        break;\n                    case 18:\n                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);\n                        break;\n                    case 19:\n                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);\n                        break;\n                    case 20:\n                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);\n                        break;\n                    default:\n                        throw new Error(\"Cannot instantiate '\" + provider.key.displayName + \"' because it has more than 20 dependencies\");\n                }\n            }\n            catch (e) {\n                throw new InstantiationError(this, e, e.stack, provider.key);\n            }\n            return obj;\n        };\n        ReflectiveInjector_.prototype._getByReflectiveDependency = function (provider, dep) {\n            return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n        };\n        ReflectiveInjector_.prototype._getByKey = function (key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {\n            if (key === INJECTOR_KEY) {\n                return this;\n            }\n            if (upperBoundVisibility instanceof SelfMetadata) {\n                return this._getByKeySelf(key, notFoundValue);\n            }\n            else {\n                return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);\n            }\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {\n            if (notFoundValue !== THROW_IF_NOT_FOUND) {\n                return notFoundValue;\n            }\n            else {\n                throw new NoProviderError(this, key);\n            }\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {\n            var obj = this._strategy.getObjByKeyId(key.id);\n            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, lowerBoundVisibility) {\n            var inj;\n            if (lowerBoundVisibility instanceof SkipSelfMetadata) {\n                inj = this._parent;\n            }\n            else {\n                inj = this;\n            }\n            while (inj instanceof ReflectiveInjector_) {\n                var inj_ = inj;\n                var obj = inj_._strategy.getObjByKeyId(key.id);\n                if (obj !== UNDEFINED)\n                    return obj;\n                inj = inj_._parent;\n            }\n            if (inj !== null) {\n                return inj.get(key.token, notFoundValue);\n            }\n            else {\n                return this._throwOrNull(key, notFoundValue);\n            }\n        };\n        Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n            get: function () {\n                var providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n                    .join(', ');\n                return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };\n        return ReflectiveInjector_;\n    }());\n    var INJECTOR_KEY = ReflectiveKey.get(Injector);\n    function _mapProviders(injector, fn) {\n        var res = new Array(injector._proto.numberOfProviders);\n        for (var i = 0; i < injector._proto.numberOfProviders; ++i) {\n            res[i] = fn(injector._proto.getProviderAtIndex(i));\n        }\n        return res;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Directives allow you to attach behavior to elements in the DOM.\n     *\n     * {@link DirectiveMetadata}s with an embedded view are called {@link ComponentMetadata}s.\n     *\n     * A directive consists of a single directive annotation and a controller class. When the\n     * directive's `selector` matches\n     * elements in the DOM, the following steps occur:\n     *\n     * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor\n     * arguments.\n     * 2. Angular instantiates directives for each matched element using `ElementInjector` in a\n     * depth-first order,\n     *    as declared in the HTML.\n     *\n     * ## Understanding How Injection Works\n     *\n     * There are three stages of injection resolution.\n     * - *Pre-existing Injectors*:\n     *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if\n     * the dependency was\n     *     specified as `@Optional`, returns `null`.\n     *   - The platform injector resolves browser singleton resources, such as: cookies, title,\n     * location, and others.\n     * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow\n     * the same parent-child hierarchy\n     *     as the component instances in the DOM.\n     * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each\n     * element has an `ElementInjector`\n     *     which follow the same parent-child hierarchy as the DOM elements themselves.\n     *\n     * When a template is instantiated, it also must instantiate the corresponding directives in a\n     * depth-first order. The\n     * current `ElementInjector` resolves the constructor dependencies for each directive.\n     *\n     * Angular then resolves dependencies as follows, according to the order in which they appear in the\n     * {@link ComponentMetadata}:\n     *\n     * 1. Dependencies on the current element\n     * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary\n     * 3. Dependencies on component injectors and their parents until it encounters the root component\n     * 4. Dependencies on pre-existing injectors\n     *\n     *\n     * The `ElementInjector` can inject other directives, element-specific special objects, or it can\n     * delegate to the parent\n     * injector.\n     *\n     * To inject other directives, declare the constructor parameter as:\n     * - `directive:DirectiveType`: a directive on the current element only\n     * - `@Host() directive:DirectiveType`: any directive that matches the type between the current\n     * element and the\n     *    Shadow DOM root.\n     * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child\n     * directives.\n     * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any\n     * child directives.\n     *\n     * To inject element-specific special objects, declare the constructor parameter as:\n     * - `element: ElementRef` to obtain a reference to logical element in the view.\n     * - `viewContainer: ViewContainerRef` to control child template instantiation, for\n     * {@link DirectiveMetadata} directives only\n     * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.\n     *\n     * ### Example\n     *\n     * The following example demonstrates how dependency injection resolves constructor arguments in\n     * practice.\n     *\n     *\n     * Assume this HTML template:\n     *\n     * ```\n     * <div dependency=\"1\">\n     *   <div dependency=\"2\">\n     *     <div dependency=\"3\" my-directive>\n     *       <div dependency=\"4\">\n     *         <div dependency=\"5\"></div>\n     *       </div>\n     *       <div dependency=\"6\"></div>\n     *     </div>\n     *   </div>\n     * </div>\n     * ```\n     *\n     * With the following `dependency` decorator and `SomeService` injectable class.\n     *\n     * ```\n     * @Injectable()\n     * class SomeService {\n     * }\n     *\n     * @Directive({\n     *   selector: '[dependency]',\n     *   inputs: [\n     *     'id: dependency'\n     *   ]\n     * })\n     * class Dependency {\n     *   id:string;\n     * }\n     * ```\n     *\n     * Let's step through the different ways in which `MyDirective` could be declared...\n     *\n     *\n     * ### No injection\n     *\n     * Here the constructor is declared with no arguments, therefore nothing is injected into\n     * `MyDirective`.\n     *\n     * ```\n     * @Directive({ selector: '[my-directive]' })\n     * class MyDirective {\n     *   constructor() {\n     *   }\n     * }\n     * ```\n     *\n     * This directive would be instantiated with no dependencies.\n     *\n     *\n     * ### Component-level injection\n     *\n     * Directives can inject any injectable instance from the closest component injector or any of its\n     * parents.\n     *\n     * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type\n     * from the parent\n     * component's injector.\n     * ```\n     * @Directive({ selector: '[my-directive]' })\n     * class MyDirective {\n     *   constructor(someService: SomeService) {\n     *   }\n     * }\n     * ```\n     *\n     * This directive would be instantiated with a dependency on `SomeService`.\n     *\n     *\n     * ### Injecting a directive from the current element\n     *\n     * Directives can inject other directives declared on the current element.\n     *\n     * ```\n     * @Directive({ selector: '[my-directive]' })\n     * class MyDirective {\n     *   constructor(dependency: Dependency) {\n     *     expect(dependency.id).toEqual(3);\n     *   }\n     * }\n     * ```\n     * This directive would be instantiated with `Dependency` declared at the same element, in this case\n     * `dependency=\"3\"`.\n     *\n     * ### Injecting a directive from any ancestor elements\n     *\n     * Directives can inject other directives declared on any ancestor element (in the current Shadow\n     * DOM), i.e. on the current element, the\n     * parent element, or its parents.\n     * ```\n     * @Directive({ selector: '[my-directive]' })\n     * class MyDirective {\n     *   constructor(@Host() dependency: Dependency) {\n     *     expect(dependency.id).toEqual(2);\n     *   }\n     * }\n     * ```\n     *\n     * `@Host` checks the current element, the parent, as well as its parents recursively. If\n     * `dependency=\"2\"` didn't\n     * exist on the direct parent, this injection would\n     * have returned\n     * `dependency=\"1\"`.\n     *\n     *\n     * ### Injecting a live collection of direct child directives\n     *\n     *\n     * A directive can also query for other child directives. Since parent directives are instantiated\n     * before child directives, a directive can't simply inject the list of child directives. Instead,\n     * the directive injects a {@link QueryList}, which updates its contents as children are added,\n     * removed, or moved by a directive that uses a {@link ViewContainerRef} such as a `ngFor`, an\n     * `ngIf`, or an `ngSwitch`.\n     *\n     * ```\n     * @Directive({ selector: '[my-directive]' })\n     * class MyDirective {\n     *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {\n     *   }\n     * }\n     * ```\n     *\n     * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and\n     * `Dependency` 6. Here, `Dependency` 5 would not be included, because it is not a direct child.\n     *\n     * ### Injecting a live collection of descendant directives\n     *\n     * By passing the descendant flag to `@Query` above, we can include the children of the child\n     * elements.\n     *\n     * ```\n     * @Directive({ selector: '[my-directive]' })\n     * class MyDirective {\n     *   constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList<Dependency>) {\n     *   }\n     * }\n     * ```\n     *\n     * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.\n     *\n     * ### Optional injection\n     *\n     * The normal behavior of directives is to return an error when a specified dependency cannot be\n     * resolved. If you\n     * would like to inject `null` on unresolved dependency instead, you can annotate that dependency\n     * with `@Optional()`.\n     * This explicitly permits the author of a template to treat some of the surrounding directives as\n     * optional.\n     *\n     * ```\n     * @Directive({ selector: '[my-directive]' })\n     * class MyDirective {\n     *   constructor(@Optional() dependency:Dependency) {\n     *   }\n     * }\n     * ```\n     *\n     * This directive would be instantiated with a `Dependency` directive found on the current element.\n     * If none can be\n     * found, the injector supplies `null` instead of throwing an error.\n     *\n     * ### Example\n     *\n     * Here we use a decorator directive to simply define basic tool-tip behavior.\n     *\n     * ```\n     * @Directive({\n     *   selector: '[tooltip]',\n     *   inputs: [\n     *     'text: tooltip'\n     *   ],\n     *   host: {\n     *     '(mouseenter)': 'onMouseEnter()',\n     *     '(mouseleave)': 'onMouseLeave()'\n     *   }\n     * })\n     * class Tooltip{\n     *   text:string;\n     *   overlay:Overlay; // NOT YET IMPLEMENTED\n     *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED\n     *\n     *   constructor(overlayManager:OverlayManager) {\n     *     this.overlay = overlay;\n     *   }\n     *\n     *   onMouseEnter() {\n     *     // exact signature to be determined\n     *     this.overlay = this.overlayManager.open(text, ...);\n     *   }\n     *\n     *   onMouseLeave() {\n     *     this.overlay.close();\n     *     this.overlay = null;\n     *   }\n     * }\n     * ```\n     * In our HTML template, we can then add this behavior to a `<div>` or any other element with the\n     * `tooltip` selector,\n     * like so:\n     *\n     * ```\n     * <div tooltip=\"some text here\"></div>\n     * ```\n     *\n     * Directives can also control the instantiation, destruction, and positioning of inline template\n     * elements:\n     *\n     * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at\n     * runtime.\n     * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a\n     * location in the current view\n     * where these actions are performed.\n     *\n     * Views are always created as children of the current {@link ComponentMetadata}, and as siblings of\n     * the\n     * `<template>` element. Thus a\n     * directive in a child view cannot inject the directive that created it.\n     *\n     * Since directives that create views via ViewContainers are common in Angular, and using the full\n     * `<template>` element syntax is wordy, Angular\n     * also supports a shorthand notation: `<li *foo=\"bar\">` and `<li template=\"foo: bar\">` are\n     * equivalent.\n     *\n     * Thus,\n     *\n     * ```\n     * <ul>\n     *   <li *foo=\"bar\" title=\"text\"></li>\n     * </ul>\n     * ```\n     *\n     * Expands in use to:\n     *\n     * ```\n     * <ul>\n     *   <template [foo]=\"bar\">\n     *     <li title=\"text\"></li>\n     *   </template>\n     * </ul>\n     * ```\n     *\n     * Notice that although the shorthand places `*foo=\"bar\"` within the `<li>` element, the binding for\n     * the directive\n     * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.\n     *\n     * ## Lifecycle hooks\n     *\n     * When the directive class implements some {@linkDocs guide/lifecycle-hooks} the\n     * callbacks are called by the change detection at defined points in time during the life of the\n     * directive.\n     *\n     * ### Example\n     *\n     * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.\n     *\n     * Here is a simple directive that triggers on an `unless` selector:\n     *\n     * ```\n     * @Directive({\n     *   selector: '[unless]',\n     *   inputs: ['unless']\n     * })\n     * export class Unless {\n     *   viewContainer: ViewContainerRef;\n     *   templateRef: TemplateRef;\n     *   prevCondition: boolean;\n     *\n     *   constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {\n     *     this.viewContainer = viewContainer;\n     *     this.templateRef = templateRef;\n     *     this.prevCondition = null;\n     *   }\n     *\n     *   set unless(newCondition) {\n     *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {\n     *       this.prevCondition = true;\n     *       this.viewContainer.clear();\n     *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {\n     *       this.prevCondition = false;\n     *       this.viewContainer.create(this.templateRef);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * We can then use this `unless` selector in a template:\n     * ```\n     * <ul>\n     *   <li *unless=\"expr\"></li>\n     * </ul>\n     * ```\n     *\n     * Once the directive instantiates the child view, the shorthand notation for the template expands\n     * and the result is:\n     *\n     * ```\n     * <ul>\n     *   <template [unless]=\"exp\">\n     *     <li></li>\n     *   </template>\n     *   <li></li>\n     * </ul>\n     * ```\n     *\n     * Note also that although the `<li></li>` template still exists inside the `<template></template>`,\n     * the instantiated\n     * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.\n     * @stable\n     */\n    var DirectiveMetadata = (function (_super) {\n        __extends$1(DirectiveMetadata, _super);\n        function DirectiveMetadata(_a) {\n            var _b = _a === void 0 ? {} : _a, selector = _b.selector, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, providers = _b.providers, exportAs = _b.exportAs, queries = _b.queries;\n            _super.call(this);\n            this.selector = selector;\n            this._inputs = inputs;\n            this._outputs = outputs;\n            this.host = host;\n            this.exportAs = exportAs;\n            this.queries = queries;\n            this._providers = providers;\n        }\n        Object.defineProperty(DirectiveMetadata.prototype, \"inputs\", {\n            /**\n             * Enumerates the set of data-bound input properties for a directive\n             *\n             * Angular automatically updates input properties during change detection.\n             *\n             * The `inputs` property defines a set of `directiveProperty` to `bindingProperty`\n             * configuration:\n             *\n             * - `directiveProperty` specifies the component property where the value is written.\n             * - `bindingProperty` specifies the DOM property where the value is read from.\n             *\n             * When `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.\n             *\n             * ### Example ([live demo](http://plnkr.co/edit/ivhfXY?p=preview))\n             *\n             * The following example creates a component with two data-bound properties.\n             *\n             * ```typescript\n             * @Component({\n             *   selector: 'bank-account',\n             *   inputs: ['bankName', 'id: account-id'],\n             *   template: `\n             *     Bank Name: {{bankName}}\n             *     Account Id: {{id}}\n             *   `\n             * })\n             * class BankAccount {\n             *   bankName: string;\n             *   id: string;\n             *\n             *   // this property is not bound, and won't be automatically updated by Angular\n             *   normalizedBankName: string;\n             * }\n             *\n             * @Component({\n             *   selector: 'app',\n             *   template: `\n             *     <bank-account bank-name=\"RBC\" account-id=\"4747\"></bank-account>\n             *   `\n             * })\n             * class App {}\n             * ```\n             *\n             */\n            get: function () { return this._inputs; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DirectiveMetadata.prototype, \"outputs\", {\n            /**\n             * Enumerates the set of event-bound output properties.\n             *\n             * When an output property emits an event, an event handler attached to that event\n             * the template is invoked.\n             *\n             * The `outputs` property defines a set of `directiveProperty` to `bindingProperty`\n             * configuration:\n             *\n             * - `directiveProperty` specifies the component property that emits events.\n             * - `bindingProperty` specifies the DOM property the event handler is attached to.\n             *\n             * ### Example ([live demo](http://plnkr.co/edit/d5CNq7?p=preview))\n             *\n             * ```typescript\n             * @Directive({\n             *   selector: 'interval-dir',\n             *   outputs: ['everySecond', 'five5Secs: everyFiveSeconds']\n             * })\n             * class IntervalDir {\n             *   everySecond = new EventEmitter();\n             *   five5Secs = new EventEmitter();\n             *\n             *   constructor() {\n             *     setInterval(() => this.everySecond.emit(\"event\"), 1000);\n             *     setInterval(() => this.five5Secs.emit(\"event\"), 5000);\n             *   }\n             * }\n             *\n             * @Component({\n             *   selector: 'app',\n             *   template: `\n             *     <interval-dir (everySecond)=\"everySecond()\" (everyFiveSeconds)=\"everyFiveSeconds()\">\n             *     </interval-dir>\n             *   `\n             * })\n             * class App {\n             *   everySecond() { console.log('second'); }\n             *   everyFiveSeconds() { console.log('five seconds'); }\n             * }\n             * ```\n             *\n             */\n            get: function () { return this._outputs; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DirectiveMetadata.prototype, \"providers\", {\n            /**\n             * Defines the set of injectable objects that are visible to a Directive and its light DOM\n             * children.\n             *\n             * ## Simple Example\n             *\n             * Here is an example of a class that can be injected:\n             *\n             * ```\n             * class Greeter {\n             *    greet(name:string) {\n             *      return 'Hello ' + name + '!';\n             *    }\n             * }\n             *\n             * @Directive({\n             *   selector: 'greet',\n             *   providers: [\n             *     Greeter\n             *   ]\n             * })\n             * class HelloWorld {\n             *   greeter:Greeter;\n             *\n             *   constructor(greeter:Greeter) {\n             *     this.greeter = greeter;\n             *   }\n             * }\n             * ```\n             */\n            get: function () { return this._providers; },\n            enumerable: true,\n            configurable: true\n        });\n        return DirectiveMetadata;\n    }(InjectableMetadata));\n    /**\n     * Declare reusable UI building blocks for an application.\n     *\n     * Each Angular component requires a single `@Component` annotation. The\n     * `@Component`\n     * annotation specifies when a component is instantiated, and which properties and hostListeners it\n     * binds to.\n     *\n     * When a component is instantiated, Angular\n     * - creates a shadow DOM for the component.\n     * - loads the selected template into the shadow DOM.\n     * - creates all the injectable objects configured with `providers` and `viewProviders`.\n     *\n     * All template expressions and statements are then evaluated against the component instance.\n     *\n     * ## Lifecycle hooks\n     *\n     * When the component class implements some {@linkDocs guide/lifecycle-hooks} the\n     * callbacks are called by the change detection at defined points in time during the life of the\n     * component.\n     *\n     * ### Example\n     *\n     * {@example core/ts/metadata/metadata.ts region='component'}\n     * @stable\n     */\n    var ComponentMetadata = (function (_super) {\n        __extends$1(ComponentMetadata, _super);\n        function ComponentMetadata(_a) {\n            var _b = _a === void 0 ? {} : _a, selector = _b.selector, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, exportAs = _b.exportAs, moduleId = _b.moduleId, providers = _b.providers, viewProviders = _b.viewProviders, _c = _b.changeDetection, changeDetection = _c === void 0 ? exports.ChangeDetectionStrategy.Default : _c, queries = _b.queries, templateUrl = _b.templateUrl, template = _b.template, styleUrls = _b.styleUrls, styles = _b.styles, animations = _b.animations, encapsulation = _b.encapsulation, interpolation = _b.interpolation, entryComponents = _b.entryComponents;\n            _super.call(this, {\n                selector: selector,\n                inputs: inputs,\n                outputs: outputs,\n                host: host,\n                exportAs: exportAs,\n                providers: providers,\n                queries: queries\n            });\n            this.changeDetection = changeDetection;\n            this._viewProviders = viewProviders;\n            this.templateUrl = templateUrl;\n            this.template = template;\n            this.styleUrls = styleUrls;\n            this.styles = styles;\n            this.encapsulation = encapsulation;\n            this.moduleId = moduleId;\n            this.animations = animations;\n            this.interpolation = interpolation;\n            this.entryComponents = entryComponents;\n        }\n        Object.defineProperty(ComponentMetadata.prototype, \"viewProviders\", {\n            /**\n             * Defines the set of injectable objects that are visible to its view DOM children.\n             *\n             * ## Simple Example\n             *\n             * Here is an example of a class that can be injected:\n             *\n             * ```\n             * class Greeter {\n             *    greet(name:string) {\n             *      return 'Hello ' + name + '!';\n             *    }\n             * }\n             *\n             * @Directive({\n             *   selector: 'needs-greeter'\n             * })\n             * class NeedsGreeter {\n             *   greeter:Greeter;\n             *\n             *   constructor(greeter:Greeter) {\n             *     this.greeter = greeter;\n             *   }\n             * }\n             *\n             * @Component({\n             *   selector: 'greet',\n             *   viewProviders: [\n             *     Greeter\n             *   ],\n             *   template: `<needs-greeter></needs-greeter>`\n             * })\n             * class HelloWorld {\n             * }\n             *\n             * ```\n             */\n            get: function () { return this._viewProviders; },\n            enumerable: true,\n            configurable: true\n        });\n        return ComponentMetadata;\n    }(DirectiveMetadata));\n    /**\n     * Declare reusable pipe function.\n     *\n     * A \"pure\" pipe is only re-evaluated when either the input or any of the arguments change.\n     *\n     * When not specified, pipes default to being pure.\n     *\n     * ### Example\n     *\n     * {@example core/ts/metadata/metadata.ts region='pipe'}\n     * @stable\n     */\n    var PipeMetadata = (function (_super) {\n        __extends$1(PipeMetadata, _super);\n        function PipeMetadata(_a) {\n            var name = _a.name, pure = _a.pure;\n            _super.call(this);\n            this.name = name;\n            this._pure = pure;\n        }\n        Object.defineProperty(PipeMetadata.prototype, \"pure\", {\n            get: function () { return isPresent(this._pure) ? this._pure : true; },\n            enumerable: true,\n            configurable: true\n        });\n        return PipeMetadata;\n    }(InjectableMetadata));\n    /**\n     * Declares a data-bound input property.\n     *\n     * Angular automatically updates data-bound properties during change detection.\n     *\n     * `InputMetadata` takes an optional parameter that specifies the name\n     * used when instantiating a component in the template. When not provided,\n     * the name of the decorated property is used.\n     *\n     * ### Example\n     *\n     * The following example creates a component with two input properties.\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'bank-account',\n     *   template: `\n     *     Bank Name: {{bankName}}\n     *     Account Id: {{id}}\n     *   `\n     * })\n     * class BankAccount {\n     *   @Input() bankName: string;\n     *   @Input('account-id') id: string;\n     *\n     *   // this property is not bound, and won't be automatically updated by Angular\n     *   normalizedBankName: string;\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `\n     *     <bank-account bank-name=\"RBC\" account-id=\"4747\"></bank-account>\n     *   `\n     * })\n     *\n     * class App {}\n     * ```\n     * @stable\n     */\n    var InputMetadata = (function () {\n        function InputMetadata(\n            /**\n             * Name used when instantiating a component in the template.\n             */\n            bindingPropertyName) {\n            this.bindingPropertyName = bindingPropertyName;\n        }\n        return InputMetadata;\n    }());\n    /**\n     * Declares an event-bound output property.\n     *\n     * When an output property emits an event, an event handler attached to that event\n     * the template is invoked.\n     *\n     * `OutputMetadata` takes an optional parameter that specifies the name\n     * used when instantiating a component in the template. When not provided,\n     * the name of the decorated property is used.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * @Directive({\n     *   selector: 'interval-dir',\n     * })\n     * class IntervalDir {\n     *   @Output() everySecond = new EventEmitter();\n     *   @Output('everyFiveSeconds') five5Secs = new EventEmitter();\n     *\n     *   constructor() {\n     *     setInterval(() => this.everySecond.emit(\"event\"), 1000);\n     *     setInterval(() => this.five5Secs.emit(\"event\"), 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `\n     *     <interval-dir (everySecond)=\"everySecond()\" (everyFiveSeconds)=\"everyFiveSeconds()\">\n     *     </interval-dir>\n     *   `\n     * })\n     * class App {\n     *   everySecond() { console.log('second'); }\n     *   everyFiveSeconds() { console.log('five seconds'); }\n     * }\n     * ```\n     * @stable\n     */\n    var OutputMetadata = (function () {\n        function OutputMetadata(bindingPropertyName) {\n            this.bindingPropertyName = bindingPropertyName;\n        }\n        return OutputMetadata;\n    }());\n    /**\n     * Declares a host property binding.\n     *\n     * Angular automatically checks host property bindings during change detection.\n     * If a binding changes, it will update the host element of the directive.\n     *\n     * `HostBindingMetadata` takes an optional parameter that specifies the property\n     * name of the host element that will be updated. When not provided,\n     * the class property name is used.\n     *\n     * ### Example\n     *\n     * The following example creates a directive that sets the `valid` and `invalid` classes\n     * on the DOM element that has ngModel directive on it.\n     *\n     * ```typescript\n     * @Directive({selector: '[ngModel]'})\n     * class NgModelStatus {\n     *   constructor(public control:NgModel) {}\n     *   @HostBinding('class.valid') get valid { return this.control.valid; }\n     *   @HostBinding('class.invalid') get invalid { return this.control.invalid; }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `<input [(ngModel)]=\"prop\">`\n     * })\n     * class App {\n     *   prop;\n     * }\n     * ```\n     * @stable\n     */\n    var HostBindingMetadata = (function () {\n        function HostBindingMetadata(hostPropertyName) {\n            this.hostPropertyName = hostPropertyName;\n        }\n        return HostBindingMetadata;\n    }());\n    /**\n     * Declares a host listener.\n     *\n     * Angular will invoke the decorated method when the host element emits the specified event.\n     *\n     * If the decorated method returns `false`, then `preventDefault` is applied on the DOM\n     * event.\n     *\n     * ### Example\n     *\n     * The following example declares a directive that attaches a click listener to the button and\n     * counts clicks.\n     *\n     * ```typescript\n     * @Directive({selector: 'button[counting]'})\n     * class CountClicks {\n     *   numberOfClicks = 0;\n     *\n     *   @HostListener('click', ['$event.target'])\n     *   onClick(btn) {\n     *     console.log(\"button\", btn, \"number of clicks:\", this.numberOfClicks++);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `<button counting>Increment</button>`\n     * })\n     * class App {}\n     * ```\n     * @stable\n     */\n    var HostListenerMetadata = (function () {\n        function HostListenerMetadata(eventName, args) {\n            this.eventName = eventName;\n            this.args = args;\n        }\n        return HostListenerMetadata;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Defines a schema that will allow:\n     * - any non-angular elements with a `-` in their name,\n     * - any properties on elements with a `-` in their name which is the common rule for custom\n     * elements.\n     *\n     * @stable\n     */\n    var CUSTOM_ELEMENTS_SCHEMA = {\n        name: 'custom-elements'\n    };\n    /**\n     * Defines a schema that will allow any property on any element.\n     *\n     * @experimental\n     */\n    var NO_ERRORS_SCHEMA = {\n        name: 'no-errors-schema'\n    };\n    /**\n     * Declares an Angular Module.\n     * @stable\n     */\n    var NgModuleMetadata = (function (_super) {\n        __extends$5(NgModuleMetadata, _super);\n        function NgModuleMetadata(options) {\n            if (options === void 0) { options = {}; }\n            // We cannot use destructuring of the constructor argument because `exports` is a\n            // protected symbol in CommonJS and closure tries to aggressively optimize it away.\n            _super.call(this);\n            this._providers = options.providers;\n            this.declarations = options.declarations;\n            this.imports = options.imports;\n            this.exports = options.exports;\n            this.entryComponents = options.entryComponents;\n            this.bootstrap = options.bootstrap;\n            this.schemas = options.schemas;\n        }\n        Object.defineProperty(NgModuleMetadata.prototype, \"providers\", {\n            /**\n             * Defines the set of injectable objects that are available in the injector\n             * of this module.\n             *\n             * ## Simple Example\n             *\n             * Here is an example of a class that can be injected:\n             *\n             * ```\n             * class Greeter {\n             *    greet(name:string) {\n             *      return 'Hello ' + name + '!';\n             *    }\n             * }\n             *\n             * @NgModule({\n             *   providers: [\n             *     Greeter\n             *   ]\n             * })\n             * class HelloWorld {\n             *   greeter:Greeter;\n             *\n             *   constructor(greeter:Greeter) {\n             *     this.greeter = greeter;\n             *   }\n             * }\n             * ```\n             */\n            get: function () { return this._providers; },\n            enumerable: true,\n            configurable: true\n        });\n        return NgModuleMetadata;\n    }(InjectableMetadata));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @stable\n     */\n    var LifecycleHooks;\n    (function (LifecycleHooks) {\n        LifecycleHooks[LifecycleHooks[\"OnInit\"] = 0] = \"OnInit\";\n        LifecycleHooks[LifecycleHooks[\"OnDestroy\"] = 1] = \"OnDestroy\";\n        LifecycleHooks[LifecycleHooks[\"DoCheck\"] = 2] = \"DoCheck\";\n        LifecycleHooks[LifecycleHooks[\"OnChanges\"] = 3] = \"OnChanges\";\n        LifecycleHooks[LifecycleHooks[\"AfterContentInit\"] = 4] = \"AfterContentInit\";\n        LifecycleHooks[LifecycleHooks[\"AfterContentChecked\"] = 5] = \"AfterContentChecked\";\n        LifecycleHooks[LifecycleHooks[\"AfterViewInit\"] = 6] = \"AfterViewInit\";\n        LifecycleHooks[LifecycleHooks[\"AfterViewChecked\"] = 7] = \"AfterViewChecked\";\n    })(LifecycleHooks || (LifecycleHooks = {}));\n    var LIFECYCLE_HOOKS_VALUES = [\n        LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,\n        LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,\n        LifecycleHooks.AfterViewChecked\n    ];\n    /**\n     * Lifecycle hooks are guaranteed to be called in the following order:\n     * - `OnChanges` (if any bindings have changed),\n     * - `OnInit` (after the first check only),\n     * - `DoCheck`,\n     * - `AfterContentInit`,\n     * - `AfterContentChecked`,\n     * - `AfterViewInit`,\n     * - `AfterViewChecked`,\n     * - `OnDestroy` (at the very end before destruction)\n     */\n    /**\n     * Implement this interface to get notified when any data-bound property of your directive changes.\n     *\n     * `ngOnChanges` is called right after the data-bound properties have been checked and before view\n     * and content children are checked if at least one of them has changed.\n     *\n     * The `changes` parameter contains an entry for each of the changed data-bound property. The key is\n     * the property name and the value is an instance of {@link SimpleChange}.\n     *\n     * ### Example ([live example](http://plnkr.co/edit/AHrB6opLqHDBPkt4KpdT?p=preview)):\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-cmp',\n     *   template: `<p>myProp = {{myProp}}</p>`\n     * })\n     * class MyComponent implements OnChanges {\n     *   @Input() myProp: any;\n     *\n     *   ngOnChanges(changes: SimpleChanges) {\n     *     console.log('ngOnChanges - myProp = ' + changes['myProp'].currentValue);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `\n     *     <button (click)=\"value = value + 1\">Change MyComponent</button>\n     *     <my-cmp [my-prop]=\"value\"></my-cmp>`,\n     *   directives: [MyComponent]\n     * })\n     * export class App {\n     *   value = 0;\n     * }\n     * ```\n     * @stable\n     */\n    var OnChanges = (function () {\n        function OnChanges() {\n        }\n        return OnChanges;\n    }());\n    /**\n     * Implement this interface to execute custom initialization logic after your directive's\n     * data-bound properties have been initialized.\n     *\n     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\n     * first time, and before any of its children have been checked. It is invoked only once when the\n     * directive is instantiated.\n     *\n     * ### Example ([live example](http://plnkr.co/edit/1MBypRryXd64v4pV03Yn?p=preview))\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-cmp',\n     *   template: `<p>my-component</p>`\n     * })\n     * class MyComponent implements OnInit, OnDestroy {\n     *   ngOnInit() {\n     *     console.log('ngOnInit');\n     *   }\n     *\n     *   ngOnDestroy() {\n     *     console.log('ngOnDestroy');\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `\n     *     <button (click)=\"hasChild = !hasChild\">\n     *       {{hasChild ? 'Destroy' : 'Create'}} MyComponent\n     *     </button>\n     *     <my-cmp *ngIf=\"hasChild\"></my-cmp>`,\n     *   directives: [MyComponent, NgIf]\n     * })\n     * export class App {\n     *   hasChild = true;\n     * }\n     * ```\n     * @stable\n     */\n    var OnInit = (function () {\n        function OnInit() {\n        }\n        return OnInit;\n    }());\n    /**\n     * Implement this interface to supplement the default change detection algorithm in your directive.\n     *\n     * `ngDoCheck` gets called to check the changes in the directives in addition to the default\n     * algorithm.\n     *\n     * The default change detection algorithm looks for differences by comparing bound-property values\n     * by reference across change detection runs.\n     *\n     * Note that a directive typically should not use both `DoCheck` and {@link OnChanges} to respond to\n     * changes on the same input. `ngOnChanges` will continue to be called when the default change\n     * detector\n     * detects changes, so it is usually unnecessary to respond to changes on the same input in both\n     * hooks.\n     * Reaction to the changes have to be handled from within the `ngDoCheck` callback.\n     *\n     * You can use {@link KeyValueDiffers} and {@link IterableDiffers} to help add your custom check\n     * mechanisms.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/QpnIlF0CR2i5bcYbHEUJ?p=preview))\n     *\n     * In the following example `ngDoCheck` uses an {@link IterableDiffers} to detect the updates to the\n     * array `list`:\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'custom-check',\n     *   template: `\n     *     <p>Changes:</p>\n     *     <ul>\n     *       <li *ngFor=\"let line of logs\">{{line}}</li>\n     *     </ul>`,\n     *   directives: [NgFor]\n     * })\n     * class CustomCheckComponent implements DoCheck {\n     *   @Input() list: any[];\n     *   differ: any;\n     *   logs = [];\n     *\n     *   constructor(differs: IterableDiffers) {\n     *     this.differ = differs.find([]).create(null);\n     *   }\n     *\n     *   ngDoCheck() {\n     *     var changes = this.differ.diff(this.list);\n     *\n     *     if (changes) {\n     *       changes.forEachAddedItem(r => this.logs.push('added ' + r.item));\n     *       changes.forEachRemovedItem(r => this.logs.push('removed ' + r.item))\n     *     }\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `\n     *     <button (click)=\"list.push(list.length)\">Push</button>\n     *     <button (click)=\"list.pop()\">Pop</button>\n     *     <custom-check [list]=\"list\"></custom-check>`,\n     *   directives: [CustomCheckComponent]\n     * })\n     * export class App {\n     *   list = [];\n     * }\n     * ```\n     * @stable\n     */\n    var DoCheck = (function () {\n        function DoCheck() {\n        }\n        return DoCheck;\n    }());\n    /**\n     * Implement this interface to get notified when your directive is destroyed.\n     *\n     * `ngOnDestroy` callback is typically used for any custom cleanup that needs to occur when the\n     * instance is destroyed\n     *\n     * ### Example ([live example](http://plnkr.co/edit/1MBypRryXd64v4pV03Yn?p=preview))\n     *\n     * ```typesript\n     * @Component({\n     *   selector: 'my-cmp',\n     *   template: `<p>my-component</p>`\n     * })\n     * class MyComponent implements OnInit, OnDestroy {\n     *   ngOnInit() {\n     *     console.log('ngOnInit');\n     *   }\n     *\n     *   ngOnDestroy() {\n     *     console.log('ngOnDestroy');\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `\n     *     <button (click)=\"hasChild = !hasChild\">\n     *       {{hasChild ? 'Destroy' : 'Create'}} MyComponent\n     *     </button>\n     *     <my-cmp *ngIf=\"hasChild\"></my-cmp>`,\n     *   directives: [MyComponent, NgIf]\n     * })\n     * export class App {\n     *   hasChild = true;\n     * }\n     * ```\n     *\n     *\n     * To create a stateful Pipe, you should implement this interface and set the `pure`\n     * parameter to `false` in the {@link PipeMetadata}.\n     *\n     * A stateful pipe may produce different output, given the same input. It is\n     * likely that a stateful pipe may contain state that should be cleaned up when\n     * a binding is destroyed. For example, a subscription to a stream of data may need to\n     * be disposed, or an interval may need to be cleared.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/i8pm5brO4sPaLxBx56MR?p=preview))\n     *\n     * In this example, a pipe is created to countdown its input value, updating it every\n     * 50ms. Because it maintains an internal interval, it automatically clears\n     * the interval when the binding is destroyed or the countdown completes.\n     *\n     * ```\n     * import {OnDestroy, Pipe, PipeTransform} from '@angular/core'\n     * @Pipe({name: 'countdown', pure: false})\n     * class CountDown implements PipeTransform, OnDestroy {\n     *   remainingTime:Number;\n     *   interval:SetInterval;\n     *   ngOnDestroy() {\n     *     if (this.interval) {\n     *       clearInterval(this.interval);\n     *     }\n     *   }\n     *   transform(value: any, args: any[] = []) {\n     *     if (!parseInt(value, 10)) return null;\n     *     if (typeof this.remainingTime !== 'number') {\n     *       this.remainingTime = parseInt(value, 10);\n     *     }\n     *     if (!this.interval) {\n     *       this.interval = setInterval(() => {\n     *         this.remainingTime-=50;\n     *         if (this.remainingTime <= 0) {\n     *           this.remainingTime = 0;\n     *           clearInterval(this.interval);\n     *           delete this.interval;\n     *         }\n     *       }, 50);\n     *     }\n     *     return this.remainingTime;\n     *   }\n     * }\n     * ```\n     *\n     * Invoking `{{ 10000 | countdown }}` would cause the value to be decremented by 50,\n     * every 50ms, until it reaches 0.\n     *\n     * @stable\n     */\n    var OnDestroy = (function () {\n        function OnDestroy() {\n        }\n        return OnDestroy;\n    }());\n    /**\n     * Implement this interface to get notified when your directive's content has been fully\n     * initialized.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/plamXUpsLQbIXpViZhUO?p=preview))\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'child-cmp',\n     *   template: `{{where}} child`\n     * })\n     * class ChildComponent {\n     *   @Input() where: string;\n     * }\n     *\n     * @Component({\n     *   selector: 'parent-cmp',\n     *   template: `<ng-content></ng-content>`\n     * })\n     * class ParentComponent implements AfterContentInit {\n     *   @ContentChild(ChildComponent) contentChild: ChildComponent;\n     *\n     *   constructor() {\n     *     // contentChild is not initialized yet\n     *     console.log(this.getMessage(this.contentChild));\n     *   }\n     *\n     *   ngAfterContentInit() {\n     *     // contentChild is updated after the content has been checked\n     *     console.log('AfterContentInit: ' + this.getMessage(this.contentChild));\n     *   }\n     *\n     *   private getMessage(cmp: ChildComponent): string {\n     *     return cmp ? cmp.where + ' child' : 'no child';\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `\n     *     <parent-cmp>\n     *       <child-cmp where=\"content\"></child-cmp>\n     *     </parent-cmp>`,\n     *   directives: [ParentComponent, ChildComponent]\n     * })\n     * export class App {\n     * }\n     * ```\n     * @stable\n     */\n    var AfterContentInit = (function () {\n        function AfterContentInit() {\n        }\n        return AfterContentInit;\n    }());\n    /**\n     * Implement this interface to get notified after every check of your directive's content.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/tGdrytNEKQnecIPkD7NU?p=preview))\n     *\n     * ```typescript\n     * @Component({selector: 'child-cmp', template: `{{where}} child`})\n     * class ChildComponent {\n     *   @Input() where: string;\n     * }\n     *\n     * @Component({selector: 'parent-cmp', template: `<ng-content></ng-content>`})\n     * class ParentComponent implements AfterContentChecked {\n     *   @ContentChild(ChildComponent) contentChild: ChildComponent;\n     *\n     *   constructor() {\n     *     // contentChild is not initialized yet\n     *     console.log(this.getMessage(this.contentChild));\n     *   }\n     *\n     *   ngAfterContentChecked() {\n     *     // contentChild is updated after the content has been checked\n     *     console.log('AfterContentChecked: ' + this.getMessage(this.contentChild));\n     *   }\n     *\n     *   private getMessage(cmp: ChildComponent): string {\n     *     return cmp ? cmp.where + ' child' : 'no child';\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `\n     *     <parent-cmp>\n     *       <button (click)=\"hasContent = !hasContent\">Toggle content child</button>\n     *       <child-cmp *ngIf=\"hasContent\" where=\"content\"></child-cmp>\n     *     </parent-cmp>`,\n     *   directives: [NgIf, ParentComponent, ChildComponent]\n     * })\n     * export class App {\n     *   hasContent = true;\n     * }\n     * ```\n     * @stable\n     */\n    var AfterContentChecked = (function () {\n        function AfterContentChecked() {\n        }\n        return AfterContentChecked;\n    }());\n    /**\n     * Implement this interface to get notified when your component's view has been fully initialized.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/LhTKVMEM0fkJgyp4CI1W?p=preview))\n     *\n     * ```typescript\n     * @Component({selector: 'child-cmp', template: `{{where}} child`})\n     * class ChildComponent {\n     *   @Input() where: string;\n     * }\n     *\n     * @Component({\n     *   selector: 'parent-cmp',\n     *   template: `<child-cmp where=\"view\"></child-cmp>`,\n     *   directives: [ChildComponent]\n     * })\n     * class ParentComponent implements AfterViewInit {\n     *   @ViewChild(ChildComponent) viewChild: ChildComponent;\n     *\n     *   constructor() {\n     *     // viewChild is not initialized yet\n     *     console.log(this.getMessage(this.viewChild));\n     *   }\n     *\n     *   ngAfterViewInit() {\n     *     // viewChild is updated after the view has been initialized\n     *     console.log('ngAfterViewInit: ' + this.getMessage(this.viewChild));\n     *   }\n     *\n     *   private getMessage(cmp: ChildComponent): string {\n     *     return cmp ? cmp.where + ' child' : 'no child';\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `<parent-cmp></parent-cmp>`,\n     *   directives: [ParentComponent]\n     * })\n     * export class App {\n     * }\n     * ```\n     * @stable\n     */\n    var AfterViewInit = (function () {\n        function AfterViewInit() {\n        }\n        return AfterViewInit;\n    }());\n    /**\n     * Implement this interface to get notified after every check of your component's view.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/0qDGHcPQkc25CXhTNzKU?p=preview))\n     *\n     * ```typescript\n     * @Component({selector: 'child-cmp', template: `{{where}} child`})\n     * class ChildComponent {\n     *   @Input() where: string;\n     * }\n     *\n     * @Component({\n     *   selector: 'parent-cmp',\n     *   template: `\n     *     <button (click)=\"showView = !showView\">Toggle view child</button>\n     *     <child-cmp *ngIf=\"showView\" where=\"view\"></child-cmp>`,\n     *   directives: [NgIf, ChildComponent]\n     * })\n     * class ParentComponent implements AfterViewChecked {\n     *   @ViewChild(ChildComponent) viewChild: ChildComponent;\n     *   showView = true;\n     *\n     *   constructor() {\n     *     // viewChild is not initialized yet\n     *     console.log(this.getMessage(this.viewChild));\n     *   }\n     *\n     *   ngAfterViewChecked() {\n     *     // viewChild is updated after the view has been checked\n     *     console.log('AfterViewChecked: ' + this.getMessage(this.viewChild));\n     *   }\n     *\n     *   private getMessage(cmp: ChildComponent): string {\n     *     return cmp ? cmp.where + ' child' : 'no child';\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `<parent-cmp></parent-cmp>`,\n     *   directives: [ParentComponent]\n     * })\n     * export class App {\n     * }\n     * ```\n     * @stable\n     */\n    var AfterViewChecked = (function () {\n        function AfterViewChecked() {\n        }\n        return AfterViewChecked;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Defines template and style encapsulation options available for Component's {@link Component}.\n     *\n     * See {@link ViewMetadata#encapsulation}.\n     * @stable\n     */\n    exports.ViewEncapsulation;\n    (function (ViewEncapsulation) {\n        /**\n         * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n         * Element and pre-processing the style rules provided via\n         * {@link ViewMetadata#styles} or {@link ViewMetadata#stylesUrls}, and adding the new Host Element\n         * attribute to all selectors.\n         *\n         * This is the default option.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n        /**\n         * Use the native encapsulation mechanism of the renderer.\n         *\n         * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n         * creating a ShadowRoot for Component's Host Element.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"Native\"] = 1] = \"Native\";\n        /**\n         * Don't provide any template or style encapsulation.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n    })(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));\n    var VIEW_ENCAPSULATION_VALUES = [exports.ViewEncapsulation.Emulated, exports.ViewEncapsulation.Native, exports.ViewEncapsulation.None];\n    /**\n     * Metadata properties available for configuring Views.\n     *\n     * Each Angular component requires a single `@Component` and at least one `@View` annotation. The\n     * `@View` annotation specifies the HTML template to use, and lists the directives that are active\n     * within the template.\n     *\n     * When a component is instantiated, the template is loaded into the component's shadow root, and\n     * the expressions and statements in the template are evaluated against the component.\n     *\n     * For details on the `@Component` annotation, see {@link ComponentMetadata}.\n     *\n     * ### Example\n     *\n     * ```\n     * @Component({\n     *   selector: 'greet',\n     *   template: 'Hello {{name}}!',\n     *   directives: [GreetUser, Bold]\n     * })\n     * class Greet {\n     *   name: string;\n     *\n     *   constructor() {\n     *     this.name = 'World';\n     *   }\n     * }\n     * ```\n     *\n     * @deprecated Use ComponentMetadata instead.\n     */\n    var ViewMetadata = (function () {\n        function ViewMetadata(_a) {\n            var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;\n            this.templateUrl = templateUrl;\n            this.template = template;\n            this.styleUrls = styleUrls;\n            this.styles = styles;\n            this.encapsulation = encapsulation;\n            this.animations = animations;\n            this.interpolation = interpolation;\n        }\n        return ViewMetadata;\n    }());\n\n    // TODO(alexeagle): remove the duplication of this doc. It is copied from ComponentMetadata.\n    /**\n     * Declare reusable UI building blocks for an application.\n     *\n     * Each Angular component requires a single `@Component` annotation. The `@Component`\n     * annotation specifies when a component is instantiated, and which properties and hostListeners it\n     * binds to.\n     *\n     * When a component is instantiated, Angular\n     * - creates a shadow DOM for the component.\n     * - loads the selected template into the shadow DOM.\n     * - creates all the injectable objects configured with `providers` and `viewProviders`.\n     *\n     * All template expressions and statements are then evaluated against the component instance.\n     *\n     * ## Lifecycle hooks\n     *\n     * When the component class implements some {@linkDocs guide/lifecycle-hooks} the\n     * callbacks are called by the change detection at defined points in time during the life of the\n     * component.\n     *\n     * ### Example\n     *\n     * {@example core/ts/metadata/metadata.ts region='component'}\n     * @stable\n     * @Annotation\n     */\n    var Component = makeDecorator(ComponentMetadata);\n    // TODO(alexeagle): remove the duplication of this doc. It is copied from DirectiveMetadata.\n    /**\n     * Directives allow you to attach behavior to elements in the DOM.\n     *\n     * {@link DirectiveMetadata}s with an embedded view are called {@link ComponentMetadata}s.\n     *\n     * A directive consists of a single directive annotation and a controller class. When the\n     * directive's `selector` matches\n     * elements in the DOM, the following steps occur:\n     *\n     * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor\n     * arguments.\n     * 2. Angular instantiates directives for each matched element using `ElementInjector` in a\n     * depth-first order,\n     *    as declared in the HTML.\n     *\n     * ## Understanding How Injection Works\n     *\n     * There are three stages of injection resolution.\n     * - *Pre-existing Injectors*:\n     *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if\n     * the dependency was\n     *     specified as `@Optional`, returns `null`.\n     *   - The platform injector resolves browser singleton resources, such as: cookies, title,\n     * location, and others.\n     * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow\n     * the same parent-child hierarchy\n     *     as the component instances in the DOM.\n     * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each\n     * element has an `ElementInjector`\n     *     which follow the same parent-child hierarchy as the DOM elements themselves.\n     *\n     * When a template is instantiated, it also must instantiate the corresponding directives in a\n     * depth-first order. The\n     * current `ElementInjector` resolves the constructor dependencies for each directive.\n     *\n     * Angular then resolves dependencies as follows, according to the order in which they appear in the\n     * {@link ComponentMetadata}:\n     *\n     * 1. Dependencies on the current element\n     * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary\n     * 3. Dependencies on component injectors and their parents until it encounters the root component\n     * 4. Dependencies on pre-existing injectors\n     *\n     *\n     * The `ElementInjector` can inject other directives, element-specific special objects, or it can\n     * delegate to the parent\n     * injector.\n     *\n     * To inject other directives, declare the constructor parameter as:\n     * - `directive:DirectiveType`: a directive on the current element only\n     * - `@Host() directive:DirectiveType`: any directive that matches the type between the current\n     * element and the\n     *    Shadow DOM root.\n     * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child\n     * directives.\n     * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any\n     * child directives.\n     *\n     * To inject element-specific special objects, declare the constructor parameter as:\n     * - `element: ElementRef` to obtain a reference to logical element in the view.\n     * - `viewContainer: ViewContainerRef` to control child template instantiation, for\n     * {@link DirectiveMetadata} directives only\n     * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.\n     *\n     * ### Example\n     *\n     * The following example demonstrates how dependency injection resolves constructor arguments in\n     * practice.\n     *\n     *\n     * Assume this HTML template:\n     *\n     * ```\n     * <div dependency=\"1\">\n     *   <div dependency=\"2\">\n     *     <div dependency=\"3\" my-directive>\n     *       <div dependency=\"4\">\n     *         <div dependency=\"5\"></div>\n     *       </div>\n     *       <div dependency=\"6\"></div>\n     *     </div>\n     *   </div>\n     * </div>\n     * ```\n     *\n     * With the following `dependency` decorator and `SomeService` injectable class.\n     *\n     * ```\n     * @Injectable()\n     * class SomeService {\n     * }\n     *\n     * @Directive({\n     *   selector: '[dependency]',\n     *   inputs: [\n     *     'id: dependency'\n     *   ]\n     * })\n     * class Dependency {\n     *   id:string;\n     * }\n     * ```\n     *\n     * Let's step through the different ways in which `MyDirective` could be declared...\n     *\n     *\n     * ### No injection\n     *\n     * Here the constructor is declared with no arguments, therefore nothing is injected into\n     * `MyDirective`.\n     *\n     * ```\n     * @Directive({ selector: '[my-directive]' })\n     * class MyDirective {\n     *   constructor() {\n     *   }\n     * }\n     * ```\n     *\n     * This directive would be instantiated with no dependencies.\n     *\n     *\n     * ### Component-level injection\n     *\n     * Directives can inject any injectable instance from the closest component injector or any of its\n     * parents.\n     *\n     * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type\n     * from the parent\n     * component's injector.\n     * ```\n     * @Directive({ selector: '[my-directive]' })\n     * class MyDirective {\n     *   constructor(someService: SomeService) {\n     *   }\n     * }\n     * ```\n     *\n     * This directive would be instantiated with a dependency on `SomeService`.\n     *\n     *\n     * ### Injecting a directive from the current element\n     *\n     * Directives can inject other directives declared on the current element.\n     *\n     * ```\n     * @Directive({ selector: '[my-directive]' })\n     * class MyDirective {\n     *   constructor(dependency: Dependency) {\n     *     expect(dependency.id).toEqual(3);\n     *   }\n     * }\n     * ```\n     * This directive would be instantiated with `Dependency` declared at the same element, in this case\n     * `dependency=\"3\"`.\n     *\n     * ### Injecting a directive from any ancestor elements\n     *\n     * Directives can inject other directives declared on any ancestor element (in the current Shadow\n     * DOM), i.e. on the current element, the\n     * parent element, or its parents.\n     * ```\n     * @Directive({ selector: '[my-directive]' })\n     * class MyDirective {\n     *   constructor(@Host() dependency: Dependency) {\n     *     expect(dependency.id).toEqual(2);\n     *   }\n     * }\n     * ```\n     *\n     * `@Host` checks the current element, the parent, as well as its parents recursively. If\n     * `dependency=\"2\"` didn't\n     * exist on the direct parent, this injection would\n     * have returned\n     * `dependency=\"1\"`.\n     *\n     *\n     * ### Injecting a live collection of direct child directives\n     *\n     *\n     * A directive can also query for other child directives. Since parent directives are instantiated\n     * before child directives, a directive can't simply inject the list of child directives. Instead,\n     * the directive injects a {@link QueryList}, which updates its contents as children are added,\n     * removed, or moved by a directive that uses a {@link ViewContainerRef} such as a `ngFor`, an\n     * `ngIf`, or an `ngSwitch`.\n     *\n     * ```\n     * @Directive({ selector: '[my-directive]' })\n     * class MyDirective {\n     *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {\n     *   }\n     * }\n     * ```\n     *\n     * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and\n     * 6. Here, `Dependency` 5 would not be included, because it is not a direct child.\n     *\n     * ### Injecting a live collection of descendant directives\n     *\n     * By passing the descendant flag to `@Query` above, we can include the children of the child\n     * elements.\n     *\n     * ```\n     * @Directive({ selector: '[my-directive]' })\n     * class MyDirective {\n     *   constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList<Dependency>) {\n     *   }\n     * }\n     * ```\n     *\n     * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.\n     *\n     * ### Optional injection\n     *\n     * The normal behavior of directives is to return an error when a specified dependency cannot be\n     * resolved. If you\n     * would like to inject `null` on unresolved dependency instead, you can annotate that dependency\n     * with `@Optional()`.\n     * This explicitly permits the author of a template to treat some of the surrounding directives as\n     * optional.\n     *\n     * ```\n     * @Directive({ selector: '[my-directive]' })\n     * class MyDirective {\n     *   constructor(@Optional() dependency:Dependency) {\n     *   }\n     * }\n     * ```\n     *\n     * This directive would be instantiated with a `Dependency` directive found on the current element.\n     * If none can be\n     * found, the injector supplies `null` instead of throwing an error.\n     *\n     * ### Example\n     *\n     * Here we use a decorator directive to simply define basic tool-tip behavior.\n     *\n     * ```\n     * @Directive({\n     *   selector: '[tooltip]',\n     *   inputs: [\n     *     'text: tooltip'\n     *   ],\n     *   host: {\n     *     '(mouseenter)': 'onMouseEnter()',\n     *     '(mouseleave)': 'onMouseLeave()'\n     *   }\n     * })\n     * class Tooltip{\n     *   text:string;\n     *   overlay:Overlay; // NOT YET IMPLEMENTED\n     *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED\n     *\n     *   constructor(overlayManager:OverlayManager) {\n     *     this.overlayManager = overlayManager;\n     *   }\n     *\n     *   onMouseEnter() {\n     *     // exact signature to be determined\n     *     this.overlay = this.overlayManager.open(text, ...);\n     *   }\n     *\n     *   onMouseLeave() {\n     *     this.overlay.close();\n     *     this.overlay = null;\n     *   }\n     * }\n     * ```\n     * In our HTML template, we can then add this behavior to a `<div>` or any other element with the\n     * `tooltip` selector,\n     * like so:\n     *\n     * ```\n     * <div tooltip=\"some text here\"></div>\n     * ```\n     *\n     * Directives can also control the instantiation, destruction, and positioning of inline template\n     * elements:\n     *\n     * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at\n     * runtime.\n     * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a\n     * location in the current view\n     * where these actions are performed.\n     *\n     * Views are always created as children of the current {@link ComponentMetadata}, and as siblings of\n     * the\n     * `<template>` element. Thus a\n     * directive in a child view cannot inject the directive that created it.\n     *\n     * Since directives that create views via ViewContainers are common in Angular, and using the full\n     * `<template>` element syntax is wordy, Angular\n     * also supports a shorthand notation: `<li *foo=\"bar\">` and `<li template=\"foo: bar\">` are\n     * equivalent.\n     *\n     * Thus,\n     *\n     * ```\n     * <ul>\n     *   <li *foo=\"bar\" title=\"text\"></li>\n     * </ul>\n     * ```\n     *\n     * Expands in use to:\n     *\n     * ```\n     * <ul>\n     *   <template [foo]=\"bar\">\n     *     <li title=\"text\"></li>\n     *   </template>\n     * </ul>\n     * ```\n     *\n     * Notice that although the shorthand places `*foo=\"bar\"` within the `<li>` element, the binding for\n     * the directive\n     * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.\n     *\n     * ## Lifecycle hooks\n     *\n     * When the directive class implements some {@linkDocs guide/lifecycle-hooks} the\n     * callbacks are called by the change detection at defined points in time during the life of the\n     * directive.\n     *\n     * ### Example\n     *\n     * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.\n     *\n     * Here is a simple directive that triggers on an `unless` selector:\n     *\n     * ```\n     * @Directive({\n     *   selector: '[unless]',\n     *   inputs: ['unless']\n     * })\n     * export class Unless {\n     *   viewContainer: ViewContainerRef;\n     *   templateRef: TemplateRef;\n     *   prevCondition: boolean;\n     *\n     *   constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {\n     *     this.viewContainer = viewContainer;\n     *     this.templateRef = templateRef;\n     *     this.prevCondition = null;\n     *   }\n     *\n     *   set unless(newCondition) {\n     *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {\n     *       this.prevCondition = true;\n     *       this.viewContainer.clear();\n     *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {\n     *       this.prevCondition = false;\n     *       this.viewContainer.create(this.templateRef);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * We can then use this `unless` selector in a template:\n     * ```\n     * <ul>\n     *   <li *unless=\"expr\"></li>\n     * </ul>\n     * ```\n     *\n     * Once the directive instantiates the child view, the shorthand notation for the template expands\n     * and the result is:\n     *\n     * ```\n     * <ul>\n     *   <template [unless]=\"exp\">\n     *     <li></li>\n     *   </template>\n     *   <li></li>\n     * </ul>\n     * ```\n     *\n     * Note also that although the `<li></li>` template still exists inside the `<template></template>`,\n     * the instantiated\n     * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.\n     * @stable\n     * @Annotation\n     */\n    var Directive = makeDecorator(DirectiveMetadata);\n    /**\n     * Specifies that a constant attribute value should be injected.\n     *\n     * The directive can inject constant string literals of host element attributes.\n     *\n     * ### Example\n     *\n     * Suppose we have an `<input>` element and want to know its `type`.\n     *\n     * ```html\n     * <input type=\"text\">\n     * ```\n     *\n     * A decorator can inject string literal `text` like so:\n     *\n     * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n     * @stable\n     * @Annotation\n     */\n    var Attribute = makeParamDecorator(AttributeMetadata);\n    // TODO(alexeagle): remove the duplication of this doc. It is copied from ContentChildrenMetadata.\n    /**\n     * Configures a content query.\n     *\n     * Content queries are set before the `ngAfterContentInit` callback is called.\n     *\n     * ### Example\n     *\n     * ```\n     * @Directive({\n     *   selector: 'someDir'\n     * })\n     * class SomeDir {\n     *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;\n     *\n     *   ngAfterContentInit() {\n     *     // contentChildren is set\n     *   }\n     * }\n     * ```\n     * @stable\n     * @Annotation\n     */\n    var ContentChildren = makePropDecorator(ContentChildrenMetadata);\n    // TODO(alexeagle): remove the duplication of this doc. It is copied from ContentChildMetadata.\n    /**\n     * Configures a content query.\n     *\n     * Content queries are set before the `ngAfterContentInit` callback is called.\n     *\n     * ### Example\n     *\n     * ```\n     * @Directive({\n     *   selector: 'someDir'\n     * })\n     * class SomeDir {\n     *   @ContentChild(ChildDirective) contentChild;\n     *   @ContentChild('container_ref') containerChild\n     *\n     *   ngAfterContentInit() {\n     *     // contentChild is set\n     *     // containerChild is set\n     *   }\n     * }\n     * ```\n     *\n     * ```html\n     * <container #container_ref>\n     *   <item>a</item>\n     *   <item>b</item>\n     * </container>\n     * ```\n     * @stable\n     * @Annotation\n     */\n    var ContentChild = makePropDecorator(ContentChildMetadata);\n    // TODO(alexeagle): remove the duplication of this doc. It is copied from ViewChildrenMetadata.\n    /**\n     * Declares a list of child element references.\n     *\n     * Angular automatically updates the list when the DOM is updated.\n     *\n     * `ViewChildren` takes a argument to select elements.\n     *\n     * - If the argument is a type, directives or components with the type will be bound.\n     *\n     * - If the argument is a string, the string is interpreted as a list of comma-separated selectors.\n     * For each selector, an element containing the matching template variable (e.g. `#child`) will be\n     * bound.\n     *\n     * View children are set before the `ngAfterViewInit` callback is called.\n     *\n     * ### Example\n     *\n     * With type selector:\n     *\n     * ```\n     * @Component({\n     *   selector: 'child-cmp',\n     *   template: '<p>child</p>'\n     * })\n     * class ChildCmp {\n     *   doSomething() {}\n     * }\n     *\n     * @Component({\n     *   selector: 'some-cmp',\n     *   template: `\n     *     <child-cmp></child-cmp>\n     *     <child-cmp></child-cmp>\n     *     <child-cmp></child-cmp>\n     *   `,\n     *   directives: [ChildCmp]\n     * })\n     * class SomeCmp {\n     *   @ViewChildren(ChildCmp) children:QueryList<ChildCmp>;\n     *\n     *   ngAfterViewInit() {\n     *     // children are set\n     *     this.children.toArray().forEach((child)=>child.doSomething());\n     *   }\n     * }\n     * ```\n     *\n     * With string selector:\n     *\n     * ```\n     * @Component({\n     *   selector: 'child-cmp',\n     *   template: '<p>child</p>'\n     * })\n     * class ChildCmp {\n     *   doSomething() {}\n     * }\n     *\n     * @Component({\n     *   selector: 'some-cmp',\n     *   template: `\n     *     <child-cmp #child1></child-cmp>\n     *     <child-cmp #child2></child-cmp>\n     *     <child-cmp #child3></child-cmp>\n     *   `,\n     *   directives: [ChildCmp]\n     * })\n     * class SomeCmp {\n     *   @ViewChildren('child1,child2,child3') children:QueryList<ChildCmp>;\n     *\n     *   ngAfterViewInit() {\n     *     // children are set\n     *     this.children.toArray().forEach((child)=>child.doSomething());\n     *   }\n     * }\n     * ```\n     *\n     * See also: [ViewChildrenMetadata]\n     * @stable\n     * @Annotation\n     */\n    var ViewChildren = makePropDecorator(ViewChildrenMetadata);\n    // TODO(alexeagle): remove the duplication of this doc. It is copied from ViewChildMetadata.\n    /**\n     * Declares a reference to a child element.\n     *\n     * `ViewChildren` takes a argument to select elements.\n     *\n     * - If the argument is a type, a directive or a component with the type will be bound.\n     *\n     * - If the argument is a string, the string is interpreted as a selector. An element containing the\n     * matching template variable (e.g. `#child`) will be bound.\n     *\n     * In either case, `@ViewChild()` assigns the first (looking from above) element if there are\n     * multiple matches.\n     *\n     * View child is set before the `ngAfterViewInit` callback is called.\n     *\n     * ### Example\n     *\n     * With type selector:\n     *\n     * ```\n     * @Component({\n     *   selector: 'child-cmp',\n     *   template: '<p>child</p>'\n     * })\n     * class ChildCmp {\n     *   doSomething() {}\n     * }\n     *\n     * @Component({\n     *   selector: 'some-cmp',\n     *   template: '<child-cmp></child-cmp>',\n     *   directives: [ChildCmp]\n     * })\n     * class SomeCmp {\n     *   @ViewChild(ChildCmp) child:ChildCmp;\n     *\n     *   ngAfterViewInit() {\n     *     // child is set\n     *     this.child.doSomething();\n     *   }\n     * }\n     * ```\n     *\n     * With string selector:\n     *\n     * ```\n     * @Component({\n     *   selector: 'child-cmp',\n     *   template: '<p>child</p>'\n     * })\n     * class ChildCmp {\n     *   doSomething() {}\n     * }\n     *\n     * @Component({\n     *   selector: 'some-cmp',\n     *   template: '<child-cmp #child></child-cmp>',\n     *   directives: [ChildCmp]\n     * })\n     * class SomeCmp {\n     *   @ViewChild('child') child:ChildCmp;\n     *\n     *   ngAfterViewInit() {\n     *     // child is set\n     *     this.child.doSomething();\n     *   }\n     * }\n     * ```\n     * See also: [ViewChildMetadata]\n     * @stable\n     * @Annotation\n     */\n    var ViewChild = makePropDecorator(ViewChildMetadata);\n    // TODO(alexeagle): remove the duplication of this doc. It is copied from PipeMetadata.\n    /**\n     * Declare reusable pipe function.\n     *\n     * ### Example\n     *\n     * {@example core/ts/metadata/metadata.ts region='pipe'}\n     * @stable\n     * @Annotation\n     */\n    var Pipe = makeDecorator(PipeMetadata);\n    // TODO(alexeagle): remove the duplication of this doc. It is copied from InputMetadata.\n    /**\n     * Declares a data-bound input property.\n     *\n     * Angular automatically updates data-bound properties during change detection.\n     *\n     * `InputMetadata` takes an optional parameter that specifies the name\n     * used when instantiating a component in the template. When not provided,\n     * the name of the decorated property is used.\n     *\n     * ### Example\n     *\n     * The following example creates a component with two input properties.\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'bank-account',\n     *   template: `\n     *     Bank Name: {{bankName}}\n     *     Account Id: {{id}}\n     *   `\n     * })\n     * class BankAccount {\n     *   @Input() bankName: string;\n     *   @Input('account-id') id: string;\n     *\n     *   // this property is not bound, and won't be automatically updated by Angular\n     *   normalizedBankName: string;\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `\n     *     <bank-account bank-name=\"RBC\" account-id=\"4747\"></bank-account>\n     *   `,\n     *   directives: [BankAccount]\n     * })\n     * class App {}\n     * ```\n     * @stable\n     * @Annotation\n     */\n    var Input = makePropDecorator(InputMetadata);\n    // TODO(alexeagle): remove the duplication of this doc. It is copied from OutputMetadata.\n    /**\n     * Declares an event-bound output property.\n     *\n     * When an output property emits an event, an event handler attached to that event\n     * the template is invoked.\n     *\n     * `OutputMetadata` takes an optional parameter that specifies the name\n     * used when instantiating a component in the template. When not provided,\n     * the name of the decorated property is used.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * @Directive({\n     *   selector: 'interval-dir',\n     * })\n     * class IntervalDir {\n     *   @Output() everySecond = new EventEmitter();\n     *   @Output('everyFiveSeconds') five5Secs = new EventEmitter();\n     *\n     *   constructor() {\n     *     setInterval(() => this.everySecond.emit(\"event\"), 1000);\n     *     setInterval(() => this.five5Secs.emit(\"event\"), 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `\n     *     <interval-dir (everySecond)=\"everySecond()\" (everyFiveSeconds)=\"everyFiveSeconds()\">\n     *     </interval-dir>\n     *   `,\n     *   directives: [IntervalDir]\n     * })\n     * class App {\n     *   everySecond() { console.log('second'); }\n     *   everyFiveSeconds() { console.log('five seconds'); }\n     * }\n     * ```\n     * @stable\n     * @Annotation\n     */\n    var Output = makePropDecorator(OutputMetadata);\n    // TODO(alexeagle): remove the duplication of this doc. It is copied from HostBindingMetadata.\n    /**\n     * Declares a host property binding.\n     *\n     * Angular automatically checks host property bindings during change detection.\n     * If a binding changes, it will update the host element of the directive.\n     *\n     * `HostBindingMetadata` takes an optional parameter that specifies the property\n     * name of the host element that will be updated. When not provided,\n     * the class property name is used.\n     *\n     * ### Example\n     *\n     * The following example creates a directive that sets the `valid` and `invalid` classes\n     * on the DOM element that has ngModel directive on it.\n     *\n     * ```typescript\n     * @Directive({selector: '[ngModel]'})\n     * class NgModelStatus {\n     *   constructor(public control:NgModel) {}\n     *   @HostBinding('class.valid') get valid() { return this.control.valid; }\n     *   @HostBinding('class.invalid') get invalid() { return this.control.invalid; }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `<input [(ngModel)]=\"prop\">`,\n     *   directives: [FORM_DIRECTIVES, NgModelStatus]\n     * })\n     * class App {\n     *   prop;\n     * }\n     * ```\n     * @stable\n     * @Annotation\n     */\n    var HostBinding = makePropDecorator(HostBindingMetadata);\n    // TODO(alexeagle): remove the duplication of this doc. It is copied from HostListenerMetadata.\n    /**\n     * Declares a host listener.\n     *\n     * Angular will invoke the decorated method when the host element emits the specified event.\n     *\n     * If the decorated method returns `false`, then `preventDefault` is applied on the DOM\n     * event.\n     *\n     * ### Example\n     *\n     * The following example declares a directive that attaches a click listener to the button and\n     * counts clicks.\n     *\n     * ```typescript\n     * @Directive({selector: 'button[counting]'})\n     * class CountClicks {\n     *   numberOfClicks = 0;\n     *\n     *   @HostListener('click', ['$event.target'])\n     *   onClick(btn) {\n     *     console.log(\"button\", btn, \"number of clicks:\", this.numberOfClicks++);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `<button counting>Increment</button>`,\n     *   directives: [CountClicks]\n     * })\n     * class App {}\n     * ```\n     * @stable\n     * @Annotation\n     */\n    var HostListener = makePropDecorator(HostListenerMetadata);\n    /**\n     * Declares an ng module.\n     * @stable\n     * @Annotation\n     */\n    var NgModule = makeDecorator(NgModuleMetadata);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Provides a hook for centralized exception handling.\n     *\n     * The default implementation of `ErrorHandler` prints error messages to the `Console`. To\n     * intercept error handling,\n     * write a custom exception handler that replaces this default as appropriate for your app.\n     *\n     * ### Example\n     *\n     * ```javascript\n     *\n     * class MyErrorHandler implements ErrorHandler {\n     *   call(error, stackTrace = null, reason = null) {\n     *     // do something with the exception\n     *   }\n     * }\n     *\n     * @NgModule({\n     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n     * })\n     * class MyModule {}\n     * ```\n     * @stable\n     */\n    var ErrorHandler = (function () {\n        function ErrorHandler(rethrowError) {\n            if (rethrowError === void 0) { rethrowError = true; }\n            /**\n             * @internal\n             */\n            this._console = console;\n            this.rethrowError = rethrowError;\n        }\n        ErrorHandler.prototype.handleError = function (error) {\n            var originalError = this._findOriginalError(error);\n            var originalStack = this._findOriginalStack(error);\n            var context = this._findContext(error);\n            this._console.error(\"EXCEPTION: \" + this._extractMessage(error));\n            if (originalError) {\n                this._console.error(\"ORIGINAL EXCEPTION: \" + this._extractMessage(originalError));\n            }\n            if (originalStack) {\n                this._console.error('ORIGINAL STACKTRACE:');\n                this._console.error(originalStack);\n            }\n            if (context) {\n                this._console.error('ERROR CONTEXT:');\n                this._console.error(context);\n            }\n            // We rethrow exceptions, so operations like 'bootstrap' will result in an error\n            // when an error happens. If we do not rethrow, bootstrap will always succeed.\n            if (this.rethrowError)\n                throw error;\n        };\n        /** @internal */\n        ErrorHandler.prototype._extractMessage = function (error) {\n            return error instanceof Error ? error.message : error.toString();\n        };\n        /** @internal */\n        ErrorHandler.prototype._findContext = function (error) {\n            if (error) {\n                return error.context ? error.context :\n                    this._findContext(error.originalError);\n            }\n            else {\n                return null;\n            }\n        };\n        /** @internal */\n        ErrorHandler.prototype._findOriginalError = function (error) {\n            var e = error.originalError;\n            while (e && e.originalError) {\n                e = e.originalError;\n            }\n            return e;\n        };\n        /** @internal */\n        ErrorHandler.prototype._findOriginalStack = function (error) {\n            if (!(error instanceof Error))\n                return null;\n            var e = error;\n            var stack = e.stack;\n            while (e instanceof Error && e.originalError) {\n                e = e.originalError;\n                if (e instanceof Error && e.stack) {\n                    stack = e.stack;\n                }\n            }\n            return stack;\n        };\n        return ErrorHandler;\n    }());\n\n    /**\n     * A function that will be executed when an application is initialized.\n     * @experimental\n     */\n    var APP_INITIALIZER = new OpaqueToken('Application Initializer');\n    /**\n     * A class that reflects the state of running {@link APP_INITIALIZER}s.\n     *\n     * @experimental\n     */\n    var ApplicationInitStatus = (function () {\n        function ApplicationInitStatus(appInits) {\n            var _this = this;\n            this._done = false;\n            var asyncInitPromises = [];\n            if (appInits) {\n                for (var i = 0; i < appInits.length; i++) {\n                    var initResult = appInits[i]();\n                    if (isPromise(initResult)) {\n                        asyncInitPromises.push(initResult);\n                    }\n                }\n            }\n            this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });\n            if (asyncInitPromises.length === 0) {\n                this._done = true;\n            }\n        }\n        Object.defineProperty(ApplicationInitStatus.prototype, \"done\", {\n            get: function () { return this._done; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ApplicationInitStatus.prototype, \"donePromise\", {\n            get: function () { return this._donePromise; },\n            enumerable: true,\n            configurable: true\n        });\n        ApplicationInitStatus.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        ApplicationInitStatus.ctorParameters = [\n            { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },\n        ];\n        return ApplicationInitStatus;\n    }());\n\n    /**\n     * A DI Token representing a unique string id assigned to the application by Angular and used\n     * primarily for prefixing application attributes and CSS styles when\n     * {@link ViewEncapsulation#Emulated} is being used.\n     *\n     * If you need to avoid randomly generated value to be used as an application id, you can provide\n     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n     * using this token.\n     * @experimental\n     */\n    var APP_ID = new OpaqueToken('AppId');\n    function _appIdRandomProviderFactory() {\n        return \"\" + _randomChar() + _randomChar() + _randomChar();\n    }\n    /**\n     * Providers that will generate a random APP_ID_TOKEN.\n     * @experimental\n     */\n    var APP_ID_RANDOM_PROVIDER = {\n        provide: APP_ID,\n        useFactory: _appIdRandomProviderFactory,\n        deps: []\n    };\n    function _randomChar() {\n        return StringWrapper.fromCharCode(97 + Math.floor(Math.random() * 25));\n    }\n    /**\n     * A function that will be executed when a platform is initialized.\n     * @experimental\n     */\n    var PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');\n    /**\n     * All callbacks provided via this token will be called for every component that is bootstrapped.\n     * Signature of the callback:\n     *\n     * `(componentRef: ComponentRef) => void`.\n     *\n     * @experimental\n     */\n    var APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');\n    /**\n     * A token which indicates the root directory of the application\n     * @experimental\n     */\n    var PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');\n\n    var Console = (function () {\n        function Console() {\n        }\n        Console.prototype.log = function (message) { print(message); };\n        // Note: for reporting errors use `DOM.logError()` as it is platform specific\n        Console.prototype.warn = function (message) { warn(message); };\n        Console.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        Console.ctorParameters = [];\n        return Console;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$7 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Indicates that a component is still being loaded in a synchronous compile.\n     *\n     * @stable\n     */\n    var ComponentStillLoadingError = (function (_super) {\n        __extends$7(ComponentStillLoadingError, _super);\n        function ComponentStillLoadingError(compType) {\n            _super.call(this, \"Can't compile synchronously as \" + stringify(compType) + \" is still being loaded!\");\n            this.compType = compType;\n        }\n        return ComponentStillLoadingError;\n    }(BaseError));\n    /**\n     * Combination of NgModuleFactory and ComponentFactorys.\n     *\n     * @experimental\n     */\n    var ModuleWithComponentFactories = (function () {\n        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n            this.ngModuleFactory = ngModuleFactory;\n            this.componentFactories = componentFactories;\n        }\n        return ModuleWithComponentFactories;\n    }());\n    function _throwError() {\n        throw new Error(\"Runtime compiler is not loaded\");\n    }\n    /**\n     * Low-level service for running the angular compiler during runtime\n     * to create {@link ComponentFactory}s, which\n     * can later be used to create and render a Component instance.\n     *\n     * Each `@NgModule` provides an own `Compiler` to its injector,\n     * that will use the directives/pipes of the ng module for compilation\n     * of components.\n     * @stable\n     */\n    var Compiler = (function () {\n        function Compiler() {\n        }\n        /**\n         * Compiles the given NgModule and all of its components. All templates of the components listed\n         * in `entryComponents`\n         * have to be inlined. Otherwise throws a {@link ComponentStillLoadingError}.\n         */\n        Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };\n        /**\n         * Compiles the given NgModule and all of its components\n         */\n        Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };\n        /**\n         * Same as {@link compileModuleSync} put also creates ComponentFactories for all components.\n         */\n        Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n            throw _throwError();\n        };\n        /**\n         * Same as {@link compileModuleAsync} put also creates ComponentFactories for all components.\n         */\n        Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n            throw _throwError();\n        };\n        /**\n         * Clears all caches\n         */\n        Compiler.prototype.clearCache = function () { };\n        /**\n         * Clears the cache for the given component/ngModule.\n         */\n        Compiler.prototype.clearCacheFor = function (type) { };\n        return Compiler;\n    }());\n    /**\n     * Token to provide CompilerOptions in the platform injector.\n     *\n     * @experimental\n     */\n    var COMPILER_OPTIONS = new OpaqueToken('compilerOptions');\n    /**\n     * A factory for creating a Compiler\n     *\n     * @experimental\n     */\n    var CompilerFactory = (function () {\n        function CompilerFactory() {\n        }\n        return CompilerFactory;\n    }());\n\n    var DefaultIterableDifferFactory = (function () {\n        function DefaultIterableDifferFactory() {\n        }\n        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };\n        DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {\n            return new DefaultIterableDiffer(trackByFn);\n        };\n        return DefaultIterableDifferFactory;\n    }());\n    var trackByIdentity = function (index, item) { return item; };\n    /**\n     * @stable\n     */\n    var DefaultIterableDiffer = (function () {\n        function DefaultIterableDiffer(_trackByFn) {\n            this._trackByFn = _trackByFn;\n            this._length = null;\n            this._collection = null;\n            // Keeps track of the used records at any point in time (during & across `_check()` calls)\n            this._linkedRecords = null;\n            // Keeps track of the removed records at any point in time during `_check()` calls.\n            this._unlinkedRecords = null;\n            this._previousItHead = null;\n            this._itHead = null;\n            this._itTail = null;\n            this._additionsHead = null;\n            this._additionsTail = null;\n            this._movesHead = null;\n            this._movesTail = null;\n            this._removalsHead = null;\n            this._removalsTail = null;\n            // Keeps track of records where custom track by is the same, but item identity has changed\n            this._identityChangesHead = null;\n            this._identityChangesTail = null;\n            this._trackByFn = isPresent(this._trackByFn) ? this._trackByFn : trackByIdentity;\n        }\n        Object.defineProperty(DefaultIterableDiffer.prototype, \"collection\", {\n            get: function () { return this._collection; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DefaultIterableDiffer.prototype, \"length\", {\n            get: function () { return this._length; },\n            enumerable: true,\n            configurable: true\n        });\n        DefaultIterableDiffer.prototype.forEachItem = function (fn) {\n            var record;\n            for (record = this._itHead; record !== null; record = record._next) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {\n            var nextIt = this._itHead;\n            var nextRemove = this._removalsHead;\n            var addRemoveOffset = 0;\n            var moveOffsets = null;\n            while (nextIt || nextRemove) {\n                // Figure out which is the next record to process\n                // Order: remove, add, move\n                var record = !nextRemove ||\n                    nextIt &&\n                        nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n                    nextIt :\n                    nextRemove;\n                var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n                var currentIndex = record.currentIndex;\n                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n                if (record === nextRemove) {\n                    addRemoveOffset--;\n                    nextRemove = nextRemove._nextRemoved;\n                }\n                else {\n                    nextIt = nextIt._next;\n                    if (record.previousIndex == null) {\n                        addRemoveOffset++;\n                    }\n                    else {\n                        // INVARIANT:  currentIndex < previousIndex\n                        if (!moveOffsets)\n                            moveOffsets = [];\n                        var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                        var localCurrentIndex = currentIndex - addRemoveOffset;\n                        if (localMovePreviousIndex != localCurrentIndex) {\n                            for (var i = 0; i < localMovePreviousIndex; i++) {\n                                var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                                var index = offset + i;\n                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                    moveOffsets[i] = offset + 1;\n                                }\n                            }\n                            var previousIndex = record.previousIndex;\n                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                        }\n                    }\n                }\n                if (adjPreviousIndex !== currentIndex) {\n                    fn(record, adjPreviousIndex, currentIndex);\n                }\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {\n            var record;\n            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {\n            var record;\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {\n            var record;\n            for (record = this._movesHead; record !== null; record = record._nextMoved) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {\n            var record;\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {\n            var record;\n            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.diff = function (collection) {\n            if (isBlank(collection))\n                collection = [];\n            if (!isListLikeIterable(collection)) {\n                throw new Error(\"Error trying to diff '\" + collection + \"'\");\n            }\n            if (this.check(collection)) {\n                return this;\n            }\n            else {\n                return null;\n            }\n        };\n        DefaultIterableDiffer.prototype.onDestroy = function () { };\n        // todo(vicb): optim for UnmodifiableListView (frozen arrays)\n        DefaultIterableDiffer.prototype.check = function (collection) {\n            var _this = this;\n            this._reset();\n            var record = this._itHead;\n            var mayBeDirty = false;\n            var index;\n            var item;\n            var itemTrackBy;\n            if (isArray(collection)) {\n                var list = collection;\n                this._length = collection.length;\n                for (index = 0; index < this._length; index++) {\n                    item = list[index];\n                    itemTrackBy = this._trackByFn(index, item);\n                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                        record = this._mismatch(record, item, itemTrackBy, index);\n                        mayBeDirty = true;\n                    }\n                    else {\n                        if (mayBeDirty) {\n                            // TODO(misko): can we limit this to duplicates only?\n                            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n                        }\n                        if (!looseIdentical(record.item, item))\n                            this._addIdentityChange(record, item);\n                    }\n                    record = record._next;\n                }\n            }\n            else {\n                index = 0;\n                iterateListLike(collection, function (item /** TODO #9100 */) {\n                    itemTrackBy = _this._trackByFn(index, item);\n                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                        record = _this._mismatch(record, item, itemTrackBy, index);\n                        mayBeDirty = true;\n                    }\n                    else {\n                        if (mayBeDirty) {\n                            // TODO(misko): can we limit this to duplicates only?\n                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                        }\n                        if (!looseIdentical(record.item, item))\n                            _this._addIdentityChange(record, item);\n                    }\n                    record = record._next;\n                    index++;\n                });\n                this._length = index;\n            }\n            this._truncate(record);\n            this._collection = collection;\n            return this.isDirty;\n        };\n        Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n            /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n             * changes.\n             */\n            get: function () {\n                return this._additionsHead !== null || this._movesHead !== null ||\n                    this._removalsHead !== null || this._identityChangesHead !== null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Reset the state of the change objects to show no changes. This means set previousKey to\n         * currentKey, and clear all of the queues (additions, moves, removals).\n         * Set the previousIndexes of moved and added items to their currentIndexes\n         * Reset the list of additions, moves and removals\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._reset = function () {\n            if (this.isDirty) {\n                var record;\n                var nextRecord;\n                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                    record._nextPrevious = record._next;\n                }\n                for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                    record.previousIndex = record.currentIndex;\n                }\n                this._additionsHead = this._additionsTail = null;\n                for (record = this._movesHead; record !== null; record = nextRecord) {\n                    record.previousIndex = record.currentIndex;\n                    nextRecord = record._nextMoved;\n                }\n                this._movesHead = this._movesTail = null;\n                this._removalsHead = this._removalsTail = null;\n                this._identityChangesHead = this._identityChangesTail = null;\n            }\n        };\n        /**\n         * This is the core function which handles differences between collections.\n         *\n         * - `record` is the record which we saw at this position last time. If null then it is a new\n         *   item.\n         * - `item` is the current item in the collection\n         * - `index` is the position of the item in the collection\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {\n            // The previous record after which we will append the current one.\n            var previousRecord;\n            if (record === null) {\n                previousRecord = this._itTail;\n            }\n            else {\n                previousRecord = record._prev;\n                // Remove the record from the collection since we know it does not match the item.\n                this._remove(record);\n            }\n            // Attempt to see if we have seen the item before.\n            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n            if (record !== null) {\n                // We have seen this before, we need to move it forward in the collection.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._moveAfter(record, previousRecord, index);\n            }\n            else {\n                // Never seen it, check evicted list.\n                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n                if (record !== null) {\n                    // It is an item which we have evicted earlier: reinsert it back into the list.\n                    // But first we need to check if identity changed, so we can update in view if necessary\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                    this._reinsertAfter(record, previousRecord, index);\n                }\n                else {\n                    // It is a new item: add it.\n                    record =\n                        this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);\n                }\n            }\n            return record;\n        };\n        /**\n         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n         *\n         * Use case: `[a, a]` => `[b, a, a]`\n         *\n         * If we did not have this check then the insertion of `b` would:\n         *   1) evict first `a`\n         *   2) insert `b` at `0` index.\n         *   3) leave `a` at index `1` as is. <-- this is wrong!\n         *   3) reinsert `a` at index 2. <-- this is wrong!\n         *\n         * The correct behavior is:\n         *   1) evict first `a`\n         *   2) insert `b` at `0` index.\n         *   3) reinsert `a` at index 1.\n         *   3) move `a` at from `1` to `2`.\n         *\n         *\n         * Double check that we have not evicted a duplicate item. We need to check if the item type may\n         * have already been removed:\n         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n         * at the end.\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {\n            var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n            if (reinsertRecord !== null) {\n                record = this._reinsertAfter(reinsertRecord, record._prev, index);\n            }\n            else if (record.currentIndex != index) {\n                record.currentIndex = index;\n                this._addToMoves(record, index);\n            }\n            return record;\n        };\n        /**\n         * Get rid of any excess {@link CollectionChangeRecord}s from the previous collection\n         *\n         * - `record` The first excess {@link CollectionChangeRecord}.\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._truncate = function (record) {\n            // Anything after that needs to be removed;\n            while (record !== null) {\n                var nextRecord = record._next;\n                this._addToRemovals(this._unlink(record));\n                record = nextRecord;\n            }\n            if (this._unlinkedRecords !== null) {\n                this._unlinkedRecords.clear();\n            }\n            if (this._additionsTail !== null) {\n                this._additionsTail._nextAdded = null;\n            }\n            if (this._movesTail !== null) {\n                this._movesTail._nextMoved = null;\n            }\n            if (this._itTail !== null) {\n                this._itTail._next = null;\n            }\n            if (this._removalsTail !== null) {\n                this._removalsTail._nextRemoved = null;\n            }\n            if (this._identityChangesTail !== null) {\n                this._identityChangesTail._nextIdentityChange = null;\n            }\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {\n            if (this._unlinkedRecords !== null) {\n                this._unlinkedRecords.remove(record);\n            }\n            var prev = record._prevRemoved;\n            var next = record._nextRemoved;\n            if (prev === null) {\n                this._removalsHead = next;\n            }\n            else {\n                prev._nextRemoved = next;\n            }\n            if (next === null) {\n                this._removalsTail = prev;\n            }\n            else {\n                next._prevRemoved = prev;\n            }\n            this._insertAfter(record, prevRecord, index);\n            this._addToMoves(record, index);\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {\n            this._unlink(record);\n            this._insertAfter(record, prevRecord, index);\n            this._addToMoves(record, index);\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {\n            this._insertAfter(record, prevRecord, index);\n            if (this._additionsTail === null) {\n                // todo(vicb)\n                // assert(this._additionsHead === null);\n                this._additionsTail = this._additionsHead = record;\n            }\n            else {\n                // todo(vicb)\n                // assert(_additionsTail._nextAdded === null);\n                // assert(record._nextAdded === null);\n                this._additionsTail = this._additionsTail._nextAdded = record;\n            }\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {\n            // todo(vicb)\n            // assert(record != prevRecord);\n            // assert(record._next === null);\n            // assert(record._prev === null);\n            var next = prevRecord === null ? this._itHead : prevRecord._next;\n            // todo(vicb)\n            // assert(next != record);\n            // assert(prevRecord != record);\n            record._next = next;\n            record._prev = prevRecord;\n            if (next === null) {\n                this._itTail = record;\n            }\n            else {\n                next._prev = record;\n            }\n            if (prevRecord === null) {\n                this._itHead = record;\n            }\n            else {\n                prevRecord._next = record;\n            }\n            if (this._linkedRecords === null) {\n                this._linkedRecords = new _DuplicateMap();\n            }\n            this._linkedRecords.put(record);\n            record.currentIndex = index;\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._remove = function (record) {\n            return this._addToRemovals(this._unlink(record));\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._unlink = function (record) {\n            if (this._linkedRecords !== null) {\n                this._linkedRecords.remove(record);\n            }\n            var prev = record._prev;\n            var next = record._next;\n            // todo(vicb)\n            // assert((record._prev = null) === null);\n            // assert((record._next = null) === null);\n            if (prev === null) {\n                this._itHead = next;\n            }\n            else {\n                prev._next = next;\n            }\n            if (next === null) {\n                this._itTail = prev;\n            }\n            else {\n                next._prev = prev;\n            }\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {\n            // todo(vicb)\n            // assert(record._nextMoved === null);\n            if (record.previousIndex === toIndex) {\n                return record;\n            }\n            if (this._movesTail === null) {\n                // todo(vicb)\n                // assert(_movesHead === null);\n                this._movesTail = this._movesHead = record;\n            }\n            else {\n                // todo(vicb)\n                // assert(_movesTail._nextMoved === null);\n                this._movesTail = this._movesTail._nextMoved = record;\n            }\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._addToRemovals = function (record) {\n            if (this._unlinkedRecords === null) {\n                this._unlinkedRecords = new _DuplicateMap();\n            }\n            this._unlinkedRecords.put(record);\n            record.currentIndex = null;\n            record._nextRemoved = null;\n            if (this._removalsTail === null) {\n                // todo(vicb)\n                // assert(_removalsHead === null);\n                this._removalsTail = this._removalsHead = record;\n                record._prevRemoved = null;\n            }\n            else {\n                // todo(vicb)\n                // assert(_removalsTail._nextRemoved === null);\n                // assert(record._nextRemoved === null);\n                record._prevRemoved = this._removalsTail;\n                this._removalsTail = this._removalsTail._nextRemoved = record;\n            }\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {\n            record.item = item;\n            if (this._identityChangesTail === null) {\n                this._identityChangesTail = this._identityChangesHead = record;\n            }\n            else {\n                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n            }\n            return record;\n        };\n        DefaultIterableDiffer.prototype.toString = function () {\n            var list = [];\n            this.forEachItem(function (record /** TODO #9100 */) { return list.push(record); });\n            var previous = [];\n            this.forEachPreviousItem(function (record /** TODO #9100 */) { return previous.push(record); });\n            var additions = [];\n            this.forEachAddedItem(function (record /** TODO #9100 */) { return additions.push(record); });\n            var moves = [];\n            this.forEachMovedItem(function (record /** TODO #9100 */) { return moves.push(record); });\n            var removals = [];\n            this.forEachRemovedItem(function (record /** TODO #9100 */) { return removals.push(record); });\n            var identityChanges = [];\n            this.forEachIdentityChange(function (record /** TODO #9100 */) { return identityChanges.push(record); });\n            return 'collection: ' + list.join(', ') + '\\n' +\n                'previous: ' + previous.join(', ') + '\\n' +\n                'additions: ' + additions.join(', ') + '\\n' +\n                'moves: ' + moves.join(', ') + '\\n' +\n                'removals: ' + removals.join(', ') + '\\n' +\n                'identityChanges: ' + identityChanges.join(', ') + '\\n';\n        };\n        return DefaultIterableDiffer;\n    }());\n    /**\n     * @stable\n     */\n    var CollectionChangeRecord = (function () {\n        function CollectionChangeRecord(item, trackById) {\n            this.item = item;\n            this.trackById = trackById;\n            this.currentIndex = null;\n            this.previousIndex = null;\n            /** @internal */\n            this._nextPrevious = null;\n            /** @internal */\n            this._prev = null;\n            /** @internal */\n            this._next = null;\n            /** @internal */\n            this._prevDup = null;\n            /** @internal */\n            this._nextDup = null;\n            /** @internal */\n            this._prevRemoved = null;\n            /** @internal */\n            this._nextRemoved = null;\n            /** @internal */\n            this._nextAdded = null;\n            /** @internal */\n            this._nextMoved = null;\n            /** @internal */\n            this._nextIdentityChange = null;\n        }\n        CollectionChangeRecord.prototype.toString = function () {\n            return this.previousIndex === this.currentIndex ? stringify(this.item) :\n                stringify(this.item) + '[' +\n                    stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';\n        };\n        return CollectionChangeRecord;\n    }());\n    // A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item\n    var _DuplicateItemRecordList = (function () {\n        function _DuplicateItemRecordList() {\n            /** @internal */\n            this._head = null;\n            /** @internal */\n            this._tail = null;\n        }\n        /**\n         * Append the record to the list of duplicates.\n         *\n         * Note: by design all records in the list of duplicates hold the same value in record.item.\n         */\n        _DuplicateItemRecordList.prototype.add = function (record) {\n            if (this._head === null) {\n                this._head = this._tail = record;\n                record._nextDup = null;\n                record._prevDup = null;\n            }\n            else {\n                // todo(vicb)\n                // assert(record.item ==  _head.item ||\n                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n                this._tail._nextDup = record;\n                record._prevDup = this._tail;\n                record._nextDup = null;\n                this._tail = record;\n            }\n        };\n        // Returns a CollectionChangeRecord having CollectionChangeRecord.trackById == trackById and\n        // CollectionChangeRecord.currentIndex >= afterIndex\n        _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {\n            var record;\n            for (record = this._head; record !== null; record = record._nextDup) {\n                if ((afterIndex === null || afterIndex < record.currentIndex) &&\n                    looseIdentical(record.trackById, trackById)) {\n                    return record;\n                }\n            }\n            return null;\n        };\n        /**\n         * Remove one {@link CollectionChangeRecord} from the list of duplicates.\n         *\n         * Returns whether the list of duplicates is empty.\n         */\n        _DuplicateItemRecordList.prototype.remove = function (record) {\n            // todo(vicb)\n            // assert(() {\n            //  // verify that the record being removed is in the list.\n            //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {\n            //    if (identical(cursor, record)) return true;\n            //  }\n            //  return false;\n            //});\n            var prev = record._prevDup;\n            var next = record._nextDup;\n            if (prev === null) {\n                this._head = next;\n            }\n            else {\n                prev._nextDup = next;\n            }\n            if (next === null) {\n                this._tail = prev;\n            }\n            else {\n                next._prevDup = prev;\n            }\n            return this._head === null;\n        };\n        return _DuplicateItemRecordList;\n    }());\n    var _DuplicateMap = (function () {\n        function _DuplicateMap() {\n            this.map = new Map();\n        }\n        _DuplicateMap.prototype.put = function (record) {\n            // todo(vicb) handle corner cases\n            var key = getMapKey(record.trackById);\n            var duplicates = this.map.get(key);\n            if (!isPresent(duplicates)) {\n                duplicates = new _DuplicateItemRecordList();\n                this.map.set(key, duplicates);\n            }\n            duplicates.add(record);\n        };\n        /**\n         * Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we\n         * have already iterated over, we use the afterIndex to pretend it is not there.\n         *\n         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n         * have any more `a`s needs to return the last `a` not the first or second.\n         */\n        _DuplicateMap.prototype.get = function (trackById, afterIndex) {\n            if (afterIndex === void 0) { afterIndex = null; }\n            var key = getMapKey(trackById);\n            var recordList = this.map.get(key);\n            return isBlank(recordList) ? null : recordList.get(trackById, afterIndex);\n        };\n        /**\n         * Removes a {@link CollectionChangeRecord} from the list of duplicates.\n         *\n         * The list of duplicates also is removed from the map if it gets empty.\n         */\n        _DuplicateMap.prototype.remove = function (record) {\n            var key = getMapKey(record.trackById);\n            // todo(vicb)\n            // assert(this.map.containsKey(key));\n            var recordList = this.map.get(key);\n            // Remove the list of duplicates when it gets empty\n            if (recordList.remove(record)) {\n                this.map.delete(key);\n            }\n            return record;\n        };\n        Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n            get: function () { return this.map.size === 0; },\n            enumerable: true,\n            configurable: true\n        });\n        _DuplicateMap.prototype.clear = function () { this.map.clear(); };\n        _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };\n        return _DuplicateMap;\n    }());\n    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n        var previousIndex = item.previousIndex;\n        if (previousIndex === null)\n            return previousIndex;\n        var moveOffset = 0;\n        if (moveOffsets && previousIndex < moveOffsets.length) {\n            moveOffset = moveOffsets[previousIndex];\n        }\n        return previousIndex + addRemoveOffset + moveOffset;\n    }\n\n    var DefaultKeyValueDifferFactory = (function () {\n        function DefaultKeyValueDifferFactory() {\n        }\n        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };\n        DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };\n        return DefaultKeyValueDifferFactory;\n    }());\n    var DefaultKeyValueDiffer = (function () {\n        function DefaultKeyValueDiffer() {\n            this._records = new Map();\n            this._mapHead = null;\n            this._previousMapHead = null;\n            this._changesHead = null;\n            this._changesTail = null;\n            this._additionsHead = null;\n            this._additionsTail = null;\n            this._removalsHead = null;\n            this._removalsTail = null;\n        }\n        Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n            get: function () {\n                return this._additionsHead !== null || this._changesHead !== null ||\n                    this._removalsHead !== null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {\n            var record;\n            for (record = this._mapHead; record !== null; record = record._next) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {\n            var record;\n            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {\n            var record;\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {\n            var record;\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {\n            var record;\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.diff = function (map) {\n            if (!map) {\n                map = new Map();\n            }\n            else if (!(map instanceof Map || isJsObject(map))) {\n                throw new Error(\"Error trying to diff '\" + map + \"'\");\n            }\n            return this.check(map) ? this : null;\n        };\n        DefaultKeyValueDiffer.prototype.onDestroy = function () { };\n        DefaultKeyValueDiffer.prototype.check = function (map) {\n            var _this = this;\n            this._reset();\n            var records = this._records;\n            var oldSeqRecord = this._mapHead;\n            var lastOldSeqRecord = null;\n            var lastNewSeqRecord = null;\n            var seqChanged = false;\n            this._forEach(map, function (value, key) {\n                var newSeqRecord;\n                if (oldSeqRecord && key === oldSeqRecord.key) {\n                    newSeqRecord = oldSeqRecord;\n                    _this._maybeAddToChanges(newSeqRecord, value);\n                }\n                else {\n                    seqChanged = true;\n                    if (oldSeqRecord !== null) {\n                        _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);\n                        _this._addToRemovals(oldSeqRecord);\n                    }\n                    if (records.has(key)) {\n                        newSeqRecord = records.get(key);\n                        _this._maybeAddToChanges(newSeqRecord, value);\n                    }\n                    else {\n                        newSeqRecord = new KeyValueChangeRecord(key);\n                        records.set(key, newSeqRecord);\n                        newSeqRecord.currentValue = value;\n                        _this._addToAdditions(newSeqRecord);\n                    }\n                }\n                if (seqChanged) {\n                    if (_this._isInRemovals(newSeqRecord)) {\n                        _this._removeFromRemovals(newSeqRecord);\n                    }\n                    if (lastNewSeqRecord == null) {\n                        _this._mapHead = newSeqRecord;\n                    }\n                    else {\n                        lastNewSeqRecord._next = newSeqRecord;\n                    }\n                }\n                lastOldSeqRecord = oldSeqRecord;\n                lastNewSeqRecord = newSeqRecord;\n                oldSeqRecord = oldSeqRecord && oldSeqRecord._next;\n            });\n            this._truncate(lastOldSeqRecord, oldSeqRecord);\n            return this.isDirty;\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._reset = function () {\n            if (this.isDirty) {\n                var record = void 0;\n                // Record the state of the mapping\n                for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {\n                    record._nextPrevious = record._next;\n                }\n                for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                    record.previousValue = record.currentValue;\n                }\n                for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                    record.previousValue = record.currentValue;\n                }\n                this._changesHead = this._changesTail = null;\n                this._additionsHead = this._additionsTail = null;\n                this._removalsHead = this._removalsTail = null;\n            }\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {\n            while (record !== null) {\n                if (lastRecord === null) {\n                    this._mapHead = null;\n                }\n                else {\n                    lastRecord._next = null;\n                }\n                var nextRecord = record._next;\n                this._addToRemovals(record);\n                lastRecord = record;\n                record = nextRecord;\n            }\n            for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {\n                rec.previousValue = rec.currentValue;\n                rec.currentValue = null;\n                this._records.delete(rec.key);\n            }\n        };\n        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {\n            if (!looseIdentical(newValue, record.currentValue)) {\n                record.previousValue = record.currentValue;\n                record.currentValue = newValue;\n                this._addToChanges(record);\n            }\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {\n            return record === this._removalsHead || record._nextRemoved !== null ||\n                record._prevRemoved !== null;\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {\n            if (this._removalsHead === null) {\n                this._removalsHead = this._removalsTail = record;\n            }\n            else {\n                this._removalsTail._nextRemoved = record;\n                record._prevRemoved = this._removalsTail;\n                this._removalsTail = record;\n            }\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {\n            var next = record._next;\n            if (prev === null) {\n                this._mapHead = next;\n            }\n            else {\n                prev._next = next;\n            }\n            record._next = null;\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {\n            var prev = record._prevRemoved;\n            var next = record._nextRemoved;\n            if (prev === null) {\n                this._removalsHead = next;\n            }\n            else {\n                prev._nextRemoved = next;\n            }\n            if (next === null) {\n                this._removalsTail = prev;\n            }\n            else {\n                next._prevRemoved = prev;\n            }\n            record._prevRemoved = record._nextRemoved = null;\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {\n            if (this._additionsHead === null) {\n                this._additionsHead = this._additionsTail = record;\n            }\n            else {\n                this._additionsTail._nextAdded = record;\n                this._additionsTail = record;\n            }\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {\n            if (this._changesHead === null) {\n                this._changesHead = this._changesTail = record;\n            }\n            else {\n                this._changesTail._nextChanged = record;\n                this._changesTail = record;\n            }\n        };\n        DefaultKeyValueDiffer.prototype.toString = function () {\n            var items = [];\n            var previous = [];\n            var changes = [];\n            var additions = [];\n            var removals = [];\n            var record;\n            for (record = this._mapHead; record !== null; record = record._next) {\n                items.push(stringify(record));\n            }\n            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n                previous.push(stringify(record));\n            }\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                changes.push(stringify(record));\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                additions.push(stringify(record));\n            }\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                removals.push(stringify(record));\n            }\n            return 'map: ' + items.join(', ') + '\\n' +\n                'previous: ' + previous.join(', ') + '\\n' +\n                'additions: ' + additions.join(', ') + '\\n' +\n                'changes: ' + changes.join(', ') + '\\n' +\n                'removals: ' + removals.join(', ') + '\\n';\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {\n            if (obj instanceof Map) {\n                obj.forEach(fn);\n            }\n            else {\n                StringMapWrapper.forEach(obj, fn);\n            }\n        };\n        return DefaultKeyValueDiffer;\n    }());\n    /**\n     * @stable\n     */\n    var KeyValueChangeRecord = (function () {\n        function KeyValueChangeRecord(key) {\n            this.key = key;\n            this.previousValue = null;\n            this.currentValue = null;\n            /** @internal */\n            this._nextPrevious = null;\n            /** @internal */\n            this._next = null;\n            /** @internal */\n            this._nextAdded = null;\n            /** @internal */\n            this._nextRemoved = null;\n            /** @internal */\n            this._prevRemoved = null;\n            /** @internal */\n            this._nextChanged = null;\n        }\n        KeyValueChangeRecord.prototype.toString = function () {\n            return looseIdentical(this.previousValue, this.currentValue) ?\n                stringify(this.key) :\n                (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +\n                    stringify(this.currentValue) + ']');\n        };\n        return KeyValueChangeRecord;\n    }());\n\n    /**\n     * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n     * @stable\n     */\n    var IterableDiffers = (function () {\n        function IterableDiffers(factories) {\n            this.factories = factories;\n        }\n        IterableDiffers.create = function (factories, parent) {\n            if (isPresent(parent)) {\n                var copied = ListWrapper.clone(parent.factories);\n                factories = factories.concat(copied);\n                return new IterableDiffers(factories);\n            }\n            else {\n                return new IterableDiffers(factories);\n            }\n        };\n        /**\n         * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n         * inherited {@link IterableDiffers} instance with the provided factories and return a new\n         * {@link IterableDiffers} instance.\n         *\n         * The following example shows how to extend an existing list of factories,\n               * which will only be applied to the injector for this component and its children.\n               * This step is all that's required to make a new {@link IterableDiffer} available.\n         *\n         * ### Example\n         *\n         * ```\n         * @Component({\n         *   viewProviders: [\n         *     IterableDiffers.extend([new ImmutableListDiffer()])\n         *   ]\n         * })\n         * ```\n         */\n        IterableDiffers.extend = function (factories) {\n            return {\n                provide: IterableDiffers,\n                useFactory: function (parent) {\n                    if (isBlank(parent)) {\n                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                        // to\n                        // bootstrap(), which would override default pipes instead of extending them.\n                        throw new Error('Cannot extend IterableDiffers without a parent injector');\n                    }\n                    return IterableDiffers.create(factories, parent);\n                },\n                // Dependency technically isn't optional, but we can provide a better error message this way.\n                deps: [[IterableDiffers, new SkipSelfMetadata(), new OptionalMetadata()]]\n            };\n        };\n        IterableDiffers.prototype.find = function (iterable) {\n            var factory = this.factories.find(function (f) { return f.supports(iterable); });\n            if (isPresent(factory)) {\n                return factory;\n            }\n            else {\n                throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n            }\n        };\n        return IterableDiffers;\n    }());\n\n    /**\n     * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n     * @stable\n     */\n    var KeyValueDiffers = (function () {\n        function KeyValueDiffers(factories) {\n            this.factories = factories;\n        }\n        KeyValueDiffers.create = function (factories, parent) {\n            if (isPresent(parent)) {\n                var copied = ListWrapper.clone(parent.factories);\n                factories = factories.concat(copied);\n                return new KeyValueDiffers(factories);\n            }\n            else {\n                return new KeyValueDiffers(factories);\n            }\n        };\n        /**\n         * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n         * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n         * {@link KeyValueDiffers} instance.\n         *\n         * The following example shows how to extend an existing list of factories,\n               * which will only be applied to the injector for this component and its children.\n               * This step is all that's required to make a new {@link KeyValueDiffer} available.\n         *\n         * ### Example\n         *\n         * ```\n         * @Component({\n         *   viewProviders: [\n         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n         *   ]\n         * })\n         * ```\n         */\n        KeyValueDiffers.extend = function (factories) {\n            return {\n                provide: KeyValueDiffers,\n                useFactory: function (parent) {\n                    if (isBlank(parent)) {\n                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                        // to\n                        // bootstrap(), which would override default pipes instead of extending them.\n                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                    }\n                    return KeyValueDiffers.create(factories, parent);\n                },\n                // Dependency technically isn't optional, but we can provide a better error message this way.\n                deps: [[KeyValueDiffers, new SkipSelfMetadata(), new OptionalMetadata()]]\n            };\n        };\n        KeyValueDiffers.prototype.find = function (kv) {\n            var factory = this.factories.find(function (f) { return f.supports(kv); });\n            if (isPresent(factory)) {\n                return factory;\n            }\n            else {\n                throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n            }\n        };\n        return KeyValueDiffers;\n    }());\n\n    var UNINITIALIZED = {\n        toString: function () { return 'CD_INIT_VALUE'; }\n    };\n    function devModeEqual(a, b) {\n        if (isListLikeIterable(a) && isListLikeIterable(b)) {\n            return areIterablesEqual(a, b, devModeEqual);\n        }\n        else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n    /**\n     * Indicates that the result of a {@link PipeMetadata} transformation has changed even though the\n     * reference\n     * has not changed.\n     *\n     * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.\n     *\n     * Example:\n     *\n     * ```\n     * if (this._latestValue === this._latestReturnedValue) {\n     *    return this._latestReturnedValue;\n     *  } else {\n     *    this._latestReturnedValue = this._latestValue;\n     *    return WrappedValue.wrap(this._latestValue); // this will force update\n     *  }\n     * ```\n     * @stable\n     */\n    var WrappedValue = (function () {\n        function WrappedValue(wrapped) {\n            this.wrapped = wrapped;\n        }\n        WrappedValue.wrap = function (value) { return new WrappedValue(value); };\n        return WrappedValue;\n    }());\n    /**\n     * Helper class for unwrapping WrappedValue s\n     */\n    var ValueUnwrapper = (function () {\n        function ValueUnwrapper() {\n            this.hasWrappedValue = false;\n        }\n        ValueUnwrapper.prototype.unwrap = function (value) {\n            if (value instanceof WrappedValue) {\n                this.hasWrappedValue = true;\n                return value.wrapped;\n            }\n            return value;\n        };\n        ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };\n        return ValueUnwrapper;\n    }());\n    /**\n     * Represents a basic change from a previous to a new value.\n     * @stable\n     */\n    var SimpleChange = (function () {\n        function SimpleChange(previousValue, currentValue) {\n            this.previousValue = previousValue;\n            this.currentValue = currentValue;\n        }\n        /**\n         * Check whether the new value is the first value assigned.\n         */\n        SimpleChange.prototype.isFirstChange = function () { return this.previousValue === UNINITIALIZED; };\n        return SimpleChange;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @stable\n     */\n    var ChangeDetectorRef = (function () {\n        function ChangeDetectorRef() {\n        }\n        return ChangeDetectorRef;\n    }());\n\n    /**\n     * Structural diffing for `Object`s and `Map`s.\n     */\n    var keyValDiff = [new DefaultKeyValueDifferFactory()];\n    /**\n     * Structural diffing for `Iterable` types such as `Array`s.\n     */\n    var iterableDiff = [new DefaultIterableDifferFactory()];\n    var defaultIterableDiffers = new IterableDiffers(iterableDiff);\n    var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n    /**\n     * @experimental\n     */\n    // TODO (matsko): add typing for the animation function\n    var RenderComponentType = (function () {\n        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n            this.id = id;\n            this.templateUrl = templateUrl;\n            this.slotCount = slotCount;\n            this.encapsulation = encapsulation;\n            this.styles = styles;\n            this.animations = animations;\n        }\n        return RenderComponentType;\n    }());\n    var RenderDebugInfo = (function () {\n        function RenderDebugInfo() {\n        }\n        Object.defineProperty(RenderDebugInfo.prototype, \"injector\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RenderDebugInfo.prototype, \"component\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RenderDebugInfo.prototype, \"providerTokens\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RenderDebugInfo.prototype, \"references\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RenderDebugInfo.prototype, \"context\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(RenderDebugInfo.prototype, \"source\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        return RenderDebugInfo;\n    }());\n    /**\n     * @experimental\n     */\n    var Renderer = (function () {\n        function Renderer() {\n        }\n        return Renderer;\n    }());\n    /**\n     * Injectable service that provides a low-level interface for modifying the UI.\n     *\n     * Use this service to bypass Angular's templating and make custom UI changes that can't be\n     * expressed declaratively. For example if you need to set a property or an attribute whose name is\n     * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}\n     * respectively.\n     *\n     * If you are implementing a custom renderer, you must implement this interface.\n     *\n     * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n     * @experimental\n     */\n    var RootRenderer = (function () {\n        function RootRenderer() {\n        }\n        return RootRenderer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n     * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n     * handled.\n     *\n     * See DomSanitizer for more details on security in Angular applications.\n     *\n     * @stable\n     */\n    exports.SecurityContext;\n    (function (SecurityContext) {\n        SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n        SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n        SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n        SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n        SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n        SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n    })(exports.SecurityContext || (exports.SecurityContext = {}));\n    /**\n     * Sanitizer is used by the views to sanitize potentially dangerous values.\n     *\n     * @stable\n     */\n    var Sanitizer = (function () {\n        function Sanitizer() {\n        }\n        return Sanitizer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A wrapper around a native element inside of a View.\n     *\n     * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n     * element.\n     *\n     * @security Permitting direct access to the DOM can make your application more vulnerable to\n     * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     *\n     * @stable\n     */\n    // Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n    // i.e. users have to ask for what they need. With that, we can build better analysis tools\n    // and could do better codegen in the future.\n    var ElementRef = (function () {\n        function ElementRef(nativeElement) {\n            this.nativeElement = nativeElement;\n        }\n        return ElementRef;\n    }());\n\n    var trace;\n    var events;\n    function detectWTF() {\n        var wtf = global$1['wtf'];\n        if (wtf) {\n            trace = wtf['trace'];\n            if (trace) {\n                events = trace['events'];\n                return true;\n            }\n        }\n        return false;\n    }\n    function createScope(signature, flags) {\n        if (flags === void 0) { flags = null; }\n        return events.createScope(signature, flags);\n    }\n    function leave(scope, returnValue) {\n        trace.leaveScope(scope, returnValue);\n        return returnValue;\n    }\n    function startTimeRange(rangeType, action) {\n        return trace.beginTimeRange(rangeType, action);\n    }\n    function endTimeRange(range) {\n        trace.endTimeRange(range);\n    }\n\n    /**\n     * True if WTF is enabled.\n     */\n    var wtfEnabled = detectWTF();\n    function noopScope(arg0, arg1) {\n        return null;\n    }\n    /**\n     * Create trace scope.\n     *\n     * Scopes must be strictly nested and are analogous to stack frames, but\n     * do not have to follow the stack frames. Instead it is recommended that they follow logical\n     * nesting. You may want to use\n     * [Event\n     * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n     * as they are defined in WTF.\n     *\n     * Used to mark scope entry. The return value is used to leave the scope.\n     *\n     *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n     *\n     *     someMethod() {\n     *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n     *        // DO SOME WORK HERE\n     *        return wtfLeave(s, 123); // Return value 123\n     *     }\n     *\n     * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n     * negatively impact the performance of your application. For this reason we recommend that\n     * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n     * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n     * exception, will produce incorrect trace, but presence of exception signifies logic error which\n     * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n     * an exception is expected during normal execution while profiling.\n     *\n     * @experimental\n     */\n    var wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };\n    /**\n     * Used to mark end of Scope.\n     *\n     * - `scope` to end.\n     * - `returnValue` (optional) to be passed to the WTF.\n     *\n     * Returns the `returnValue for easy chaining.\n     * @experimental\n     */\n    var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };\n    /**\n     * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n     * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n     * enabled.\n     *\n     *     someMethod() {\n     *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n     *        var future = new Future.delay(5).then((_) {\n     *          wtfEndTimeRange(s);\n     *        });\n     *     }\n     * @experimental\n     */\n    var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };\n    /**\n     * Ends a async time range operation.\n     * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n     * enabled.\n     * @experimental\n     */\n    var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };\n\n    /**\n     * Represents a container where one or more Views can be attached.\n     *\n     * The container can contain two kinds of Views. Host Views, created by instantiating a\n     * {@link Component} via {@link #createComponent}, and Embedded Views, created by instantiating an\n     * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.\n     *\n     * The location of the View Container within the containing View is specified by the Anchor\n     * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only\n     * have a single View Container.\n     *\n     * Root elements of Views attached to this container become siblings of the Anchor Element in\n     * the Rendered View.\n     *\n     * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected\n     * with `ViewContainerRef` on the Element, or you obtain it via a {@link ViewChild} query.\n     * @stable\n     */\n    var ViewContainerRef = (function () {\n        function ViewContainerRef() {\n        }\n        Object.defineProperty(ViewContainerRef.prototype, \"element\", {\n            /**\n             * Anchor element that specifies the location of this container in the containing View.\n             * <!-- TODO: rename to anchorElement -->\n             */\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef.prototype, \"injector\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef.prototype, \"parentInjector\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef.prototype, \"length\", {\n            /**\n             * Returns the number of Views currently attached to this container.\n             */\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        return ViewContainerRef;\n    }());\n    var ViewContainerRef_ = (function () {\n        function ViewContainerRef_(_element) {\n            this._element = _element;\n            /** @internal */\n            this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');\n            /** @internal */\n            this._insertScope = wtfCreateScope('ViewContainerRef#insert()');\n            /** @internal */\n            this._removeScope = wtfCreateScope('ViewContainerRef#remove()');\n            /** @internal */\n            this._detachScope = wtfCreateScope('ViewContainerRef#detach()');\n        }\n        ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref; };\n        Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n            get: function () {\n                var views = this._element.nestedViews;\n                return isPresent(views) ? views.length : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n            get: function () { return this._element.elementRef; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n            get: function () { return this._element.injector; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n            get: function () { return this._element.parentInjector; },\n            enumerable: true,\n            configurable: true\n        });\n        // TODO(rado): profile and decide whether bounds checks should be added\n        // to the methods below.\n        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n            if (context === void 0) { context = null; }\n            if (index === void 0) { index = -1; }\n            var viewRef = templateRef.createEmbeddedView(context);\n            this.insert(viewRef, index);\n            return viewRef;\n        };\n        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {\n            if (index === void 0) { index = -1; }\n            if (injector === void 0) { injector = null; }\n            if (projectableNodes === void 0) { projectableNodes = null; }\n            var s = this._createComponentInContainerScope();\n            var contextInjector = isPresent(injector) ? injector : this._element.parentInjector;\n            var componentRef = componentFactory.create(contextInjector, projectableNodes);\n            this.insert(componentRef.hostView, index);\n            return wtfLeave(s, componentRef);\n        };\n        // TODO(i): refactor insert+remove into move\n        ViewContainerRef_.prototype.insert = function (viewRef, index) {\n            if (index === void 0) { index = -1; }\n            var s = this._insertScope();\n            if (index == -1)\n                index = this.length;\n            var viewRef_ = viewRef;\n            this._element.attachView(viewRef_.internalView, index);\n            return wtfLeave(s, viewRef_);\n        };\n        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {\n            var s = this._insertScope();\n            if (currentIndex == -1)\n                return;\n            var viewRef_ = viewRef;\n            this._element.moveView(viewRef_.internalView, currentIndex);\n            return wtfLeave(s, viewRef_);\n        };\n        ViewContainerRef_.prototype.indexOf = function (viewRef) {\n            return ListWrapper.indexOf(this._element.nestedViews, viewRef.internalView);\n        };\n        // TODO(i): rename to destroy\n        ViewContainerRef_.prototype.remove = function (index) {\n            if (index === void 0) { index = -1; }\n            var s = this._removeScope();\n            if (index == -1)\n                index = this.length - 1;\n            var view = this._element.detachView(index);\n            view.destroy();\n            // view is intentionally not returned to the client.\n            wtfLeave(s);\n        };\n        // TODO(i): refactor insert+remove into move\n        ViewContainerRef_.prototype.detach = function (index) {\n            if (index === void 0) { index = -1; }\n            var s = this._detachScope();\n            if (index == -1)\n                index = this.length - 1;\n            var view = this._element.detachView(index);\n            return wtfLeave(s, view.ref);\n        };\n        ViewContainerRef_.prototype.clear = function () {\n            for (var i = this.length - 1; i >= 0; i--) {\n                this.remove(i);\n            }\n        };\n        return ViewContainerRef_;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ViewType;\n    (function (ViewType) {\n        // A view that contains the host element with bound component directive.\n        // Contains a COMPONENT view\n        ViewType[ViewType[\"HOST\"] = 0] = \"HOST\";\n        // The view of the component\n        // Can contain 0 to n EMBEDDED views\n        ViewType[ViewType[\"COMPONENT\"] = 1] = \"COMPONENT\";\n        // A view that is embedded into another View via a <template> element\n        // inside of a COMPONENT view\n        ViewType[ViewType[\"EMBEDDED\"] = 2] = \"EMBEDDED\";\n    })(ViewType || (ViewType = {}));\n\n    /**\n     * An AppElement is created for elements that have a ViewContainerRef,\n     * a nested component or a <template> element to keep data around\n     * that is needed for later instantiations.\n     */\n    var AppElement = (function () {\n        function AppElement(index, parentIndex, parentView, nativeElement) {\n            this.index = index;\n            this.parentIndex = parentIndex;\n            this.parentView = parentView;\n            this.nativeElement = nativeElement;\n            this.nestedViews = null;\n            this.componentView = null;\n        }\n        Object.defineProperty(AppElement.prototype, \"elementRef\", {\n            get: function () { return new ElementRef(this.nativeElement); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AppElement.prototype, \"vcRef\", {\n            get: function () { return new ViewContainerRef_(this); },\n            enumerable: true,\n            configurable: true\n        });\n        AppElement.prototype.initComponent = function (component, componentConstructorViewQueries, view) {\n            this.component = component;\n            this.componentConstructorViewQueries = componentConstructorViewQueries;\n            this.componentView = view;\n        };\n        Object.defineProperty(AppElement.prototype, \"parentInjector\", {\n            get: function () { return this.parentView.injector(this.parentIndex); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AppElement.prototype, \"injector\", {\n            get: function () { return this.parentView.injector(this.index); },\n            enumerable: true,\n            configurable: true\n        });\n        AppElement.prototype.mapNestedViews = function (nestedViewClass, callback) {\n            var result = [];\n            if (isPresent(this.nestedViews)) {\n                this.nestedViews.forEach(function (nestedView) {\n                    if (nestedView.clazz === nestedViewClass) {\n                        result.push(callback(nestedView));\n                    }\n                });\n            }\n            return result;\n        };\n        AppElement.prototype.moveView = function (view, currentIndex) {\n            var previousIndex = this.nestedViews.indexOf(view);\n            if (view.type === ViewType.COMPONENT) {\n                throw new Error(\"Component views can't be moved!\");\n            }\n            var nestedViews = this.nestedViews;\n            if (nestedViews == null) {\n                nestedViews = [];\n                this.nestedViews = nestedViews;\n            }\n            ListWrapper.removeAt(nestedViews, previousIndex);\n            ListWrapper.insert(nestedViews, currentIndex, view);\n            var refRenderNode;\n            if (currentIndex > 0) {\n                var prevView = nestedViews[currentIndex - 1];\n                refRenderNode = prevView.lastRootNode;\n            }\n            else {\n                refRenderNode = this.nativeElement;\n            }\n            if (isPresent(refRenderNode)) {\n                view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes);\n            }\n            view.markContentChildAsMoved(this);\n        };\n        AppElement.prototype.attachView = function (view, viewIndex) {\n            if (view.type === ViewType.COMPONENT) {\n                throw new Error(\"Component views can't be moved!\");\n            }\n            var nestedViews = this.nestedViews;\n            if (nestedViews == null) {\n                nestedViews = [];\n                this.nestedViews = nestedViews;\n            }\n            ListWrapper.insert(nestedViews, viewIndex, view);\n            var refRenderNode;\n            if (viewIndex > 0) {\n                var prevView = nestedViews[viewIndex - 1];\n                refRenderNode = prevView.lastRootNode;\n            }\n            else {\n                refRenderNode = this.nativeElement;\n            }\n            if (isPresent(refRenderNode)) {\n                view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes);\n            }\n            view.addToContentChildren(this);\n        };\n        AppElement.prototype.detachView = function (viewIndex) {\n            var view = ListWrapper.removeAt(this.nestedViews, viewIndex);\n            if (view.type === ViewType.COMPONENT) {\n                throw new Error(\"Component views can't be moved!\");\n            }\n            view.detach();\n            view.removeFromContentChildren(this);\n            return view;\n        };\n        return AppElement;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$9 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * An error thrown if application changes model breaking the top-down data flow.\n     *\n     * This exception is only thrown in dev mode.\n     *\n     * <!-- TODO: Add a link once the dev mode option is configurable -->\n     *\n     * ### Example\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'parent',\n     *   template: `\n     *     <child [prop]=\"parentProp\"></child>\n     *   `,\n     *   directives: [forwardRef(() => Child)]\n     * })\n     * class Parent {\n     *   parentProp = \"init\";\n     * }\n     *\n     * @Directive({selector: 'child', inputs: ['prop']})\n     * class Child {\n     *   constructor(public parent: Parent) {}\n     *\n     *   set prop(v) {\n     *     // this updates the parent property, which is disallowed during change detection\n     *     // this will result in ExpressionChangedAfterItHasBeenCheckedError\n     *     this.parent.parentProp = \"updated\";\n     *   }\n     * }\n     * ```\n     * @stable\n     */\n    var ExpressionChangedAfterItHasBeenCheckedError = (function (_super) {\n        __extends$9(ExpressionChangedAfterItHasBeenCheckedError, _super);\n        function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {\n            var msg = \"Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n            if (oldValue === UNINITIALIZED) {\n                msg +=\n                    \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                        \" Has it been created in a change detection hook ?\";\n            }\n            _super.call(this, msg);\n        }\n        return ExpressionChangedAfterItHasBeenCheckedError;\n    }(BaseError));\n    /**\n     * Thrown when an exception was raised during view creation, change detection or destruction.\n     *\n     * This error wraps the original exception to attach additional contextual information that can\n     * be useful for debugging.\n     * @stable\n     */\n    var ViewWrappedError = (function (_super) {\n        __extends$9(ViewWrappedError, _super);\n        function ViewWrappedError(originalError, context) {\n            _super.call(this, \"Error in \" + context.source, originalError);\n            this.context = context;\n        }\n        return ViewWrappedError;\n    }(WrappedError));\n    /**\n     * Thrown when a destroyed view is used.\n     *\n     * This error indicates a bug in the framework.\n     *\n     * This is an internal Angular error.\n     * @stable\n     */\n    var ViewDestroyedError = (function (_super) {\n        __extends$9(ViewDestroyedError, _super);\n        function ViewDestroyedError(details) {\n            _super.call(this, \"Attempt to use a destroyed view: \" + details);\n        }\n        return ViewDestroyedError;\n    }(BaseError));\n\n    var ViewUtils = (function () {\n        function ViewUtils(_renderer, _appId, sanitizer) {\n            this._renderer = _renderer;\n            this._appId = _appId;\n            this._nextCompTypeId = 0;\n            this.sanitizer = sanitizer;\n        }\n        /**\n         * Used by the generated code\n         */\n        // TODO (matsko): add typing for the animation function\n        ViewUtils.prototype.createRenderComponentType = function (templateUrl, slotCount, encapsulation, styles, animations) {\n            return new RenderComponentType(this._appId + \"-\" + this._nextCompTypeId++, templateUrl, slotCount, encapsulation, styles, animations);\n        };\n        /** @internal */\n        ViewUtils.prototype.renderComponent = function (renderComponentType) {\n            return this._renderer.renderComponent(renderComponentType);\n        };\n        ViewUtils.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        ViewUtils.ctorParameters = [\n            { type: RootRenderer, },\n            { type: undefined, decorators: [{ type: Inject, args: [APP_ID,] },] },\n            { type: Sanitizer, },\n        ];\n        return ViewUtils;\n    }());\n    function flattenNestedViewRenderNodes(nodes) {\n        return _flattenNestedViewRenderNodes(nodes, []);\n    }\n    function _flattenNestedViewRenderNodes(nodes, renderNodes) {\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            if (node instanceof AppElement) {\n                var appEl = node;\n                renderNodes.push(appEl.nativeElement);\n                if (isPresent(appEl.nestedViews)) {\n                    for (var k = 0; k < appEl.nestedViews.length; k++) {\n                        _flattenNestedViewRenderNodes(appEl.nestedViews[k].rootNodesOrAppElements, renderNodes);\n                    }\n                }\n            }\n            else {\n                renderNodes.push(node);\n            }\n        }\n        return renderNodes;\n    }\n    var EMPTY_ARR = [];\n    function ensureSlotCount(projectableNodes, expectedSlotCount) {\n        var res;\n        if (isBlank(projectableNodes)) {\n            res = EMPTY_ARR;\n        }\n        else if (projectableNodes.length < expectedSlotCount) {\n            var givenSlotCount = projectableNodes.length;\n            res = ListWrapper.createFixedSize(expectedSlotCount);\n            for (var i = 0; i < expectedSlotCount; i++) {\n                res[i] = (i < givenSlotCount) ? projectableNodes[i] : EMPTY_ARR;\n            }\n        }\n        else {\n            res = projectableNodes;\n        }\n        return res;\n    }\n    var MAX_INTERPOLATION_VALUES = 9;\n    function interpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n        switch (valueCount) {\n            case 1:\n                return c0 + _toStringWithNull(a1) + c1;\n            case 2:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n            case 3:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3;\n            case 4:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4;\n            case 5:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n            case 6:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n            case 7:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7;\n            case 8:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n            case 9:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n            default:\n                throw new Error(\"Does not support more than 9 expressions\");\n        }\n    }\n    function _toStringWithNull(v) {\n        return v != null ? v.toString() : '';\n    }\n    function checkBinding(throwOnChange, oldValue, newValue) {\n        if (throwOnChange) {\n            if (!devModeEqual(oldValue, newValue)) {\n                throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);\n            }\n            return false;\n        }\n        else {\n            return !looseIdentical(oldValue, newValue);\n        }\n    }\n    function castByValue(input, value) {\n        return input;\n    }\n    var EMPTY_ARRAY = [];\n    var EMPTY_MAP = {};\n    function pureProxy1(fn) {\n        var result;\n        var v0 = UNINITIALIZED;\n        return function (p0) {\n            if (!looseIdentical(v0, p0)) {\n                v0 = p0;\n                result = fn(p0);\n            }\n            return result;\n        };\n    }\n    function pureProxy2(fn) {\n        var result;\n        var v0 = UNINITIALIZED;\n        var v1 = UNINITIALIZED;\n        return function (p0, p1) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {\n                v0 = p0;\n                v1 = p1;\n                result = fn(p0, p1);\n            }\n            return result;\n        };\n    }\n    function pureProxy3(fn) {\n        var result;\n        var v0 = UNINITIALIZED;\n        var v1 = UNINITIALIZED;\n        var v2 = UNINITIALIZED;\n        return function (p0, p1, p2) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                result = fn(p0, p1, p2);\n            }\n            return result;\n        };\n    }\n    function pureProxy4(fn) {\n        var result;\n        var v0, v1, v2, v3;\n        v0 = v1 = v2 = v3 = UNINITIALIZED;\n        return function (p0, p1, p2, p3) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                result = fn(p0, p1, p2, p3);\n            }\n            return result;\n        };\n    }\n    function pureProxy5(fn) {\n        var result;\n        var v0, v1, v2, v3, v4;\n        v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                result = fn(p0, p1, p2, p3, p4);\n            }\n            return result;\n        };\n    }\n    function pureProxy6(fn) {\n        var result;\n        var v0, v1, v2, v3, v4, v5;\n        v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                result = fn(p0, p1, p2, p3, p4, p5);\n            }\n            return result;\n        };\n    }\n    function pureProxy7(fn) {\n        var result;\n        var v0, v1, v2, v3, v4, v5, v6;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5, p6) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n                !looseIdentical(v6, p6)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                result = fn(p0, p1, p2, p3, p4, p5, p6);\n            }\n            return result;\n        };\n    }\n    function pureProxy8(fn) {\n        var result;\n        var v0, v1, v2, v3, v4, v5, v6, v7;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5, p6, p7) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n                !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                v7 = p7;\n                result = fn(p0, p1, p2, p3, p4, p5, p6, p7);\n            }\n            return result;\n        };\n    }\n    function pureProxy9(fn) {\n        var result;\n        var v0, v1, v2, v3, v4, v5, v6, v7, v8;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                v7 = p7;\n                v8 = p8;\n                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);\n            }\n            return result;\n        };\n    }\n    function pureProxy10(fn) {\n        var result;\n        var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) ||\n                !looseIdentical(v9, p9)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                v7 = p7;\n                v8 = p8;\n                v9 = p9;\n                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);\n            }\n            return result;\n        };\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$8 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Represents an instance of a Component created via a {@link ComponentFactory}.\n     *\n     * `ComponentRef` provides access to the Component Instance as well other objects related to this\n     * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n     * method.\n     * @stable\n     */\n    var ComponentRef = (function () {\n        function ComponentRef() {\n        }\n        Object.defineProperty(ComponentRef.prototype, \"location\", {\n            /**\n             * Location of the Host Element of this Component Instance.\n             */\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef.prototype, \"injector\", {\n            /**\n             * The injector on which the component instance exists.\n             */\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef.prototype, \"instance\", {\n            /**\n             * The instance of the Component.\n             */\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        Object.defineProperty(ComponentRef.prototype, \"hostView\", {\n            /**\n             * The {@link ViewRef} of the Host View of this Component instance.\n             */\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        Object.defineProperty(ComponentRef.prototype, \"changeDetectorRef\", {\n            /**\n             * The {@link ChangeDetectorRef} of the Component instance.\n             */\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef.prototype, \"componentType\", {\n            /**\n             * The component type.\n             */\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        return ComponentRef;\n    }());\n    var ComponentRef_ = (function (_super) {\n        __extends$8(ComponentRef_, _super);\n        function ComponentRef_(_hostElement, _componentType) {\n            _super.call(this);\n            this._hostElement = _hostElement;\n            this._componentType = _componentType;\n        }\n        Object.defineProperty(ComponentRef_.prototype, \"location\", {\n            get: function () { return this._hostElement.elementRef; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n            get: function () { return this._hostElement.injector; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef_.prototype, \"instance\", {\n            get: function () { return this._hostElement.component; },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        Object.defineProperty(ComponentRef_.prototype, \"hostView\", {\n            get: function () { return this._hostElement.parentView.ref; },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        Object.defineProperty(ComponentRef_.prototype, \"changeDetectorRef\", {\n            get: function () { return this._hostElement.parentView.ref; },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n            get: function () { return this._componentType; },\n            enumerable: true,\n            configurable: true\n        });\n        ComponentRef_.prototype.destroy = function () { this._hostElement.parentView.destroy(); };\n        ComponentRef_.prototype.onDestroy = function (callback) { this.hostView.onDestroy(callback); };\n        return ComponentRef_;\n    }(ComponentRef));\n    /**\n     * @experimental\n     */\n    var EMPTY_CONTEXT = new Object();\n    /**\n     * @stable\n     */\n    var ComponentFactory = (function () {\n        function ComponentFactory(selector, _viewFactory, _componentType) {\n            this.selector = selector;\n            this._viewFactory = _viewFactory;\n            this._componentType = _componentType;\n        }\n        Object.defineProperty(ComponentFactory.prototype, \"componentType\", {\n            get: function () { return this._componentType; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Creates a new component.\n         */\n        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {\n            if (projectableNodes === void 0) { projectableNodes = null; }\n            if (rootSelectorOrNode === void 0) { rootSelectorOrNode = null; }\n            var vu = injector.get(ViewUtils);\n            if (isBlank(projectableNodes)) {\n                projectableNodes = [];\n            }\n            // Note: Host views don't need a declarationAppElement!\n            var hostView = this._viewFactory(vu, injector, null);\n            var hostElement = hostView.create(EMPTY_CONTEXT, projectableNodes, rootSelectorOrNode);\n            return new ComponentRef_(hostElement, this._componentType);\n        };\n        return ComponentFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$10 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @stable\n     */\n    var NoComponentFactoryError = (function (_super) {\n        __extends$10(NoComponentFactoryError, _super);\n        function NoComponentFactoryError(component) {\n            _super.call(this, \"No component factory found for \" + stringify(component));\n            this.component = component;\n        }\n        return NoComponentFactoryError;\n    }(BaseError));\n    var _NullComponentFactoryResolver = (function () {\n        function _NullComponentFactoryResolver() {\n        }\n        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            throw new NoComponentFactoryError(component);\n        };\n        return _NullComponentFactoryResolver;\n    }());\n    /**\n     * @stable\n     */\n    var ComponentFactoryResolver = (function () {\n        function ComponentFactoryResolver() {\n        }\n        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n        return ComponentFactoryResolver;\n    }());\n    var CodegenComponentFactoryResolver = (function () {\n        function CodegenComponentFactoryResolver(factories, _parent) {\n            this._parent = _parent;\n            this._factories = new Map();\n            for (var i = 0; i < factories.length; i++) {\n                var factory = factories[i];\n                this._factories.set(factory.componentType, factory);\n            }\n        }\n        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            var result = this._factories.get(component);\n            if (!result) {\n                result = this._parent.resolveComponentFactory(component);\n            }\n            return result;\n        };\n        return CodegenComponentFactoryResolver;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$11 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Use by directives and components to emit custom Events.\n     *\n     * ### Examples\n     *\n     * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n     * title gets clicked:\n     *\n     * ```\n     * @Component({\n     *   selector: 'zippy',\n     *   template: `\n     *   <div class=\"zippy\">\n     *     <div (click)=\"toggle()\">Toggle</div>\n     *     <div [hidden]=\"!visible\">\n     *       <ng-content></ng-content>\n     *     </div>\n     *  </div>`})\n     * export class Zippy {\n     *   visible: boolean = true;\n     *   @Output() open: EventEmitter<any> = new EventEmitter();\n     *   @Output() close: EventEmitter<any> = new EventEmitter();\n     *\n     *   toggle() {\n     *     this.visible = !this.visible;\n     *     if (this.visible) {\n     *       this.open.emit(null);\n     *     } else {\n     *       this.close.emit(null);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * The events payload can be accessed by the parameter `$event` on the components output event\n     * handler:\n     *\n     * ```\n     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n     * ```\n     *\n     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n     * https://github.com/jhusain/observable-spec\n     *\n     * Once a reference implementation of the spec is available, switch to it.\n     * @stable\n     */\n    var EventEmitter = (function (_super) {\n        __extends$11(EventEmitter, _super);\n        /**\n         * Creates an instance of [EventEmitter], which depending on [isAsync],\n         * delivers events synchronously or asynchronously.\n         */\n        function EventEmitter(isAsync) {\n            if (isAsync === void 0) { isAsync = false; }\n            _super.call(this);\n            this.__isAsync = isAsync;\n        }\n        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n            var schedulerFn;\n            var errorFn = function (err) { return null; };\n            var completeFn = function () { return null; };\n            if (generatorOrNext && typeof generatorOrNext === 'object') {\n                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {\n                    setTimeout(function () { return generatorOrNext.next(value); });\n                } : function (value /** TODO #9100 */) { generatorOrNext.next(value); };\n                if (generatorOrNext.error) {\n                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                        function (err) { generatorOrNext.error(err); };\n                }\n                if (generatorOrNext.complete) {\n                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                        function () { generatorOrNext.complete(); };\n                }\n            }\n            else {\n                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {\n                    setTimeout(function () { return generatorOrNext(value); });\n                } : function (value /** TODO #9100 */) { generatorOrNext(value); };\n                if (error) {\n                    errorFn =\n                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n                }\n                if (complete) {\n                    completeFn =\n                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n                }\n            }\n            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        };\n        return EventEmitter;\n    }(rxjs_Subject.Subject));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NgZoneImpl = (function () {\n        function NgZoneImpl(_a) {\n            var _this = this;\n            var trace = _a.trace, onEnter = _a.onEnter, onLeave = _a.onLeave, setMicrotask = _a.setMicrotask, setMacrotask = _a.setMacrotask, onError = _a.onError;\n            this.onEnter = onEnter;\n            this.onLeave = onLeave;\n            this.setMicrotask = setMicrotask;\n            this.setMacrotask = setMacrotask;\n            this.onError = onError;\n            if (Zone) {\n                this.outer = this.inner = Zone.current;\n                if (Zone['wtfZoneSpec']) {\n                    this.inner = this.inner.fork(Zone['wtfZoneSpec']);\n                }\n                if (trace && Zone['longStackTraceZoneSpec']) {\n                    this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);\n                }\n                this.inner = this.inner.fork({\n                    name: 'angular',\n                    properties: { 'isAngularZone': true },\n                    onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n                        try {\n                            _this.onEnter();\n                            return delegate.invokeTask(target, task, applyThis, applyArgs);\n                        }\n                        finally {\n                            _this.onLeave();\n                        }\n                    },\n                    onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n                        try {\n                            _this.onEnter();\n                            return delegate.invoke(target, callback, applyThis, applyArgs, source);\n                        }\n                        finally {\n                            _this.onLeave();\n                        }\n                    },\n                    onHasTask: function (delegate, current, target, hasTaskState) {\n                        delegate.hasTask(target, hasTaskState);\n                        if (current == target) {\n                            // We are only interested in hasTask events which originate from our zone\n                            // (A child hasTask event is not interesting to us)\n                            if (hasTaskState.change == 'microTask') {\n                                _this.setMicrotask(hasTaskState.microTask);\n                            }\n                            else if (hasTaskState.change == 'macroTask') {\n                                _this.setMacrotask(hasTaskState.macroTask);\n                            }\n                        }\n                    },\n                    onHandleError: function (delegate, current, target, error) {\n                        delegate.handleError(target, error);\n                        _this.onError(error);\n                        return false;\n                    }\n                });\n            }\n            else {\n                throw new Error('Angular requires Zone.js polyfill.');\n            }\n        }\n        NgZoneImpl.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };\n        NgZoneImpl.prototype.runInner = function (fn) { return this.inner.run(fn); };\n        ;\n        NgZoneImpl.prototype.runInnerGuarded = function (fn) { return this.inner.runGuarded(fn); };\n        ;\n        NgZoneImpl.prototype.runOuter = function (fn) { return this.outer.run(fn); };\n        ;\n        return NgZoneImpl;\n    }());\n\n    /**\n     * An injectable service for executing work inside or outside of the Angular zone.\n     *\n     * The most common use of this service is to optimize performance when starting a work consisting of\n     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n     * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n     * can reenter the Angular zone via {@link #run}.\n     *\n     * <!-- TODO: add/fix links to:\n     *   - docs explaining zones and the use of zones in Angular and change-detection\n     *   - link to runOutsideAngular/run (throughout this file!)\n     *   -->\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))\n     * ```\n     * import {Component, View, NgZone} from '@angular/core';\n     * import {NgIf} from '@angular/common';\n     *\n     * @Component({\n     *   selector: 'ng-zone-demo'.\n     *   template: `\n     *     <h2>Demo: NgZone</h2>\n     *\n     *     <p>Progress: {{progress}}%</p>\n     *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n     *\n     *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n     *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n     *   `,\n     *   directives: [NgIf]\n     * })\n     * export class NgZoneDemo {\n     *   progress: number = 0;\n     *   label: string;\n     *\n     *   constructor(private _ngZone: NgZone) {}\n     *\n     *   // Loop inside the Angular zone\n     *   // so the UI DOES refresh after each setTimeout cycle\n     *   processWithinAngularZone() {\n     *     this.label = 'inside';\n     *     this.progress = 0;\n     *     this._increaseProgress(() => console.log('Inside Done!'));\n     *   }\n     *\n     *   // Loop outside of the Angular zone\n     *   // so the UI DOES NOT refresh after each setTimeout cycle\n     *   processOutsideOfAngularZone() {\n     *     this.label = 'outside';\n     *     this.progress = 0;\n     *     this._ngZone.runOutsideAngular(() => {\n     *       this._increaseProgress(() => {\n     *       // reenter the Angular zone and display done\n     *       this._ngZone.run(() => {console.log('Outside Done!') });\n     *     }}));\n     *   }\n     *\n     *\n     *   _increaseProgress(doneCallback: () => void) {\n     *     this.progress += 1;\n     *     console.log(`Current progress: ${this.progress}%`);\n     *\n     *     if (this.progress < 100) {\n     *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)\n     *     } else {\n     *       doneCallback();\n     *     }\n     *   }\n     * }\n     * ```\n     * @experimental\n     */\n    var NgZone = (function () {\n        function NgZone(_a) {\n            var _this = this;\n            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n            this._hasPendingMicrotasks = false;\n            this._hasPendingMacrotasks = false;\n            /** @internal */\n            this._isStable = true;\n            /** @internal */\n            this._nesting = 0;\n            /** @internal */\n            this._onUnstable = new EventEmitter(false);\n            /** @internal */\n            this._onMicrotaskEmpty = new EventEmitter(false);\n            /** @internal */\n            this._onStable = new EventEmitter(false);\n            /** @internal */\n            this._onErrorEvents = new EventEmitter(false);\n            this._zoneImpl = new NgZoneImpl({\n                trace: enableLongStackTrace,\n                onEnter: function () {\n                    // console.log('ZONE.enter', this._nesting, this._isStable);\n                    _this._nesting++;\n                    if (_this._isStable) {\n                        _this._isStable = false;\n                        _this._onUnstable.emit(null);\n                    }\n                },\n                onLeave: function () {\n                    _this._nesting--;\n                    // console.log('ZONE.leave', this._nesting, this._isStable);\n                    _this._checkStable();\n                },\n                setMicrotask: function (hasMicrotasks) {\n                    _this._hasPendingMicrotasks = hasMicrotasks;\n                    _this._checkStable();\n                },\n                setMacrotask: function (hasMacrotasks) { _this._hasPendingMacrotasks = hasMacrotasks; },\n                onError: function (error) { return _this._onErrorEvents.emit(error); }\n            });\n        }\n        NgZone.isInAngularZone = function () { return NgZoneImpl.isInAngularZone(); };\n        NgZone.assertInAngularZone = function () {\n            if (!NgZoneImpl.isInAngularZone()) {\n                throw new Error('Expected to be in Angular Zone, but it is not!');\n            }\n        };\n        NgZone.assertNotInAngularZone = function () {\n            if (NgZoneImpl.isInAngularZone()) {\n                throw new Error('Expected to not be in Angular Zone, but it is!');\n            }\n        };\n        NgZone.prototype._checkStable = function () {\n            var _this = this;\n            if (this._nesting == 0) {\n                if (!this._hasPendingMicrotasks && !this._isStable) {\n                    try {\n                        // console.log('ZONE.microtaskEmpty');\n                        this._nesting++;\n                        this._onMicrotaskEmpty.emit(null);\n                    }\n                    finally {\n                        this._nesting--;\n                        if (!this._hasPendingMicrotasks) {\n                            try {\n                                // console.log('ZONE.stable', this._nesting, this._isStable);\n                                this.runOutsideAngular(function () { return _this._onStable.emit(null); });\n                            }\n                            finally {\n                                this._isStable = true;\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        ;\n        Object.defineProperty(NgZone.prototype, \"onUnstable\", {\n            /**\n             * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n             */\n            get: function () { return this._onUnstable; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"onMicrotaskEmpty\", {\n            /**\n             * Notifies when there is no more microtasks enqueue in the current VM Turn.\n             * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n             * For this reason this event can fire multiple times per VM Turn.\n             */\n            get: function () { return this._onMicrotaskEmpty; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"onStable\", {\n            /**\n             * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n             * implies we are about to relinquish VM turn.\n             * This event gets called just once.\n             */\n            get: function () { return this._onStable; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"onError\", {\n            /**\n             * Notify that an error has been delivered.\n             */\n            get: function () { return this._onErrorEvents; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"isStable\", {\n            /**\n             * Whether there are no outstanding microtasks or microtasks.\n             */\n            get: function () { return this._isStable; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"hasPendingMicrotasks\", {\n            /**\n             * Whether there are any outstanding microtasks.\n             */\n            get: function () { return this._hasPendingMicrotasks; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"hasPendingMacrotasks\", {\n            /**\n             * Whether there are any outstanding microtasks.\n             */\n            get: function () { return this._hasPendingMacrotasks; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n         * the function.\n         *\n         * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n         * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * within the Angular zone.\n         *\n         * If a synchronous error happens it will be rethrown and not reported via `onError`.\n         */\n        NgZone.prototype.run = function (fn) { return this._zoneImpl.runInner(fn); };\n        /**\n         * Same as #run, except that synchronous errors are caught and forwarded\n         * via `onError` and not rethrown.\n         */\n        NgZone.prototype.runGuarded = function (fn) { return this._zoneImpl.runInnerGuarded(fn); };\n        /**\n         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n         * the function.\n         *\n         * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that\n         * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * outside of the Angular zone.\n         *\n         * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n         */\n        NgZone.prototype.runOutsideAngular = function (fn) { return this._zoneImpl.runOuter(fn); };\n        return NgZone;\n    }());\n\n    /**\n     * The Testability service provides testing hooks that can be accessed from\n     * the browser and by services such as Protractor. Each bootstrapped Angular\n     * application on the page will have an instance of Testability.\n     * @experimental\n     */\n    var Testability = (function () {\n        function Testability(_ngZone) {\n            this._ngZone = _ngZone;\n            /** @internal */\n            this._pendingCount = 0;\n            /** @internal */\n            this._isZoneStable = true;\n            /**\n             * Whether any work was done since the last 'whenStable' callback. This is\n             * useful to detect if this could have potentially destabilized another\n             * component while it is stabilizing.\n             * @internal\n             */\n            this._didWork = false;\n            /** @internal */\n            this._callbacks = [];\n            this._watchAngularEvents();\n        }\n        /** @internal */\n        Testability.prototype._watchAngularEvents = function () {\n            var _this = this;\n            this._ngZone.onUnstable.subscribe({\n                next: function () {\n                    _this._didWork = true;\n                    _this._isZoneStable = false;\n                }\n            });\n            this._ngZone.runOutsideAngular(function () {\n                _this._ngZone.onStable.subscribe({\n                    next: function () {\n                        NgZone.assertNotInAngularZone();\n                        scheduleMicroTask(function () {\n                            _this._isZoneStable = true;\n                            _this._runCallbacksIfReady();\n                        });\n                    }\n                });\n            });\n        };\n        Testability.prototype.increasePendingRequestCount = function () {\n            this._pendingCount += 1;\n            this._didWork = true;\n            return this._pendingCount;\n        };\n        Testability.prototype.decreasePendingRequestCount = function () {\n            this._pendingCount -= 1;\n            if (this._pendingCount < 0) {\n                throw new Error('pending async requests below zero');\n            }\n            this._runCallbacksIfReady();\n            return this._pendingCount;\n        };\n        Testability.prototype.isStable = function () {\n            return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;\n        };\n        /** @internal */\n        Testability.prototype._runCallbacksIfReady = function () {\n            var _this = this;\n            if (this.isStable()) {\n                // Schedules the call backs in a new frame so that it is always async.\n                scheduleMicroTask(function () {\n                    while (_this._callbacks.length !== 0) {\n                        (_this._callbacks.pop())(_this._didWork);\n                    }\n                    _this._didWork = false;\n                });\n            }\n            else {\n                // Not Ready\n                this._didWork = true;\n            }\n        };\n        Testability.prototype.whenStable = function (callback) {\n            this._callbacks.push(callback);\n            this._runCallbacksIfReady();\n        };\n        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };\n        Testability.prototype.findBindings = function (using, provider, exactMatch) {\n            // TODO(juliemr): implement.\n            return [];\n        };\n        Testability.prototype.findProviders = function (using, provider, exactMatch) {\n            // TODO(juliemr): implement.\n            return [];\n        };\n        Testability.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        Testability.ctorParameters = [\n            { type: NgZone, },\n        ];\n        return Testability;\n    }());\n    /**\n     * A global registry of {@link Testability} instances for specific elements.\n     * @experimental\n     */\n    var TestabilityRegistry = (function () {\n        function TestabilityRegistry() {\n            /** @internal */\n            this._applications = new Map$1();\n            _testabilityGetter.addToWindow(this);\n        }\n        TestabilityRegistry.prototype.registerApplication = function (token, testability) {\n            this._applications.set(token, testability);\n        };\n        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };\n        TestabilityRegistry.prototype.getAllTestabilities = function () { return MapWrapper.values(this._applications); };\n        TestabilityRegistry.prototype.getAllRootElements = function () { return MapWrapper.keys(this._applications); };\n        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {\n            if (findInAncestors === void 0) { findInAncestors = true; }\n            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n        };\n        TestabilityRegistry.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        TestabilityRegistry.ctorParameters = [];\n        return TestabilityRegistry;\n    }());\n    var _NoopGetTestability = (function () {\n        function _NoopGetTestability() {\n        }\n        _NoopGetTestability.prototype.addToWindow = function (registry) { };\n        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n            return null;\n        };\n        return _NoopGetTestability;\n    }());\n    /**\n     * Set the {@link GetTestability} implementation used by the Angular testing framework.\n     * @experimental\n     */\n    function setTestabilityGetter(getter) {\n        _testabilityGetter = getter;\n    }\n    var _testabilityGetter = new _NoopGetTestability();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$6 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var _devMode = true;\n    var _runModeLocked = false;\n    var _platform;\n    /**\n     * Disable Angular's development mode, which turns off assertions and other\n     * checks within the framework.\n     *\n     * One important assertion this disables verifies that a change detection pass\n     * does not result in additional changes to any bindings (also known as\n     * unidirectional data flow).\n     *\n     * @stable\n     */\n    function enableProdMode() {\n        if (_runModeLocked) {\n            throw new Error('Cannot enable prod mode after platform setup.');\n        }\n        _devMode = false;\n    }\n    /**\n     * Returns whether Angular is in development mode. After called once,\n     * the value is locked and won't change any more.\n     *\n     * By default, this is true, unless a user calls `enableProdMode` before calling this.\n     *\n     * @experimental APIs related to application bootstrap are currently under review.\n     */\n    function isDevMode() {\n        _runModeLocked = true;\n        return _devMode;\n    }\n    /**\n     * Creates a platform.\n     * Platforms have to be eagerly created via this function.\n     *\n     * @experimental APIs related to application bootstrap are currently under review.\n     */\n    function createPlatform(injector) {\n        if (isPresent(_platform) && !_platform.destroyed) {\n            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n        }\n        _platform = injector.get(PlatformRef);\n        var inits = injector.get(PLATFORM_INITIALIZER, null);\n        if (isPresent(inits))\n            inits.forEach(function (init) { return init(); });\n        return _platform;\n    }\n    /**\n     * Creates a factory for a platform\n     *\n     * @experimental APIs related to application bootstrap are currently under review.\n     */\n    function createPlatformFactory(parentPlaformFactory, name, providers) {\n        if (providers === void 0) { providers = []; }\n        var marker = new OpaqueToken(\"Platform: \" + name);\n        return function (extraProviders) {\n            if (extraProviders === void 0) { extraProviders = []; }\n            if (!getPlatform()) {\n                if (parentPlaformFactory) {\n                    parentPlaformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n                }\n                else {\n                    createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));\n                }\n            }\n            return assertPlatform(marker);\n        };\n    }\n    /**\n     * Checks that there currently is a platform\n     * which contains the given token as a provider.\n     *\n     * @experimental APIs related to application bootstrap are currently under review.\n     */\n    function assertPlatform(requiredToken) {\n        var platform = getPlatform();\n        if (isBlank(platform)) {\n            throw new Error('No platform exists!');\n        }\n        if (isPresent(platform) && isBlank(platform.injector.get(requiredToken, null))) {\n            throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n        }\n        return platform;\n    }\n    /**\n     * Destroy the existing platform.\n     *\n     * @experimental APIs related to application bootstrap are currently under review.\n     */\n    function destroyPlatform() {\n        if (isPresent(_platform) && !_platform.destroyed) {\n            _platform.destroy();\n        }\n    }\n    /**\n     * Returns the current platform.\n     *\n     * @experimental APIs related to application bootstrap are currently under review.\n     */\n    function getPlatform() {\n        return isPresent(_platform) && !_platform.destroyed ? _platform : null;\n    }\n    /**\n     * The Angular platform is the entry point for Angular on a web page. Each page\n     * has exactly one platform, and services (such as reflection) which are common\n     * to every Angular application running on the page are bound in its scope.\n     *\n     * A page's platform is initialized implicitly when {@link bootstrap}() is called, or\n     * explicitly by calling {@link createPlatform}().\n     *\n     * @stable\n     */\n    var PlatformRef = (function () {\n        function PlatformRef() {\n        }\n        /**\n         * Creates an instance of an `@NgModule` for the given platform\n         * for offline compilation.\n         *\n         * ## Simple Example\n         *\n         * ```typescript\n         * my_module.ts:\n         *\n         * @NgModule({\n         *   imports: [BrowserModule]\n         * })\n         * class MyModule {}\n         *\n         * main.ts:\n         * import {MyModuleNgFactory} from './my_module.ngfactory';\n         * import {platformBrowser} from '@angular/platform-browser';\n         *\n         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n         * ```\n         *\n         * @experimental APIs related to application bootstrap are currently under review.\n         */\n        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) {\n            throw unimplemented();\n        };\n        /**\n         * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n         *\n         * ## Simple Example\n         *\n         * ```typescript\n         * @NgModule({\n         *   imports: [BrowserModule]\n         * })\n         * class MyModule {}\n         *\n         * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n         * ```\n         * @stable\n         */\n        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {\n            if (compilerOptions === void 0) { compilerOptions = []; }\n            throw unimplemented();\n        };\n        Object.defineProperty(PlatformRef.prototype, \"injector\", {\n            /**\n             * Retrieve the platform {@link Injector}, which is the parent injector for\n             * every Angular application on the page and provides singleton providers.\n             */\n            get: function () { throw unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\n            get: function () { throw unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        return PlatformRef;\n    }());\n    function _callAndReportToErrorHandler(errorHandler, callback) {\n        try {\n            var result = callback();\n            if (isPromise(result)) {\n                return result.catch(function (e) {\n                    errorHandler.handleError(e);\n                    // rethrow as the exception handler might not do it\n                    throw e;\n                });\n            }\n            else {\n                return result;\n            }\n        }\n        catch (e) {\n            errorHandler.handleError(e);\n            // rethrow as the exception handler might not do it\n            throw e;\n        }\n    }\n    var PlatformRef_ = (function (_super) {\n        __extends$6(PlatformRef_, _super);\n        function PlatformRef_(_injector) {\n            _super.call(this);\n            this._injector = _injector;\n            this._modules = [];\n            this._destroyListeners = [];\n            this._destroyed = false;\n        }\n        PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n        Object.defineProperty(PlatformRef_.prototype, \"injector\", {\n            get: function () { return this._injector; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PlatformRef_.prototype, \"destroyed\", {\n            get: function () { return this._destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        PlatformRef_.prototype.destroy = function () {\n            if (this._destroyed) {\n                throw new Error('The platform has already been destroyed!');\n            }\n            ListWrapper.clone(this._modules).forEach(function (app) { return app.destroy(); });\n            this._destroyListeners.forEach(function (dispose) { return dispose(); });\n            this._destroyed = true;\n        };\n        PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {\n            return this._bootstrapModuleFactoryWithZone(moduleFactory, null);\n        };\n        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {\n            var _this = this;\n            // Note: We need to create the NgZone _before_ we instantiate the module,\n            // as instantiating the module creates some providers eagerly.\n            // So we create a mini parent injector that just contains the new NgZone and\n            // pass that as parent to the NgModuleFactory.\n            if (!ngZone)\n                ngZone = new NgZone({ enableLongStackTrace: isDevMode() });\n            // Attention: Don't use ApplicationRef.run here,\n            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n            return ngZone.run(function () {\n                var ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);\n                var moduleRef = moduleFactory.create(ngZoneInjector);\n                var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n                if (!exceptionHandler) {\n                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n                }\n                moduleRef.onDestroy(function () { return ListWrapper.remove(_this._modules, moduleRef); });\n                ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });\n                return _callAndReportToErrorHandler(exceptionHandler, function () {\n                    var initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                    return initStatus.donePromise.then(function () {\n                        _this._moduleDoBootstrap(moduleRef);\n                        return moduleRef;\n                    });\n                });\n            });\n        };\n        PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {\n            if (compilerOptions === void 0) { compilerOptions = []; }\n            return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);\n        };\n        PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) {\n            var _this = this;\n            if (compilerOptions === void 0) { compilerOptions = []; }\n            var compilerFactory = this.injector.get(CompilerFactory);\n            var compiler = compilerFactory.createCompiler(compilerOptions instanceof Array ? compilerOptions : [compilerOptions]);\n            // ugly internal api hack: generate host component factories for all declared components and\n            // pass the factories into the callback - this is used by UpdateAdapter to get hold of all\n            // factories.\n            if (componentFactoryCallback) {\n                return compiler.compileModuleAndAllComponentsAsync(moduleType)\n                    .then(function (_a) {\n                    var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories;\n                    componentFactoryCallback(componentFactories);\n                    return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);\n                });\n            }\n            return compiler.compileModuleAsync(moduleType)\n                .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });\n        };\n        PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {\n            var appRef = moduleRef.injector.get(ApplicationRef);\n            if (moduleRef.bootstrapFactories.length > 0) {\n                moduleRef.bootstrapFactories.forEach(function (compFactory) { return appRef.bootstrap(compFactory); });\n            }\n            else if (moduleRef.instance.ngDoBootstrap) {\n                moduleRef.instance.ngDoBootstrap(appRef);\n            }\n            else {\n                throw new Error((\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \") +\n                    \"Please define one of these.\");\n            }\n        };\n        PlatformRef_.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        PlatformRef_.ctorParameters = [\n            { type: Injector, },\n        ];\n        return PlatformRef_;\n    }(PlatformRef));\n    /**\n     * A reference to an Angular application running on a page.\n     *\n     * For more about Angular applications, see the documentation for {@link bootstrap}.\n     *\n     * @stable\n     */\n    var ApplicationRef = (function () {\n        function ApplicationRef() {\n        }\n        Object.defineProperty(ApplicationRef.prototype, \"componentTypes\", {\n            /**\n             * Get a list of component types registered to this application.\n             * This list is populated even before the component is created.\n             */\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        Object.defineProperty(ApplicationRef.prototype, \"components\", {\n            /**\n             * Get a list of components registered to this application.\n             */\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        return ApplicationRef;\n    }());\n    var ApplicationRef_ = (function (_super) {\n        __extends$6(ApplicationRef_, _super);\n        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {\n            var _this = this;\n            _super.call(this);\n            this._zone = _zone;\n            this._console = _console;\n            this._injector = _injector;\n            this._exceptionHandler = _exceptionHandler;\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._initStatus = _initStatus;\n            this._testabilityRegistry = _testabilityRegistry;\n            this._testability = _testability;\n            this._bootstrapListeners = [];\n            this._rootComponents = [];\n            this._rootComponentTypes = [];\n            this._changeDetectorRefs = [];\n            this._runningTick = false;\n            this._enforceNoNewChanges = false;\n            this._enforceNoNewChanges = isDevMode();\n            this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n        }\n        ApplicationRef_.prototype.registerChangeDetector = function (changeDetector) {\n            this._changeDetectorRefs.push(changeDetector);\n        };\n        ApplicationRef_.prototype.unregisterChangeDetector = function (changeDetector) {\n            ListWrapper.remove(this._changeDetectorRefs, changeDetector);\n        };\n        ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {\n            var _this = this;\n            if (!this._initStatus.done) {\n                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n            }\n            var componentFactory;\n            if (componentOrFactory instanceof ComponentFactory) {\n                componentFactory = componentOrFactory;\n            }\n            else {\n                componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n            }\n            this._rootComponentTypes.push(componentFactory.componentType);\n            var compRef = componentFactory.create(this._injector, [], componentFactory.selector);\n            compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n            var testability = compRef.injector.get(Testability, null);\n            if (isPresent(testability)) {\n                compRef.injector.get(TestabilityRegistry)\n                    .registerApplication(compRef.location.nativeElement, testability);\n            }\n            this._loadComponent(compRef);\n            if (isDevMode()) {\n                this._console.log(\"Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.\");\n            }\n            return compRef;\n        };\n        /** @internal */\n        ApplicationRef_.prototype._loadComponent = function (componentRef) {\n            this._changeDetectorRefs.push(componentRef.changeDetectorRef);\n            this.tick();\n            this._rootComponents.push(componentRef);\n            // Get the listeners lazily to prevent DI cycles.\n            var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, [])\n                .concat(this._bootstrapListeners);\n            listeners.forEach(function (listener) { return listener(componentRef); });\n        };\n        /** @internal */\n        ApplicationRef_.prototype._unloadComponent = function (componentRef) {\n            if (!ListWrapper.contains(this._rootComponents, componentRef)) {\n                return;\n            }\n            this.unregisterChangeDetector(componentRef.changeDetectorRef);\n            ListWrapper.remove(this._rootComponents, componentRef);\n        };\n        ApplicationRef_.prototype.tick = function () {\n            if (this._runningTick) {\n                throw new Error('ApplicationRef.tick is called recursively');\n            }\n            var s = ApplicationRef_._tickScope();\n            try {\n                this._runningTick = true;\n                this._changeDetectorRefs.forEach(function (detector) { return detector.detectChanges(); });\n                if (this._enforceNoNewChanges) {\n                    this._changeDetectorRefs.forEach(function (detector) { return detector.checkNoChanges(); });\n                }\n            }\n            finally {\n                this._runningTick = false;\n                wtfLeave(s);\n            }\n        };\n        ApplicationRef_.prototype.ngOnDestroy = function () {\n            // TODO(alxhub): Dispose of the NgZone.\n            ListWrapper.clone(this._rootComponents).forEach(function (ref) { return ref.destroy(); });\n        };\n        Object.defineProperty(ApplicationRef_.prototype, \"componentTypes\", {\n            get: function () { return this._rootComponentTypes; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ApplicationRef_.prototype, \"components\", {\n            get: function () { return this._rootComponents; },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');\n        ApplicationRef_.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        ApplicationRef_.ctorParameters = [\n            { type: NgZone, },\n            { type: Console, },\n            { type: Injector, },\n            { type: ErrorHandler, },\n            { type: ComponentFactoryResolver, },\n            { type: ApplicationInitStatus, },\n            { type: TestabilityRegistry, decorators: [{ type: Optional },] },\n            { type: Testability, decorators: [{ type: Optional },] },\n        ];\n        return ApplicationRef_;\n    }(ApplicationRef));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$12 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Represents an instance of an NgModule created via a {@link NgModuleFactory}.\n     *\n     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n     * NgModule Instance.\n     *\n     * @stable\n     */\n    var NgModuleRef = (function () {\n        function NgModuleRef() {\n        }\n        Object.defineProperty(NgModuleRef.prototype, \"injector\", {\n            /**\n             * The injector that contains all of the providers of the NgModule.\n             */\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModuleRef.prototype, \"componentFactoryResolver\", {\n            /**\n             * The ComponentFactoryResolver to get hold of the ComponentFactories\n             * declared in the `entryComponents` property of the module.\n             */\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModuleRef.prototype, \"instance\", {\n            /**\n             * The NgModule instance.\n             */\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        return NgModuleRef;\n    }());\n    /**\n     * @experimental\n     */\n    var NgModuleFactory = (function () {\n        function NgModuleFactory(_injectorClass, _moduleType) {\n            this._injectorClass = _injectorClass;\n            this._moduleType = _moduleType;\n        }\n        Object.defineProperty(NgModuleFactory.prototype, \"moduleType\", {\n            get: function () { return this._moduleType; },\n            enumerable: true,\n            configurable: true\n        });\n        NgModuleFactory.prototype.create = function (parentInjector) {\n            if (!parentInjector) {\n                parentInjector = Injector.NULL;\n            }\n            var instance = new this._injectorClass(parentInjector);\n            instance.create();\n            return instance;\n        };\n        return NgModuleFactory;\n    }());\n    var _UNDEFINED = new Object();\n    var NgModuleInjector = (function (_super) {\n        __extends$12(NgModuleInjector, _super);\n        function NgModuleInjector(parent, factories, bootstrapFactories) {\n            _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));\n            this.parent = parent;\n            this.bootstrapFactories = bootstrapFactories;\n            this._destroyListeners = [];\n            this._destroyed = false;\n        }\n        NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };\n        NgModuleInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            if (token === Injector || token === ComponentFactoryResolver) {\n                return this;\n            }\n            var result = this.getInternal(token, _UNDEFINED);\n            return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;\n        };\n        Object.defineProperty(NgModuleInjector.prototype, \"injector\", {\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModuleInjector.prototype, \"componentFactoryResolver\", {\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        NgModuleInjector.prototype.destroy = function () {\n            if (this._destroyed) {\n                throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n            }\n            this._destroyed = true;\n            this.destroyInternal();\n            this._destroyListeners.forEach(function (listener) { return listener(); });\n        };\n        NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n        return NgModuleInjector;\n    }(CodegenComponentFactoryResolver));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to load ng module factories.\n     * @stable\n     */\n    var NgModuleFactoryLoader = (function () {\n        function NgModuleFactoryLoader() {\n        }\n        return NgModuleFactoryLoader;\n    }());\n\n    /**\n     * An unmodifiable list of items that Angular keeps up to date when the state\n     * of the application changes.\n     *\n     * The type of object that {@link QueryMetadata} and {@link ViewQueryMetadata} provide.\n     *\n     * Implements an iterable interface, therefore it can be used in both ES6\n     * javascript `for (var i of items)` loops as well as in Angular templates with\n     * `*ngFor=\"let i of myList\"`.\n     *\n     * Changes can be observed by subscribing to the changes `Observable`.\n     *\n     * NOTE: In the future this class will implement an `Observable` interface.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n     * ```typescript\n     * @Component({...})\n     * class Container {\n     *   @ViewChildren(Item) items:QueryList<Item>;\n     * }\n     * ```\n     * @stable\n     */\n    var QueryList = (function () {\n        function QueryList() {\n            this._dirty = true;\n            this._results = [];\n            this._emitter = new EventEmitter();\n        }\n        Object.defineProperty(QueryList.prototype, \"changes\", {\n            get: function () { return this._emitter; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryList.prototype, \"length\", {\n            get: function () { return this._results.length; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryList.prototype, \"first\", {\n            get: function () { return this._results[0]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryList.prototype, \"last\", {\n            get: function () { return this._results[this.length - 1]; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * See\n         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n         */\n        QueryList.prototype.map = function (fn) { return this._results.map(fn); };\n        /**\n         * See\n         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n         */\n        QueryList.prototype.filter = function (fn) {\n            return this._results.filter(fn);\n        };\n        /**\n         * See\n         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n         */\n        QueryList.prototype.reduce = function (fn, init) {\n            return this._results.reduce(fn, init);\n        };\n        /**\n         * See\n         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n         */\n        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };\n        /**\n         * See\n         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n         */\n        QueryList.prototype.some = function (fn) {\n            return this._results.some(fn);\n        };\n        QueryList.prototype.toArray = function () { return this._results.slice(); };\n        QueryList.prototype[getSymbolIterator()] = function () { return this._results[getSymbolIterator()](); };\n        QueryList.prototype.toString = function () { return this._results.toString(); };\n        QueryList.prototype.reset = function (res) {\n            this._results = ListWrapper.flatten(res);\n            this._dirty = false;\n        };\n        QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };\n        /** internal */\n        QueryList.prototype.setDirty = function () { this._dirty = true; };\n        Object.defineProperty(QueryList.prototype, \"dirty\", {\n            /** internal */\n            get: function () { return this._dirty; },\n            enumerable: true,\n            configurable: true\n        });\n        return QueryList;\n    }());\n\n    var _SEPARATOR = '#';\n    var FACTORY_CLASS_SUFFIX = 'NgFactory';\n    /**\n     * Configuration for SystemJsNgModuleLoader.\n     * token.\n     *\n     * @experimental\n     */\n    var SystemJsNgModuleLoaderConfig = (function () {\n        function SystemJsNgModuleLoaderConfig() {\n        }\n        return SystemJsNgModuleLoaderConfig;\n    }());\n    var DEFAULT_CONFIG = {\n        factoryPathPrefix: '',\n        factoryPathSuffix: '.ngfactory',\n    };\n    /**\n     * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n     * @experimental\n     */\n    var SystemJsNgModuleLoader = (function () {\n        function SystemJsNgModuleLoader(_compiler, config) {\n            this._compiler = _compiler;\n            this._system = function () { return System; };\n            this._config = config || DEFAULT_CONFIG;\n        }\n        SystemJsNgModuleLoader.prototype.load = function (path) {\n            var offlineMode = this._compiler instanceof Compiler;\n            return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n        };\n        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {\n            var _this = this;\n            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n            if (exportName === undefined)\n                exportName = 'default';\n            return this._system()\n                .import(module)\n                .then(function (module) { return module[exportName]; })\n                .then(function (type) { return checkNotEmpty(type, module, exportName); })\n                .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n        };\n        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {\n            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n            var factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n            if (exportName === undefined) {\n                exportName = 'default';\n                factoryClassSuffix = '';\n            }\n            return this._system()\n                .import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n                .then(function (module) { return module[exportName + factoryClassSuffix]; })\n                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n        };\n        SystemJsNgModuleLoader.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        SystemJsNgModuleLoader.ctorParameters = [\n            { type: Compiler, },\n            { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },\n        ];\n        return SystemJsNgModuleLoader;\n    }());\n    function checkNotEmpty(value, modulePath, exportName) {\n        if (!value) {\n            throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n        }\n        return value;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$13 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Represents an Embedded Template that can be used to instantiate Embedded Views.\n     *\n     * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or\n     * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the\n     * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the\n     * `TemplateRef` from a Component or a Directive via {@link Query}.\n     *\n     * To instantiate Embedded Views based on a Template, use\n     * {@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the\n     * View Container.\n     * @stable\n     */\n    var TemplateRef = (function () {\n        function TemplateRef() {\n        }\n        Object.defineProperty(TemplateRef.prototype, \"elementRef\", {\n            /**\n             * The location in the View where the Embedded View logically belongs to.\n             *\n             * The data-binding and injection contexts of Embedded Views created from this `TemplateRef`\n             * inherit from the contexts of this location.\n             *\n             * Typically new Embedded Views are attached to the View Container of this location, but in\n             * advanced use-cases, the View can be attached to a different container while keeping the\n             * data-binding and injection context from the original location.\n             *\n             */\n            // TODO(i): rename to anchor or location\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        return TemplateRef;\n    }());\n    var TemplateRef_ = (function (_super) {\n        __extends$13(TemplateRef_, _super);\n        function TemplateRef_(_appElement, _viewFactory) {\n            _super.call(this);\n            this._appElement = _appElement;\n            this._viewFactory = _viewFactory;\n        }\n        TemplateRef_.prototype.createEmbeddedView = function (context) {\n            var view = this._viewFactory(this._appElement.parentView.viewUtils, this._appElement.parentInjector, this._appElement);\n            view.create(context || {}, null, null);\n            return view.ref;\n        };\n        Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n            get: function () { return this._appElement.elementRef; },\n            enumerable: true,\n            configurable: true\n        });\n        return TemplateRef_;\n    }(TemplateRef));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$14 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @stable\n     */\n    var ViewRef = (function () {\n        function ViewRef() {\n        }\n        Object.defineProperty(ViewRef.prototype, \"destroyed\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        return ViewRef;\n    }());\n    /**\n     * Represents an Angular View.\n     *\n     * <!-- TODO: move the next two paragraphs to the dev guide -->\n     * A View is a fundamental building block of the application UI. It is the smallest grouping of\n     * Elements which are created and destroyed together.\n     *\n     * Properties of elements in a View can change, but the structure (number and order) of elements in\n     * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n     * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.\n     * <!-- /TODO -->\n     *\n     * ### Example\n     *\n     * Given this template...\n     *\n     * ```\n     * Count: {{items.length}}\n     * <ul>\n     *   <li *ngFor=\"let  item of items\">{{item}}</li>\n     * </ul>\n     * ```\n     *\n     * We have two {@link TemplateRef}s:\n     *\n     * Outer {@link TemplateRef}:\n     * ```\n     * Count: {{items.length}}\n     * <ul>\n     *   <template ngFor let-item [ngForOf]=\"items\"></template>\n     * </ul>\n     * ```\n     *\n     * Inner {@link TemplateRef}:\n     * ```\n     *   <li>{{item}}</li>\n     * ```\n     *\n     * Notice that the original template is broken down into two separate {@link TemplateRef}s.\n     *\n     * The outer/inner {@link TemplateRef}s are then assembled into views like so:\n     *\n     * ```\n     * <!-- ViewRef: outer-0 -->\n     * Count: 2\n     * <ul>\n     *   <template view-container-ref></template>\n     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n     * </ul>\n     * <!-- /ViewRef: outer-0 -->\n     * ```\n     * @experimental\n     */\n    var EmbeddedViewRef = (function (_super) {\n        __extends$14(EmbeddedViewRef, _super);\n        function EmbeddedViewRef() {\n            _super.apply(this, arguments);\n        }\n        Object.defineProperty(EmbeddedViewRef.prototype, \"context\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EmbeddedViewRef.prototype, \"rootNodes\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        return EmbeddedViewRef;\n    }(ViewRef));\n    var ViewRef_ = (function () {\n        function ViewRef_(_view) {\n            this._view = _view;\n            this._view = _view;\n            this._originalMode = this._view.cdMode;\n        }\n        Object.defineProperty(ViewRef_.prototype, \"internalView\", {\n            get: function () { return this._view; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n            get: function () { return this._view.flatRootNodes; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"context\", {\n            get: function () { return this._view.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n            get: function () { return this._view.destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce(); };\n        ViewRef_.prototype.detach = function () { this._view.cdMode = ChangeDetectorStatus.Detached; };\n        ViewRef_.prototype.detectChanges = function () { this._view.detectChanges(false); };\n        ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(true); };\n        ViewRef_.prototype.reattach = function () {\n            this._view.cdMode = this._originalMode;\n            this.markForCheck();\n        };\n        ViewRef_.prototype.onDestroy = function (callback) { this._view.disposables.push(callback); };\n        ViewRef_.prototype.destroy = function () { this._view.destroy(); };\n        return ViewRef_;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$15 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var EventListener = (function () {\n        function EventListener(name, callback) {\n            this.name = name;\n            this.callback = callback;\n        }\n        ;\n        return EventListener;\n    }());\n    /**\n     * @experimental All debugging apis are currently experimental.\n     */\n    var DebugNode = (function () {\n        function DebugNode(nativeNode, parent, _debugInfo) {\n            this._debugInfo = _debugInfo;\n            this.nativeNode = nativeNode;\n            if (isPresent(parent) && parent instanceof DebugElement) {\n                parent.addChild(this);\n            }\n            else {\n                this.parent = null;\n            }\n            this.listeners = [];\n        }\n        Object.defineProperty(DebugNode.prototype, \"injector\", {\n            get: function () { return isPresent(this._debugInfo) ? this._debugInfo.injector : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"componentInstance\", {\n            get: function () {\n                return isPresent(this._debugInfo) ? this._debugInfo.component : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"context\", {\n            get: function () { return isPresent(this._debugInfo) ? this._debugInfo.context : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"references\", {\n            get: function () {\n                return isPresent(this._debugInfo) ? this._debugInfo.references : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"providerTokens\", {\n            get: function () {\n                return isPresent(this._debugInfo) ? this._debugInfo.providerTokens : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"source\", {\n            get: function () { return isPresent(this._debugInfo) ? this._debugInfo.source : null; },\n            enumerable: true,\n            configurable: true\n        });\n        return DebugNode;\n    }());\n    /**\n     * @experimental All debugging apis are currently experimental.\n     */\n    var DebugElement = (function (_super) {\n        __extends$15(DebugElement, _super);\n        function DebugElement(nativeNode, parent, _debugInfo) {\n            _super.call(this, nativeNode, parent, _debugInfo);\n            this.properties = {};\n            this.attributes = {};\n            this.classes = {};\n            this.styles = {};\n            this.childNodes = [];\n            this.nativeElement = nativeNode;\n        }\n        DebugElement.prototype.addChild = function (child) {\n            if (isPresent(child)) {\n                this.childNodes.push(child);\n                child.parent = this;\n            }\n        };\n        DebugElement.prototype.removeChild = function (child) {\n            var childIndex = this.childNodes.indexOf(child);\n            if (childIndex !== -1) {\n                child.parent = null;\n                this.childNodes.splice(childIndex, 1);\n            }\n        };\n        DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {\n            var siblingIndex = this.childNodes.indexOf(child);\n            if (siblingIndex !== -1) {\n                var previousChildren = this.childNodes.slice(0, siblingIndex + 1);\n                var nextChildren = this.childNodes.slice(siblingIndex + 1);\n                this.childNodes =\n                    ListWrapper.concat(ListWrapper.concat(previousChildren, newChildren), nextChildren);\n                for (var i = 0; i < newChildren.length; ++i) {\n                    var newChild = newChildren[i];\n                    if (isPresent(newChild.parent)) {\n                        newChild.parent.removeChild(newChild);\n                    }\n                    newChild.parent = this;\n                }\n            }\n        };\n        DebugElement.prototype.query = function (predicate) {\n            var results = this.queryAll(predicate);\n            return results.length > 0 ? results[0] : null;\n        };\n        DebugElement.prototype.queryAll = function (predicate) {\n            var matches = [];\n            _queryElementChildren(this, predicate, matches);\n            return matches;\n        };\n        DebugElement.prototype.queryAllNodes = function (predicate) {\n            var matches = [];\n            _queryNodeChildren(this, predicate, matches);\n            return matches;\n        };\n        Object.defineProperty(DebugElement.prototype, \"children\", {\n            get: function () {\n                var children = [];\n                this.childNodes.forEach(function (node) {\n                    if (node instanceof DebugElement) {\n                        children.push(node);\n                    }\n                });\n                return children;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {\n            this.listeners.forEach(function (listener) {\n                if (listener.name == eventName) {\n                    listener.callback(eventObj);\n                }\n            });\n        };\n        return DebugElement;\n    }(DebugNode));\n    /**\n     * @experimental\n     */\n    function asNativeElements(debugEls) {\n        return debugEls.map(function (el) { return el.nativeElement; });\n    }\n    function _queryElementChildren(element, predicate, matches) {\n        element.childNodes.forEach(function (node) {\n            if (node instanceof DebugElement) {\n                if (predicate(node)) {\n                    matches.push(node);\n                }\n                _queryElementChildren(node, predicate, matches);\n            }\n        });\n    }\n    function _queryNodeChildren(parentNode, predicate, matches) {\n        if (parentNode instanceof DebugElement) {\n            parentNode.childNodes.forEach(function (node) {\n                if (predicate(node)) {\n                    matches.push(node);\n                }\n                if (node instanceof DebugElement) {\n                    _queryNodeChildren(node, predicate, matches);\n                }\n            });\n        }\n    }\n    // Need to keep the nodes in a global Map so that multiple angular apps are supported.\n    var _nativeNodeToDebugNode = new Map();\n    /**\n     * @experimental\n     */\n    function getDebugNode(nativeNode) {\n        return _nativeNodeToDebugNode.get(nativeNode);\n    }\n    function indexDebugNode(node) {\n        _nativeNodeToDebugNode.set(node.nativeNode, node);\n    }\n    function removeDebugNodeFromIndex(node) {\n        _nativeNodeToDebugNode.delete(node.nativeNode);\n    }\n\n    function _reflector() {\n        return reflector;\n    }\n    var _CORE_PLATFORM_PROVIDERS = [\n        PlatformRef_, { provide: PlatformRef, useExisting: PlatformRef_ },\n        { provide: Reflector, useFactory: _reflector, deps: [] },\n        { provide: ReflectorReader, useExisting: Reflector }, TestabilityRegistry, Console\n    ];\n    /**\n     * This platform has to be included in any other platform\n     *\n     * @experimental\n     */\n    var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\n    /**\n     * @experimental i18n support is experimental.\n     */\n    var LOCALE_ID = new OpaqueToken('LocaleId');\n    /**\n     * @experimental i18n support is experimental.\n     */\n    var TRANSLATIONS = new OpaqueToken('Translations');\n    /**\n     * @experimental i18n support is experimental.\n     */\n    var TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');\n\n    function _iterableDiffersFactory() {\n        return defaultIterableDiffers;\n    }\n    function _keyValueDiffersFactory() {\n        return defaultKeyValueDiffers;\n    }\n    /**\n     * This module includes the providers of @angular/core that are needed\n     * to bootstrap components via `ApplicationRef`.\n     *\n     * @experimental\n     */\n    var ApplicationModule = (function () {\n        function ApplicationModule() {\n        }\n        ApplicationModule.decorators = [\n            { type: NgModule, args: [{\n                        providers: [\n                            ApplicationRef_,\n                            { provide: ApplicationRef, useExisting: ApplicationRef_ },\n                            ApplicationInitStatus,\n                            Compiler,\n                            APP_ID_RANDOM_PROVIDER,\n                            ViewUtils,\n                            { provide: IterableDiffers, useFactory: _iterableDiffersFactory },\n                            { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },\n                            { provide: LOCALE_ID, useValue: 'en-US' },\n                        ]\n                    },] },\n        ];\n        /** @nocollapse */\n        ApplicationModule.ctorParameters = [];\n        return ApplicationModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var FILL_STYLE_FLAG = 'true'; // TODO (matsko): change to boolean\n    var ANY_STATE = '*';\n    var DEFAULT_STATE = '*';\n    var EMPTY_STATE = 'void';\n\n    var Math$1 = global$1.Math;\n\n    var AnimationGroupPlayer = (function () {\n        function AnimationGroupPlayer(_players) {\n            var _this = this;\n            this._players = _players;\n            this._onDoneFns = [];\n            this._onStartFns = [];\n            this._finished = false;\n            this._started = false;\n            this.parentPlayer = null;\n            var count = 0;\n            var total = this._players.length;\n            if (total == 0) {\n                scheduleMicroTask(function () { return _this._onFinish(); });\n            }\n            else {\n                this._players.forEach(function (player) {\n                    player.parentPlayer = _this;\n                    player.onDone(function () {\n                        if (++count >= total) {\n                            _this._onFinish();\n                        }\n                    });\n                });\n            }\n        }\n        AnimationGroupPlayer.prototype._onFinish = function () {\n            if (!this._finished) {\n                this._finished = true;\n                if (!isPresent(this.parentPlayer)) {\n                    this.destroy();\n                }\n                this._onDoneFns.forEach(function (fn) { return fn(); });\n                this._onDoneFns = [];\n            }\n        };\n        AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };\n        AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n        AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n        AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };\n        AnimationGroupPlayer.prototype.play = function () {\n            if (!isPresent(this.parentPlayer)) {\n                this.init();\n            }\n            if (!this.hasStarted()) {\n                this._onStartFns.forEach(function (fn) { return fn(); });\n                this._onStartFns = [];\n                this._started = true;\n            }\n            this._players.forEach(function (player) { return player.play(); });\n        };\n        AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };\n        AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };\n        AnimationGroupPlayer.prototype.finish = function () {\n            this._onFinish();\n            this._players.forEach(function (player) { return player.finish(); });\n        };\n        AnimationGroupPlayer.prototype.destroy = function () {\n            this._onFinish();\n            this._players.forEach(function (player) { return player.destroy(); });\n        };\n        AnimationGroupPlayer.prototype.reset = function () { this._players.forEach(function (player) { return player.reset(); }); };\n        AnimationGroupPlayer.prototype.setPosition = function (p /** TODO #9100 */) {\n            this._players.forEach(function (player) { player.setPosition(p); });\n        };\n        AnimationGroupPlayer.prototype.getPosition = function () {\n            var min = 0;\n            this._players.forEach(function (player) {\n                var p = player.getPosition();\n                min = Math$1.min(p, min);\n            });\n            return min;\n        };\n        return AnimationGroupPlayer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var AnimationKeyframe = (function () {\n        function AnimationKeyframe(offset, styles) {\n            this.offset = offset;\n            this.styles = styles;\n        }\n        return AnimationKeyframe;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var AnimationOutput = (function () {\n        function AnimationOutput(name, phase, fullPropertyName) {\n            this.name = name;\n            this.phase = phase;\n            this.fullPropertyName = fullPropertyName;\n        }\n        return AnimationOutput;\n    }());\n\n    /**\n     * @experimental Animation support is experimental.\n     */\n    var AnimationPlayer = (function () {\n        function AnimationPlayer() {\n        }\n        Object.defineProperty(AnimationPlayer.prototype, \"parentPlayer\", {\n            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },\n            set: function (player) { throw new Error('NOT IMPLEMENTED: Base Class'); },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationPlayer;\n    }());\n    var NoOpAnimationPlayer = (function () {\n        function NoOpAnimationPlayer() {\n            var _this = this;\n            this._onDoneFns = [];\n            this._onStartFns = [];\n            this._started = false;\n            this.parentPlayer = null;\n            scheduleMicroTask(function () { return _this._onFinish(); });\n        }\n        /** @internal */\n        NoOpAnimationPlayer.prototype._onFinish = function () {\n            this._onDoneFns.forEach(function (fn) { return fn(); });\n            this._onDoneFns = [];\n        };\n        NoOpAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n        NoOpAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n        NoOpAnimationPlayer.prototype.hasStarted = function () { return this._started; };\n        NoOpAnimationPlayer.prototype.init = function () { };\n        NoOpAnimationPlayer.prototype.play = function () {\n            if (!this.hasStarted()) {\n                this._onStartFns.forEach(function (fn) { return fn(); });\n                this._onStartFns = [];\n            }\n            this._started = true;\n        };\n        NoOpAnimationPlayer.prototype.pause = function () { };\n        NoOpAnimationPlayer.prototype.restart = function () { };\n        NoOpAnimationPlayer.prototype.finish = function () { this._onFinish(); };\n        NoOpAnimationPlayer.prototype.destroy = function () { };\n        NoOpAnimationPlayer.prototype.reset = function () { };\n        NoOpAnimationPlayer.prototype.setPosition = function (p /** TODO #9100 */) { };\n        NoOpAnimationPlayer.prototype.getPosition = function () { return 0; };\n        return NoOpAnimationPlayer;\n    }());\n\n    var AnimationSequencePlayer = (function () {\n        function AnimationSequencePlayer(_players) {\n            var _this = this;\n            this._players = _players;\n            this._currentIndex = 0;\n            this._onDoneFns = [];\n            this._onStartFns = [];\n            this._finished = false;\n            this._started = false;\n            this.parentPlayer = null;\n            this._players.forEach(function (player) { player.parentPlayer = _this; });\n            this._onNext(false);\n        }\n        AnimationSequencePlayer.prototype._onNext = function (start) {\n            var _this = this;\n            if (this._finished)\n                return;\n            if (this._players.length == 0) {\n                this._activePlayer = new NoOpAnimationPlayer();\n                scheduleMicroTask(function () { return _this._onFinish(); });\n            }\n            else if (this._currentIndex >= this._players.length) {\n                this._activePlayer = new NoOpAnimationPlayer();\n                this._onFinish();\n            }\n            else {\n                var player = this._players[this._currentIndex++];\n                player.onDone(function () { return _this._onNext(true); });\n                this._activePlayer = player;\n                if (start) {\n                    player.play();\n                }\n            }\n        };\n        AnimationSequencePlayer.prototype._onFinish = function () {\n            if (!this._finished) {\n                this._finished = true;\n                if (!isPresent(this.parentPlayer)) {\n                    this.destroy();\n                }\n                this._onDoneFns.forEach(function (fn) { return fn(); });\n                this._onDoneFns = [];\n            }\n        };\n        AnimationSequencePlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };\n        AnimationSequencePlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n        AnimationSequencePlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n        AnimationSequencePlayer.prototype.hasStarted = function () { return this._started; };\n        AnimationSequencePlayer.prototype.play = function () {\n            if (!isPresent(this.parentPlayer)) {\n                this.init();\n            }\n            if (!this.hasStarted()) {\n                this._onStartFns.forEach(function (fn) { return fn(); });\n                this._onStartFns = [];\n                this._started = true;\n            }\n            this._activePlayer.play();\n        };\n        AnimationSequencePlayer.prototype.pause = function () { this._activePlayer.pause(); };\n        AnimationSequencePlayer.prototype.restart = function () {\n            if (this._players.length > 0) {\n                this.reset();\n                this._players[0].restart();\n            }\n        };\n        AnimationSequencePlayer.prototype.reset = function () { this._players.forEach(function (player) { return player.reset(); }); };\n        AnimationSequencePlayer.prototype.finish = function () {\n            this._onFinish();\n            this._players.forEach(function (player) { return player.finish(); });\n        };\n        AnimationSequencePlayer.prototype.destroy = function () {\n            this._onFinish();\n            this._players.forEach(function (player) { return player.destroy(); });\n        };\n        AnimationSequencePlayer.prototype.setPosition = function (p /** TODO #9100 */) { this._players[0].setPosition(p); };\n        AnimationSequencePlayer.prototype.getPosition = function () { return this._players[0].getPosition(); };\n        return AnimationSequencePlayer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$16 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @experimental Animation support is experimental.\n     */\n    var AUTO_STYLE = '*';\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {@link trigger trigger\n     * animation function} is called.\n     *\n     * @experimental Animation support is experimental.\n     */\n    var AnimationEntryMetadata = (function () {\n        function AnimationEntryMetadata(name, definitions) {\n            this.name = name;\n            this.definitions = definitions;\n        }\n        return AnimationEntryMetadata;\n    }());\n    /**\n     * @experimental Animation support is experimental.\n     */\n    var AnimationStateMetadata = (function () {\n        function AnimationStateMetadata() {\n        }\n        return AnimationStateMetadata;\n    }());\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {@link state state animation\n     * function} is called.\n     *\n     * @experimental Animation support is experimental.\n     */\n    var AnimationStateDeclarationMetadata = (function (_super) {\n        __extends$16(AnimationStateDeclarationMetadata, _super);\n        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {\n            _super.call(this);\n            this.stateNameExpr = stateNameExpr;\n            this.styles = styles;\n        }\n        return AnimationStateDeclarationMetadata;\n    }(AnimationStateMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the\n     * {@link transition transition animation function} is called.\n     *\n     * @experimental Animation support is experimental.\n     */\n    var AnimationStateTransitionMetadata = (function (_super) {\n        __extends$16(AnimationStateTransitionMetadata, _super);\n        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {\n            _super.call(this);\n            this.stateChangeExpr = stateChangeExpr;\n            this.steps = steps;\n        }\n        return AnimationStateTransitionMetadata;\n    }(AnimationStateMetadata));\n    /**\n     * @experimental Animation support is experimental.\n     */\n    var AnimationMetadata = (function () {\n        function AnimationMetadata() {\n        }\n        return AnimationMetadata;\n    }());\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {@link keyframes keyframes\n     * animation function} is called.\n     *\n     * @experimental Animation support is experimental.\n     */\n    var AnimationKeyframesSequenceMetadata = (function (_super) {\n        __extends$16(AnimationKeyframesSequenceMetadata, _super);\n        function AnimationKeyframesSequenceMetadata(steps) {\n            _super.call(this);\n            this.steps = steps;\n        }\n        return AnimationKeyframesSequenceMetadata;\n    }(AnimationMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {@link style style animation\n     * function} is called.\n     *\n     * @experimental Animation support is experimental.\n     */\n    var AnimationStyleMetadata = (function (_super) {\n        __extends$16(AnimationStyleMetadata, _super);\n        function AnimationStyleMetadata(styles, offset) {\n            if (offset === void 0) { offset = null; }\n            _super.call(this);\n            this.styles = styles;\n            this.offset = offset;\n        }\n        return AnimationStyleMetadata;\n    }(AnimationMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {@link animate animate\n     * animation function} is called.\n     *\n     * @experimental Animation support is experimental.\n     */\n    var AnimationAnimateMetadata = (function (_super) {\n        __extends$16(AnimationAnimateMetadata, _super);\n        function AnimationAnimateMetadata(timings, styles) {\n            _super.call(this);\n            this.timings = timings;\n            this.styles = styles;\n        }\n        return AnimationAnimateMetadata;\n    }(AnimationMetadata));\n    /**\n     * @experimental Animation support is experimental.\n     */\n    var AnimationWithStepsMetadata = (function (_super) {\n        __extends$16(AnimationWithStepsMetadata, _super);\n        function AnimationWithStepsMetadata() {\n            _super.call(this);\n        }\n        Object.defineProperty(AnimationWithStepsMetadata.prototype, \"steps\", {\n            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationWithStepsMetadata;\n    }(AnimationMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {@link sequence sequence\n     * animation function} is called.\n     *\n     * @experimental Animation support is experimental.\n     */\n    var AnimationSequenceMetadata = (function (_super) {\n        __extends$16(AnimationSequenceMetadata, _super);\n        function AnimationSequenceMetadata(_steps) {\n            _super.call(this);\n            this._steps = _steps;\n        }\n        Object.defineProperty(AnimationSequenceMetadata.prototype, \"steps\", {\n            get: function () { return this._steps; },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationSequenceMetadata;\n    }(AnimationWithStepsMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {@link group group animation\n     * function} is called.\n     *\n     * @experimental Animation support is experimental.\n     */\n    var AnimationGroupMetadata = (function (_super) {\n        __extends$16(AnimationGroupMetadata, _super);\n        function AnimationGroupMetadata(_steps) {\n            _super.call(this);\n            this._steps = _steps;\n        }\n        Object.defineProperty(AnimationGroupMetadata.prototype, \"steps\", {\n            get: function () { return this._steps; },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationGroupMetadata;\n    }(AnimationWithStepsMetadata));\n    /**\n     * `animate` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {@link ComponentMetadata#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `animate` specifies an animation step that will apply the provided `styles` data for a given\n     * amount of\n     * time based on the provided `timing` expression value. Calls to `animate` are expected to be\n     * used within {@link sequence an animation sequence}, {@link group group}, or {@link transition\n     * transition}.\n     *\n     * ### Usage\n     *\n     * The `animate` function accepts two input parameters: `timing` and `styles`:\n     *\n     * - `timing` is a string based value that can be a combination of a duration with optional\n     * delay and easing values. The format for the expression breaks down to `duration delay easing`\n     * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,\n     * delay=100, easing=ease-out`.\n     * If a numeric value is provided then that will be used as the `duration` value in millisecond\n     * form.\n     * - `styles` is the style input data which can either be a call to {@link style style} or {@link\n     * keyframes keyframes}.\n     * If left empty then the styles from the destination state will be collected and used (this is\n     * useful when\n     * describing an animation step that will complete an animation by {@link\n     * transition#the-final-animate-call animating to the final state}).\n     *\n     * ```typescript\n     * // various functions for specifying timing data\n     * animate(500, style(...))\n     * animate(\"1s\", style(...))\n     * animate(\"100ms 0.5s\", style(...))\n     * animate(\"5s ease\", style(...))\n     * animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\n     *\n     * // either style() of keyframes() can be used\n     * animate(500, style({ background: \"red\" }))\n     * animate(500, keyframes([\n     *   style({ background: \"blue\" })),\n     *   style({ background: \"red\" }))\n     * ])\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * @experimental Animation support is experimental.\n     */\n    function animate(timing, styles) {\n        if (styles === void 0) { styles = null; }\n        var stylesEntry = styles;\n        if (!isPresent(stylesEntry)) {\n            var EMPTY_STYLE = {};\n            stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);\n        }\n        return new AnimationAnimateMetadata(timing, stylesEntry);\n    }\n    /**\n     * `group` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {@link ComponentMetadata#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `group` specifies a list of animation steps that are all run in parallel. Grouped animations\n     * are useful when a series of styles must be animated/closed off\n     * at different statrting/ending times.\n     *\n     * The `group` function can either be used within a {@link sequence sequence} or a {@link transition\n     * transition}\n     * and it will only continue to the next instruction once all of the inner animation steps\n     * have completed.\n     *\n     * ### Usage\n     *\n     * The `steps` data that is passed into the `group` animation function can either consist\n     * of {@link style style} or {@link animate animate} function calls. Each call to `style()` or\n     * `animate()`\n     * within a group will be executed instantly (use {@link keyframes keyframes} or a\n     * {@link animate#usage animate() with a delay value} to offset styles to be applied at a later\n     * time).\n     *\n     * ```typescript\n     * group([\n     *   animate(\"1s\", { background: \"black\" }))\n     *   animate(\"2s\", { color: \"white\" }))\n     * ])\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * @experimental Animation support is experimental.\n     */\n    function group(steps) {\n        return new AnimationGroupMetadata(steps);\n    }\n    /**\n     * `sequence` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {@link ComponentMetadata#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used\n     * by default when an array is passed as animation data into {@link transition transition}.)\n     *\n     * The `sequence` function can either be used within a {@link group group} or a {@link transition\n     * transition}\n     * and it will only continue to the next instruction once each of the inner animation steps\n     * have completed.\n     *\n     * To perform animation styling in parallel with other animation steps then\n     * have a look at the {@link group group} animation function.\n     *\n     * ### Usage\n     *\n     * The `steps` data that is passed into the `sequence` animation function can either consist\n     * of {@link style style} or {@link animate animate} function calls. A call to `style()` will apply\n     * the\n     * provided styling data immediately while a call to `animate()` will apply its styling\n     * data over a given time depending on its timing data.\n     *\n     * ```typescript\n     * sequence([\n     *   style({ opacity: 0 })),\n     *   animate(\"1s\", { opacity: 1 }))\n     * ])\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * @experimental Animation support is experimental.\n     */\n    function sequence(steps) {\n        return new AnimationSequenceMetadata(steps);\n    }\n    /**\n     * `style` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {@link ComponentMetadata#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `style` declares a key/value object containing CSS properties/styles that can then\n     * be used for {@link state animation states}, within an {@link sequence animation sequence}, or as\n     * styling data for both {@link animate animate} and {@link keyframes keyframes}.\n     *\n     * ### Usage\n     *\n     * `style` takes in a key/value string map as data and expects one or more CSS property/value\n     * pairs to be defined.\n     *\n     * ```typescript\n     * // string values are used for css properties\n     * style({ background: \"red\", color: \"blue\" })\n     *\n     * // numerical (pixel) values are also supported\n     * style({ width: 100, height: 0 })\n     * ```\n     *\n     * #### Auto-styles (using `*`)\n     *\n     * When an asterix (`*`) character is used as a value then it will be detected from the element\n     * being animated\n     * and applied as animation data when the animation starts.\n     *\n     * This feature proves useful for a state depending on layout and/or environment factors; in such\n     * cases\n     * the styles are calculated just before the animation starts.\n     *\n     * ```typescript\n     * // the steps below will animate from 0 to the\n     * // actual height of the element\n     * style({ height: 0 }),\n     * animate(\"1s\", style({ height: \"*\" }))\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * @experimental Animation support is experimental.\n     */\n    function style(tokens) {\n        var input;\n        var offset = null;\n        if (isString(tokens)) {\n            input = [tokens];\n        }\n        else {\n            if (isArray(tokens)) {\n                input = tokens;\n            }\n            else {\n                input = [tokens];\n            }\n            input.forEach(function (entry) {\n                var entryOffset = entry['offset'];\n                if (isPresent(entryOffset)) {\n                    offset = offset == null ? NumberWrapper.parseFloat(entryOffset) : offset;\n                }\n            });\n        }\n        return new AnimationStyleMetadata(input, offset);\n    }\n    /**\n     * `state` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {@link ComponentMetadata#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `state` declares an animation state within the given trigger. When a state is\n     * active within a component then its associated styles will persist on\n     * the element that the trigger is attached to (even when the animation ends).\n     *\n     * To animate between states, have a look at the animation {@link transition transition}\n     * DSL function. To register states to an animation trigger please have a look\n     * at the {@link trigger trigger} function.\n     *\n     * #### The `void` state\n     *\n     * The `void` state value is a reserved word that angular uses to determine when the element is not\n     * apart\n     * of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the\n     * associated element\n     * is void).\n     *\n     * #### The `*` (default) state\n     *\n     * The `*` state (when styled) is a fallback state that will be used if\n     * the state that is being animated is not declared within the trigger.\n     *\n     * ### Usage\n     *\n     * `state` will declare an animation state with its associated styles\n     * within the given trigger.\n     *\n     * - `stateNameExpr` can be one or more state names separated by commas.\n     * - `styles` refers to the {@link style styling data} that will be persisted on the element once\n     * the state\n     * has been reached.\n     *\n     * ```typescript\n     * // \"void\" is a reserved name for a state and is used to represent\n     * // the state in which an element is detached from from the application.\n     * state(\"void\", style({ height: 0 }))\n     *\n     * // user-defined states\n     * state(\"closed\", style({ height: 0 }))\n     * state(\"open, visible\", style({ height: \"*\" }))\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * @experimental Animation support is experimental.\n     */\n    function state(stateNameExpr, styles) {\n        return new AnimationStateDeclarationMetadata(stateNameExpr, styles);\n    }\n    /**\n     * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {@link ComponentMetadata#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `keyframes` specifies a collection of {@link style style} entries each optionally characterized\n     * by an `offset` value.\n     *\n     * ### Usage\n     *\n     * The `keyframes` animation function is designed to be used alongside the {@link animate animate}\n     * animation function. Instead of applying animations from where they are\n     * currently to their destination, keyframes can describe how each style entry is applied\n     * and at what point within the animation arc (much like CSS Keyframe Animations do).\n     *\n     * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at\n     * what percentage of the animate time the styles will be applied.\n     *\n     * ```typescript\n     * // the provided offset values describe when each backgroundColor value is applied.\n     * animate(\"5s\", keyframes([\n     *   style({ backgroundColor: \"red\", offset: 0 }),\n     *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n     *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n     *   style({ backgroundColor: \"black\", offset: 1 })\n     * ]))\n     * ```\n     *\n     * Alternatively, if there are no `offset` values used within the style entries then the offsets\n     * will\n     * be calculated automatically.\n     *\n     * ```typescript\n     * animate(\"5s\", keyframes([\n     *   style({ backgroundColor: \"red\" }) // offset = 0\n     *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n     *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n     *   style({ backgroundColor: \"black\" }) // offset = 1\n     * ]))\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * @experimental Animation support is experimental.\n     */\n    function keyframes(steps) {\n        return new AnimationKeyframesSequenceMetadata(steps);\n    }\n    /**\n     * `transition` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {@link ComponentMetadata#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `transition` declares the {@link sequence sequence of animation steps} that will be run when the\n     * provided\n     * `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2`\n     * which consists\n     * of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state).\n     *\n     * Animation transitions are placed within an {@link trigger animation trigger}. For an transition\n     * to animate to\n     * a state value and persist its styles then one or more {@link state animation states} is expected\n     * to be defined.\n     *\n     * ### Usage\n     *\n     * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on\n     * what the\n     * previous state is and what the current state has become. In other words, if a transition is\n     * defined that\n     * matches the old/current state criteria then the associated animation will be triggered.\n     *\n     * ```typescript\n     * // all transition/state changes are defined within an animation trigger\n     * trigger(\"myAnimationTrigger\", [\n     *   // if a state is defined then its styles will be persisted when the\n     *   // animation has fully completed itself\n     *   state(\"on\", style({ background: \"green\" })),\n     *   state(\"off\", style({ background: \"grey\" })),\n     *\n     *   // a transition animation that will be kicked off when the state value\n     *   // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n     *   transition(\"on => off\", animate(500)),\n     *\n     *   // it is also possible to do run the same animation for both directions\n     *   transition(\"on <=> off\", animate(500)),\n     *\n     *   // or to define multiple states pairs separated by commas\n     *   transition(\"on => off, off => void\", animate(500)),\n     *\n     *   // this is a catch-all state change for when an element is inserted into\n     *   // the page and the destination state is unknown\n     *   transition(\"void => *\", [\n     *     style({ opacity: 0 }),\n     *     animate(500)\n     *   ]),\n     *\n     *   // this will capture a state change between any states\n     *   transition(\"* => *\", animate(\"1s 0s\")),\n     * ])\n     * ```\n     *\n     * The template associated with this component will make use of the `myAnimationTrigger`\n     * animation trigger by binding to an element within its template code.\n     *\n     * ```html\n     * <!-- somewhere inside of my-component-tpl.html -->\n     * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\n     * ```\n     *\n     * #### The final `animate` call\n     *\n     * If the final step within the transition steps is a call to `animate()` that **only**\n     * uses a timing value with **no style data** then it will be automatically used as the final\n     * animation\n     * arc for the element to animate itself to the final state. This involves an automatic mix of\n     * adding/removing CSS styles so that the element will be in the exact state it should be for the\n     * applied state to be presented correctly.\n     *\n     * ```\n     * // start off by hiding the element, but make sure that it animates properly to whatever state\n     * // is currently active for \"myAnimationTrigger\"\n     * transition(\"void => *\", [\n     *   style({ opacity: 0 }),\n     *   animate(500)\n     * ])\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * @experimental Animation support is experimental.\n     */\n    function transition(stateChangeExpr, steps) {\n        var animationData = isArray(steps) ? new AnimationSequenceMetadata(steps) :\n            steps;\n        return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);\n    }\n    /**\n     * `trigger` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {@link ComponentMetadata#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `trigger` Creates an animation trigger which will a list of {@link state state} and {@link\n     * transition transition}\n     * entries that will be evaluated when the expression bound to the trigger changes.\n     *\n     * Triggers are registered within the component annotation data under the\n     * {@link ComponentMetadata#animations-anchor animations section}. An animation trigger can\n     * be placed on an element within a template by referencing the name of the\n     * trigger followed by the expression value that the trigger is bound to\n     * (in the form of `[@triggerName]=\"expression\"`.\n     *\n     * ### Usage\n     *\n     * `trigger` will create an animation trigger reference based on the provided `name` value.\n     * The provided `animation` value is expected to be an array consisting of {@link state state} and\n     * {@link transition transition}\n     * declarations.\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-component',\n     *   templateUrl: 'my-component-tpl.html',\n     *   animations: [\n     *     trigger(\"myAnimationTrigger\", [\n     *       state(...),\n     *       state(...),\n     *       transition(...),\n     *       transition(...)\n     *     ])\n     *   ]\n     * })\n     * class MyComponent {\n     *   myStatusExp = \"something\";\n     * }\n     * ```\n     *\n     * The template associated with this component will make use of the `myAnimationTrigger`\n     * animation trigger by binding to an element within its template code.\n     *\n     * ```html\n     * <!-- somewhere inside of my-component-tpl.html -->\n     * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * @experimental Animation support is experimental.\n     */\n    function trigger(name, animation) {\n        return new AnimationEntryMetadata(name, animation);\n    }\n\n    function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {\n        if (nullValue === void 0) { nullValue = null; }\n        var finalStyles = {};\n        StringMapWrapper.forEach(newStyles, function (value, prop) {\n            finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();\n        });\n        StringMapWrapper.forEach(previousStyles, function (value, prop) {\n            if (!isPresent(finalStyles[prop])) {\n                finalStyles[prop] = nullValue;\n            }\n        });\n        return finalStyles;\n    }\n    function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {\n        var limit = keyframes.length - 1;\n        var firstKeyframe = keyframes[0];\n        // phase 1: copy all the styles from the first keyframe into the lookup map\n        var flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);\n        var extraFirstKeyframeStyles = {};\n        var hasExtraFirstStyles = false;\n        StringMapWrapper.forEach(collectedStyles, function (value, prop) {\n            // if the style is already defined in the first keyframe then\n            // we do not replace it.\n            if (!flatenedFirstKeyframeStyles[prop]) {\n                flatenedFirstKeyframeStyles[prop] = value;\n                extraFirstKeyframeStyles[prop] = value;\n                hasExtraFirstStyles = true;\n            }\n        });\n        var keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);\n        // phase 2: normalize the final keyframe\n        var finalKeyframe = keyframes[limit];\n        ListWrapper.insert(finalKeyframe.styles.styles, 0, finalStateStyles);\n        var flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);\n        var extraFinalKeyframeStyles = {};\n        var hasExtraFinalStyles = false;\n        StringMapWrapper.forEach(keyframeCollectedStyles, function (value, prop) {\n            if (!isPresent(flatenedFinalKeyframeStyles[prop])) {\n                extraFinalKeyframeStyles[prop] = AUTO_STYLE;\n                hasExtraFinalStyles = true;\n            }\n        });\n        if (hasExtraFinalStyles) {\n            finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);\n        }\n        StringMapWrapper.forEach(flatenedFinalKeyframeStyles, function (value, prop) {\n            if (!isPresent(flatenedFirstKeyframeStyles[prop])) {\n                extraFirstKeyframeStyles[prop] = AUTO_STYLE;\n                hasExtraFirstStyles = true;\n            }\n        });\n        if (hasExtraFirstStyles) {\n            firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);\n        }\n        return keyframes;\n    }\n    function clearStyles(styles) {\n        var finalStyles = {};\n        StringMapWrapper.keys(styles).forEach(function (key) { finalStyles[key] = null; });\n        return finalStyles;\n    }\n    function collectAndResolveStyles(collection, styles) {\n        return styles.map(function (entry) {\n            var stylesObj = {};\n            StringMapWrapper.forEach(entry, function (value, prop) {\n                if (value == FILL_STYLE_FLAG) {\n                    value = collection[prop];\n                    if (!isPresent(value)) {\n                        value = AUTO_STYLE;\n                    }\n                }\n                collection[prop] = value;\n                stylesObj[prop] = value;\n            });\n            return stylesObj;\n        });\n    }\n    function renderStyles(element, renderer, styles) {\n        StringMapWrapper.forEach(styles, function (value, prop) { renderer.setElementStyle(element, prop, value); });\n    }\n    function flattenStyles(styles) {\n        var finalStyles = {};\n        styles.forEach(function (entry) {\n            StringMapWrapper.forEach(entry, function (value, prop) { finalStyles[prop] = value; });\n        });\n        return finalStyles;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var AnimationStyles = (function () {\n        function AnimationStyles(styles) {\n            this.styles = styles;\n        }\n        return AnimationStyles;\n    }());\n\n    var DebugDomRootRenderer = (function () {\n        function DebugDomRootRenderer(_delegate) {\n            this._delegate = _delegate;\n        }\n        DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {\n            return new DebugDomRenderer(this._delegate.renderComponent(componentProto));\n        };\n        return DebugDomRootRenderer;\n    }());\n    var DebugDomRenderer = (function () {\n        function DebugDomRenderer(_delegate) {\n            this._delegate = _delegate;\n        }\n        DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {\n            var nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);\n            var debugEl = new DebugElement(nativeEl, null, debugInfo);\n            indexDebugNode(debugEl);\n            return nativeEl;\n        };\n        DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) {\n            var nativeEl = this._delegate.createElement(parentElement, name, debugInfo);\n            var debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);\n            debugEl.name = name;\n            indexDebugNode(debugEl);\n            return nativeEl;\n        };\n        DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement); };\n        DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {\n            var comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);\n            var debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);\n            indexDebugNode(debugEl);\n            return comment;\n        };\n        DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) {\n            var text = this._delegate.createText(parentElement, value, debugInfo);\n            var debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);\n            indexDebugNode(debugEl);\n            return text;\n        };\n        DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {\n            var debugParent = getDebugNode(parentElement);\n            if (isPresent(debugParent) && debugParent instanceof DebugElement) {\n                var debugElement_1 = debugParent;\n                nodes.forEach(function (node) { debugElement_1.addChild(getDebugNode(node)); });\n            }\n            this._delegate.projectNodes(parentElement, nodes);\n        };\n        DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {\n            var debugNode = getDebugNode(node);\n            if (isPresent(debugNode)) {\n                var debugParent = debugNode.parent;\n                if (viewRootNodes.length > 0 && isPresent(debugParent)) {\n                    var debugViewRootNodes = [];\n                    viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes.push(getDebugNode(rootNode)); });\n                    debugParent.insertChildrenAfter(debugNode, debugViewRootNodes);\n                }\n            }\n            this._delegate.attachViewAfter(node, viewRootNodes);\n        };\n        DebugDomRenderer.prototype.detachView = function (viewRootNodes) {\n            viewRootNodes.forEach(function (node) {\n                var debugNode = getDebugNode(node);\n                if (isPresent(debugNode) && isPresent(debugNode.parent)) {\n                    debugNode.parent.removeChild(debugNode);\n                }\n            });\n            this._delegate.detachView(viewRootNodes);\n        };\n        DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {\n            viewAllNodes.forEach(function (node) { removeDebugNodeFromIndex(getDebugNode(node)); });\n            this._delegate.destroyView(hostElement, viewAllNodes);\n        };\n        DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {\n            var debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl)) {\n                debugEl.listeners.push(new EventListener(name, callback));\n            }\n            return this._delegate.listen(renderElement, name, callback);\n        };\n        DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {\n            return this._delegate.listenGlobal(target, name, callback);\n        };\n        DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {\n            var debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                debugEl.properties[propertyName] = propertyValue;\n            }\n            this._delegate.setElementProperty(renderElement, propertyName, propertyValue);\n        };\n        DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {\n            var debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                debugEl.attributes[attributeName] = attributeValue;\n            }\n            this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);\n        };\n        DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {\n            this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);\n        };\n        DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {\n            var debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                debugEl.classes[className] = isAdd;\n            }\n            this._delegate.setElementClass(renderElement, className, isAdd);\n        };\n        DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {\n            var debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                debugEl.styles[styleName] = styleValue;\n            }\n            this._delegate.setElementStyle(renderElement, styleName, styleValue);\n        };\n        DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {\n            this._delegate.invokeElementMethod(renderElement, methodName, args);\n        };\n        DebugDomRenderer.prototype.setText = function (renderNode, text) { this._delegate.setText(renderNode, text); };\n        DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing) {\n            return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing);\n        };\n        return DebugDomRenderer;\n    }());\n\n    var StaticNodeDebugInfo = (function () {\n        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {\n            this.providerTokens = providerTokens;\n            this.componentToken = componentToken;\n            this.refTokens = refTokens;\n        }\n        return StaticNodeDebugInfo;\n    }());\n    var DebugContext = (function () {\n        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {\n            this._view = _view;\n            this._nodeIndex = _nodeIndex;\n            this._tplRow = _tplRow;\n            this._tplCol = _tplCol;\n        }\n        Object.defineProperty(DebugContext.prototype, \"_staticNodeInfo\", {\n            get: function () {\n                return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"context\", {\n            get: function () { return this._view.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"component\", {\n            get: function () {\n                var staticNodeInfo = this._staticNodeInfo;\n                if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {\n                    return this.injector.get(staticNodeInfo.componentToken);\n                }\n                return null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"componentRenderElement\", {\n            get: function () {\n                var componentView = this._view;\n                while (isPresent(componentView.declarationAppElement) &&\n                    componentView.type !== ViewType.COMPONENT) {\n                    componentView = componentView.declarationAppElement.parentView;\n                }\n                return isPresent(componentView.declarationAppElement) ?\n                    componentView.declarationAppElement.nativeElement :\n                    null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"injector\", {\n            get: function () { return this._view.injector(this._nodeIndex); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"renderNode\", {\n            get: function () {\n                if (isPresent(this._nodeIndex) && this._view.allNodes) {\n                    return this._view.allNodes[this._nodeIndex];\n                }\n                else {\n                    return null;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"providerTokens\", {\n            get: function () {\n                var staticNodeInfo = this._staticNodeInfo;\n                return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"source\", {\n            get: function () {\n                return this._view.componentType.templateUrl + \":\" + this._tplRow + \":\" + this._tplCol;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"references\", {\n            get: function () {\n                var _this = this;\n                var varValues = {};\n                var staticNodeInfo = this._staticNodeInfo;\n                if (isPresent(staticNodeInfo)) {\n                    var refs = staticNodeInfo.refTokens;\n                    StringMapWrapper.forEach(refs, function (refToken, refName) {\n                        var varValue;\n                        if (isBlank(refToken)) {\n                            varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;\n                        }\n                        else {\n                            varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);\n                        }\n                        varValues[refName] = varValue;\n                    });\n                }\n                return varValues;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return DebugContext;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An instance of this class is returned as an event parameter when an animation\n     * callback is captured for an animation either during the start or done phase.\n     *\n     * ```typescript\n     * @Component({\n     *   host: {\n     *     '[@myAnimationTrigger]': 'someExpression',\n     *     '(@myAnimationTrigger.start)': 'captureStartEvent($event)',\n     *     '(@myAnimationTrigger.done)': 'captureDoneEvent($event)',\n     *   },\n     *   animations: [\n     *     trigger(\"myAnimationTrigger\", [\n     *        // ...\n     *     ])\n     *   ]\n     * })\n     * class MyComponent {\n     *   someExpression: any = false;\n     *   captureStartEvent(event: AnimationTransitionEvent) {\n     *     // the toState, fromState and totalTime data is accessible from the event variable\n     *   }\n     *\n     *   captureDoneEvent(event: AnimationTransitionEvent) {\n     *     // the toState, fromState and totalTime data is accessible from the event variable\n     *   }\n     * }\n     * ```\n     *\n     * @experimental Animation support is experimental.\n     */\n    var AnimationTransitionEvent = (function () {\n        function AnimationTransitionEvent(_a) {\n            var fromState = _a.fromState, toState = _a.toState, totalTime = _a.totalTime;\n            this.fromState = fromState;\n            this.toState = toState;\n            this.totalTime = totalTime;\n        }\n        return AnimationTransitionEvent;\n    }());\n\n    var ViewAnimationMap = (function () {\n        function ViewAnimationMap() {\n            this._map = new Map$1();\n            this._allPlayers = [];\n        }\n        Object.defineProperty(ViewAnimationMap.prototype, \"length\", {\n            get: function () { return this.getAllPlayers().length; },\n            enumerable: true,\n            configurable: true\n        });\n        ViewAnimationMap.prototype.find = function (element, animationName) {\n            var playersByAnimation = this._map.get(element);\n            if (isPresent(playersByAnimation)) {\n                return playersByAnimation[animationName];\n            }\n        };\n        ViewAnimationMap.prototype.findAllPlayersByElement = function (element) {\n            var el = this._map.get(element);\n            return el ? StringMapWrapper.values(el) : [];\n        };\n        ViewAnimationMap.prototype.set = function (element, animationName, player) {\n            var playersByAnimation = this._map.get(element);\n            if (!isPresent(playersByAnimation)) {\n                playersByAnimation = {};\n            }\n            var existingEntry = playersByAnimation[animationName];\n            if (isPresent(existingEntry)) {\n                this.remove(element, animationName);\n            }\n            playersByAnimation[animationName] = player;\n            this._allPlayers.push(player);\n            this._map.set(element, playersByAnimation);\n        };\n        ViewAnimationMap.prototype.getAllPlayers = function () { return this._allPlayers; };\n        ViewAnimationMap.prototype.remove = function (element, animationName) {\n            var playersByAnimation = this._map.get(element);\n            if (isPresent(playersByAnimation)) {\n                var player = playersByAnimation[animationName];\n                delete playersByAnimation[animationName];\n                var index = this._allPlayers.indexOf(player);\n                ListWrapper.removeAt(this._allPlayers, index);\n                if (StringMapWrapper.isEmpty(playersByAnimation)) {\n                    this._map.delete(element);\n                }\n            }\n        };\n        return ViewAnimationMap;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$18 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var _UNDEFINED$1 = new Object();\n    var ElementInjector = (function (_super) {\n        __extends$18(ElementInjector, _super);\n        function ElementInjector(_view, _nodeIndex) {\n            _super.call(this);\n            this._view = _view;\n            this._nodeIndex = _nodeIndex;\n        }\n        ElementInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            var result = _UNDEFINED$1;\n            if (result === _UNDEFINED$1) {\n                result = this._view.injectorGet(token, this._nodeIndex, _UNDEFINED$1);\n            }\n            if (result === _UNDEFINED$1) {\n                result = this._view.parentInjector.get(token, notFoundValue);\n            }\n            return result;\n        };\n        return ElementInjector;\n    }(Injector));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$17 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var _scope_check = wtfCreateScope(\"AppView#check(ascii id)\");\n    /**\n     * Cost of making objects: http://jsperf.com/instantiate-size-of-object\n     *\n     */\n    var AppView = (function () {\n        function AppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode) {\n            this.clazz = clazz;\n            this.componentType = componentType;\n            this.type = type;\n            this.viewUtils = viewUtils;\n            this.parentInjector = parentInjector;\n            this.declarationAppElement = declarationAppElement;\n            this.cdMode = cdMode;\n            this.contentChildren = [];\n            this.viewChildren = [];\n            this.viewContainerElement = null;\n            this.numberOfChecks = 0;\n            this.animationPlayers = new ViewAnimationMap();\n            this._animationListeners = new Map();\n            this.ref = new ViewRef_(this);\n            if (type === ViewType.COMPONENT || type === ViewType.HOST) {\n                this.renderer = viewUtils.renderComponent(componentType);\n            }\n            else {\n                this.renderer = declarationAppElement.parentView.renderer;\n            }\n        }\n        Object.defineProperty(AppView.prototype, \"destroyed\", {\n            get: function () { return this.cdMode === ChangeDetectorStatus.Destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        AppView.prototype.cancelActiveAnimation = function (element, animationName, removeAllAnimations) {\n            if (removeAllAnimations === void 0) { removeAllAnimations = false; }\n            if (removeAllAnimations) {\n                this.animationPlayers.findAllPlayersByElement(element).forEach(function (player) { return player.destroy(); });\n            }\n            else {\n                var player = this.animationPlayers.find(element, animationName);\n                if (isPresent(player)) {\n                    player.destroy();\n                }\n            }\n        };\n        AppView.prototype.queueAnimation = function (element, animationName, player, totalTime, fromState, toState) {\n            var _this = this;\n            var event = new AnimationTransitionEvent({ 'fromState': fromState, 'toState': toState, 'totalTime': totalTime });\n            this.animationPlayers.set(element, animationName, player);\n            player.onDone(function () {\n                // TODO: make this into a datastructure for done|start\n                _this.triggerAnimationOutput(element, animationName, 'done', event);\n                _this.animationPlayers.remove(element, animationName);\n            });\n            player.onStart(function () { _this.triggerAnimationOutput(element, animationName, 'start', event); });\n        };\n        AppView.prototype.triggerQueuedAnimations = function () {\n            this.animationPlayers.getAllPlayers().forEach(function (player) {\n                if (!player.hasStarted()) {\n                    player.play();\n                }\n            });\n        };\n        AppView.prototype.triggerAnimationOutput = function (element, animationName, phase, event) {\n            var listeners = this._animationListeners.get(element);\n            if (isPresent(listeners) && listeners.length) {\n                for (var i = 0; i < listeners.length; i++) {\n                    var listener = listeners[i];\n                    // we check for both the name in addition to the phase in the event\n                    // that there may be more than one @trigger on the same element\n                    if (listener.output.name == animationName && listener.output.phase == phase) {\n                        listener.handler(event);\n                        break;\n                    }\n                }\n            }\n        };\n        AppView.prototype.registerAnimationOutput = function (element, outputEvent, eventHandler) {\n            var entry = new _AnimationOutputWithHandler(outputEvent, eventHandler);\n            var animations = this._animationListeners.get(element);\n            if (!isPresent(animations)) {\n                this._animationListeners.set(element, animations = []);\n            }\n            animations.push(entry);\n        };\n        AppView.prototype.create = function (context, givenProjectableNodes, rootSelectorOrNode) {\n            this.context = context;\n            var projectableNodes;\n            switch (this.type) {\n                case ViewType.COMPONENT:\n                    projectableNodes = ensureSlotCount(givenProjectableNodes, this.componentType.slotCount);\n                    break;\n                case ViewType.EMBEDDED:\n                    projectableNodes = this.declarationAppElement.parentView.projectableNodes;\n                    break;\n                case ViewType.HOST:\n                    // Note: Don't ensure the slot count for the projectableNodes as we store\n                    // them only for the contained component view (which will later check the slot count...)\n                    projectableNodes = givenProjectableNodes;\n                    break;\n            }\n            this._hasExternalHostElement = isPresent(rootSelectorOrNode);\n            this.projectableNodes = projectableNodes;\n            return this.createInternal(rootSelectorOrNode);\n        };\n        /**\n         * Overwritten by implementations.\n         * Returns the AppElement for the host element for ViewType.HOST.\n         */\n        AppView.prototype.createInternal = function (rootSelectorOrNode) { return null; };\n        AppView.prototype.init = function (rootNodesOrAppElements, allNodes, disposables, subscriptions) {\n            this.rootNodesOrAppElements = rootNodesOrAppElements;\n            this.allNodes = allNodes;\n            this.disposables = disposables;\n            this.subscriptions = subscriptions;\n            if (this.type === ViewType.COMPONENT) {\n                // Note: the render nodes have been attached to their host element\n                // in the ViewFactory already.\n                this.declarationAppElement.parentView.viewChildren.push(this);\n                this.dirtyParentQueriesInternal();\n            }\n        };\n        AppView.prototype.selectOrCreateHostElement = function (elementName, rootSelectorOrNode, debugInfo) {\n            var hostElement;\n            if (isPresent(rootSelectorOrNode)) {\n                hostElement = this.renderer.selectRootElement(rootSelectorOrNode, debugInfo);\n            }\n            else {\n                hostElement = this.renderer.createElement(null, elementName, debugInfo);\n            }\n            return hostElement;\n        };\n        AppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {\n            return this.injectorGetInternal(token, nodeIndex, notFoundResult);\n        };\n        /**\n         * Overwritten by implementations\n         */\n        AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {\n            return notFoundResult;\n        };\n        AppView.prototype.injector = function (nodeIndex) {\n            if (isPresent(nodeIndex)) {\n                return new ElementInjector(this, nodeIndex);\n            }\n            else {\n                return this.parentInjector;\n            }\n        };\n        AppView.prototype.destroy = function () {\n            if (this._hasExternalHostElement) {\n                this.renderer.detachView(this.flatRootNodes);\n            }\n            else if (isPresent(this.viewContainerElement)) {\n                this.viewContainerElement.detachView(this.viewContainerElement.nestedViews.indexOf(this));\n            }\n            this._destroyRecurse();\n        };\n        AppView.prototype._destroyRecurse = function () {\n            if (this.cdMode === ChangeDetectorStatus.Destroyed) {\n                return;\n            }\n            var children = this.contentChildren;\n            for (var i = 0; i < children.length; i++) {\n                children[i]._destroyRecurse();\n            }\n            children = this.viewChildren;\n            for (var i = 0; i < children.length; i++) {\n                children[i]._destroyRecurse();\n            }\n            this.destroyLocal();\n            this.cdMode = ChangeDetectorStatus.Destroyed;\n        };\n        AppView.prototype.destroyLocal = function () {\n            var _this = this;\n            var hostElement = this.type === ViewType.COMPONENT ? this.declarationAppElement.nativeElement : null;\n            for (var i = 0; i < this.disposables.length; i++) {\n                this.disposables[i]();\n            }\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                this.subscriptions[i].unsubscribe();\n            }\n            this.destroyInternal();\n            this.dirtyParentQueriesInternal();\n            if (this.animationPlayers.length == 0) {\n                this.renderer.destroyView(hostElement, this.allNodes);\n            }\n            else {\n                var player = new AnimationGroupPlayer(this.animationPlayers.getAllPlayers());\n                player.onDone(function () { _this.renderer.destroyView(hostElement, _this.allNodes); });\n            }\n        };\n        /**\n         * Overwritten by implementations\n         */\n        AppView.prototype.destroyInternal = function () { };\n        /**\n         * Overwritten by implementations\n         */\n        AppView.prototype.detachInternal = function () { };\n        AppView.prototype.detach = function () {\n            var _this = this;\n            this.detachInternal();\n            if (this.animationPlayers.length == 0) {\n                this.renderer.detachView(this.flatRootNodes);\n            }\n            else {\n                var player = new AnimationGroupPlayer(this.animationPlayers.getAllPlayers());\n                player.onDone(function () { _this.renderer.detachView(_this.flatRootNodes); });\n            }\n        };\n        Object.defineProperty(AppView.prototype, \"changeDetectorRef\", {\n            get: function () { return this.ref; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AppView.prototype, \"parent\", {\n            get: function () {\n                return isPresent(this.declarationAppElement) ? this.declarationAppElement.parentView : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AppView.prototype, \"flatRootNodes\", {\n            get: function () { return flattenNestedViewRenderNodes(this.rootNodesOrAppElements); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AppView.prototype, \"lastRootNode\", {\n            get: function () {\n                var lastNode = this.rootNodesOrAppElements.length > 0 ?\n                    this.rootNodesOrAppElements[this.rootNodesOrAppElements.length - 1] :\n                    null;\n                return _findLastRenderNode(lastNode);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Overwritten by implementations\n         */\n        AppView.prototype.dirtyParentQueriesInternal = function () { };\n        AppView.prototype.detectChanges = function (throwOnChange) {\n            var s = _scope_check(this.clazz);\n            if (this.cdMode === ChangeDetectorStatus.Checked ||\n                this.cdMode === ChangeDetectorStatus.Errored)\n                return;\n            if (this.cdMode === ChangeDetectorStatus.Destroyed) {\n                this.throwDestroyedError('detectChanges');\n            }\n            this.detectChangesInternal(throwOnChange);\n            if (this.cdMode === ChangeDetectorStatus.CheckOnce)\n                this.cdMode = ChangeDetectorStatus.Checked;\n            this.numberOfChecks++;\n            wtfLeave(s);\n        };\n        /**\n         * Overwritten by implementations\n         */\n        AppView.prototype.detectChangesInternal = function (throwOnChange) {\n            this.detectContentChildrenChanges(throwOnChange);\n            this.detectViewChildrenChanges(throwOnChange);\n        };\n        AppView.prototype.detectContentChildrenChanges = function (throwOnChange) {\n            for (var i = 0; i < this.contentChildren.length; ++i) {\n                var child = this.contentChildren[i];\n                if (child.cdMode === ChangeDetectorStatus.Detached)\n                    continue;\n                child.detectChanges(throwOnChange);\n            }\n        };\n        AppView.prototype.detectViewChildrenChanges = function (throwOnChange) {\n            for (var i = 0; i < this.viewChildren.length; ++i) {\n                var child = this.viewChildren[i];\n                if (child.cdMode === ChangeDetectorStatus.Detached)\n                    continue;\n                child.detectChanges(throwOnChange);\n            }\n        };\n        AppView.prototype.markContentChildAsMoved = function (renderAppElement) { this.dirtyParentQueriesInternal(); };\n        AppView.prototype.addToContentChildren = function (renderAppElement) {\n            renderAppElement.parentView.contentChildren.push(this);\n            this.viewContainerElement = renderAppElement;\n            this.dirtyParentQueriesInternal();\n        };\n        AppView.prototype.removeFromContentChildren = function (renderAppElement) {\n            ListWrapper.remove(renderAppElement.parentView.contentChildren, this);\n            this.dirtyParentQueriesInternal();\n            this.viewContainerElement = null;\n        };\n        AppView.prototype.markAsCheckOnce = function () { this.cdMode = ChangeDetectorStatus.CheckOnce; };\n        AppView.prototype.markPathToRootAsCheckOnce = function () {\n            var c = this;\n            while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {\n                if (c.cdMode === ChangeDetectorStatus.Checked) {\n                    c.cdMode = ChangeDetectorStatus.CheckOnce;\n                }\n                var parentEl = c.type === ViewType.COMPONENT ? c.declarationAppElement : c.viewContainerElement;\n                c = isPresent(parentEl) ? parentEl.parentView : null;\n            }\n        };\n        AppView.prototype.eventHandler = function (cb) { return cb; };\n        AppView.prototype.throwDestroyedError = function (details) { throw new ViewDestroyedError(details); };\n        return AppView;\n    }());\n    var DebugAppView = (function (_super) {\n        __extends$17(DebugAppView, _super);\n        function DebugAppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode, staticNodeDebugInfos) {\n            _super.call(this, clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode);\n            this.staticNodeDebugInfos = staticNodeDebugInfos;\n            this._currentDebugContext = null;\n        }\n        DebugAppView.prototype.create = function (context, givenProjectableNodes, rootSelectorOrNode) {\n            this._resetDebug();\n            try {\n                return _super.prototype.create.call(this, context, givenProjectableNodes, rootSelectorOrNode);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {\n            this._resetDebug();\n            try {\n                return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        DebugAppView.prototype.detach = function () {\n            this._resetDebug();\n            try {\n                _super.prototype.detach.call(this);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        DebugAppView.prototype.destroyLocal = function () {\n            this._resetDebug();\n            try {\n                _super.prototype.destroyLocal.call(this);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        DebugAppView.prototype.detectChanges = function (throwOnChange) {\n            this._resetDebug();\n            try {\n                _super.prototype.detectChanges.call(this, throwOnChange);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        DebugAppView.prototype._resetDebug = function () { this._currentDebugContext = null; };\n        DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {\n            return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);\n        };\n        DebugAppView.prototype._rethrowWithContext = function (e) {\n            if (!(e instanceof ViewWrappedError)) {\n                if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {\n                    this.cdMode = ChangeDetectorStatus.Errored;\n                }\n                if (isPresent(this._currentDebugContext)) {\n                    throw new ViewWrappedError(e, this._currentDebugContext);\n                }\n            }\n        };\n        DebugAppView.prototype.eventHandler = function (cb) {\n            var _this = this;\n            var superHandler = _super.prototype.eventHandler.call(this, cb);\n            return function (event) {\n                _this._resetDebug();\n                try {\n                    return superHandler(event);\n                }\n                catch (e) {\n                    _this._rethrowWithContext(e);\n                    throw e;\n                }\n            };\n        };\n        return DebugAppView;\n    }(AppView));\n    function _findLastRenderNode(node) {\n        var lastNode;\n        if (node instanceof AppElement) {\n            var appEl = node;\n            lastNode = appEl.nativeElement;\n            if (isPresent(appEl.nestedViews)) {\n                // Note: Views might have no root nodes at all!\n                for (var i = appEl.nestedViews.length - 1; i >= 0; i--) {\n                    var nestedView = appEl.nestedViews[i];\n                    if (nestedView.rootNodesOrAppElements.length > 0) {\n                        lastNode = _findLastRenderNode(nestedView.rootNodesOrAppElements[nestedView.rootNodesOrAppElements.length - 1]);\n                    }\n                }\n            }\n        }\n        else {\n            lastNode = node;\n        }\n        return lastNode;\n    }\n    var _AnimationOutputWithHandler = (function () {\n        function _AnimationOutputWithHandler(output, handler) {\n            this.output = output;\n            this.handler = handler;\n        }\n        return _AnimationOutputWithHandler;\n    }());\n\n    var __core_private__ = {\n        isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,\n        ChangeDetectorStatus: ChangeDetectorStatus,\n        CHANGE_DETECTION_STRATEGY_VALUES: CHANGE_DETECTION_STRATEGY_VALUES,\n        constructDependencies: constructDependencies,\n        LifecycleHooks: LifecycleHooks,\n        LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,\n        ReflectorReader: ReflectorReader,\n        CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,\n        AppElement: AppElement,\n        AppView: AppView,\n        DebugAppView: DebugAppView,\n        NgModuleInjector: NgModuleInjector,\n        ViewType: ViewType,\n        MAX_INTERPOLATION_VALUES: MAX_INTERPOLATION_VALUES,\n        checkBinding: checkBinding,\n        flattenNestedViewRenderNodes: flattenNestedViewRenderNodes,\n        interpolate: interpolate,\n        ViewUtils: ViewUtils,\n        VIEW_ENCAPSULATION_VALUES: VIEW_ENCAPSULATION_VALUES,\n        ViewMetadata: ViewMetadata,\n        DebugContext: DebugContext,\n        StaticNodeDebugInfo: StaticNodeDebugInfo,\n        devModeEqual: devModeEqual,\n        UNINITIALIZED: UNINITIALIZED,\n        ValueUnwrapper: ValueUnwrapper,\n        RenderDebugInfo: RenderDebugInfo,\n        TemplateRef_: TemplateRef_,\n        ReflectionCapabilities: ReflectionCapabilities,\n        makeDecorator: makeDecorator,\n        DebugDomRootRenderer: DebugDomRootRenderer,\n        EMPTY_ARRAY: EMPTY_ARRAY,\n        EMPTY_MAP: EMPTY_MAP,\n        pureProxy1: pureProxy1,\n        pureProxy2: pureProxy2,\n        pureProxy3: pureProxy3,\n        pureProxy4: pureProxy4,\n        pureProxy5: pureProxy5,\n        pureProxy6: pureProxy6,\n        pureProxy7: pureProxy7,\n        pureProxy8: pureProxy8,\n        pureProxy9: pureProxy9,\n        pureProxy10: pureProxy10,\n        castByValue: castByValue,\n        Console: Console,\n        reflector: reflector,\n        Reflector: Reflector,\n        NoOpAnimationPlayer: NoOpAnimationPlayer,\n        AnimationPlayer: AnimationPlayer,\n        AnimationSequencePlayer: AnimationSequencePlayer,\n        AnimationGroupPlayer: AnimationGroupPlayer,\n        AnimationKeyframe: AnimationKeyframe,\n        prepareFinalAnimationStyles: prepareFinalAnimationStyles,\n        balanceAnimationKeyframes: balanceAnimationKeyframes,\n        flattenStyles: flattenStyles,\n        clearStyles: clearStyles,\n        renderStyles: renderStyles,\n        collectAndResolveStyles: collectAndResolveStyles,\n        AnimationStyles: AnimationStyles,\n        AnimationOutput: AnimationOutput,\n        ANY_STATE: ANY_STATE,\n        DEFAULT_STATE: DEFAULT_STATE,\n        EMPTY_STATE: EMPTY_STATE,\n        FILL_STYLE_FLAG: FILL_STYLE_FLAG,\n        ComponentStillLoadingError: ComponentStillLoadingError\n    };\n\n    exports.createPlatform = createPlatform;\n    exports.assertPlatform = assertPlatform;\n    exports.destroyPlatform = destroyPlatform;\n    exports.getPlatform = getPlatform;\n    exports.PlatformRef = PlatformRef;\n    exports.ApplicationRef = ApplicationRef;\n    exports.enableProdMode = enableProdMode;\n    exports.isDevMode = isDevMode;\n    exports.createPlatformFactory = createPlatformFactory;\n    exports.APP_ID = APP_ID;\n    exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;\n    exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;\n    exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;\n    exports.APP_INITIALIZER = APP_INITIALIZER;\n    exports.ApplicationInitStatus = ApplicationInitStatus;\n    exports.DebugElement = DebugElement;\n    exports.DebugNode = DebugNode;\n    exports.asNativeElements = asNativeElements;\n    exports.getDebugNode = getDebugNode;\n    exports.Testability = Testability;\n    exports.TestabilityRegistry = TestabilityRegistry;\n    exports.setTestabilityGetter = setTestabilityGetter;\n    exports.TRANSLATIONS = TRANSLATIONS;\n    exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;\n    exports.LOCALE_ID = LOCALE_ID;\n    exports.ApplicationModule = ApplicationModule;\n    exports.wtfCreateScope = wtfCreateScope;\n    exports.wtfLeave = wtfLeave;\n    exports.wtfStartTimeRange = wtfStartTimeRange;\n    exports.wtfEndTimeRange = wtfEndTimeRange;\n    exports.Type = Type;\n    exports.EventEmitter = EventEmitter;\n    exports.ErrorHandler = ErrorHandler;\n    exports.AnimationTransitionEvent = AnimationTransitionEvent;\n    exports.AnimationPlayer = AnimationPlayer;\n    exports.Sanitizer = Sanitizer;\n    exports.Component = Component;\n    exports.Directive = Directive;\n    exports.Attribute = Attribute;\n    exports.ContentChildren = ContentChildren;\n    exports.ContentChild = ContentChild;\n    exports.ViewChildren = ViewChildren;\n    exports.ViewChild = ViewChild;\n    exports.Pipe = Pipe;\n    exports.Input = Input;\n    exports.Output = Output;\n    exports.HostBinding = HostBinding;\n    exports.HostListener = HostListener;\n    exports.NgModule = NgModule;\n    exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;\n    exports.AttributeMetadata = AttributeMetadata;\n    exports.ContentChildMetadata = ContentChildMetadata;\n    exports.ContentChildrenMetadata = ContentChildrenMetadata;\n    exports.QueryMetadata = QueryMetadata;\n    exports.ViewChildMetadata = ViewChildMetadata;\n    exports.ViewChildrenMetadata = ViewChildrenMetadata;\n    exports.ViewQueryMetadata = ViewQueryMetadata;\n    exports.ComponentMetadata = ComponentMetadata;\n    exports.DirectiveMetadata = DirectiveMetadata;\n    exports.HostBindingMetadata = HostBindingMetadata;\n    exports.HostListenerMetadata = HostListenerMetadata;\n    exports.InputMetadata = InputMetadata;\n    exports.OutputMetadata = OutputMetadata;\n    exports.PipeMetadata = PipeMetadata;\n    exports.AfterContentChecked = AfterContentChecked;\n    exports.AfterContentInit = AfterContentInit;\n    exports.AfterViewChecked = AfterViewChecked;\n    exports.AfterViewInit = AfterViewInit;\n    exports.DoCheck = DoCheck;\n    exports.OnChanges = OnChanges;\n    exports.OnDestroy = OnDestroy;\n    exports.OnInit = OnInit;\n    exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;\n    exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;\n    exports.NgModuleMetadata = NgModuleMetadata;\n    exports.Class = Class;\n    exports.HostMetadata = HostMetadata;\n    exports.InjectMetadata = InjectMetadata;\n    exports.InjectableMetadata = InjectableMetadata;\n    exports.OptionalMetadata = OptionalMetadata;\n    exports.SelfMetadata = SelfMetadata;\n    exports.SkipSelfMetadata = SkipSelfMetadata;\n    exports.forwardRef = forwardRef;\n    exports.resolveForwardRef = resolveForwardRef;\n    exports.Injector = Injector;\n    exports.ReflectiveInjector = ReflectiveInjector;\n    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;\n    exports.ReflectiveKey = ReflectiveKey;\n    exports.OpaqueToken = OpaqueToken;\n    exports.Inject = Inject;\n    exports.Optional = Optional;\n    exports.Injectable = Injectable;\n    exports.Self = Self;\n    exports.Host = Host;\n    exports.SkipSelf = SkipSelf;\n    exports.NgZone = NgZone;\n    exports.RenderComponentType = RenderComponentType;\n    exports.Renderer = Renderer;\n    exports.RootRenderer = RootRenderer;\n    exports.COMPILER_OPTIONS = COMPILER_OPTIONS;\n    exports.Compiler = Compiler;\n    exports.CompilerFactory = CompilerFactory;\n    exports.ModuleWithComponentFactories = ModuleWithComponentFactories;\n    exports.ComponentFactory = ComponentFactory;\n    exports.ComponentRef = ComponentRef;\n    exports.ComponentFactoryResolver = ComponentFactoryResolver;\n    exports.ElementRef = ElementRef;\n    exports.NgModuleFactory = NgModuleFactory;\n    exports.NgModuleRef = NgModuleRef;\n    exports.NgModuleFactoryLoader = NgModuleFactoryLoader;\n    exports.QueryList = QueryList;\n    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;\n    exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;\n    exports.TemplateRef = TemplateRef;\n    exports.ViewContainerRef = ViewContainerRef;\n    exports.EmbeddedViewRef = EmbeddedViewRef;\n    exports.ViewRef = ViewRef;\n    exports.ChangeDetectorRef = ChangeDetectorRef;\n    exports.CollectionChangeRecord = CollectionChangeRecord;\n    exports.DefaultIterableDiffer = DefaultIterableDiffer;\n    exports.IterableDiffers = IterableDiffers;\n    exports.KeyValueChangeRecord = KeyValueChangeRecord;\n    exports.KeyValueDiffers = KeyValueDiffers;\n    exports.SimpleChange = SimpleChange;\n    exports.WrappedValue = WrappedValue;\n    exports.platformCore = platformCore;\n    exports.__core_private__ = __core_private__;\n    exports.AUTO_STYLE = AUTO_STYLE;\n    exports.AnimationEntryMetadata = AnimationEntryMetadata;\n    exports.AnimationStateMetadata = AnimationStateMetadata;\n    exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;\n    exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;\n    exports.AnimationMetadata = AnimationMetadata;\n    exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;\n    exports.AnimationStyleMetadata = AnimationStyleMetadata;\n    exports.AnimationAnimateMetadata = AnimationAnimateMetadata;\n    exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;\n    exports.AnimationSequenceMetadata = AnimationSequenceMetadata;\n    exports.AnimationGroupMetadata = AnimationGroupMetadata;\n    exports.animate = animate;\n    exports.group = group;\n    exports.sequence = sequence;\n    exports.style = style;\n    exports.state = state;\n    exports.keyframes = keyframes;\n    exports.transition = transition;\n    exports.trigger = trigger;\n\n}));\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = __webpack_require__(5);\nvar Subscriber_1 = __webpack_require__(9);\nvar Subscription_1 = __webpack_require__(11);\nvar ObjectUnsubscribedError_1 = __webpack_require__(20);\nvar SubjectSubscription_1 = __webpack_require__(21);\nvar rxSubscriber_1 = __webpack_require__(18);\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n//# sourceMappingURL=Subject.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar root_1 = __webpack_require__(6);\nvar toSubscriber_1 = __webpack_require__(8);\nvar observable_1 = __webpack_require__(19);\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is  called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Registers handlers for handling emitted values, error and completions from the observable, and\n     *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n     * @method subscribe\n     * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n     * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled\n     * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this);\n        }\n        else {\n            sink.add(this._subscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.$$observable] = function () {\n        return this;\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(module, global) {\"use strict\";\nvar objectTypes = {\n    'boolean': false,\n    'function': true,\n    'object': true,\n    'number': false,\n    'string': false,\n    'undefined': false\n};\nexports.root = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);\n/* tslint:disable:no-unused-variable */\nvar freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\nvar freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\nvar freeGlobal = objectTypes[typeof global] && global;\nif (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n    exports.root = freeGlobal;\n}\n//# sourceMappingURL=root.js.map\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)(module), (function() { return this; }())))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcnhqcy91dGlsL3Jvb3QuanM/OTNjMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBvYmplY3RUeXBlcyA9IHtcbiAgICAnYm9vbGVhbic6IGZhbHNlLFxuICAgICdmdW5jdGlvbic6IHRydWUsXG4gICAgJ29iamVjdCc6IHRydWUsXG4gICAgJ251bWJlcic6IGZhbHNlLFxuICAgICdzdHJpbmcnOiBmYWxzZSxcbiAgICAndW5kZWZpbmVkJzogZmFsc2Vcbn07XG5leHBvcnRzLnJvb3QgPSAob2JqZWN0VHlwZXNbdHlwZW9mIHNlbGZdICYmIHNlbGYpIHx8IChvYmplY3RUeXBlc1t0eXBlb2Ygd2luZG93XSAmJiB3aW5kb3cpO1xuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXG52YXIgZnJlZUV4cG9ydHMgPSBvYmplY3RUeXBlc1t0eXBlb2YgZXhwb3J0c10gJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xudmFyIGZyZWVNb2R1bGUgPSBvYmplY3RUeXBlc1t0eXBlb2YgbW9kdWxlXSAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG52YXIgZnJlZUdsb2JhbCA9IG9iamVjdFR5cGVzW3R5cGVvZiBnbG9iYWxdICYmIGdsb2JhbDtcbmlmIChmcmVlR2xvYmFsICYmIChmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCkpIHtcbiAgICBleHBvcnRzLnJvb3QgPSBmcmVlR2xvYmFsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm9vdC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3V0aWwvcm9vdC5qc1xuICoqIG1vZHVsZSBpZCA9IDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 7 */
/***/ function(module, exports) {

	eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/YzNjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzXG4gKiogbW9kdWxlIGlkID0gN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar Subscriber_1 = __webpack_require__(9);\nvar rxSubscriber_1 = __webpack_require__(18);\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber();\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcnhqcy91dGlsL3RvU3Vic2NyaWJlci5qcz9mOGZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbnZhciByeFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL3N5bWJvbC9yeFN1YnNjcmliZXInKTtcbmZ1bmN0aW9uIHRvU3Vic2NyaWJlcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgaWYgKG5leHRPck9ic2VydmVyKSB7XG4gICAgICAgIGlmIChuZXh0T3JPYnNlcnZlciBpbnN0YW5jZW9mIFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE9yT2JzZXJ2ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyW3J4U3Vic2NyaWJlcl8xLiQkcnhTdWJzY3JpYmVyXSkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRPck9ic2VydmVyW3J4U3Vic2NyaWJlcl8xLiQkcnhTdWJzY3JpYmVyXSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghbmV4dE9yT2JzZXJ2ZXIgJiYgIWVycm9yICYmICFjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSk7XG59XG5leHBvcnRzLnRvU3Vic2NyaWJlciA9IHRvU3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvU3Vic2NyaWJlci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3V0aWwvdG9TdWJzY3JpYmVyLmpzXG4gKiogbW9kdWxlIGlkID0gOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = __webpack_require__(10);\nvar Subscription_1 = __webpack_require__(11);\nvar Observer_1 = __webpack_require__(17);\nvar rxSubscriber_1 = __webpack_require__(18);\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.destination = destinationOrNext;\n                        this.destination.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parent, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parent = _parent;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            context = observerOrNext;\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (isFunction_1.isFunction(context.unsubscribe)) {\n                this.add(context.unsubscribe.bind(context));\n            }\n            context.unsubscribe = this.unsubscribe.bind(this);\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parent = this._parent;\n            if (!_parent.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parent, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parent = this._parent;\n            if (this._error) {\n                if (!_parent.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parent, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parent.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parent.syncErrorValue = err;\n                _parent.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _parent = this._parent;\n            if (this._complete) {\n                if (!_parent.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._complete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parent, this._complete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parent = this._parent;\n        this._context = null;\n        this._parent = null;\n        _parent.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=Subscriber.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 10 */
/***/ function(module, exports) {

	eval("\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3J4anMvdXRpbC9pc0Z1bmN0aW9uLmpzPzUxYzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3V0aWwvaXNGdW5jdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDEwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar isArray_1 = __webpack_require__(12);\nvar isObject_1 = __webpack_require__(13);\nvar isFunction_1 = __webpack_require__(10);\nvar tryCatch_1 = __webpack_require__(14);\nvar errorObject_1 = __webpack_require__(15);\nvar UnsubscriptionError_1 = __webpack_require__(16);\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this._subscriptions = null;\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                (errors = errors || []).push(errorObject_1.errorObject.e);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            var index = -1;\n            var len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(err.errors);\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var sub = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                sub = new Subscription(teardown);\n            case 'object':\n                if (sub.closed || typeof sub.unsubscribe !== 'function') {\n                    break;\n                }\n                else if (this.closed) {\n                    sub.unsubscribe();\n                }\n                else {\n                    (this._subscriptions || (this._subscriptions = [])).push(sub);\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        return sub;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        // HACK: This might be redundant because of the logic in `add()`\n        if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {\n            return;\n        }\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\n//# sourceMappingURL=Subscription.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 12 */
/***/ function(module, exports) {

	eval("\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3J4anMvdXRpbC9pc0FycmF5LmpzP2IwZWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLmlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAmJiB0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInOyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXJyYXkuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy91dGlsL2lzQXJyYXkuanNcbiAqKiBtb2R1bGUgaWQgPSAxMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 13 */
/***/ function(module, exports) {

	eval("\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3J4anMvdXRpbC9pc09iamVjdC5qcz9hYTJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gaXNPYmplY3QoeCkge1xuICAgIHJldHVybiB4ICE9IG51bGwgJiYgdHlwZW9mIHggPT09ICdvYmplY3QnO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNPYmplY3QuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy91dGlsL2lzT2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar errorObject_1 = __webpack_require__(15);\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3J4anMvdXRpbC90cnlDYXRjaC5qcz83Njk0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIGVycm9yT2JqZWN0XzEgPSByZXF1aXJlKCcuL2Vycm9yT2JqZWN0Jyk7XG52YXIgdHJ5Q2F0Y2hUYXJnZXQ7XG5mdW5jdGlvbiB0cnlDYXRjaGVyKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0cnlDYXRjaFRhcmdldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmUgPSBlO1xuICAgICAgICByZXR1cm4gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdDtcbiAgICB9XG59XG5mdW5jdGlvbiB0cnlDYXRjaChmbikge1xuICAgIHRyeUNhdGNoVGFyZ2V0ID0gZm47XG4gICAgcmV0dXJuIHRyeUNhdGNoZXI7XG59XG5leHBvcnRzLnRyeUNhdGNoID0gdHJ5Q2F0Y2g7XG47XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cnlDYXRjaC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3V0aWwvdHJ5Q2F0Y2guanNcbiAqKiBtb2R1bGUgaWQgPSAxNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 15 */
/***/ function(module, exports) {

	eval("\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3J4anMvdXRpbC9lcnJvck9iamVjdC5qcz9mNDliIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gdHlwZW9mIGFueSBzbyB0aGF0IGl0IHdlIGRvbid0IGhhdmUgdG8gY2FzdCB3aGVuIGNvbXBhcmluZyBhIHJlc3VsdCB0byB0aGUgZXJyb3Igb2JqZWN0XG5leHBvcnRzLmVycm9yT2JqZWN0ID0geyBlOiB7fSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JPYmplY3QuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy91dGlsL2Vycm9yT2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 16 */
/***/ function(module, exports) {

	eval("\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3J4anMvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzP2JjOWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbi8qKlxuICogQW4gZXJyb3IgdGhyb3duIHdoZW4gb25lIG9yIG1vcmUgZXJyb3JzIGhhdmUgb2NjdXJyZWQgZHVyaW5nIHRoZVxuICogYHVuc3Vic2NyaWJlYCBvZiBhIHtAbGluayBTdWJzY3JpcHRpb259LlxuICovXG52YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFVuc3Vic2NyaXB0aW9uRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICB2YXIgZXJyID0gRXJyb3IuY2FsbCh0aGlzLCBlcnJvcnMgP1xuICAgICAgICAgICAgZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuICBcIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gKChpICsgMSkgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKSk7IH0pLmpvaW4oJ1xcbiAgJykgOiAnJyk7XG4gICAgICAgIHRoaXMubmFtZSA9IGVyci5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLnN0YWNrID0gZXJyLnN0YWNrO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICB9XG4gICAgcmV0dXJuIFVuc3Vic2NyaXB0aW9uRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLlVuc3Vic2NyaXB0aW9uRXJyb3IgPSBVbnN1YnNjcmlwdGlvbkVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qc1xuICoqIG1vZHVsZSBpZCA9IDE2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 17 */
/***/ function(module, exports) {

	eval("\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3J4anMvT2JzZXJ2ZXIuanM/ZjA5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuZW1wdHkgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB9LFxuICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7IHRocm93IGVycjsgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkgeyB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2ZXIuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9PYnNlcnZlci5qc1xuICoqIG1vZHVsZSBpZCA9IDE3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar root_1 = __webpack_require__(6);\nvar Symbol = root_1.root.Symbol;\nexports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n//# sourceMappingURL=rxSubscriber.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3J4anMvc3ltYm9sL3J4U3Vic2NyaWJlci5qcz8xMTJjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIHJvb3RfMSA9IHJlcXVpcmUoJy4uL3V0aWwvcm9vdCcpO1xudmFyIFN5bWJvbCA9IHJvb3RfMS5yb290LlN5bWJvbDtcbmV4cG9ydHMuJCRyeFN1YnNjcmliZXIgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLmZvciA9PT0gJ2Z1bmN0aW9uJykgP1xuICAgIFN5bWJvbC5mb3IoJ3J4U3Vic2NyaWJlcicpIDogJ0BAcnhTdWJzY3JpYmVyJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ4U3Vic2NyaWJlci5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3N5bWJvbC9yeFN1YnNjcmliZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar root_1 = __webpack_require__(6);\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.$$observable = getSymbolObservable(root_1.root);\n//# sourceMappingURL=observable.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3J4anMvc3ltYm9sL29ic2VydmFibGUuanM/MWYyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciByb290XzEgPSByZXF1aXJlKCcuLi91dGlsL3Jvb3QnKTtcbmZ1bmN0aW9uIGdldFN5bWJvbE9ic2VydmFibGUoY29udGV4dCkge1xuICAgIHZhciAkJG9ic2VydmFibGU7XG4gICAgdmFyIFN5bWJvbCA9IGNvbnRleHQuU3ltYm9sO1xuICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgJCRvYnNlcnZhYmxlID0gU3ltYm9sLm9ic2VydmFibGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAkJG9ic2VydmFibGUgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcbiAgICAgICAgICAgIFN5bWJvbC5vYnNlcnZhYmxlID0gJCRvYnNlcnZhYmxlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAkJG9ic2VydmFibGUgPSAnQEBvYnNlcnZhYmxlJztcbiAgICB9XG4gICAgcmV0dXJuICQkb2JzZXJ2YWJsZTtcbn1cbmV4cG9ydHMuZ2V0U3ltYm9sT2JzZXJ2YWJsZSA9IGdldFN5bWJvbE9ic2VydmFibGU7XG5leHBvcnRzLiQkb2JzZXJ2YWJsZSA9IGdldFN5bWJvbE9ic2VydmFibGUocm9vdF8xLnJvb3QpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yeGpzL3N5bWJvbC9vYnNlcnZhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gMTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 20 */
/***/ function(module, exports) {

	eval("\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3J4anMvdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcz9lNTU5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG4vKipcbiAqIEFuIGVycm9yIHRocm93biB3aGVuIGFuIGFjdGlvbiBpcyBpbnZhbGlkIGJlY2F1c2UgdGhlIG9iamVjdCBoYXMgYmVlblxuICogdW5zdWJzY3JpYmVkLlxuICpcbiAqIEBzZWUge0BsaW5rIFN1YmplY3R9XG4gKiBAc2VlIHtAbGluayBCZWhhdmlvclN1YmplY3R9XG4gKlxuICogQGNsYXNzIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXG4gKi9cbnZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9iamVjdFVuc3Vic2NyaWJlZEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCkge1xuICAgICAgICB2YXIgZXJyID0gX3N1cGVyLmNhbGwodGhpcywgJ29iamVjdCB1bnN1YnNjcmliZWQnKTtcbiAgICAgICAgdGhpcy5uYW1lID0gZXJyLm5hbWUgPSAnT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuICAgICAgICB0aGlzLnN0YWNrID0gZXJyLnN0YWNrO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0cy5PYmplY3RVbnN1YnNjcmliZWRFcnJvciA9IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzXG4gKiogbW9kdWxlIGlkID0gMjBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = __webpack_require__(11);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n//# sourceMappingURL=SubjectSubscription.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3J4anMvU3ViamVjdFN1YnNjcmlwdGlvbi5qcz9kMzUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKCcuL1N1YnNjcmlwdGlvbicpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBTdWJqZWN0U3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ViamVjdFN1YnNjcmlwdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0U3Vic2NyaXB0aW9uKHN1YmplY3QsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgfVxuICAgIFN1YmplY3RTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gdGhpcy5zdWJqZWN0O1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gc3ViamVjdC5vYnNlcnZlcnM7XG4gICAgICAgIHRoaXMuc3ViamVjdCA9IG51bGw7XG4gICAgICAgIGlmICghb2JzZXJ2ZXJzIHx8IG9ic2VydmVycy5sZW5ndGggPT09IDAgfHwgc3ViamVjdC5pc1N0b3BwZWQgfHwgc3ViamVjdC5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3Vic2NyaWJlckluZGV4ID0gb2JzZXJ2ZXJzLmluZGV4T2YodGhpcy5zdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKHN1YnNjcmliZXJJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIG9ic2VydmVycy5zcGxpY2Uoc3Vic2NyaWJlckluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YmplY3RTdWJzY3JpcHRpb247XG59KFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbikpO1xuZXhwb3J0cy5TdWJqZWN0U3Vic2NyaXB0aW9uID0gU3ViamVjdFN1YnNjcmlwdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3RTdWJzY3JpcHRpb24uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcnhqcy9TdWJqZWN0U3Vic2NyaXB0aW9uLmpzXG4gKiogbW9kdWxlIGlkID0gMjFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * @license Angular v2.0.0-rc.6\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n     true ? factory(exports, __webpack_require__(23), __webpack_require__(3)) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}),global.ng.common,global.ng.core));\n}(this, function (exports,_angular_common,_angular_core) { 'use strict';\n\n    var DebugDomRootRenderer = _angular_core.__core_private__.DebugDomRootRenderer;\n    var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;\n\n    var _NoOpAnimationDriver = (function () {\n        function _NoOpAnimationDriver() {\n        }\n        _NoOpAnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing) {\n            return new NoOpAnimationPlayer();\n        };\n        return _NoOpAnimationDriver;\n    }());\n    /**\n     * @experimental\n     */\n    var AnimationDriver = (function () {\n        function AnimationDriver() {\n        }\n        AnimationDriver.NOOP = new _NoOpAnimationDriver();\n        return AnimationDriver;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var globalScope;\n    if (typeof window === 'undefined') {\n        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n            globalScope = self;\n        }\n        else {\n            globalScope = global;\n        }\n    }\n    else {\n        globalScope = window;\n    }\n    // Need to declare a new variable for global here since TypeScript\n    // exports the original value of the symbol.\n    var global$1 = globalScope;\n    var Date = global$1.Date;\n    // TODO: remove calls to assert in production environment\n    // Note: Can't just export this and import in in other files\n    // as `assert` is a reserved keyword in Dart\n    global$1.assert = function assert(condition) {\n        // TODO: to be fixed properly via #2830, noop for now\n    };\n    function isPresent(obj) {\n        return obj !== undefined && obj !== null;\n    }\n    function isBlank(obj) {\n        return obj === undefined || obj === null;\n    }\n    function isNumber(obj) {\n        return typeof obj === 'number';\n    }\n    function isString(obj) {\n        return typeof obj === 'string';\n    }\n    function isFunction(obj) {\n        return typeof obj === 'function';\n    }\n    function isArray(obj) {\n        return Array.isArray(obj);\n    }\n    function stringify(token) {\n        if (typeof token === 'string') {\n            return token;\n        }\n        if (token === undefined || token === null) {\n            return '' + token;\n        }\n        if (token.overriddenName) {\n            return token.overriddenName;\n        }\n        if (token.name) {\n            return token.name;\n        }\n        var res = token.toString();\n        var newLineIndex = res.indexOf('\\n');\n        return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);\n    }\n    var StringWrapper = (function () {\n        function StringWrapper() {\n        }\n        StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };\n        StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };\n        StringWrapper.split = function (s, regExp) { return s.split(regExp); };\n        StringWrapper.equals = function (s, s2) { return s === s2; };\n        StringWrapper.stripLeft = function (s, charVal) {\n            if (s && s.length) {\n                var pos = 0;\n                for (var i = 0; i < s.length; i++) {\n                    if (s[i] != charVal)\n                        break;\n                    pos++;\n                }\n                s = s.substring(pos);\n            }\n            return s;\n        };\n        StringWrapper.stripRight = function (s, charVal) {\n            if (s && s.length) {\n                var pos = s.length;\n                for (var i = s.length - 1; i >= 0; i--) {\n                    if (s[i] != charVal)\n                        break;\n                    pos--;\n                }\n                s = s.substring(0, pos);\n            }\n            return s;\n        };\n        StringWrapper.replace = function (s, from, replace) {\n            return s.replace(from, replace);\n        };\n        StringWrapper.replaceAll = function (s, from, replace) {\n            return s.replace(from, replace);\n        };\n        StringWrapper.slice = function (s, from, to) {\n            if (from === void 0) { from = 0; }\n            if (to === void 0) { to = null; }\n            return s.slice(from, to === null ? undefined : to);\n        };\n        StringWrapper.replaceAllMapped = function (s, from, cb) {\n            return s.replace(from, function () {\n                var matches = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    matches[_i - 0] = arguments[_i];\n                }\n                // Remove offset & string from the result array\n                matches.splice(-2, 2);\n                // The callback receives match, p1, ..., pn\n                return cb(matches);\n            });\n        };\n        StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };\n        StringWrapper.compare = function (a, b) {\n            if (a < b) {\n                return -1;\n            }\n            else if (a > b) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        };\n        return StringWrapper;\n    }());\n    var NumberWrapper = (function () {\n        function NumberWrapper() {\n        }\n        NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };\n        NumberWrapper.equal = function (a, b) { return a === b; };\n        NumberWrapper.parseIntAutoRadix = function (text) {\n            var result = parseInt(text);\n            if (isNaN(result)) {\n                throw new Error('Invalid integer literal when parsing ' + text);\n            }\n            return result;\n        };\n        NumberWrapper.parseInt = function (text, radix) {\n            if (radix == 10) {\n                if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n                    return parseInt(text, radix);\n                }\n            }\n            else if (radix == 16) {\n                if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n                    return parseInt(text, radix);\n                }\n            }\n            else {\n                var result = parseInt(text, radix);\n                if (!isNaN(result)) {\n                    return result;\n                }\n            }\n            throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);\n        };\n        // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.\n        NumberWrapper.parseFloat = function (text) { return parseFloat(text); };\n        Object.defineProperty(NumberWrapper, \"NaN\", {\n            get: function () { return NaN; },\n            enumerable: true,\n            configurable: true\n        });\n        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\n        NumberWrapper.isNaN = function (value) { return isNaN(value); };\n        NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };\n        return NumberWrapper;\n    }());\n    // Can't be all uppercase as our transpiler would think it is a special directive...\n    var Json = (function () {\n        function Json() {\n        }\n        Json.parse = function (s) { return global$1.JSON.parse(s); };\n        Json.stringify = function (data) {\n            // Dart doesn't take 3 arguments\n            return global$1.JSON.stringify(data, null, 2);\n        };\n        return Json;\n    }());\n    var DateWrapper = (function () {\n        function DateWrapper() {\n        }\n        DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {\n            if (month === void 0) { month = 1; }\n            if (day === void 0) { day = 1; }\n            if (hour === void 0) { hour = 0; }\n            if (minutes === void 0) { minutes = 0; }\n            if (seconds === void 0) { seconds = 0; }\n            if (milliseconds === void 0) { milliseconds = 0; }\n            return new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);\n        };\n        DateWrapper.fromISOString = function (str) { return new Date(str); };\n        DateWrapper.fromMillis = function (ms) { return new Date(ms); };\n        DateWrapper.toMillis = function (date) { return date.getTime(); };\n        DateWrapper.now = function () { return new Date(); };\n        DateWrapper.toJson = function (date) { return date.toJSON(); };\n        return DateWrapper;\n    }());\n    function setValueOnPath(global, path, value) {\n        var parts = path.split('.');\n        var obj = global;\n        while (parts.length > 1) {\n            var name = parts.shift();\n            if (obj.hasOwnProperty(name) && isPresent(obj[name])) {\n                obj = obj[name];\n            }\n            else {\n                obj = obj[name] = {};\n            }\n        }\n        if (obj === undefined || obj === null) {\n            obj = {};\n        }\n        obj[parts.shift()] = value;\n    }\n\n    var Map$1 = global$1.Map;\n    var Set$1 = global$1.Set;\n    // Safari and Internet Explorer do not support the iterable parameter to the\n    // Map constructor.  We work around that by manually adding the items.\n    var createMapFromPairs = (function () {\n        try {\n            if (new Map$1([[1, 2]]).size === 1) {\n                return function createMapFromPairs(pairs) { return new Map$1(pairs); };\n            }\n        }\n        catch (e) {\n        }\n        return function createMapAndPopulateFromPairs(pairs) {\n            var map = new Map$1();\n            for (var i = 0; i < pairs.length; i++) {\n                var pair = pairs[i];\n                map.set(pair[0], pair[1]);\n            }\n            return map;\n        };\n    })();\n    var createMapFromMap = (function () {\n        try {\n            if (new Map$1(new Map$1())) {\n                return function createMapFromMap(m) { return new Map$1(m); };\n            }\n        }\n        catch (e) {\n        }\n        return function createMapAndPopulateFromMap(m) {\n            var map = new Map$1();\n            m.forEach(function (v, k) { map.set(k, v); });\n            return map;\n        };\n    })();\n    var _clearValues = (function () {\n        if ((new Map$1()).keys().next) {\n            return function _clearValues(m) {\n                var keyIterator = m.keys();\n                var k;\n                while (!((k = keyIterator.next()).done)) {\n                    m.set(k.value, null);\n                }\n            };\n        }\n        else {\n            return function _clearValuesWithForeEach(m) {\n                m.forEach(function (v, k) { m.set(k, null); });\n            };\n        }\n    })();\n    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from\n    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from\n    var _arrayFromMap = (function () {\n        try {\n            if ((new Map$1()).values().next) {\n                return function createArrayFromMap(m, getValues) {\n                    return getValues ? Array.from(m.values()) : Array.from(m.keys());\n                };\n            }\n        }\n        catch (e) {\n        }\n        return function createArrayFromMapWithForeach(m, getValues) {\n            var res = ListWrapper.createFixedSize(m.size), i = 0;\n            m.forEach(function (v, k) {\n                res[i] = getValues ? v : k;\n                i++;\n            });\n            return res;\n        };\n    })();\n    /**\n     * Wraps Javascript Objects\n     */\n    var StringMapWrapper = (function () {\n        function StringMapWrapper() {\n        }\n        StringMapWrapper.create = function () {\n            // Note: We are not using Object.create(null) here due to\n            // performance!\n            // http://jsperf.com/ng2-object-create-null\n            return {};\n        };\n        StringMapWrapper.contains = function (map, key) {\n            return map.hasOwnProperty(key);\n        };\n        StringMapWrapper.get = function (map, key) {\n            return map.hasOwnProperty(key) ? map[key] : undefined;\n        };\n        StringMapWrapper.set = function (map, key, value) { map[key] = value; };\n        StringMapWrapper.keys = function (map) { return Object.keys(map); };\n        StringMapWrapper.values = function (map) {\n            return Object.keys(map).map(function (k) { return map[k]; });\n        };\n        StringMapWrapper.isEmpty = function (map) {\n            for (var prop in map) {\n                return false;\n            }\n            return true;\n        };\n        StringMapWrapper.delete = function (map, key) { delete map[key]; };\n        StringMapWrapper.forEach = function (map, callback) {\n            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {\n                var k = _a[_i];\n                callback(map[k], k);\n            }\n        };\n        StringMapWrapper.merge = function (m1, m2) {\n            var m = {};\n            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n                var k = _a[_i];\n                m[k] = m1[k];\n            }\n            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n                var k = _c[_b];\n                m[k] = m2[k];\n            }\n            return m;\n        };\n        StringMapWrapper.equals = function (m1, m2) {\n            var k1 = Object.keys(m1);\n            var k2 = Object.keys(m2);\n            if (k1.length != k2.length) {\n                return false;\n            }\n            var key;\n            for (var i = 0; i < k1.length; i++) {\n                key = k1[i];\n                if (m1[key] !== m2[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return StringMapWrapper;\n    }());\n    var ListWrapper = (function () {\n        function ListWrapper() {\n        }\n        // JS has no way to express a statically fixed size list, but dart does so we\n        // keep both methods.\n        ListWrapper.createFixedSize = function (size) { return new Array(size); };\n        ListWrapper.createGrowableSize = function (size) { return new Array(size); };\n        ListWrapper.clone = function (array) { return array.slice(0); };\n        ListWrapper.forEachWithIndex = function (array, fn) {\n            for (var i = 0; i < array.length; i++) {\n                fn(array[i], i);\n            }\n        };\n        ListWrapper.first = function (array) {\n            if (!array)\n                return null;\n            return array[0];\n        };\n        ListWrapper.last = function (array) {\n            if (!array || array.length == 0)\n                return null;\n            return array[array.length - 1];\n        };\n        ListWrapper.indexOf = function (array, value, startIndex) {\n            if (startIndex === void 0) { startIndex = 0; }\n            return array.indexOf(value, startIndex);\n        };\n        ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };\n        ListWrapper.reversed = function (array) {\n            var a = ListWrapper.clone(array);\n            return a.reverse();\n        };\n        ListWrapper.concat = function (a, b) { return a.concat(b); };\n        ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };\n        ListWrapper.removeAt = function (list, index) {\n            var res = list[index];\n            list.splice(index, 1);\n            return res;\n        };\n        ListWrapper.removeAll = function (list, items) {\n            for (var i = 0; i < items.length; ++i) {\n                var index = list.indexOf(items[i]);\n                list.splice(index, 1);\n            }\n        };\n        ListWrapper.remove = function (list, el) {\n            var index = list.indexOf(el);\n            if (index > -1) {\n                list.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        ListWrapper.clear = function (list) { list.length = 0; };\n        ListWrapper.isEmpty = function (list) { return list.length == 0; };\n        ListWrapper.fill = function (list, value, start, end) {\n            if (start === void 0) { start = 0; }\n            if (end === void 0) { end = null; }\n            list.fill(value, start, end === null ? list.length : end);\n        };\n        ListWrapper.equals = function (a, b) {\n            if (a.length != b.length)\n                return false;\n            for (var i = 0; i < a.length; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        };\n        ListWrapper.slice = function (l, from, to) {\n            if (from === void 0) { from = 0; }\n            if (to === void 0) { to = null; }\n            return l.slice(from, to === null ? undefined : to);\n        };\n        ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };\n        ListWrapper.sort = function (l, compareFn) {\n            if (isPresent(compareFn)) {\n                l.sort(compareFn);\n            }\n            else {\n                l.sort();\n            }\n        };\n        ListWrapper.toString = function (l) { return l.toString(); };\n        ListWrapper.toJSON = function (l) { return JSON.stringify(l); };\n        ListWrapper.maximum = function (list, predicate) {\n            if (list.length == 0) {\n                return null;\n            }\n            var solution = null;\n            var maxValue = -Infinity;\n            for (var index = 0; index < list.length; index++) {\n                var candidate = list[index];\n                if (isBlank(candidate)) {\n                    continue;\n                }\n                var candidateValue = predicate(candidate);\n                if (candidateValue > maxValue) {\n                    solution = candidate;\n                    maxValue = candidateValue;\n                }\n            }\n            return solution;\n        };\n        ListWrapper.flatten = function (list) {\n            var target = [];\n            _flattenArray(list, target);\n            return target;\n        };\n        ListWrapper.addAll = function (list, source) {\n            for (var i = 0; i < source.length; i++) {\n                list.push(source[i]);\n            }\n        };\n        return ListWrapper;\n    }());\n    function _flattenArray(source, target) {\n        if (isPresent(source)) {\n            for (var i = 0; i < source.length; i++) {\n                var item = source[i];\n                if (isArray(item)) {\n                    _flattenArray(item, target);\n                }\n                else {\n                    target.push(item);\n                }\n            }\n        }\n        return target;\n    }\n    // Safari and Internet Explorer do not support the iterable parameter to the\n    // Set constructor.  We work around that by manually adding the items.\n    var createSetFromList = (function () {\n        var test = new Set$1([1, 2, 3]);\n        if (test.size === 3) {\n            return function createSetFromList(lst) { return new Set$1(lst); };\n        }\n        else {\n            return function createSetAndPopulateFromList(lst) {\n                var res = new Set$1(lst);\n                if (res.size !== lst.length) {\n                    for (var i = 0; i < lst.length; i++) {\n                        res.add(lst[i]);\n                    }\n                }\n                return res;\n            };\n        }\n    })();\n\n    var CAMEL_CASE_REGEXP = /([A-Z])/g;\n    var DASH_CASE_REGEXP = /-([a-z])/g;\n    function camelCaseToDashCase(input) {\n        return StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m /** TODO #9100 */) { return '-' + m[1].toLowerCase(); });\n    }\n    function dashCaseToCamelCase(input) {\n        return StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m /** TODO #9100 */) { return m[1].toUpperCase(); });\n    }\n\n    var _DOM = null;\n    function getDOM() {\n        return _DOM;\n    }\n    function setRootDomAdapter(adapter) {\n        if (isBlank(_DOM)) {\n            _DOM = adapter;\n        }\n    }\n    /* tslint:disable:requireParameterType */\n    /**\n     * Provides DOM operations in an environment-agnostic way.\n     *\n     * @security Tread carefully! Interacting with the DOM directly is dangerous and\n     * can introduce XSS risks.\n     */\n    var DomAdapter = (function () {\n        function DomAdapter() {\n            this.resourceLoaderType = null;\n        }\n        Object.defineProperty(DomAdapter.prototype, \"attrToPropMap\", {\n            /**\n             * Maps attribute names to their corresponding property names for cases\n             * where attribute name doesn't match property name.\n             */\n            get: function () { return this._attrToPropMap; },\n            set: function (value) { this._attrToPropMap = value; },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        ;\n        return DomAdapter;\n    }());\n\n    var WebAnimationsPlayer = (function () {\n        function WebAnimationsPlayer(element, keyframes, options) {\n            this.element = element;\n            this.keyframes = keyframes;\n            this.options = options;\n            this._onDoneFns = [];\n            this._onStartFns = [];\n            this._finished = false;\n            this._initialized = false;\n            this._started = false;\n            this.parentPlayer = null;\n            this._duration = options['duration'];\n        }\n        WebAnimationsPlayer.prototype._onFinish = function () {\n            if (!this._finished) {\n                this._finished = true;\n                if (!isPresent(this.parentPlayer)) {\n                    this.destroy();\n                }\n                this._onDoneFns.forEach(function (fn) { return fn(); });\n                this._onDoneFns = [];\n            }\n        };\n        WebAnimationsPlayer.prototype.init = function () {\n            var _this = this;\n            if (this._initialized)\n                return;\n            this._initialized = true;\n            var keyframes = this.keyframes.map(function (styles) {\n                var formattedKeyframe = {};\n                StringMapWrapper.forEach(styles, function (value, prop) {\n                    formattedKeyframe[prop] = value == _angular_core.AUTO_STYLE ? _computeStyle(_this.element, prop) : value;\n                });\n                return formattedKeyframe;\n            });\n            this._player = this._triggerWebAnimation(this.element, keyframes, this.options);\n            // this is required so that the player doesn't start to animate right away\n            this.reset();\n            this._player.onfinish = function () { return _this._onFinish(); };\n        };\n        /** @internal */\n        WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) {\n            return element.animate(keyframes, options);\n        };\n        WebAnimationsPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n        WebAnimationsPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n        WebAnimationsPlayer.prototype.play = function () {\n            this.init();\n            if (!this.hasStarted()) {\n                this._onStartFns.forEach(function (fn) { return fn(); });\n                this._onStartFns = [];\n                this._started = true;\n            }\n            this._player.play();\n        };\n        WebAnimationsPlayer.prototype.pause = function () {\n            this.init();\n            this._player.pause();\n        };\n        WebAnimationsPlayer.prototype.finish = function () {\n            this.init();\n            this._onFinish();\n            this._player.finish();\n        };\n        WebAnimationsPlayer.prototype.reset = function () { this._player.cancel(); };\n        WebAnimationsPlayer.prototype.restart = function () {\n            this.reset();\n            this.play();\n        };\n        WebAnimationsPlayer.prototype.hasStarted = function () { return this._started; };\n        WebAnimationsPlayer.prototype.destroy = function () {\n            this.reset();\n            this._onFinish();\n        };\n        Object.defineProperty(WebAnimationsPlayer.prototype, \"totalTime\", {\n            get: function () { return this._duration; },\n            enumerable: true,\n            configurable: true\n        });\n        WebAnimationsPlayer.prototype.setPosition = function (p) { this._player.currentTime = p * this.totalTime; };\n        WebAnimationsPlayer.prototype.getPosition = function () { return this._player.currentTime / this.totalTime; };\n        return WebAnimationsPlayer;\n    }());\n    function _computeStyle(element, prop) {\n        return getDOM().getComputedStyle(element)[prop];\n    }\n\n    var WebAnimationsDriver = (function () {\n        function WebAnimationsDriver() {\n        }\n        WebAnimationsDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing) {\n            var formattedSteps = [];\n            var startingStyleLookup = {};\n            if (isPresent(startingStyles) && startingStyles.styles.length > 0) {\n                startingStyleLookup = _populateStyles(element, startingStyles, {});\n                startingStyleLookup['offset'] = 0;\n                formattedSteps.push(startingStyleLookup);\n            }\n            keyframes.forEach(function (keyframe) {\n                var data = _populateStyles(element, keyframe.styles, startingStyleLookup);\n                data['offset'] = keyframe.offset;\n                formattedSteps.push(data);\n            });\n            // this is a special case when only styles are applied as an\n            // animation. When this occurs we want to animate from start to\n            // end with the same values. Removing the offset and having only\n            // start/end values is suitable enough for the web-animations API\n            if (formattedSteps.length == 1) {\n                var start = formattedSteps[0];\n                start['offset'] = null;\n                formattedSteps = [start, start];\n            }\n            var playerOptions = {\n                'duration': duration,\n                'delay': delay,\n                'fill': 'both' // we use `both` because it allows for styling at 0% to work with `delay`\n            };\n            // we check for this to avoid having a null|undefined value be present\n            // for the easing (which results in an error for certain browsers #9752)\n            if (easing) {\n                playerOptions['easing'] = easing;\n            }\n            return new WebAnimationsPlayer(element, formattedSteps, playerOptions);\n        };\n        return WebAnimationsDriver;\n    }());\n    function _populateStyles(element, styles, defaultStyles) {\n        var data = {};\n        styles.styles.forEach(function (entry) {\n            StringMapWrapper.forEach(entry, function (val, prop) {\n                var formattedProp = dashCaseToCamelCase(prop);\n                data[formattedProp] =\n                    val == _angular_core.AUTO_STYLE ? val : val.toString() + _resolveStyleUnit(val, prop, formattedProp);\n            });\n        });\n        StringMapWrapper.forEach(defaultStyles, function (value, prop) {\n            if (!isPresent(data[prop])) {\n                data[prop] = value;\n            }\n        });\n        return data;\n    }\n    function _resolveStyleUnit(val, userProvidedProp, formattedProp) {\n        var unit = '';\n        if (_isPixelDimensionStyle(formattedProp) && val != 0 && val != '0') {\n            if (isNumber(val)) {\n                unit = 'px';\n            }\n            else if (_findDimensionalSuffix(val.toString()).length == 0) {\n                throw new Error('Please provide a CSS unit value for ' + userProvidedProp + ':' + val);\n            }\n        }\n        return unit;\n    }\n    var _$0 = 48;\n    var _$9 = 57;\n    var _$PERIOD = 46;\n    function _findDimensionalSuffix(value) {\n        for (var i = 0; i < value.length; i++) {\n            var c = StringWrapper.charCodeAt(value, i);\n            if ((c >= _$0 && c <= _$9) || c == _$PERIOD)\n                continue;\n            return value.substring(i, value.length);\n        }\n        return '';\n    }\n    function _isPixelDimensionStyle(prop) {\n        switch (prop) {\n            case 'width':\n            case 'height':\n            case 'minWidth':\n            case 'minHeight':\n            case 'maxWidth':\n            case 'maxHeight':\n            case 'left':\n            case 'top':\n            case 'bottom':\n            case 'right':\n            case 'fontSize':\n            case 'outlineWidth':\n            case 'outlineOffset':\n            case 'paddingTop':\n            case 'paddingLeft':\n            case 'paddingBottom':\n            case 'paddingRight':\n            case 'marginTop':\n            case 'marginLeft':\n            case 'marginBottom':\n            case 'marginRight':\n            case 'borderRadius':\n            case 'borderWidth':\n            case 'borderTopWidth':\n            case 'borderLeftWidth':\n            case 'borderRightWidth':\n            case 'borderBottomWidth':\n            case 'textIndent':\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Provides DOM operations in any browser environment.\n     *\n     * @security Tread carefully! Interacting with the DOM directly is dangerous and\n     * can introduce XSS risks.\n     */\n    var GenericBrowserDomAdapter = (function (_super) {\n        __extends$1(GenericBrowserDomAdapter, _super);\n        function GenericBrowserDomAdapter() {\n            var _this = this;\n            _super.call(this);\n            this._animationPrefix = null;\n            this._transitionEnd = null;\n            try {\n                var element = this.createElement('div', this.defaultDoc());\n                if (isPresent(this.getStyle(element, 'animationName'))) {\n                    this._animationPrefix = '';\n                }\n                else {\n                    var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n                    for (var i = 0; i < domPrefixes.length; i++) {\n                        if (isPresent(this.getStyle(element, domPrefixes[i] + 'AnimationName'))) {\n                            this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n                            break;\n                        }\n                    }\n                }\n                var transEndEventNames = {\n                    WebkitTransition: 'webkitTransitionEnd',\n                    MozTransition: 'transitionend',\n                    OTransition: 'oTransitionEnd otransitionend',\n                    transition: 'transitionend'\n                };\n                StringMapWrapper.forEach(transEndEventNames, function (value, key) {\n                    if (isPresent(_this.getStyle(element, key))) {\n                        _this._transitionEnd = value;\n                    }\n                });\n            }\n            catch (e) {\n                this._animationPrefix = null;\n                this._transitionEnd = null;\n            }\n        }\n        GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return el.getDistributedNodes(); };\n        GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {\n            el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n        };\n        GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };\n        GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {\n            return isFunction(this.defaultDoc().body.createShadowRoot);\n        };\n        GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () {\n            return isPresent(this._animationPrefix) ? this._animationPrefix : '';\n        };\n        GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return isPresent(this._transitionEnd) ? this._transitionEnd : ''; };\n        GenericBrowserDomAdapter.prototype.supportsAnimation = function () {\n            return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);\n        };\n        return GenericBrowserDomAdapter;\n    }(DomAdapter));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var _attrToPropMap = {\n        'class': 'className',\n        'innerHtml': 'innerHTML',\n        'readonly': 'readOnly',\n        'tabindex': 'tabIndex'\n    };\n    var DOM_KEY_LOCATION_NUMPAD = 3;\n    // Map to convert some key or keyIdentifier values to what will be returned by getEventKey\n    var _keyMap = {\n        // The following values are here for cross-browser compatibility and to match the W3C standard\n        // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n        '\\b': 'Backspace',\n        '\\t': 'Tab',\n        '\\x7F': 'Delete',\n        '\\x1B': 'Escape',\n        'Del': 'Delete',\n        'Esc': 'Escape',\n        'Left': 'ArrowLeft',\n        'Right': 'ArrowRight',\n        'Up': 'ArrowUp',\n        'Down': 'ArrowDown',\n        'Menu': 'ContextMenu',\n        'Scroll': 'ScrollLock',\n        'Win': 'OS'\n    };\n    // There is a bug in Chrome for numeric keypad keys:\n    // https://code.google.com/p/chromium/issues/detail?id=155654\n    // 1, 2, 3 ... are reported as A, B, C ...\n    var _chromeNumKeyPadMap = {\n        'A': '1',\n        'B': '2',\n        'C': '3',\n        'D': '4',\n        'E': '5',\n        'F': '6',\n        'G': '7',\n        'H': '8',\n        'I': '9',\n        'J': '*',\n        'K': '+',\n        'M': '-',\n        'N': '.',\n        'O': '/',\n        '\\x60': '0',\n        '\\x90': 'NumLock'\n    };\n    /**\n     * A `DomAdapter` powered by full browser DOM APIs.\n     *\n     * @security Tread carefully! Interacting with the DOM directly is dangerous and\n     * can introduce XSS risks.\n     */\n    /* tslint:disable:requireParameterType */\n    var BrowserDomAdapter = (function (_super) {\n        __extends(BrowserDomAdapter, _super);\n        function BrowserDomAdapter() {\n            _super.apply(this, arguments);\n        }\n        BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };\n        BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };\n        BrowserDomAdapter.prototype.hasProperty = function (element /** TODO #9100 */, name) { return name in element; };\n        BrowserDomAdapter.prototype.setProperty = function (el, name, value) { el[name] = value; };\n        BrowserDomAdapter.prototype.getProperty = function (el, name) { return el[name]; };\n        BrowserDomAdapter.prototype.invoke = function (el, methodName, args) {\n            el[methodName].apply(el, args);\n        };\n        // TODO(tbosch): move this into a separate environment class once we have it\n        BrowserDomAdapter.prototype.logError = function (error /** TODO #9100 */) {\n            if (window.console.error) {\n                window.console.error(error);\n            }\n            else {\n                window.console.log(error);\n            }\n        };\n        BrowserDomAdapter.prototype.log = function (error /** TODO #9100 */) { window.console.log(error); };\n        BrowserDomAdapter.prototype.logGroup = function (error /** TODO #9100 */) {\n            if (window.console.group) {\n                window.console.group(error);\n                this.logError(error);\n            }\n            else {\n                window.console.log(error);\n            }\n        };\n        BrowserDomAdapter.prototype.logGroupEnd = function () {\n            if (window.console.groupEnd) {\n                window.console.groupEnd();\n            }\n        };\n        Object.defineProperty(BrowserDomAdapter.prototype, \"attrToPropMap\", {\n            get: function () { return _attrToPropMap; },\n            enumerable: true,\n            configurable: true\n        });\n        BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector); };\n        BrowserDomAdapter.prototype.querySelector = function (el /** TODO #9100 */, selector) {\n            return el.querySelector(selector);\n        };\n        BrowserDomAdapter.prototype.querySelectorAll = function (el /** TODO #9100 */, selector) {\n            return el.querySelectorAll(selector);\n        };\n        BrowserDomAdapter.prototype.on = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener /** TODO #9100 */) {\n            el.addEventListener(evt, listener, false);\n        };\n        BrowserDomAdapter.prototype.onAndCancel = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener /** TODO #9100 */) {\n            el.addEventListener(evt, listener, false);\n            // Needed to follow Dart's subscription semantic, until fix of\n            // https://code.google.com/p/dart/issues/detail?id=17406\n            return function () { el.removeEventListener(evt, listener, false); };\n        };\n        BrowserDomAdapter.prototype.dispatchEvent = function (el /** TODO #9100 */, evt /** TODO #9100 */) { el.dispatchEvent(evt); };\n        BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {\n            var evt = document.createEvent('MouseEvent');\n            evt.initEvent(eventType, true, true);\n            return evt;\n        };\n        BrowserDomAdapter.prototype.createEvent = function (eventType /** TODO #9100 */) {\n            var evt = document.createEvent('Event');\n            evt.initEvent(eventType, true, true);\n            return evt;\n        };\n        BrowserDomAdapter.prototype.preventDefault = function (evt) {\n            evt.preventDefault();\n            evt.returnValue = false;\n        };\n        BrowserDomAdapter.prototype.isPrevented = function (evt) {\n            return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;\n        };\n        BrowserDomAdapter.prototype.getInnerHTML = function (el /** TODO #9100 */) { return el.innerHTML; };\n        BrowserDomAdapter.prototype.getTemplateContent = function (el /** TODO #9100 */) {\n            return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;\n        };\n        BrowserDomAdapter.prototype.getOuterHTML = function (el /** TODO #9100 */) { return el.outerHTML; };\n        BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };\n        BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };\n        BrowserDomAdapter.prototype.type = function (node) { return node.type; };\n        BrowserDomAdapter.prototype.content = function (node) {\n            if (this.hasProperty(node, 'content')) {\n                return node.content;\n            }\n            else {\n                return node;\n            }\n        };\n        BrowserDomAdapter.prototype.firstChild = function (el /** TODO #9100 */) { return el.firstChild; };\n        BrowserDomAdapter.prototype.nextSibling = function (el /** TODO #9100 */) { return el.nextSibling; };\n        BrowserDomAdapter.prototype.parentElement = function (el /** TODO #9100 */) { return el.parentNode; };\n        BrowserDomAdapter.prototype.childNodes = function (el /** TODO #9100 */) { return el.childNodes; };\n        BrowserDomAdapter.prototype.childNodesAsList = function (el /** TODO #9100 */) {\n            var childNodes = el.childNodes;\n            var res = ListWrapper.createFixedSize(childNodes.length);\n            for (var i = 0; i < childNodes.length; i++) {\n                res[i] = childNodes[i];\n            }\n            return res;\n        };\n        BrowserDomAdapter.prototype.clearNodes = function (el /** TODO #9100 */) {\n            while (el.firstChild) {\n                el.removeChild(el.firstChild);\n            }\n        };\n        BrowserDomAdapter.prototype.appendChild = function (el /** TODO #9100 */, node /** TODO #9100 */) { el.appendChild(node); };\n        BrowserDomAdapter.prototype.removeChild = function (el /** TODO #9100 */, node /** TODO #9100 */) { el.removeChild(node); };\n        BrowserDomAdapter.prototype.replaceChild = function (el, newChild /** TODO #9100 */, oldChild /** TODO #9100 */) {\n            el.replaceChild(newChild, oldChild);\n        };\n        BrowserDomAdapter.prototype.remove = function (node /** TODO #9100 */) {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n            return node;\n        };\n        BrowserDomAdapter.prototype.insertBefore = function (el /** TODO #9100 */, node /** TODO #9100 */) {\n            el.parentNode.insertBefore(node, el);\n        };\n        BrowserDomAdapter.prototype.insertAllBefore = function (el /** TODO #9100 */, nodes /** TODO #9100 */) {\n            nodes.forEach(function (n /** TODO #9100 */) { return el.parentNode.insertBefore(n, el); });\n        };\n        BrowserDomAdapter.prototype.insertAfter = function (el /** TODO #9100 */, node /** TODO #9100 */) {\n            el.parentNode.insertBefore(node, el.nextSibling);\n        };\n        BrowserDomAdapter.prototype.setInnerHTML = function (el /** TODO #9100 */, value /** TODO #9100 */) { el.innerHTML = value; };\n        BrowserDomAdapter.prototype.getText = function (el /** TODO #9100 */) { return el.textContent; };\n        // TODO(vicb): removed Element type because it does not support StyleElement\n        BrowserDomAdapter.prototype.setText = function (el /** TODO #9100 */, value) { el.textContent = value; };\n        BrowserDomAdapter.prototype.getValue = function (el /** TODO #9100 */) { return el.value; };\n        BrowserDomAdapter.prototype.setValue = function (el /** TODO #9100 */, value) { el.value = value; };\n        BrowserDomAdapter.prototype.getChecked = function (el /** TODO #9100 */) { return el.checked; };\n        BrowserDomAdapter.prototype.setChecked = function (el /** TODO #9100 */, value) { el.checked = value; };\n        BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };\n        BrowserDomAdapter.prototype.createTemplate = function (html /** TODO #9100 */) {\n            var t = document.createElement('template');\n            t.innerHTML = html;\n            return t;\n        };\n        BrowserDomAdapter.prototype.createElement = function (tagName /* TODO #9100 */, doc) {\n            if (doc === void 0) { doc = document; }\n            return doc.createElement(tagName);\n        };\n        BrowserDomAdapter.prototype.createElementNS = function (ns /* TODO #9100 */, tagName /* TODO #9100 */, doc) {\n            if (doc === void 0) { doc = document; }\n            return doc.createElementNS(ns, tagName);\n        };\n        BrowserDomAdapter.prototype.createTextNode = function (text, doc) {\n            if (doc === void 0) { doc = document; }\n            return doc.createTextNode(text);\n        };\n        BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {\n            if (doc === void 0) { doc = document; }\n            var el = doc.createElement('SCRIPT');\n            el.setAttribute(attrName, attrValue);\n            return el;\n        };\n        BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {\n            if (doc === void 0) { doc = document; }\n            var style = doc.createElement('style');\n            this.appendChild(style, this.createTextNode(css));\n            return style;\n        };\n        BrowserDomAdapter.prototype.createShadowRoot = function (el) { return el.createShadowRoot(); };\n        BrowserDomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot; };\n        BrowserDomAdapter.prototype.getHost = function (el) { return el.host; };\n        BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };\n        BrowserDomAdapter.prototype.getElementsByClassName = function (element /** TODO #9100 */, name) {\n            return element.getElementsByClassName(name);\n        };\n        BrowserDomAdapter.prototype.getElementsByTagName = function (element /** TODO #9100 */, name) {\n            return element.getElementsByTagName(name);\n        };\n        BrowserDomAdapter.prototype.classList = function (element /** TODO #9100 */) {\n            return Array.prototype.slice.call(element.classList, 0);\n        };\n        BrowserDomAdapter.prototype.addClass = function (element /** TODO #9100 */, className) { element.classList.add(className); };\n        BrowserDomAdapter.prototype.removeClass = function (element /** TODO #9100 */, className) {\n            element.classList.remove(className);\n        };\n        BrowserDomAdapter.prototype.hasClass = function (element /** TODO #9100 */, className) {\n            return element.classList.contains(className);\n        };\n        BrowserDomAdapter.prototype.setStyle = function (element /** TODO #9100 */, styleName, styleValue) {\n            element.style[styleName] = styleValue;\n        };\n        BrowserDomAdapter.prototype.removeStyle = function (element /** TODO #9100 */, stylename) {\n            element.style[stylename] = null;\n        };\n        BrowserDomAdapter.prototype.getStyle = function (element /** TODO #9100 */, stylename) {\n            return element.style[stylename];\n        };\n        BrowserDomAdapter.prototype.hasStyle = function (element /** TODO #9100 */, styleName, styleValue) {\n            if (styleValue === void 0) { styleValue = null; }\n            var value = this.getStyle(element, styleName) || '';\n            return styleValue ? value == styleValue : value.length > 0;\n        };\n        BrowserDomAdapter.prototype.tagName = function (element /** TODO #9100 */) { return element.tagName; };\n        BrowserDomAdapter.prototype.attributeMap = function (element /** TODO #9100 */) {\n            var res = new Map();\n            var elAttrs = element.attributes;\n            for (var i = 0; i < elAttrs.length; i++) {\n                var attrib = elAttrs[i];\n                res.set(attrib.name, attrib.value);\n            }\n            return res;\n        };\n        BrowserDomAdapter.prototype.hasAttribute = function (element /** TODO #9100 */, attribute) {\n            return element.hasAttribute(attribute);\n        };\n        BrowserDomAdapter.prototype.hasAttributeNS = function (element /** TODO #9100 */, ns, attribute) {\n            return element.hasAttributeNS(ns, attribute);\n        };\n        BrowserDomAdapter.prototype.getAttribute = function (element /** TODO #9100 */, attribute) {\n            return element.getAttribute(attribute);\n        };\n        BrowserDomAdapter.prototype.getAttributeNS = function (element /** TODO #9100 */, ns, name) {\n            return element.getAttributeNS(ns, name);\n        };\n        BrowserDomAdapter.prototype.setAttribute = function (element /** TODO #9100 */, name, value) {\n            element.setAttribute(name, value);\n        };\n        BrowserDomAdapter.prototype.setAttributeNS = function (element /** TODO #9100 */, ns, name, value) {\n            element.setAttributeNS(ns, name, value);\n        };\n        BrowserDomAdapter.prototype.removeAttribute = function (element /** TODO #9100 */, attribute) {\n            element.removeAttribute(attribute);\n        };\n        BrowserDomAdapter.prototype.removeAttributeNS = function (element /** TODO #9100 */, ns, name) {\n            element.removeAttributeNS(ns, name);\n        };\n        BrowserDomAdapter.prototype.templateAwareRoot = function (el /** TODO #9100 */) {\n            return this.isTemplateElement(el) ? this.content(el) : el;\n        };\n        BrowserDomAdapter.prototype.createHtmlDocument = function () {\n            return document.implementation.createHTMLDocument('fakeTitle');\n        };\n        BrowserDomAdapter.prototype.defaultDoc = function () { return document; };\n        BrowserDomAdapter.prototype.getBoundingClientRect = function (el /** TODO #9100 */) {\n            try {\n                return el.getBoundingClientRect();\n            }\n            catch (e) {\n                return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };\n            }\n        };\n        BrowserDomAdapter.prototype.getTitle = function () { return document.title; };\n        BrowserDomAdapter.prototype.setTitle = function (newTitle) { document.title = newTitle || ''; };\n        BrowserDomAdapter.prototype.elementMatches = function (n /** TODO #9100 */, selector) {\n            var matches = false;\n            if (n instanceof HTMLElement) {\n                if (n.matches) {\n                    matches = n.matches(selector);\n                }\n                else if (n.msMatchesSelector) {\n                    matches = n.msMatchesSelector(selector);\n                }\n                else if (n.webkitMatchesSelector) {\n                    matches = n.webkitMatchesSelector(selector);\n                }\n            }\n            return matches;\n        };\n        BrowserDomAdapter.prototype.isTemplateElement = function (el) {\n            return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';\n        };\n        BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };\n        BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };\n        BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };\n        BrowserDomAdapter.prototype.hasShadowRoot = function (node /** TODO #9100 */) {\n            return isPresent(node.shadowRoot) && node instanceof HTMLElement;\n        };\n        BrowserDomAdapter.prototype.isShadowRoot = function (node /** TODO #9100 */) { return node instanceof DocumentFragment; };\n        BrowserDomAdapter.prototype.importIntoDoc = function (node) {\n            var toImport = node;\n            if (this.isTemplateElement(node)) {\n                toImport = this.content(node);\n            }\n            return document.importNode(toImport, true);\n        };\n        BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };\n        BrowserDomAdapter.prototype.getHref = function (el) { return el.href; };\n        BrowserDomAdapter.prototype.getEventKey = function (event /** TODO #9100 */) {\n            var key = event.key;\n            if (isBlank(key)) {\n                key = event.keyIdentifier;\n                // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n                // Safari\n                // cf\n                // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n                if (isBlank(key)) {\n                    return 'Unidentified';\n                }\n                if (key.startsWith('U+')) {\n                    key = String.fromCharCode(parseInt(key.substring(2), 16));\n                    if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n                        // There is a bug in Chrome for numeric keypad keys:\n                        // https://code.google.com/p/chromium/issues/detail?id=155654\n                        // 1, 2, 3 ... are reported as A, B, C ...\n                        key = _chromeNumKeyPadMap[key];\n                    }\n                }\n            }\n            if (_keyMap.hasOwnProperty(key)) {\n                key = _keyMap[key];\n            }\n            return key;\n        };\n        BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {\n            if (target == 'window') {\n                return window;\n            }\n            else if (target == 'document') {\n                return document;\n            }\n            else if (target == 'body') {\n                return document.body;\n            }\n        };\n        BrowserDomAdapter.prototype.getHistory = function () { return window.history; };\n        BrowserDomAdapter.prototype.getLocation = function () { return window.location; };\n        BrowserDomAdapter.prototype.getBaseHref = function () {\n            var href = getBaseElementHref();\n            if (isBlank(href)) {\n                return null;\n            }\n            return relativePath(href);\n        };\n        BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };\n        BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };\n        BrowserDomAdapter.prototype.setData = function (element /** TODO #9100 */, name, value) {\n            this.setAttribute(element, 'data-' + name, value);\n        };\n        BrowserDomAdapter.prototype.getData = function (element /** TODO #9100 */, name) {\n            return this.getAttribute(element, 'data-' + name);\n        };\n        BrowserDomAdapter.prototype.getComputedStyle = function (element /** TODO #9100 */) { return getComputedStyle(element); };\n        // TODO(tbosch): move this into a separate environment class once we have it\n        BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { setValueOnPath(global$1, path, value); };\n        BrowserDomAdapter.prototype.supportsWebAnimation = function () { return isFunction(Element.prototype['animate']); };\n        BrowserDomAdapter.prototype.performanceNow = function () {\n            // performance.now() is not available in all browsers, see\n            // http://caniuse.com/#search=performance.now\n            if (isPresent(window.performance) && isPresent(window.performance.now)) {\n                return window.performance.now();\n            }\n            else {\n                return DateWrapper.toMillis(DateWrapper.now());\n            }\n        };\n        BrowserDomAdapter.prototype.supportsCookies = function () { return true; };\n        BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };\n        BrowserDomAdapter.prototype.setCookie = function (name, value) {\n            // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n            // not clear other cookies.\n            document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n        };\n        return BrowserDomAdapter;\n    }(GenericBrowserDomAdapter));\n    var baseElement = null;\n    function getBaseElementHref() {\n        if (isBlank(baseElement)) {\n            baseElement = document.querySelector('base');\n            if (isBlank(baseElement)) {\n                return null;\n            }\n        }\n        return baseElement.getAttribute('href');\n    }\n    // based on urlUtils.js in AngularJS 1\n    var urlParsingNode = null;\n    function relativePath(url /** TODO #9100 */) {\n        if (isBlank(urlParsingNode)) {\n            urlParsingNode = document.createElement('a');\n        }\n        urlParsingNode.setAttribute('href', url);\n        return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname;\n    }\n    function parseCookieValue(cookieStr, name) {\n        name = encodeURIComponent(name);\n        for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {\n            var cookie = _a[_i];\n            var eqIndex = cookie.indexOf('=');\n            var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];\n            if (cookieName.trim() === name) {\n                return decodeURIComponent(cookieValue);\n            }\n        }\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function supportsState() {\n        return !!window.history.pushState;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n     * This class should not be used directly by an application developer. Instead, use\n     * {@link Location}.\n     */\n    var BrowserPlatformLocation = (function (_super) {\n        __extends$2(BrowserPlatformLocation, _super);\n        function BrowserPlatformLocation() {\n            _super.call(this);\n            this._init();\n        }\n        // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n        /** @internal */\n        BrowserPlatformLocation.prototype._init = function () {\n            this._location = getDOM().getLocation();\n            this._history = getDOM().getHistory();\n        };\n        Object.defineProperty(BrowserPlatformLocation.prototype, \"location\", {\n            get: function () { return this._location; },\n            enumerable: true,\n            configurable: true\n        });\n        BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(); };\n        BrowserPlatformLocation.prototype.onPopState = function (fn) {\n            getDOM().getGlobalEventTarget('window').addEventListener('popstate', fn, false);\n        };\n        BrowserPlatformLocation.prototype.onHashChange = function (fn) {\n            getDOM().getGlobalEventTarget('window').addEventListener('hashchange', fn, false);\n        };\n        Object.defineProperty(BrowserPlatformLocation.prototype, \"pathname\", {\n            get: function () { return this._location.pathname; },\n            set: function (newPath) { this._location.pathname = newPath; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BrowserPlatformLocation.prototype, \"search\", {\n            get: function () { return this._location.search; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BrowserPlatformLocation.prototype, \"hash\", {\n            get: function () { return this._location.hash; },\n            enumerable: true,\n            configurable: true\n        });\n        BrowserPlatformLocation.prototype.pushState = function (state, title, url) {\n            if (supportsState()) {\n                this._history.pushState(state, title, url);\n            }\n            else {\n                this._location.hash = url;\n            }\n        };\n        BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {\n            if (supportsState()) {\n                this._history.replaceState(state, title, url);\n            }\n            else {\n                this._location.hash = url;\n            }\n        };\n        BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };\n        BrowserPlatformLocation.prototype.back = function () { this._history.back(); };\n        BrowserPlatformLocation.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        BrowserPlatformLocation.ctorParameters = [];\n        return BrowserPlatformLocation;\n    }(_angular_common.PlatformLocation));\n\n    var BrowserGetTestability = (function () {\n        function BrowserGetTestability() {\n        }\n        BrowserGetTestability.init = function () { _angular_core.setTestabilityGetter(new BrowserGetTestability()); };\n        BrowserGetTestability.prototype.addToWindow = function (registry) {\n            global$1.getAngularTestability = function (elem, findInAncestors) {\n                if (findInAncestors === void 0) { findInAncestors = true; }\n                var testability = registry.findTestabilityInTree(elem, findInAncestors);\n                if (testability == null) {\n                    throw new Error('Could not find testability for element.');\n                }\n                return testability;\n            };\n            global$1.getAllAngularTestabilities = function () { return registry.getAllTestabilities(); };\n            global$1.getAllAngularRootElements = function () { return registry.getAllRootElements(); };\n            var whenAllStable = function (callback /** TODO #9100 */) {\n                var testabilities = global$1.getAllAngularTestabilities();\n                var count = testabilities.length;\n                var didWork = false;\n                var decrement = function (didWork_ /** TODO #9100 */) {\n                    didWork = didWork || didWork_;\n                    count--;\n                    if (count == 0) {\n                        callback(didWork);\n                    }\n                };\n                testabilities.forEach(function (testability /** TODO #9100 */) {\n                    testability.whenStable(decrement);\n                });\n            };\n            if (!global$1['frameworkStabilizers']) {\n                global$1['frameworkStabilizers'] = ListWrapper.createGrowableSize(0);\n            }\n            global$1['frameworkStabilizers'].push(whenAllStable);\n        };\n        BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n            if (elem == null) {\n                return null;\n            }\n            var t = registry.getTestability(elem);\n            if (isPresent(t)) {\n                return t;\n            }\n            else if (!findInAncestors) {\n                return null;\n            }\n            if (getDOM().isShadowRoot(elem)) {\n                return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n            }\n            return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n        };\n        return BrowserGetTestability;\n    }());\n\n    /**\n     * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n     *\n     * Note: Document might not be available in the Application Context when Application and Rendering\n     * Contexts are not the same (e.g. when running the application into a Web Worker).\n     *\n     * @stable\n     */\n    var DOCUMENT = new _angular_core.OpaqueToken('DocumentToken');\n\n    /**\n     * @stable\n     */\n    var EVENT_MANAGER_PLUGINS = new _angular_core.OpaqueToken('EventManagerPlugins');\n    /**\n     * @stable\n     */\n    var EventManager = (function () {\n        function EventManager(plugins, _zone) {\n            var _this = this;\n            this._zone = _zone;\n            plugins.forEach(function (p) { return p.manager = _this; });\n            this._plugins = ListWrapper.reversed(plugins);\n        }\n        EventManager.prototype.addEventListener = function (element, eventName, handler) {\n            var plugin = this._findPluginFor(eventName);\n            return plugin.addEventListener(element, eventName, handler);\n        };\n        EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {\n            var plugin = this._findPluginFor(eventName);\n            return plugin.addGlobalEventListener(target, eventName, handler);\n        };\n        EventManager.prototype.getZone = function () { return this._zone; };\n        /** @internal */\n        EventManager.prototype._findPluginFor = function (eventName) {\n            var plugins = this._plugins;\n            for (var i = 0; i < plugins.length; i++) {\n                var plugin = plugins[i];\n                if (plugin.supports(eventName)) {\n                    return plugin;\n                }\n            }\n            throw new Error(\"No event manager plugin found for event \" + eventName);\n        };\n        EventManager.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        EventManager.ctorParameters = [\n            { type: Array, decorators: [{ type: _angular_core.Inject, args: [EVENT_MANAGER_PLUGINS,] },] },\n            { type: _angular_core.NgZone, },\n        ];\n        return EventManager;\n    }());\n    var EventManagerPlugin = (function () {\n        function EventManagerPlugin() {\n        }\n        // That is equivalent to having supporting $event.target\n        EventManagerPlugin.prototype.supports = function (eventName) { return false; };\n        EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) {\n            throw 'not implemented';\n        };\n        EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {\n            throw 'not implemented';\n        };\n        return EventManagerPlugin;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var SharedStylesHost = (function () {\n        function SharedStylesHost() {\n            /** @internal */\n            this._styles = [];\n            /** @internal */\n            this._stylesSet = new Set();\n        }\n        SharedStylesHost.prototype.addStyles = function (styles) {\n            var _this = this;\n            var additions = [];\n            styles.forEach(function (style) {\n                if (!_this._stylesSet.has(style)) {\n                    _this._stylesSet.add(style);\n                    _this._styles.push(style);\n                    additions.push(style);\n                }\n            });\n            this.onStylesAdded(additions);\n        };\n        SharedStylesHost.prototype.onStylesAdded = function (additions) { };\n        SharedStylesHost.prototype.getAllStyles = function () { return this._styles; };\n        SharedStylesHost.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        SharedStylesHost.ctorParameters = [];\n        return SharedStylesHost;\n    }());\n    var DomSharedStylesHost = (function (_super) {\n        __extends$4(DomSharedStylesHost, _super);\n        function DomSharedStylesHost(doc) {\n            _super.call(this);\n            this._hostNodes = new Set();\n            this._hostNodes.add(doc.head);\n        }\n        /** @internal */\n        DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {\n            for (var i = 0; i < styles.length; i++) {\n                var style = styles[i];\n                getDOM().appendChild(host, getDOM().createStyleElement(style));\n            }\n        };\n        DomSharedStylesHost.prototype.addHost = function (hostNode) {\n            this._addStylesToHost(this._styles, hostNode);\n            this._hostNodes.add(hostNode);\n        };\n        DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };\n        DomSharedStylesHost.prototype.onStylesAdded = function (additions) {\n            var _this = this;\n            this._hostNodes.forEach(function (hostNode) { _this._addStylesToHost(additions, hostNode); });\n        };\n        DomSharedStylesHost.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        DomSharedStylesHost.ctorParameters = [\n            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },\n        ];\n        return DomSharedStylesHost;\n    }(SharedStylesHost));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var NAMESPACE_URIS = {\n        'xlink': 'http://www.w3.org/1999/xlink',\n        'svg': 'http://www.w3.org/2000/svg',\n        'xhtml': 'http://www.w3.org/1999/xhtml'\n    };\n    var TEMPLATE_COMMENT_TEXT = 'template bindings={}';\n    var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;\n    var DomRootRenderer = (function () {\n        function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver) {\n            this.document = document;\n            this.eventManager = eventManager;\n            this.sharedStylesHost = sharedStylesHost;\n            this.animationDriver = animationDriver;\n            this.registeredComponents = new Map();\n        }\n        DomRootRenderer.prototype.renderComponent = function (componentProto) {\n            var renderer = this.registeredComponents.get(componentProto.id);\n            if (isBlank(renderer)) {\n                renderer = new DomRenderer(this, componentProto, this.animationDriver);\n                this.registeredComponents.set(componentProto.id, renderer);\n            }\n            return renderer;\n        };\n        return DomRootRenderer;\n    }());\n    var DomRootRenderer_ = (function (_super) {\n        __extends$3(DomRootRenderer_, _super);\n        function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver) {\n            _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver);\n        }\n        DomRootRenderer_.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        DomRootRenderer_.ctorParameters = [\n            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },\n            { type: EventManager, },\n            { type: DomSharedStylesHost, },\n            { type: AnimationDriver, },\n        ];\n        return DomRootRenderer_;\n    }(DomRootRenderer));\n    var DomRenderer = (function () {\n        function DomRenderer(_rootRenderer, componentProto, _animationDriver) {\n            this._rootRenderer = _rootRenderer;\n            this.componentProto = componentProto;\n            this._animationDriver = _animationDriver;\n            this._styles = _flattenStyles(componentProto.id, componentProto.styles, []);\n            if (componentProto.encapsulation !== _angular_core.ViewEncapsulation.Native) {\n                this._rootRenderer.sharedStylesHost.addStyles(this._styles);\n            }\n            if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Emulated) {\n                this._contentAttr = _shimContentAttribute(componentProto.id);\n                this._hostAttr = _shimHostAttribute(componentProto.id);\n            }\n            else {\n                this._contentAttr = null;\n                this._hostAttr = null;\n            }\n        }\n        DomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {\n            var el;\n            if (isString(selectorOrNode)) {\n                el = getDOM().querySelector(this._rootRenderer.document, selectorOrNode);\n                if (isBlank(el)) {\n                    throw new Error(\"The selector \\\"\" + selectorOrNode + \"\\\" did not match any elements\");\n                }\n            }\n            else {\n                el = selectorOrNode;\n            }\n            getDOM().clearNodes(el);\n            return el;\n        };\n        DomRenderer.prototype.createElement = function (parent, name, debugInfo) {\n            var nsAndName = splitNamespace(name);\n            var el = isPresent(nsAndName[0]) ?\n                getDOM().createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) :\n                getDOM().createElement(nsAndName[1]);\n            if (isPresent(this._contentAttr)) {\n                getDOM().setAttribute(el, this._contentAttr, '');\n            }\n            if (isPresent(parent)) {\n                getDOM().appendChild(parent, el);\n            }\n            return el;\n        };\n        DomRenderer.prototype.createViewRoot = function (hostElement) {\n            var nodesParent;\n            if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native) {\n                nodesParent = getDOM().createShadowRoot(hostElement);\n                this._rootRenderer.sharedStylesHost.addHost(nodesParent);\n                for (var i = 0; i < this._styles.length; i++) {\n                    getDOM().appendChild(nodesParent, getDOM().createStyleElement(this._styles[i]));\n                }\n            }\n            else {\n                if (isPresent(this._hostAttr)) {\n                    getDOM().setAttribute(hostElement, this._hostAttr, '');\n                }\n                nodesParent = hostElement;\n            }\n            return nodesParent;\n        };\n        DomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {\n            var comment = getDOM().createComment(TEMPLATE_COMMENT_TEXT);\n            if (isPresent(parentElement)) {\n                getDOM().appendChild(parentElement, comment);\n            }\n            return comment;\n        };\n        DomRenderer.prototype.createText = function (parentElement, value, debugInfo) {\n            var node = getDOM().createTextNode(value);\n            if (isPresent(parentElement)) {\n                getDOM().appendChild(parentElement, node);\n            }\n            return node;\n        };\n        DomRenderer.prototype.projectNodes = function (parentElement, nodes) {\n            if (isBlank(parentElement))\n                return;\n            appendNodes(parentElement, nodes);\n        };\n        DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) { moveNodesAfterSibling(node, viewRootNodes); };\n        DomRenderer.prototype.detachView = function (viewRootNodes) {\n            for (var i = 0; i < viewRootNodes.length; i++) {\n                getDOM().remove(viewRootNodes[i]);\n            }\n        };\n        DomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {\n            if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native && isPresent(hostElement)) {\n                this._rootRenderer.sharedStylesHost.removeHost(getDOM().getShadowRoot(hostElement));\n            }\n        };\n        DomRenderer.prototype.listen = function (renderElement, name, callback) {\n            return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));\n        };\n        DomRenderer.prototype.listenGlobal = function (target, name, callback) {\n            return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));\n        };\n        DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {\n            getDOM().setProperty(renderElement, propertyName, propertyValue);\n        };\n        DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {\n            var attrNs;\n            var nsAndName = splitNamespace(attributeName);\n            if (isPresent(nsAndName[0])) {\n                attributeName = nsAndName[0] + ':' + nsAndName[1];\n                attrNs = NAMESPACE_URIS[nsAndName[0]];\n            }\n            if (isPresent(attributeValue)) {\n                if (isPresent(attrNs)) {\n                    getDOM().setAttributeNS(renderElement, attrNs, attributeName, attributeValue);\n                }\n                else {\n                    getDOM().setAttribute(renderElement, attributeName, attributeValue);\n                }\n            }\n            else {\n                if (isPresent(attrNs)) {\n                    getDOM().removeAttributeNS(renderElement, attrNs, nsAndName[1]);\n                }\n                else {\n                    getDOM().removeAttribute(renderElement, attributeName);\n                }\n            }\n        };\n        DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {\n            var dashCasedPropertyName = camelCaseToDashCase(propertyName);\n            if (getDOM().isCommentNode(renderElement)) {\n                var existingBindings = StringWrapper.replaceAll(getDOM().getText(renderElement), /\\n/g, '')\n                    .match(TEMPLATE_BINDINGS_EXP);\n                var parsedBindings = Json.parse(existingBindings[1]);\n                parsedBindings[dashCasedPropertyName] = propertyValue;\n                getDOM().setText(renderElement, StringWrapper.replace(TEMPLATE_COMMENT_TEXT, '{}', Json.stringify(parsedBindings)));\n            }\n            else {\n                this.setElementAttribute(renderElement, propertyName, propertyValue);\n            }\n        };\n        DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {\n            if (isAdd) {\n                getDOM().addClass(renderElement, className);\n            }\n            else {\n                getDOM().removeClass(renderElement, className);\n            }\n        };\n        DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {\n            if (isPresent(styleValue)) {\n                getDOM().setStyle(renderElement, styleName, stringify(styleValue));\n            }\n            else {\n                getDOM().removeStyle(renderElement, styleName);\n            }\n        };\n        DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {\n            getDOM().invoke(renderElement, methodName, args);\n        };\n        DomRenderer.prototype.setText = function (renderNode, text) { getDOM().setText(renderNode, text); };\n        DomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing) {\n            return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing);\n        };\n        return DomRenderer;\n    }());\n    function moveNodesAfterSibling(sibling /** TODO #9100 */, nodes /** TODO #9100 */) {\n        var parent = getDOM().parentElement(sibling);\n        if (nodes.length > 0 && isPresent(parent)) {\n            var nextSibling = getDOM().nextSibling(sibling);\n            if (isPresent(nextSibling)) {\n                for (var i = 0; i < nodes.length; i++) {\n                    getDOM().insertBefore(nextSibling, nodes[i]);\n                }\n            }\n            else {\n                for (var i = 0; i < nodes.length; i++) {\n                    getDOM().appendChild(parent, nodes[i]);\n                }\n            }\n        }\n    }\n    function appendNodes(parent /** TODO #9100 */, nodes /** TODO #9100 */) {\n        for (var i = 0; i < nodes.length; i++) {\n            getDOM().appendChild(parent, nodes[i]);\n        }\n    }\n    function decoratePreventDefault(eventHandler) {\n        return function (event /** TODO #9100 */) {\n            var allowDefaultBehavior = eventHandler(event);\n            if (allowDefaultBehavior === false) {\n                // TODO(tbosch): move preventDefault into event plugins...\n                getDOM().preventDefault(event);\n            }\n        };\n    }\n    var COMPONENT_REGEX = /%COMP%/g;\n    var COMPONENT_VARIABLE = '%COMP%';\n    var HOST_ATTR = \"_nghost-\" + COMPONENT_VARIABLE;\n    var CONTENT_ATTR = \"_ngcontent-\" + COMPONENT_VARIABLE;\n    function _shimContentAttribute(componentShortId) {\n        return StringWrapper.replaceAll(CONTENT_ATTR, COMPONENT_REGEX, componentShortId);\n    }\n    function _shimHostAttribute(componentShortId) {\n        return StringWrapper.replaceAll(HOST_ATTR, COMPONENT_REGEX, componentShortId);\n    }\n    function _flattenStyles(compId, styles, target) {\n        for (var i = 0; i < styles.length; i++) {\n            var style = styles[i];\n            if (isArray(style)) {\n                _flattenStyles(compId, style, target);\n            }\n            else {\n                style = StringWrapper.replaceAll(style, COMPONENT_REGEX, compId);\n                target.push(style);\n            }\n        }\n        return target;\n    }\n    var NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n    function splitNamespace(name) {\n        if (name[0] != ':') {\n            return [null, name];\n        }\n        var match = name.match(NS_PREFIX_RE);\n        return [match[1], match[2]];\n    }\n\n    var CORE_TOKENS = {\n        'ApplicationRef': _angular_core.ApplicationRef,\n        'NgZone': _angular_core.NgZone\n    };\n    var INSPECT_GLOBAL_NAME = 'ng.probe';\n    var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';\n    /**\n     * Returns a {@link DebugElement} for the given native DOM element, or\n     * null if the given native element does not have an Angular view associated\n     * with it.\n     */\n    function inspectNativeElement(element /** TODO #9100 */) {\n        return _angular_core.getDebugNode(element);\n    }\n    /**\n     * @experimental\n     */\n    var NgProbeToken = (function () {\n        function NgProbeToken(name, token) {\n            this.name = name;\n            this.token = token;\n        }\n        return NgProbeToken;\n    }());\n    function _createConditionalRootRenderer(rootRenderer /** TODO #9100 */, extraTokens) {\n        if (_angular_core.isDevMode()) {\n            return _createRootRenderer(rootRenderer, extraTokens);\n        }\n        return rootRenderer;\n    }\n    function _createRootRenderer(rootRenderer /** TODO #9100 */, extraTokens) {\n        getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n        getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));\n        return new DebugDomRootRenderer(rootRenderer);\n    }\n    function _ngProbeTokensToMap(tokens) {\n        return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});\n    }\n    /**\n     * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n     */\n    var ELEMENT_PROBE_PROVIDERS = [{\n            provide: _angular_core.RootRenderer,\n            useFactory: _createConditionalRootRenderer,\n            deps: [DomRootRenderer, [NgProbeToken, new _angular_core.Optional()]]\n        }];\n    var ELEMENT_PROBE_PROVIDERS_PROD_MODE = [{\n            provide: _angular_core.RootRenderer,\n            useFactory: _createRootRenderer,\n            deps: [DomRootRenderer, [NgProbeToken, new _angular_core.Optional()]]\n        }];\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var DomEventsPlugin = (function (_super) {\n        __extends$5(DomEventsPlugin, _super);\n        function DomEventsPlugin() {\n            _super.apply(this, arguments);\n        }\n        // This plugin should come last in the list of plugins, because it accepts all\n        // events.\n        DomEventsPlugin.prototype.supports = function (eventName) { return true; };\n        DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {\n            var zone = this.manager.getZone();\n            var outsideHandler = function (event /** TODO #9100 */) { return zone.runGuarded(function () { return handler(event); }); };\n            return this.manager.getZone().runOutsideAngular(function () { return getDOM().onAndCancel(element, eventName, outsideHandler); });\n        };\n        DomEventsPlugin.prototype.addGlobalEventListener = function (target, eventName, handler) {\n            var element = getDOM().getGlobalEventTarget(target);\n            var zone = this.manager.getZone();\n            var outsideHandler = function (event /** TODO #9100 */) { return zone.runGuarded(function () { return handler(event); }); };\n            return this.manager.getZone().runOutsideAngular(function () { return getDOM().onAndCancel(element, eventName, outsideHandler); });\n        };\n        DomEventsPlugin.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        DomEventsPlugin.ctorParameters = [];\n        return DomEventsPlugin;\n    }(EventManagerPlugin));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$7 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var _eventNames = {\n        // pan\n        'pan': true,\n        'panstart': true,\n        'panmove': true,\n        'panend': true,\n        'pancancel': true,\n        'panleft': true,\n        'panright': true,\n        'panup': true,\n        'pandown': true,\n        // pinch\n        'pinch': true,\n        'pinchstart': true,\n        'pinchmove': true,\n        'pinchend': true,\n        'pinchcancel': true,\n        'pinchin': true,\n        'pinchout': true,\n        // press\n        'press': true,\n        'pressup': true,\n        // rotate\n        'rotate': true,\n        'rotatestart': true,\n        'rotatemove': true,\n        'rotateend': true,\n        'rotatecancel': true,\n        // swipe\n        'swipe': true,\n        'swipeleft': true,\n        'swiperight': true,\n        'swipeup': true,\n        'swipedown': true,\n        // tap\n        'tap': true,\n    };\n    var HammerGesturesPluginCommon = (function (_super) {\n        __extends$7(HammerGesturesPluginCommon, _super);\n        function HammerGesturesPluginCommon() {\n            _super.call(this);\n        }\n        HammerGesturesPluginCommon.prototype.supports = function (eventName) {\n            eventName = eventName.toLowerCase();\n            return StringMapWrapper.contains(_eventNames, eventName);\n        };\n        return HammerGesturesPluginCommon;\n    }(EventManagerPlugin));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$6 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * A DI token that you can use to provide{@link HammerGestureConfig} to Angular. Use it to configure\n     * Hammer gestures.\n     *\n     * @experimental\n     */\n    var HAMMER_GESTURE_CONFIG = new _angular_core.OpaqueToken('HammerGestureConfig');\n    /**\n     * @experimental\n     */\n    var HammerGestureConfig = (function () {\n        function HammerGestureConfig() {\n            this.events = [];\n            this.overrides = {};\n        }\n        HammerGestureConfig.prototype.buildHammer = function (element) {\n            var mc = new Hammer(element);\n            mc.get('pinch').set({ enable: true });\n            mc.get('rotate').set({ enable: true });\n            for (var eventName in this.overrides) {\n                mc.get(eventName).set(this.overrides[eventName]);\n            }\n            return mc;\n        };\n        HammerGestureConfig.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        HammerGestureConfig.ctorParameters = [];\n        return HammerGestureConfig;\n    }());\n    var HammerGesturesPlugin = (function (_super) {\n        __extends$6(HammerGesturesPlugin, _super);\n        function HammerGesturesPlugin(_config) {\n            _super.call(this);\n            this._config = _config;\n        }\n        HammerGesturesPlugin.prototype.supports = function (eventName) {\n            if (!_super.prototype.supports.call(this, eventName) && !this.isCustomEvent(eventName))\n                return false;\n            if (!isPresent(window['Hammer'])) {\n                throw new Error(\"Hammer.js is not loaded, can not bind \" + eventName + \" event\");\n            }\n            return true;\n        };\n        HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {\n            var _this = this;\n            var zone = this.manager.getZone();\n            eventName = eventName.toLowerCase();\n            return zone.runOutsideAngular(function () {\n                // Creating the manager bind events, must be done outside of angular\n                var mc = _this._config.buildHammer(element);\n                var callback = function (eventObj /** TODO #???? */) {\n                    zone.runGuarded(function () { handler(eventObj); });\n                };\n                mc.on(eventName, callback);\n                return function () { mc.off(eventName, callback); };\n            });\n        };\n        HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };\n        HammerGesturesPlugin.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        HammerGesturesPlugin.ctorParameters = [\n            { type: HammerGestureConfig, decorators: [{ type: _angular_core.Inject, args: [HAMMER_GESTURE_CONFIG,] },] },\n        ];\n        return HammerGesturesPlugin;\n    }(HammerGesturesPluginCommon));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$8 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var modifierKeys = ['alt', 'control', 'meta', 'shift'];\n    var modifierKeyGetters = {\n        'alt': function (event) { return event.altKey; },\n        'control': function (event) { return event.ctrlKey; },\n        'meta': function (event) { return event.metaKey; },\n        'shift': function (event) { return event.shiftKey; }\n    };\n    /**\n     * @experimental\n     */\n    var KeyEventsPlugin = (function (_super) {\n        __extends$8(KeyEventsPlugin, _super);\n        function KeyEventsPlugin() {\n            _super.call(this);\n        }\n        KeyEventsPlugin.prototype.supports = function (eventName) {\n            return isPresent(KeyEventsPlugin.parseEventName(eventName));\n        };\n        KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {\n            var parsedEvent = KeyEventsPlugin.parseEventName(eventName);\n            var outsideHandler = KeyEventsPlugin.eventCallback(element, StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());\n            return this.manager.getZone().runOutsideAngular(function () {\n                return getDOM().onAndCancel(element, StringMapWrapper.get(parsedEvent, 'domEventName'), outsideHandler);\n            });\n        };\n        KeyEventsPlugin.parseEventName = function (eventName) {\n            var parts = eventName.toLowerCase().split('.');\n            var domEventName = parts.shift();\n            if ((parts.length === 0) ||\n                !(StringWrapper.equals(domEventName, 'keydown') ||\n                    StringWrapper.equals(domEventName, 'keyup'))) {\n                return null;\n            }\n            var key = KeyEventsPlugin._normalizeKey(parts.pop());\n            var fullKey = '';\n            modifierKeys.forEach(function (modifierName) {\n                if (ListWrapper.contains(parts, modifierName)) {\n                    ListWrapper.remove(parts, modifierName);\n                    fullKey += modifierName + '.';\n                }\n            });\n            fullKey += key;\n            if (parts.length != 0 || key.length === 0) {\n                // returning null instead of throwing to let another plugin process the event\n                return null;\n            }\n            var result = StringMapWrapper.create();\n            StringMapWrapper.set(result, 'domEventName', domEventName);\n            StringMapWrapper.set(result, 'fullKey', fullKey);\n            return result;\n        };\n        KeyEventsPlugin.getEventFullKey = function (event) {\n            var fullKey = '';\n            var key = getDOM().getEventKey(event);\n            key = key.toLowerCase();\n            if (StringWrapper.equals(key, ' ')) {\n                key = 'space'; // for readability\n            }\n            else if (StringWrapper.equals(key, '.')) {\n                key = 'dot'; // because '.' is used as a separator in event names\n            }\n            modifierKeys.forEach(function (modifierName) {\n                if (modifierName != key) {\n                    var modifierGetter = StringMapWrapper.get(modifierKeyGetters, modifierName);\n                    if (modifierGetter(event)) {\n                        fullKey += modifierName + '.';\n                    }\n                }\n            });\n            fullKey += key;\n            return fullKey;\n        };\n        KeyEventsPlugin.eventCallback = function (element, fullKey, handler, zone) {\n            return function (event /** TODO #9100 */) {\n                if (StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey)) {\n                    zone.runGuarded(function () { return handler(event); });\n                }\n            };\n        };\n        /** @internal */\n        KeyEventsPlugin._normalizeKey = function (keyName) {\n            // TODO: switch to a StringMap if the mapping grows too much\n            switch (keyName) {\n                case 'esc':\n                    return 'escape';\n                default:\n                    return keyName;\n            }\n        };\n        KeyEventsPlugin.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        KeyEventsPlugin.ctorParameters = [];\n        return KeyEventsPlugin;\n    }(EventManagerPlugin));\n\n    /**\n     * A pattern that recognizes a commonly useful subset of URLs that are safe.\n     *\n     * This regular expression matches a subset of URLs that will not cause script\n     * execution if used in URL context within a HTML document. Specifically, this\n     * regular expression matches if (comment from here on and regex copied from\n     * Soy's EscapingConventions):\n     * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n     * (2) or no protocol.  A protocol must be followed by a colon. The below\n     *     allows that by allowing colons only after one of the characters [/?#].\n     *     A colon after a hash (#) must be in the fragment.\n     *     Otherwise, a colon after a (?) must be in a query.\n     *     Otherwise, a colon after a single solidus (/) must be in a path.\n     *     Otherwise, a colon after a double solidus (//) must be in the authority\n     *     (before port).\n     *\n     * The pattern disallows &, used in HTML entity declarations before\n     * one of the characters in [/?#]. This disallows HTML entities used in the\n     * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n     * It also disallows HTML entities in the first path part of a relative path,\n     * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n     * that. More importantly, it disallows masking of a colon,\n     * e.g. \"javascript&#58;...\".\n     *\n     * This regular expression was taken from the Closure sanitization library.\n     */\n    var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n    /** A pattern that matches safe data URLs. Only matches image, video and audio types. */\n    var DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n    function sanitizeUrl(url) {\n        url = String(url);\n        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n            return url;\n        if (_angular_core.isDevMode()) {\n            getDOM().log(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\n        }\n        return 'unsafe:' + url;\n    }\n    function sanitizeSrcset(srcset) {\n        srcset = String(srcset);\n        return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');\n    }\n\n    /** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */\n    var inertElement = null;\n    /** Lazily initialized to make sure the DOM adapter gets set before use. */\n    var DOM = null;\n    /** Returns an HTML element that is guaranteed to not execute code when creating elements in it. */\n    function getInertElement() {\n        if (inertElement)\n            return inertElement;\n        DOM = getDOM();\n        // Prefer using <template> element if supported.\n        var templateEl = DOM.createElement('template');\n        if ('content' in templateEl)\n            return templateEl;\n        var doc = DOM.createHtmlDocument();\n        inertElement = DOM.querySelector(doc, 'body');\n        if (inertElement == null) {\n            // usually there should be only one body element in the document, but IE doesn't have any, so we\n            // need to create one.\n            var html = DOM.createElement('html', doc);\n            inertElement = DOM.createElement('body', doc);\n            DOM.appendChild(html, inertElement);\n            DOM.appendChild(doc, html);\n        }\n        return inertElement;\n    }\n    function tagSet(tags) {\n        var res = {};\n        for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {\n            var t = _a[_i];\n            res[t] = true;\n        }\n        return res;\n    }\n    function merge() {\n        var sets = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sets[_i - 0] = arguments[_i];\n        }\n        var res = {};\n        for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {\n            var s = sets_1[_a];\n            for (var v in s) {\n                if (s.hasOwnProperty(v))\n                    res[v] = true;\n            }\n        }\n        return res;\n    }\n    // Good source of info about elements and attributes\n    // http://dev.w3.org/html5/spec/Overview.html#semantics\n    // http://simon.html5.org/html-elements\n    // Safe Void Elements - HTML5\n    // http://dev.w3.org/html5/spec/Overview.html#void-elements\n    var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n    // Elements that you can, intentionally, leave open (and which close themselves)\n    // http://dev.w3.org/html5/spec/Overview.html#optional-tags\n    var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n    var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n    var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n    // Safe Block Elements - HTML5\n    var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n    // Inline Elements - HTML5\n    var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n    var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n    // Attributes that have href and hence need to be sanitized\n    var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n    // Attributes that have special href set hence need to be sanitized\n    var SRCSET_ATTRS = tagSet('srcset');\n    var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n        'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n        'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n        'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n        'valign,value,vspace,width');\n    // NB: This currently conciously doesn't support SVG. SVG sanitization has had several security\n    // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n    // innerHTML is required, SVG attributes should be added here.\n    // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n    // can be sanitized, but they increase security surface area without a legitimate use case, so they\n    // are left out here.\n    var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n    /**\n     * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n     * attributes.\n     */\n    var SanitizingHtmlSerializer = (function () {\n        function SanitizingHtmlSerializer() {\n            // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n            // because characters were re-encoded.\n            this.sanitizedSomething = false;\n            this.buf = [];\n        }\n        SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {\n            // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n            // However this code never accesses properties off of `document` before deleting its contents\n            // again, so it shouldn't be vulnerable to DOM clobbering.\n            var current = el.firstChild;\n            while (current) {\n                if (DOM.isElementNode(current)) {\n                    this.startElement(current);\n                }\n                else if (DOM.isTextNode(current)) {\n                    this.chars(DOM.nodeValue(current));\n                }\n                else {\n                    // Strip non-element, non-text nodes.\n                    this.sanitizedSomething = true;\n                }\n                if (DOM.firstChild(current)) {\n                    current = DOM.firstChild(current);\n                    continue;\n                }\n                while (current) {\n                    // Leaving the element. Walk up and to the right, closing tags as we go.\n                    if (DOM.isElementNode(current)) {\n                        this.endElement(current);\n                    }\n                    if (DOM.nextSibling(current)) {\n                        current = DOM.nextSibling(current);\n                        break;\n                    }\n                    current = DOM.parentElement(current);\n                }\n            }\n            return this.buf.join('');\n        };\n        SanitizingHtmlSerializer.prototype.startElement = function (element) {\n            var _this = this;\n            var tagName = DOM.nodeName(element).toLowerCase();\n            if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                this.sanitizedSomething = true;\n                return;\n            }\n            this.buf.push('<');\n            this.buf.push(tagName);\n            DOM.attributeMap(element).forEach(function (value, attrName) {\n                var lower = attrName.toLowerCase();\n                if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                    _this.sanitizedSomething = true;\n                    return;\n                }\n                // TODO(martinprobst): Special case image URIs for data:image/...\n                if (URI_ATTRS[lower])\n                    value = sanitizeUrl(value);\n                if (SRCSET_ATTRS[lower])\n                    value = sanitizeSrcset(value);\n                _this.buf.push(' ');\n                _this.buf.push(attrName);\n                _this.buf.push('=\"');\n                _this.buf.push(encodeEntities(value));\n                _this.buf.push('\"');\n            });\n            this.buf.push('>');\n        };\n        SanitizingHtmlSerializer.prototype.endElement = function (current) {\n            var tagName = DOM.nodeName(current).toLowerCase();\n            if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n                this.buf.push('</');\n                this.buf.push(tagName);\n                this.buf.push('>');\n            }\n        };\n        SanitizingHtmlSerializer.prototype.chars = function (chars /** TODO #9100 */) { this.buf.push(encodeEntities(chars)); };\n        return SanitizingHtmlSerializer;\n    }());\n    // Regular Expressions for parsing tags and attributes\n    var SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n    // ! to ~ is the ASCII range.\n    var NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n    /**\n     * Escapes all potentially dangerous characters, so that the\n     * resulting string can be safely inserted into attribute or\n     * element text.\n     * @param value\n     * @returns {string} escaped text\n     */\n    function encodeEntities(value) {\n        return value.replace(/&/g, '&amp;')\n            .replace(SURROGATE_PAIR_REGEXP, function (match) {\n            var hi = match.charCodeAt(0);\n            var low = match.charCodeAt(1);\n            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n        })\n            .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n    }\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     */\n    function stripCustomNsAttrs(el) {\n        DOM.attributeMap(el).forEach(function (_, attrName) {\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                DOM.removeAttribute(el, attrName);\n            }\n        });\n        for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {\n            var n = _a[_i];\n            if (DOM.isElementNode(n))\n                stripCustomNsAttrs(n);\n        }\n    }\n    /**\n     * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n     * the DOM in a browser environment.\n     */\n    function sanitizeHtml(unsafeHtmlInput) {\n        try {\n            var containerEl = getInertElement();\n            // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n            var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n            // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n            // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n            var mXSSAttempts = 5;\n            var parsedHtml = unsafeHtml;\n            do {\n                if (mXSSAttempts === 0) {\n                    throw new Error('Failed to sanitize html because the input is unstable');\n                }\n                mXSSAttempts--;\n                unsafeHtml = parsedHtml;\n                DOM.setInnerHTML(containerEl, unsafeHtml);\n                if (DOM.defaultDoc().documentMode) {\n                    // strip custom-namespaced attributes on IE<=11\n                    stripCustomNsAttrs(containerEl);\n                }\n                parsedHtml = DOM.getInnerHTML(containerEl);\n            } while (unsafeHtml !== parsedHtml);\n            var sanitizer = new SanitizingHtmlSerializer();\n            var safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);\n            // Clear out the body element.\n            var parent_1 = DOM.getTemplateContent(containerEl) || containerEl;\n            for (var _i = 0, _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {\n                var child = _a[_i];\n                DOM.removeChild(parent_1, child);\n            }\n            if (_angular_core.isDevMode() && sanitizer.sanitizedSomething) {\n                DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\n            }\n            return safeHtml;\n        }\n        catch (e) {\n            // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n            inertElement = null;\n            throw e;\n        }\n    }\n\n    /**\n     * Regular expression for safe style values.\n     *\n     * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n     *\n     * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n     * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n     * of XSS.\n     *\n     * The function expression checks only for XSS safety, not for CSS validity.\n     *\n     * This regular expression was taken from the Closure sanitization library, and augmented for\n     * transformation values.\n     */\n    var VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n    var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\n    var COLOR_FNS = '(?:rgb|hsl)a?';\n    var FN_ARGS = '\\\\([-0-9.%, a-zA-Z]+\\\\)';\n    var SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \")\" + FN_ARGS + \")$\", 'g');\n    /**\n     * Matches a `url(...)` value with an arbitrary argument as long as it does\n     * not contain parentheses.\n     *\n     * The URL value still needs to be sanitized separately.\n     *\n     * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n     * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n     * by observing whether scroll bars are displayed, or character ranges used by a font face\n     * definition.\n     *\n     * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n     * binding a URL value without further cooperation from the page will cause an information leak, and\n     * if so, it is just a leak, not a full blown XSS vulnerability.\n     *\n     * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n     * code is permissive and allows URLs that sanitize otherwise.\n     */\n    var URL_RE = /^url\\(([^)]+)\\)$/;\n    /**\n     * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n     * that neither escape (\\) nor any other character that could result in\n     * breaking out of a string parsing context are allowed;\n     * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n     *\n     * This code was taken from the Closure sanitization library.\n     */\n    function hasBalancedQuotes(value) {\n        var outsideSingle = true;\n        var outsideDouble = true;\n        for (var i = 0; i < value.length; i++) {\n            var c = value.charAt(i);\n            if (c === '\\'' && outsideDouble) {\n                outsideSingle = !outsideSingle;\n            }\n            else if (c === '\"' && outsideSingle) {\n                outsideDouble = !outsideDouble;\n            }\n        }\n        return outsideSingle && outsideDouble;\n    }\n    /**\n     * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n     * value) and returns a value that is safe to use in a browser environment.\n     */\n    function sanitizeStyle(value) {\n        value = String(value).trim(); // Make sure it's actually a string.\n        if (!value)\n            return '';\n        // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n        // reasoning behind this.\n        var urlMatch = value.match(URL_RE);\n        if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n            value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n            return value; // Safe style values.\n        }\n        if (_angular_core.isDevMode()) {\n            getDOM().log(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\n        }\n        return 'unsafe';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$9 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n     * values to be safe to use in the different DOM contexts.\n     *\n     * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n     * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n     * the website.\n     *\n     * In specific situations, it might be necessary to disable sanitization, for example if the\n     * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n     * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n     * methods, and then binding to that value from the template.\n     *\n     * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n     * Cross Site Scripting (XSS) security bug!\n     *\n     * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n     * close as possible to the source of the value, to make it easy to verify no security bug is\n     * created by its use.\n     *\n     * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n     * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n     * code. The sanitizer leaves safe values intact.\n     *\n     * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n     * sanitization for the value passed in. Carefully check and audit all values and code paths going\n     * into this call. Make sure any user data is appropriately escaped for this security context.\n     * For more detail, see the [Security Guide](http://g.co/ng/security).\n     *\n     * @stable\n     */\n    var DomSanitizer = (function () {\n        function DomSanitizer() {\n        }\n        return DomSanitizer;\n    }());\n    var DomSanitizerImpl = (function (_super) {\n        __extends$9(DomSanitizerImpl, _super);\n        function DomSanitizerImpl() {\n            _super.apply(this, arguments);\n        }\n        DomSanitizerImpl.prototype.sanitize = function (ctx, value) {\n            if (value == null)\n                return null;\n            switch (ctx) {\n                case _angular_core.SecurityContext.NONE:\n                    return value;\n                case _angular_core.SecurityContext.HTML:\n                    if (value instanceof SafeHtmlImpl)\n                        return value.changingThisBreaksApplicationSecurity;\n                    this.checkNotSafeValue(value, 'HTML');\n                    return sanitizeHtml(String(value));\n                case _angular_core.SecurityContext.STYLE:\n                    if (value instanceof SafeStyleImpl)\n                        return value.changingThisBreaksApplicationSecurity;\n                    this.checkNotSafeValue(value, 'Style');\n                    return sanitizeStyle(value);\n                case _angular_core.SecurityContext.SCRIPT:\n                    if (value instanceof SafeScriptImpl)\n                        return value.changingThisBreaksApplicationSecurity;\n                    this.checkNotSafeValue(value, 'Script');\n                    throw new Error('unsafe value used in a script context');\n                case _angular_core.SecurityContext.URL:\n                    if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n                        // Allow resource URLs in URL contexts, they are strictly more trusted.\n                        return value.changingThisBreaksApplicationSecurity;\n                    }\n                    this.checkNotSafeValue(value, 'URL');\n                    return sanitizeUrl(String(value));\n                case _angular_core.SecurityContext.RESOURCE_URL:\n                    if (value instanceof SafeResourceUrlImpl) {\n                        return value.changingThisBreaksApplicationSecurity;\n                    }\n                    this.checkNotSafeValue(value, 'ResourceURL');\n                    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n                default:\n                    throw new Error(\"Unexpected SecurityContext \" + ctx + \" (see http://g.co/ng/security#xss)\");\n            }\n        };\n        DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {\n            if (value instanceof SafeValueImpl) {\n                throw new Error((\"Required a safe \" + expectedType + \", got a \" + value.getTypeName() + \" \") +\n                    \"(see http://g.co/ng/security#xss)\");\n            }\n        };\n        DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };\n        DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };\n        DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };\n        DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };\n        DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {\n            return new SafeResourceUrlImpl(value);\n        };\n        DomSanitizerImpl.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        DomSanitizerImpl.ctorParameters = [];\n        return DomSanitizerImpl;\n    }(DomSanitizer));\n    var SafeValueImpl = (function () {\n        function SafeValueImpl(changingThisBreaksApplicationSecurity) {\n            this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n            // empty\n        }\n        SafeValueImpl.prototype.toString = function () {\n            return (\"SafeValue must use [property]=binding: \" + this.changingThisBreaksApplicationSecurity) +\n                \" (see http://g.co/ng/security#xss)\";\n        };\n        return SafeValueImpl;\n    }());\n    var SafeHtmlImpl = (function (_super) {\n        __extends$9(SafeHtmlImpl, _super);\n        function SafeHtmlImpl() {\n            _super.apply(this, arguments);\n        }\n        SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };\n        return SafeHtmlImpl;\n    }(SafeValueImpl));\n    var SafeStyleImpl = (function (_super) {\n        __extends$9(SafeStyleImpl, _super);\n        function SafeStyleImpl() {\n            _super.apply(this, arguments);\n        }\n        SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };\n        return SafeStyleImpl;\n    }(SafeValueImpl));\n    var SafeScriptImpl = (function (_super) {\n        __extends$9(SafeScriptImpl, _super);\n        function SafeScriptImpl() {\n            _super.apply(this, arguments);\n        }\n        SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };\n        return SafeScriptImpl;\n    }(SafeValueImpl));\n    var SafeUrlImpl = (function (_super) {\n        __extends$9(SafeUrlImpl, _super);\n        function SafeUrlImpl() {\n            _super.apply(this, arguments);\n        }\n        SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };\n        return SafeUrlImpl;\n    }(SafeValueImpl));\n    var SafeResourceUrlImpl = (function (_super) {\n        __extends$9(SafeResourceUrlImpl, _super);\n        function SafeResourceUrlImpl() {\n            _super.apply(this, arguments);\n        }\n        SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };\n        return SafeResourceUrlImpl;\n    }(SafeValueImpl));\n\n    var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [\n        { provide: _angular_core.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },\n        { provide: _angular_common.PlatformLocation, useClass: BrowserPlatformLocation }\n    ];\n    /**\n     * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n     * Attacker-controlled data introduced by an unsanitized provider could expose your\n     * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n     * @experimental\n     */\n    var BROWSER_SANITIZATION_PROVIDERS = [\n        { provide: _angular_core.Sanitizer, useExisting: DomSanitizer },\n        { provide: DomSanitizer, useClass: DomSanitizerImpl },\n    ];\n    /**\n     * @stable\n     */\n    var platformBrowser = _angular_core.createPlatformFactory(_angular_core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n    function initDomAdapter() {\n        BrowserDomAdapter.makeCurrent();\n        BrowserGetTestability.init();\n    }\n    function errorHandler() {\n        return new _angular_core.ErrorHandler();\n    }\n    function _document() {\n        return getDOM().defaultDoc();\n    }\n    function _resolveDefaultAnimationDriver() {\n        if (getDOM().supportsWebAnimation()) {\n            return new WebAnimationsDriver();\n        }\n        return AnimationDriver.NOOP;\n    }\n    /**\n     * The ng module for the browser.\n     *\n     * @stable\n     */\n    var BrowserModule = (function () {\n        function BrowserModule(parentModule) {\n            if (parentModule) {\n                throw new Error(\"BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.\");\n            }\n        }\n        BrowserModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        providers: [\n                            BROWSER_SANITIZATION_PROVIDERS, { provide: _angular_core.ErrorHandler, useFactory: errorHandler, deps: [] },\n                            { provide: DOCUMENT, useFactory: _document, deps: [] },\n                            { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },\n                            { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },\n                            { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },\n                            { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },\n                            { provide: DomRootRenderer, useClass: DomRootRenderer_ },\n                            { provide: _angular_core.RootRenderer, useExisting: DomRootRenderer },\n                            { provide: SharedStylesHost, useExisting: DomSharedStylesHost },\n                            { provide: AnimationDriver, useFactory: _resolveDefaultAnimationDriver }, DomSharedStylesHost,\n                            _angular_core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS\n                        ],\n                        exports: [_angular_common.CommonModule, _angular_core.ApplicationModule]\n                    },] },\n        ];\n        /** @nocollapse */\n        BrowserModule.ctorParameters = [\n            { type: BrowserModule, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.SkipSelf },] },\n        ];\n        return BrowserModule;\n    }());\n\n    /**\n     * A service that can be used to get and set the title of a current HTML document.\n     *\n     * Since an Angular 2 application can't be bootstrapped on the entire HTML document (`<html>` tag)\n     * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n     * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n     * title value.\n     *\n     * @experimental\n     */\n    var Title = (function () {\n        function Title() {\n        }\n        /**\n         * Get the title of the current HTML document.\n         * @returns {string}\n         */\n        Title.prototype.getTitle = function () { return getDOM().getTitle(); };\n        /**\n         * Set the title of the current HTML document.\n         * @param newTitle\n         */\n        Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(newTitle); };\n        return Title;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * JS version of browser APIs. This library can only run in the browser.\n     */\n    var win = typeof window !== 'undefined' && window || {};\n\n    var ChangeDetectionPerfRecord = (function () {\n        function ChangeDetectionPerfRecord(msPerTick, numTicks) {\n            this.msPerTick = msPerTick;\n            this.numTicks = numTicks;\n        }\n        return ChangeDetectionPerfRecord;\n    }());\n    /**\n     * Entry point for all Angular debug tools. This object corresponds to the `ng`\n     * global variable accessible in the dev console.\n     */\n    var AngularTools = (function () {\n        function AngularTools(ref) {\n            this.profiler = new AngularProfiler(ref);\n        }\n        return AngularTools;\n    }());\n    /**\n     * Entry point for all Angular profiling-related debug tools. This object\n     * corresponds to the `ng.profiler` in the dev console.\n     */\n    var AngularProfiler = (function () {\n        function AngularProfiler(ref) {\n            this.appRef = ref.injector.get(_angular_core.ApplicationRef);\n        }\n        /**\n         * Exercises change detection in a loop and then prints the average amount of\n         * time in milliseconds how long a single round of change detection takes for\n         * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n         * of 500 milliseconds.\n         *\n         * Optionally, a user may pass a `config` parameter containing a map of\n         * options. Supported options are:\n         *\n         * `record` (boolean) - causes the profiler to record a CPU profile while\n         * it exercises the change detector. Example:\n         *\n         * ```\n         * ng.profiler.timeChangeDetection({record: true})\n         * ```\n         */\n        AngularProfiler.prototype.timeChangeDetection = function (config) {\n            var record = isPresent(config) && config['record'];\n            var profileName = 'Change Detection';\n            // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\n            var isProfilerAvailable = isPresent(win.console.profile);\n            if (record && isProfilerAvailable) {\n                win.console.profile(profileName);\n            }\n            var start = getDOM().performanceNow();\n            var numTicks = 0;\n            while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\n                this.appRef.tick();\n                numTicks++;\n            }\n            var end = getDOM().performanceNow();\n            if (record && isProfilerAvailable) {\n                // need to cast to <any> because type checker thinks there's no argument\n                // while in fact there is:\n                //\n                // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd\n                win.console.profileEnd(profileName);\n            }\n            var msPerTick = (end - start) / numTicks;\n            win.console.log(\"ran \" + numTicks + \" change detection cycles\");\n            win.console.log(NumberWrapper.toFixed(msPerTick, 2) + \" ms per check\");\n            return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n        };\n        return AngularProfiler;\n    }());\n\n    var context = global$1;\n    /**\n     * Enabled Angular 2 debug tools that are accessible via your browser's\n     * developer console.\n     *\n     * Usage:\n     *\n     * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n     * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n     * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n     *    then hit Enter.\n     *\n     * @experimental All debugging apis are currently experimental.\n     */\n    function enableDebugTools(ref) {\n        context.ng = new AngularTools(ref);\n        return ref;\n    }\n    /**\n     * Disables Angular 2 tools.\n     *\n     * @experimental All debugging apis are currently experimental.\n     */\n    function disableDebugTools() {\n        delete context.ng;\n    }\n\n    /**\n     * Predicates for use with {@link DebugElement}'s query functions.\n     *\n     * @experimental All debugging apis are currently experimental.\n     */\n    var By = (function () {\n        function By() {\n        }\n        /**\n         * Match all elements.\n         *\n         * ## Example\n         *\n         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n         */\n        By.all = function () { return function (debugElement) { return true; }; };\n        /**\n         * Match elements by the given CSS selector.\n         *\n         * ## Example\n         *\n         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n         */\n        By.css = function (selector) {\n            return function (debugElement) {\n                return isPresent(debugElement.nativeElement) ?\n                    getDOM().elementMatches(debugElement.nativeElement, selector) :\n                    false;\n            };\n        };\n        /**\n         * Match elements that have the given directive present.\n         *\n         * ## Example\n         *\n         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n         */\n        By.directive = function (type) {\n            return function (debugElement) { return debugElement.providerTokens.indexOf(type) !== -1; };\n        };\n        return By;\n    }());\n\n    var __platform_browser_private__ = {\n        BrowserPlatformLocation: BrowserPlatformLocation,\n        DomAdapter: DomAdapter,\n        BrowserDomAdapter: BrowserDomAdapter,\n        BrowserGetTestability: BrowserGetTestability,\n        getDOM: getDOM,\n        setRootDomAdapter: setRootDomAdapter,\n        DomRootRenderer_: DomRootRenderer_,\n        DomRootRenderer: DomRootRenderer,\n        DomSharedStylesHost: DomSharedStylesHost,\n        SharedStylesHost: SharedStylesHost,\n        ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,\n        DomEventsPlugin: DomEventsPlugin,\n        KeyEventsPlugin: KeyEventsPlugin,\n        HammerGesturesPlugin: HammerGesturesPlugin,\n        initDomAdapter: initDomAdapter,\n        INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS,\n        BROWSER_SANITIZATION_PROVIDERS: BROWSER_SANITIZATION_PROVIDERS\n    };\n\n    exports.BrowserModule = BrowserModule;\n    exports.platformBrowser = platformBrowser;\n    exports.Title = Title;\n    exports.disableDebugTools = disableDebugTools;\n    exports.enableDebugTools = enableDebugTools;\n    exports.AnimationDriver = AnimationDriver;\n    exports.By = By;\n    exports.NgProbeToken = NgProbeToken;\n    exports.DOCUMENT = DOCUMENT;\n    exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;\n    exports.EventManager = EventManager;\n    exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;\n    exports.HammerGestureConfig = HammerGestureConfig;\n    exports.DomSanitizer = DomSanitizer;\n    exports.__platform_browser_private__ = __platform_browser_private__;\n\n}));\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * @license Angular v2.0.0-rc.6\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n     true ? factory(exports, __webpack_require__(3)) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}),global.ng.core));\n}(this, function (exports,_angular_core) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var globalScope;\n    if (typeof window === 'undefined') {\n        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n            globalScope = self;\n        }\n        else {\n            globalScope = global;\n        }\n    }\n    else {\n        globalScope = window;\n    }\n    // Need to declare a new variable for global here since TypeScript\n    // exports the original value of the symbol.\n    var global$1 = globalScope;\n    function getTypeNameForDebugging(type) {\n        if (type['name']) {\n            return type['name'];\n        }\n        return typeof type;\n    }\n    var Date = global$1.Date;\n    // TODO: remove calls to assert in production environment\n    // Note: Can't just export this and import in in other files\n    // as `assert` is a reserved keyword in Dart\n    global$1.assert = function assert(condition) {\n        // TODO: to be fixed properly via #2830, noop for now\n    };\n    function isPresent(obj) {\n        return obj !== undefined && obj !== null;\n    }\n    function isBlank(obj) {\n        return obj === undefined || obj === null;\n    }\n    function isNumber(obj) {\n        return typeof obj === 'number';\n    }\n    function isString(obj) {\n        return typeof obj === 'string';\n    }\n    function isFunction(obj) {\n        return typeof obj === 'function';\n    }\n    function isStringMap(obj) {\n        return typeof obj === 'object' && obj !== null;\n    }\n    function isPromise(obj) {\n        // allow any Promise/A+ compliant thenable.\n        // It's up to the caller to ensure that obj.then conforms to the spec\n        return isPresent(obj) && isFunction(obj.then);\n    }\n    function isArray(obj) {\n        return Array.isArray(obj);\n    }\n    function isDate(obj) {\n        return obj instanceof Date && !isNaN(obj.valueOf());\n    }\n    function stringify(token) {\n        if (typeof token === 'string') {\n            return token;\n        }\n        if (token === undefined || token === null) {\n            return '' + token;\n        }\n        if (token.overriddenName) {\n            return token.overriddenName;\n        }\n        if (token.name) {\n            return token.name;\n        }\n        var res = token.toString();\n        var newLineIndex = res.indexOf('\\n');\n        return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);\n    }\n    var StringWrapper = (function () {\n        function StringWrapper() {\n        }\n        StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };\n        StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };\n        StringWrapper.split = function (s, regExp) { return s.split(regExp); };\n        StringWrapper.equals = function (s, s2) { return s === s2; };\n        StringWrapper.stripLeft = function (s, charVal) {\n            if (s && s.length) {\n                var pos = 0;\n                for (var i = 0; i < s.length; i++) {\n                    if (s[i] != charVal)\n                        break;\n                    pos++;\n                }\n                s = s.substring(pos);\n            }\n            return s;\n        };\n        StringWrapper.stripRight = function (s, charVal) {\n            if (s && s.length) {\n                var pos = s.length;\n                for (var i = s.length - 1; i >= 0; i--) {\n                    if (s[i] != charVal)\n                        break;\n                    pos--;\n                }\n                s = s.substring(0, pos);\n            }\n            return s;\n        };\n        StringWrapper.replace = function (s, from, replace) {\n            return s.replace(from, replace);\n        };\n        StringWrapper.replaceAll = function (s, from, replace) {\n            return s.replace(from, replace);\n        };\n        StringWrapper.slice = function (s, from, to) {\n            if (from === void 0) { from = 0; }\n            if (to === void 0) { to = null; }\n            return s.slice(from, to === null ? undefined : to);\n        };\n        StringWrapper.replaceAllMapped = function (s, from, cb) {\n            return s.replace(from, function () {\n                var matches = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    matches[_i - 0] = arguments[_i];\n                }\n                // Remove offset & string from the result array\n                matches.splice(-2, 2);\n                // The callback receives match, p1, ..., pn\n                return cb(matches);\n            });\n        };\n        StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };\n        StringWrapper.compare = function (a, b) {\n            if (a < b) {\n                return -1;\n            }\n            else if (a > b) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        };\n        return StringWrapper;\n    }());\n    var NumberWrapper = (function () {\n        function NumberWrapper() {\n        }\n        NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };\n        NumberWrapper.equal = function (a, b) { return a === b; };\n        NumberWrapper.parseIntAutoRadix = function (text) {\n            var result = parseInt(text);\n            if (isNaN(result)) {\n                throw new Error('Invalid integer literal when parsing ' + text);\n            }\n            return result;\n        };\n        NumberWrapper.parseInt = function (text, radix) {\n            if (radix == 10) {\n                if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n                    return parseInt(text, radix);\n                }\n            }\n            else if (radix == 16) {\n                if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n                    return parseInt(text, radix);\n                }\n            }\n            else {\n                var result = parseInt(text, radix);\n                if (!isNaN(result)) {\n                    return result;\n                }\n            }\n            throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);\n        };\n        // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.\n        NumberWrapper.parseFloat = function (text) { return parseFloat(text); };\n        Object.defineProperty(NumberWrapper, \"NaN\", {\n            get: function () { return NaN; },\n            enumerable: true,\n            configurable: true\n        });\n        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\n        NumberWrapper.isNaN = function (value) { return isNaN(value); };\n        NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };\n        return NumberWrapper;\n    }());\n    function normalizeBlank(obj) {\n        return isBlank(obj) ? null : obj;\n    }\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n    // Can't be all uppercase as our transpiler would think it is a special directive...\n    var Json = (function () {\n        function Json() {\n        }\n        Json.parse = function (s) { return global$1.JSON.parse(s); };\n        Json.stringify = function (data) {\n            // Dart doesn't take 3 arguments\n            return global$1.JSON.stringify(data, null, 2);\n        };\n        return Json;\n    }());\n    var DateWrapper = (function () {\n        function DateWrapper() {\n        }\n        DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {\n            if (month === void 0) { month = 1; }\n            if (day === void 0) { day = 1; }\n            if (hour === void 0) { hour = 0; }\n            if (minutes === void 0) { minutes = 0; }\n            if (seconds === void 0) { seconds = 0; }\n            if (milliseconds === void 0) { milliseconds = 0; }\n            return new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);\n        };\n        DateWrapper.fromISOString = function (str) { return new Date(str); };\n        DateWrapper.fromMillis = function (ms) { return new Date(ms); };\n        DateWrapper.toMillis = function (date) { return date.getTime(); };\n        DateWrapper.now = function () { return new Date(); };\n        DateWrapper.toJson = function (date) { return date.toJSON(); };\n        return DateWrapper;\n    }());\n    var _symbolIterator = null;\n    function getSymbolIterator() {\n        if (isBlank(_symbolIterator)) {\n            if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {\n                _symbolIterator = Symbol.iterator;\n            }\n            else {\n                // es6-shim specific logic\n                var keys = Object.getOwnPropertyNames(Map.prototype);\n                for (var i = 0; i < keys.length; ++i) {\n                    var key = keys[i];\n                    if (key !== 'entries' && key !== 'size' &&\n                        Map.prototype[key] === Map.prototype['entries']) {\n                        _symbolIterator = key;\n                    }\n                }\n            }\n        }\n        return _symbolIterator;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @stable\n     */\n    var BaseError = (function (_super) {\n        __extends$1(BaseError, _super);\n        function BaseError(message) {\n            // Errors don't use current this, instead they create a new instance.\n            // We have to do forward all of our api to the nativeInstance.\n            var nativeError = _super.call(this, message);\n            this._nativeError = nativeError;\n        }\n        Object.defineProperty(BaseError.prototype, \"message\", {\n            get: function () { return this._nativeError.message; },\n            set: function (message) { this._nativeError.message = message; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BaseError.prototype, \"name\", {\n            get: function () { return this._nativeError.name; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BaseError.prototype, \"stack\", {\n            get: function () { return this._nativeError.stack; },\n            set: function (value) { this._nativeError.stack = value; },\n            enumerable: true,\n            configurable: true\n        });\n        BaseError.prototype.toString = function () { return this._nativeError.toString(); };\n        return BaseError;\n    }(Error));\n    /**\n     * @stable\n     */\n    var WrappedError = (function (_super) {\n        __extends$1(WrappedError, _super);\n        function WrappedError(message, error) {\n            _super.call(this, message + \" caused by: \" + (error instanceof Error ? error.message : error));\n            this.originalError = error;\n        }\n        Object.defineProperty(WrappedError.prototype, \"stack\", {\n            get: function () {\n                return (this.originalError instanceof Error ? this.originalError : this._nativeError)\n                    .stack;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return WrappedError;\n    }(BaseError));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var InvalidPipeArgumentError = (function (_super) {\n        __extends(InvalidPipeArgumentError, _super);\n        function InvalidPipeArgumentError(type, value) {\n            _super.call(this, \"Invalid argument '\" + value + \"' for pipe '\" + stringify(type) + \"'\");\n        }\n        return InvalidPipeArgumentError;\n    }(BaseError));\n\n    var ObservableStrategy = (function () {\n        function ObservableStrategy() {\n        }\n        ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {\n            return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });\n        };\n        ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };\n        ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };\n        return ObservableStrategy;\n    }());\n    var PromiseStrategy = (function () {\n        function PromiseStrategy() {\n        }\n        PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {\n            return async.then(updateLatestValue, function (e) { throw e; });\n        };\n        PromiseStrategy.prototype.dispose = function (subscription) { };\n        PromiseStrategy.prototype.onDestroy = function (subscription) { };\n        return PromiseStrategy;\n    }());\n    var _promiseStrategy = new PromiseStrategy();\n    var _observableStrategy = new ObservableStrategy();\n    // avoid unused import when Promise union types are erased\n    /**\n     * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n     * emitted.\n     * When a new value is emitted, the `async` pipe marks the component to be checked for changes.\n     * When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n     * potential memory leaks.\n     *\n     * ## Usage\n     *\n     *     object | async\n     *\n     * where `object` is of type `Observable` or of type `Promise`.\n     *\n     * ## Examples\n     *\n     * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n     * promise.\n     *\n     * {@example core/pipes/ts/async_pipe/async_pipe_example.ts region='AsyncPipePromise'}\n     *\n     * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n     * to the view. Every 500ms, the `time` Observable updates the view with the current time.\n     *\n     * {@example core/pipes/ts/async_pipe/async_pipe_example.ts region='AsyncPipeObservable'}\n     *\n     * @stable\n     */\n    var AsyncPipe = (function () {\n        function AsyncPipe(_ref) {\n            /** @internal */\n            this._latestValue = null;\n            /** @internal */\n            this._latestReturnedValue = null;\n            /** @internal */\n            this._subscription = null;\n            /** @internal */\n            this._obj = null;\n            this._strategy = null;\n            this._ref = _ref;\n        }\n        AsyncPipe.prototype.ngOnDestroy = function () {\n            if (isPresent(this._subscription)) {\n                this._dispose();\n            }\n        };\n        AsyncPipe.prototype.transform = function (obj) {\n            if (isBlank(this._obj)) {\n                if (isPresent(obj)) {\n                    this._subscribe(obj);\n                }\n                this._latestReturnedValue = this._latestValue;\n                return this._latestValue;\n            }\n            if (obj !== this._obj) {\n                this._dispose();\n                return this.transform(obj);\n            }\n            if (this._latestValue === this._latestReturnedValue) {\n                return this._latestReturnedValue;\n            }\n            else {\n                this._latestReturnedValue = this._latestValue;\n                return _angular_core.WrappedValue.wrap(this._latestValue);\n            }\n        };\n        /** @internal */\n        AsyncPipe.prototype._subscribe = function (obj) {\n            var _this = this;\n            this._obj = obj;\n            this._strategy = this._selectStrategy(obj);\n            this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });\n        };\n        /** @internal */\n        AsyncPipe.prototype._selectStrategy = function (obj) {\n            if (isPromise(obj)) {\n                return _promiseStrategy;\n            }\n            else if (obj.subscribe) {\n                return _observableStrategy;\n            }\n            else {\n                throw new InvalidPipeArgumentError(AsyncPipe, obj);\n            }\n        };\n        /** @internal */\n        AsyncPipe.prototype._dispose = function () {\n            this._strategy.dispose(this._subscription);\n            this._latestValue = null;\n            this._latestReturnedValue = null;\n            this._subscription = null;\n            this._obj = null;\n        };\n        /** @internal */\n        AsyncPipe.prototype._updateLatestValue = function (async, value) {\n            if (async === this._obj) {\n                this._latestValue = value;\n                this._ref.markForCheck();\n            }\n        };\n        AsyncPipe.decorators = [\n            { type: _angular_core.Pipe, args: [{ name: 'async', pure: false },] },\n        ];\n        /** @nocollapse */\n        AsyncPipe.ctorParameters = [\n            { type: _angular_core.ChangeDetectorRef, },\n        ];\n        return AsyncPipe;\n    }());\n\n    var Map$1 = global$1.Map;\n    var Set$1 = global$1.Set;\n    // Safari and Internet Explorer do not support the iterable parameter to the\n    // Map constructor.  We work around that by manually adding the items.\n    var createMapFromPairs = (function () {\n        try {\n            if (new Map$1([[1, 2]]).size === 1) {\n                return function createMapFromPairs(pairs) { return new Map$1(pairs); };\n            }\n        }\n        catch (e) {\n        }\n        return function createMapAndPopulateFromPairs(pairs) {\n            var map = new Map$1();\n            for (var i = 0; i < pairs.length; i++) {\n                var pair = pairs[i];\n                map.set(pair[0], pair[1]);\n            }\n            return map;\n        };\n    })();\n    var createMapFromMap = (function () {\n        try {\n            if (new Map$1(new Map$1())) {\n                return function createMapFromMap(m) { return new Map$1(m); };\n            }\n        }\n        catch (e) {\n        }\n        return function createMapAndPopulateFromMap(m) {\n            var map = new Map$1();\n            m.forEach(function (v, k) { map.set(k, v); });\n            return map;\n        };\n    })();\n    var _clearValues = (function () {\n        if ((new Map$1()).keys().next) {\n            return function _clearValues(m) {\n                var keyIterator = m.keys();\n                var k;\n                while (!((k = keyIterator.next()).done)) {\n                    m.set(k.value, null);\n                }\n            };\n        }\n        else {\n            return function _clearValuesWithForeEach(m) {\n                m.forEach(function (v, k) { m.set(k, null); });\n            };\n        }\n    })();\n    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from\n    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from\n    var _arrayFromMap = (function () {\n        try {\n            if ((new Map$1()).values().next) {\n                return function createArrayFromMap(m, getValues) {\n                    return getValues ? Array.from(m.values()) : Array.from(m.keys());\n                };\n            }\n        }\n        catch (e) {\n        }\n        return function createArrayFromMapWithForeach(m, getValues) {\n            var res = ListWrapper.createFixedSize(m.size), i = 0;\n            m.forEach(function (v, k) {\n                res[i] = getValues ? v : k;\n                i++;\n            });\n            return res;\n        };\n    })();\n    /**\n     * Wraps Javascript Objects\n     */\n    var StringMapWrapper = (function () {\n        function StringMapWrapper() {\n        }\n        StringMapWrapper.create = function () {\n            // Note: We are not using Object.create(null) here due to\n            // performance!\n            // http://jsperf.com/ng2-object-create-null\n            return {};\n        };\n        StringMapWrapper.contains = function (map, key) {\n            return map.hasOwnProperty(key);\n        };\n        StringMapWrapper.get = function (map, key) {\n            return map.hasOwnProperty(key) ? map[key] : undefined;\n        };\n        StringMapWrapper.set = function (map, key, value) { map[key] = value; };\n        StringMapWrapper.keys = function (map) { return Object.keys(map); };\n        StringMapWrapper.values = function (map) {\n            return Object.keys(map).map(function (k) { return map[k]; });\n        };\n        StringMapWrapper.isEmpty = function (map) {\n            for (var prop in map) {\n                return false;\n            }\n            return true;\n        };\n        StringMapWrapper.delete = function (map, key) { delete map[key]; };\n        StringMapWrapper.forEach = function (map, callback) {\n            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {\n                var k = _a[_i];\n                callback(map[k], k);\n            }\n        };\n        StringMapWrapper.merge = function (m1, m2) {\n            var m = {};\n            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n                var k = _a[_i];\n                m[k] = m1[k];\n            }\n            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n                var k = _c[_b];\n                m[k] = m2[k];\n            }\n            return m;\n        };\n        StringMapWrapper.equals = function (m1, m2) {\n            var k1 = Object.keys(m1);\n            var k2 = Object.keys(m2);\n            if (k1.length != k2.length) {\n                return false;\n            }\n            var key;\n            for (var i = 0; i < k1.length; i++) {\n                key = k1[i];\n                if (m1[key] !== m2[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return StringMapWrapper;\n    }());\n    var ListWrapper = (function () {\n        function ListWrapper() {\n        }\n        // JS has no way to express a statically fixed size list, but dart does so we\n        // keep both methods.\n        ListWrapper.createFixedSize = function (size) { return new Array(size); };\n        ListWrapper.createGrowableSize = function (size) { return new Array(size); };\n        ListWrapper.clone = function (array) { return array.slice(0); };\n        ListWrapper.forEachWithIndex = function (array, fn) {\n            for (var i = 0; i < array.length; i++) {\n                fn(array[i], i);\n            }\n        };\n        ListWrapper.first = function (array) {\n            if (!array)\n                return null;\n            return array[0];\n        };\n        ListWrapper.last = function (array) {\n            if (!array || array.length == 0)\n                return null;\n            return array[array.length - 1];\n        };\n        ListWrapper.indexOf = function (array, value, startIndex) {\n            if (startIndex === void 0) { startIndex = 0; }\n            return array.indexOf(value, startIndex);\n        };\n        ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };\n        ListWrapper.reversed = function (array) {\n            var a = ListWrapper.clone(array);\n            return a.reverse();\n        };\n        ListWrapper.concat = function (a, b) { return a.concat(b); };\n        ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };\n        ListWrapper.removeAt = function (list, index) {\n            var res = list[index];\n            list.splice(index, 1);\n            return res;\n        };\n        ListWrapper.removeAll = function (list, items) {\n            for (var i = 0; i < items.length; ++i) {\n                var index = list.indexOf(items[i]);\n                list.splice(index, 1);\n            }\n        };\n        ListWrapper.remove = function (list, el) {\n            var index = list.indexOf(el);\n            if (index > -1) {\n                list.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        ListWrapper.clear = function (list) { list.length = 0; };\n        ListWrapper.isEmpty = function (list) { return list.length == 0; };\n        ListWrapper.fill = function (list, value, start, end) {\n            if (start === void 0) { start = 0; }\n            if (end === void 0) { end = null; }\n            list.fill(value, start, end === null ? list.length : end);\n        };\n        ListWrapper.equals = function (a, b) {\n            if (a.length != b.length)\n                return false;\n            for (var i = 0; i < a.length; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        };\n        ListWrapper.slice = function (l, from, to) {\n            if (from === void 0) { from = 0; }\n            if (to === void 0) { to = null; }\n            return l.slice(from, to === null ? undefined : to);\n        };\n        ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };\n        ListWrapper.sort = function (l, compareFn) {\n            if (isPresent(compareFn)) {\n                l.sort(compareFn);\n            }\n            else {\n                l.sort();\n            }\n        };\n        ListWrapper.toString = function (l) { return l.toString(); };\n        ListWrapper.toJSON = function (l) { return JSON.stringify(l); };\n        ListWrapper.maximum = function (list, predicate) {\n            if (list.length == 0) {\n                return null;\n            }\n            var solution = null;\n            var maxValue = -Infinity;\n            for (var index = 0; index < list.length; index++) {\n                var candidate = list[index];\n                if (isBlank(candidate)) {\n                    continue;\n                }\n                var candidateValue = predicate(candidate);\n                if (candidateValue > maxValue) {\n                    solution = candidate;\n                    maxValue = candidateValue;\n                }\n            }\n            return solution;\n        };\n        ListWrapper.flatten = function (list) {\n            var target = [];\n            _flattenArray(list, target);\n            return target;\n        };\n        ListWrapper.addAll = function (list, source) {\n            for (var i = 0; i < source.length; i++) {\n                list.push(source[i]);\n            }\n        };\n        return ListWrapper;\n    }());\n    function _flattenArray(source, target) {\n        if (isPresent(source)) {\n            for (var i = 0; i < source.length; i++) {\n                var item = source[i];\n                if (isArray(item)) {\n                    _flattenArray(item, target);\n                }\n                else {\n                    target.push(item);\n                }\n            }\n        }\n        return target;\n    }\n    function isListLikeIterable(obj) {\n        if (!isJsObject(obj))\n            return false;\n        return isArray(obj) ||\n            (!(obj instanceof Map$1) &&\n                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n    }\n    // Safari and Internet Explorer do not support the iterable parameter to the\n    // Set constructor.  We work around that by manually adding the items.\n    var createSetFromList = (function () {\n        var test = new Set$1([1, 2, 3]);\n        if (test.size === 3) {\n            return function createSetFromList(lst) { return new Set$1(lst); };\n        }\n        else {\n            return function createSetAndPopulateFromList(lst) {\n                var res = new Set$1(lst);\n                if (res.size !== lst.length) {\n                    for (var i = 0; i < lst.length; i++) {\n                        res.add(lst[i]);\n                    }\n                }\n                return res;\n            };\n        }\n    })();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NumberFormatStyle;\n    (function (NumberFormatStyle) {\n        NumberFormatStyle[NumberFormatStyle[\"Decimal\"] = 0] = \"Decimal\";\n        NumberFormatStyle[NumberFormatStyle[\"Percent\"] = 1] = \"Percent\";\n        NumberFormatStyle[NumberFormatStyle[\"Currency\"] = 2] = \"Currency\";\n    })(NumberFormatStyle || (NumberFormatStyle = {}));\n    var NumberFormatter = (function () {\n        function NumberFormatter() {\n        }\n        NumberFormatter.format = function (num, locale, style, _a) {\n            var _b = _a === void 0 ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = _c === void 0 ? false : _c;\n            var options = {\n                minimumIntegerDigits: minimumIntegerDigits,\n                minimumFractionDigits: minimumFractionDigits,\n                maximumFractionDigits: maximumFractionDigits,\n                style: NumberFormatStyle[style].toLowerCase()\n            };\n            if (style == NumberFormatStyle.Currency) {\n                options.currency = currency;\n                options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';\n            }\n            return new Intl.NumberFormat(locale, options).format(num);\n        };\n        return NumberFormatter;\n    }());\n    var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;\n    var PATTERN_ALIASES = {\n        yMMMdjms: datePartGetterFactory(combine([\n            digitCondition('year', 1),\n            nameCondition('month', 3),\n            digitCondition('day', 1),\n            digitCondition('hour', 1),\n            digitCondition('minute', 1),\n            digitCondition('second', 1),\n        ])),\n        yMdjm: datePartGetterFactory(combine([\n            digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),\n            digitCondition('hour', 1), digitCondition('minute', 1)\n        ])),\n        yMMMMEEEEd: datePartGetterFactory(combine([\n            digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),\n            digitCondition('day', 1)\n        ])),\n        yMMMMd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),\n        yMMMd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),\n        yMd: datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),\n        jms: datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),\n        jm: datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))\n    };\n    var DATE_FORMATS = {\n        yyyy: datePartGetterFactory(digitCondition('year', 4)),\n        yy: datePartGetterFactory(digitCondition('year', 2)),\n        y: datePartGetterFactory(digitCondition('year', 1)),\n        MMMM: datePartGetterFactory(nameCondition('month', 4)),\n        MMM: datePartGetterFactory(nameCondition('month', 3)),\n        MM: datePartGetterFactory(digitCondition('month', 2)),\n        M: datePartGetterFactory(digitCondition('month', 1)),\n        LLLL: datePartGetterFactory(nameCondition('month', 4)),\n        dd: datePartGetterFactory(digitCondition('day', 2)),\n        d: datePartGetterFactory(digitCondition('day', 1)),\n        HH: digitModifier(hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),\n        H: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),\n        hh: digitModifier(hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),\n        h: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n        jj: datePartGetterFactory(digitCondition('hour', 2)),\n        j: datePartGetterFactory(digitCondition('hour', 1)),\n        mm: digitModifier(datePartGetterFactory(digitCondition('minute', 2))),\n        m: datePartGetterFactory(digitCondition('minute', 1)),\n        ss: digitModifier(datePartGetterFactory(digitCondition('second', 2))),\n        s: datePartGetterFactory(digitCondition('second', 1)),\n        // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n        // we can be just safely rely on using `sss` since we currently don't support single or two digit\n        // fractions\n        sss: datePartGetterFactory(digitCondition('second', 3)),\n        EEEE: datePartGetterFactory(nameCondition('weekday', 4)),\n        EEE: datePartGetterFactory(nameCondition('weekday', 3)),\n        EE: datePartGetterFactory(nameCondition('weekday', 2)),\n        E: datePartGetterFactory(nameCondition('weekday', 1)),\n        a: hourClockExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n        Z: timeZoneGetter('short'),\n        z: timeZoneGetter('long'),\n        ww: datePartGetterFactory({}),\n        // first Thursday of the year. not support ?\n        w: datePartGetterFactory({}),\n        // of the year not support ?\n        G: datePartGetterFactory(nameCondition('era', 1)),\n        GG: datePartGetterFactory(nameCondition('era', 2)),\n        GGG: datePartGetterFactory(nameCondition('era', 3)),\n        GGGG: datePartGetterFactory(nameCondition('era', 4))\n    };\n    function digitModifier(inner) {\n        return function (date, locale) {\n            var result = inner(date, locale);\n            return result.length == 1 ? '0' + result : result;\n        };\n    }\n    function hourClockExtracter(inner) {\n        return function (date, locale) {\n            var result = inner(date, locale);\n            return result.split(' ')[1];\n        };\n    }\n    function hourExtracter(inner) {\n        return function (date, locale) {\n            var result = inner(date, locale);\n            return result.split(' ')[0];\n        };\n    }\n    function intlDateFormat(date, locale, options) {\n        return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\\u200e\\u200f]/g, '');\n    }\n    function timeZoneGetter(timezone) {\n        // To workaround `Intl` API restriction for single timezone let format with 24 hours\n        var options = { hour: '2-digit', hour12: false, timeZoneName: timezone };\n        return function (date, locale) {\n            var result = intlDateFormat(date, locale, options);\n            // Then extract first 3 letters that related to hours\n            return result ? result.substring(3) : '';\n        };\n    }\n    function hour12Modify(options, value) {\n        options.hour12 = value;\n        return options;\n    }\n    function digitCondition(prop, len) {\n        var result = {};\n        result[prop] = len == 2 ? '2-digit' : 'numeric';\n        return result;\n    }\n    function nameCondition(prop, len) {\n        var result = {};\n        result[prop] = len < 4 ? 'short' : 'long';\n        return result;\n    }\n    function combine(options) {\n        var result = {};\n        options.forEach(function (option) { Object.assign(result, option); });\n        return result;\n    }\n    function datePartGetterFactory(ret) {\n        return function (date, locale) { return intlDateFormat(date, locale, ret); };\n    }\n    var datePartsFormatterCache = new Map();\n    function dateFormatter(format, date, locale) {\n        var text = '';\n        var match;\n        var fn;\n        var parts = [];\n        if (PATTERN_ALIASES[format]) {\n            return PATTERN_ALIASES[format](date, locale);\n        }\n        if (datePartsFormatterCache.has(format)) {\n            parts = datePartsFormatterCache.get(format);\n        }\n        else {\n            var matches = DATE_FORMATS_SPLIT.exec(format);\n            while (format) {\n                match = DATE_FORMATS_SPLIT.exec(format);\n                if (match) {\n                    parts = concat(parts, match, 1);\n                    format = parts.pop();\n                }\n                else {\n                    parts.push(format);\n                    format = null;\n                }\n            }\n            datePartsFormatterCache.set(format, parts);\n        }\n        parts.forEach(function (part) {\n            fn = DATE_FORMATS[part];\n            text += fn ? fn(date, locale) :\n                part === '\\'\\'' ? '\\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n        });\n        return text;\n    }\n    var slice = [].slice;\n    function concat(array1 /** TODO #9100 */, array2 /** TODO #9100 */, index /** TODO #9100 */) {\n        return array1.concat(slice.call(array2, index));\n    }\n    var DateFormatter = (function () {\n        function DateFormatter() {\n        }\n        DateFormatter.format = function (date, locale, pattern) {\n            return dateFormatter(pattern, date, locale);\n        };\n        return DateFormatter;\n    }());\n\n    /**\n     * Formats a date value to a string based on the requested format.\n     *\n     * WARNINGS:\n     * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\n     *   Instead users should treat the date as an immutable object and change the reference when the\n     *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\n     *   which would be an expensive operation).\n     * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\n     *   browsers.\n     *\n     * ## Usage\n     *\n     *     expression | date[:format]\n     *\n     * where `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\n     * (https://www.w3.org/TR/NOTE-datetime) and `format` indicates which date/time components to\n     * include:\n     *\n     *  | Component | Symbol | Short Form   | Long Form         | Numeric   | 2-digit   |\n     *  |-----------|:------:|--------------|-------------------|-----------|-----------|\n     *  | era       |   G    | G (AD)       | GGGG (Anno Domini)| -         | -         |\n     *  | year      |   y    | -            | -                 | y (2015)  | yy (15)   |\n     *  | month     |   M    | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\n     *  | day       |   d    | -            | -                 | d (3)     | dd (03)   |\n     *  | weekday   |   E    | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\n     *  | hour      |   j    | -            | -                 | j (13)    | jj (13)   |\n     *  | hour12    |   h    | -            | -                 | h (1 PM)  | hh (01 PM)|\n     *  | hour24    |   H    | -            | -                 | H (13)    | HH (13)   |\n     *  | minute    |   m    | -            | -                 | m (5)     | mm (05)   |\n     *  | second    |   s    | -            | -                 | s (9)     | ss (09)   |\n     *  | timezone  |   z    | -            | z (Pacific Standard Time)| -  | -         |\n     *  | timezone  |   Z    | Z (GMT-8:00) | -                 | -         | -         |\n     *  | timezone  |   a    | a (PM)       | -                 | -         | -         |\n     *\n     * In javascript, only the components specified will be respected (not the ordering,\n     * punctuations, ...) and details of the formatting will be dependent on the locale.\n     *\n     * `format` can also be one of the following predefined formats:\n     *\n     *  - `'medium'`: equivalent to `'yMMMdjms'` (e.g. Sep 3, 2010, 12:05:08 PM for en-US)\n     *  - `'short'`: equivalent to `'yMdjm'` (e.g. 9/3/2010, 12:05 PM for en-US)\n     *  - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. Friday, September 3, 2010 for en-US)\n     *  - `'longDate'`: equivalent to `'yMMMMd'` (e.g. September 3, 2010)\n     *  - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. Sep 3, 2010 for en-US)\n     *  - `'shortDate'`: equivalent to `'yMd'` (e.g. 9/3/2010 for en-US)\n     *  - `'mediumTime'`: equivalent to `'jms'` (e.g. 12:05:08 PM for en-US)\n     *  - `'shortTime'`: equivalent to `'jm'` (e.g. 12:05 PM for en-US)\n     *\n     * Timezone of the formatted text will be the local system timezone of the end-users machine.\n     *\n     * ### Examples\n     *\n     * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)\n     * in the _local_ time and locale is 'en-US':\n     *\n     * ```\n     *     {{ dateObj | date }}               // output is 'Jun 15, 2015'\n     *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n     *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n     *     {{ dateObj | date:'mmss' }}        // output is '43:11'\n     * ```\n     *\n     * {@example core/pipes/ts/date_pipe/date_pipe_example.ts region='DatePipe'}\n     *\n     * @stable\n     */\n    var DatePipe = (function () {\n        function DatePipe(_locale) {\n            this._locale = _locale;\n        }\n        DatePipe.prototype.transform = function (value, pattern) {\n            if (pattern === void 0) { pattern = 'mediumDate'; }\n            if (isBlank(value))\n                return null;\n            if (!this.supports(value)) {\n                throw new InvalidPipeArgumentError(DatePipe, value);\n            }\n            if (NumberWrapper.isNumeric(value)) {\n                value = DateWrapper.fromMillis(parseFloat(value));\n            }\n            else if (isString(value)) {\n                value = DateWrapper.fromISOString(value);\n            }\n            if (StringMapWrapper.contains(DatePipe._ALIASES, pattern)) {\n                pattern = StringMapWrapper.get(DatePipe._ALIASES, pattern);\n            }\n            return DateFormatter.format(value, this._locale, pattern);\n        };\n        DatePipe.prototype.supports = function (obj) {\n            if (isDate(obj) || NumberWrapper.isNumeric(obj)) {\n                return true;\n            }\n            if (isString(obj) && isDate(DateWrapper.fromISOString(obj))) {\n                return true;\n            }\n            return false;\n        };\n        /** @internal */\n        DatePipe._ALIASES = {\n            'medium': 'yMMMdjms',\n            'short': 'yMdjm',\n            'fullDate': 'yMMMMEEEEd',\n            'longDate': 'yMMMMd',\n            'mediumDate': 'yMMMd',\n            'shortDate': 'yMd',\n            'mediumTime': 'jms',\n            'shortTime': 'jm'\n        };\n        DatePipe.decorators = [\n            { type: _angular_core.Pipe, args: [{ name: 'date', pure: true },] },\n        ];\n        /** @nocollapse */\n        DatePipe.ctorParameters = [\n            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },\n        ];\n        return DatePipe;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @experimental\n     */\n    var NgLocalization = (function () {\n        function NgLocalization() {\n        }\n        return NgLocalization;\n    }());\n    /**\n     * Returns the plural category for a given value.\n     * - \"=value\" when the case exists,\n     * - the plural category otherwise\n     *\n     * @internal\n     */\n    function getPluralCategory(value, cases, ngLocalization) {\n        var nbCase = \"=\" + value;\n        return cases.indexOf(nbCase) > -1 ? nbCase : ngLocalization.getPluralCategory(value);\n    }\n    /**\n     * Returns the plural case based on the locale\n     *\n     * @experimental\n     */\n    var NgLocaleLocalization = (function (_super) {\n        __extends$2(NgLocaleLocalization, _super);\n        function NgLocaleLocalization(_locale) {\n            _super.call(this);\n            this._locale = _locale;\n        }\n        NgLocaleLocalization.prototype.getPluralCategory = function (value) {\n            var plural = getPluralCase(this._locale, value);\n            switch (plural) {\n                case Plural.Zero:\n                    return 'zero';\n                case Plural.One:\n                    return 'one';\n                case Plural.Two:\n                    return 'two';\n                case Plural.Few:\n                    return 'few';\n                case Plural.Many:\n                    return 'many';\n                default:\n                    return 'other';\n            }\n        };\n        NgLocaleLocalization.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        NgLocaleLocalization.ctorParameters = [\n            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },\n        ];\n        return NgLocaleLocalization;\n    }(NgLocalization));\n    // This is generated code DO NOT MODIFY\n    // see angular2/script/cldr/gen_plural_rules.js\n    /** @experimental */\n    var Plural;\n    (function (Plural) {\n        Plural[Plural[\"Zero\"] = 0] = \"Zero\";\n        Plural[Plural[\"One\"] = 1] = \"One\";\n        Plural[Plural[\"Two\"] = 2] = \"Two\";\n        Plural[Plural[\"Few\"] = 3] = \"Few\";\n        Plural[Plural[\"Many\"] = 4] = \"Many\";\n        Plural[Plural[\"Other\"] = 5] = \"Other\";\n    })(Plural || (Plural = {}));\n    /**\n     * Returns the plural case based on the locale\n     *\n     * @experimental\n     */\n    function getPluralCase(locale, nLike) {\n        // TODO(vicb): lazy compute\n        if (typeof nLike === 'string') {\n            nLike = parseInt(nLike, 10);\n        }\n        var n = nLike;\n        var nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n        var i = Math.floor(Math.abs(n));\n        var v = nDecimal.length;\n        var f = parseInt(nDecimal, 10);\n        var t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n        var lang = locale.split('_')[0].toLowerCase();\n        switch (lang) {\n            case 'af':\n            case 'asa':\n            case 'az':\n            case 'bem':\n            case 'bez':\n            case 'bg':\n            case 'brx':\n            case 'ce':\n            case 'cgg':\n            case 'chr':\n            case 'ckb':\n            case 'ee':\n            case 'el':\n            case 'eo':\n            case 'es':\n            case 'eu':\n            case 'fo':\n            case 'fur':\n            case 'gsw':\n            case 'ha':\n            case 'haw':\n            case 'hu':\n            case 'jgo':\n            case 'jmc':\n            case 'ka':\n            case 'kk':\n            case 'kkj':\n            case 'kl':\n            case 'ks':\n            case 'ksb':\n            case 'ky':\n            case 'lb':\n            case 'lg':\n            case 'mas':\n            case 'mgo':\n            case 'ml':\n            case 'mn':\n            case 'nb':\n            case 'nd':\n            case 'ne':\n            case 'nn':\n            case 'nnh':\n            case 'nyn':\n            case 'om':\n            case 'or':\n            case 'os':\n            case 'ps':\n            case 'rm':\n            case 'rof':\n            case 'rwk':\n            case 'saq':\n            case 'seh':\n            case 'sn':\n            case 'so':\n            case 'sq':\n            case 'ta':\n            case 'te':\n            case 'teo':\n            case 'tk':\n            case 'tr':\n            case 'ug':\n            case 'uz':\n            case 'vo':\n            case 'vun':\n            case 'wae':\n            case 'xog':\n                if (n === 1)\n                    return Plural.One;\n                return Plural.Other;\n            case 'agq':\n            case 'bas':\n            case 'cu':\n            case 'dav':\n            case 'dje':\n            case 'dua':\n            case 'dyo':\n            case 'ebu':\n            case 'ewo':\n            case 'guz':\n            case 'kam':\n            case 'khq':\n            case 'ki':\n            case 'kln':\n            case 'kok':\n            case 'ksf':\n            case 'lrc':\n            case 'lu':\n            case 'luo':\n            case 'luy':\n            case 'mer':\n            case 'mfe':\n            case 'mgh':\n            case 'mua':\n            case 'mzn':\n            case 'nmg':\n            case 'nus':\n            case 'qu':\n            case 'rn':\n            case 'rw':\n            case 'sbp':\n            case 'twq':\n            case 'vai':\n            case 'yav':\n            case 'yue':\n            case 'zgh':\n            case 'ak':\n            case 'ln':\n            case 'mg':\n            case 'pa':\n            case 'ti':\n                if (n === Math.floor(n) && n >= 0 && n <= 1)\n                    return Plural.One;\n                return Plural.Other;\n            case 'am':\n            case 'as':\n            case 'bn':\n            case 'fa':\n            case 'gu':\n            case 'hi':\n            case 'kn':\n            case 'mr':\n            case 'zu':\n                if (i === 0 || n === 1)\n                    return Plural.One;\n                return Plural.Other;\n            case 'ar':\n                if (n === 0)\n                    return Plural.Zero;\n                if (n === 1)\n                    return Plural.One;\n                if (n === 2)\n                    return Plural.Two;\n                if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)\n                    return Plural.Few;\n                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)\n                    return Plural.Many;\n                return Plural.Other;\n            case 'ast':\n            case 'ca':\n            case 'de':\n            case 'en':\n            case 'et':\n            case 'fi':\n            case 'fy':\n            case 'gl':\n            case 'it':\n            case 'nl':\n            case 'sv':\n            case 'sw':\n            case 'ur':\n            case 'yi':\n                if (i === 1 && v === 0)\n                    return Plural.One;\n                return Plural.Other;\n            case 'be':\n                if (n % 10 === 1 && !(n % 100 === 11))\n                    return Plural.One;\n                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n                    !(n % 100 >= 12 && n % 100 <= 14))\n                    return Plural.Few;\n                if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n                    n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n                    return Plural.Many;\n                return Plural.Other;\n            case 'br':\n                if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))\n                    return Plural.One;\n                if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))\n                    return Plural.Two;\n                if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n                    !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n                        n % 100 >= 90 && n % 100 <= 99))\n                    return Plural.Few;\n                if (!(n === 0) && n % 1e6 === 0)\n                    return Plural.Many;\n                return Plural.Other;\n            case 'bs':\n            case 'hr':\n            case 'sr':\n                if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n                    return Plural.One;\n                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                    !(i % 100 >= 12 && i % 100 <= 14) ||\n                    f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n                        !(f % 100 >= 12 && f % 100 <= 14))\n                    return Plural.Few;\n                return Plural.Other;\n            case 'cs':\n            case 'sk':\n                if (i === 1 && v === 0)\n                    return Plural.One;\n                if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)\n                    return Plural.Few;\n                if (!(v === 0))\n                    return Plural.Many;\n                return Plural.Other;\n            case 'cy':\n                if (n === 0)\n                    return Plural.Zero;\n                if (n === 1)\n                    return Plural.One;\n                if (n === 2)\n                    return Plural.Two;\n                if (n === 3)\n                    return Plural.Few;\n                if (n === 6)\n                    return Plural.Many;\n                return Plural.Other;\n            case 'da':\n                if (n === 1 || !(t === 0) && (i === 0 || i === 1))\n                    return Plural.One;\n                return Plural.Other;\n            case 'dsb':\n            case 'hsb':\n                if (v === 0 && i % 100 === 1 || f % 100 === 1)\n                    return Plural.One;\n                if (v === 0 && i % 100 === 2 || f % 100 === 2)\n                    return Plural.Two;\n                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n                    f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n                    return Plural.Few;\n                return Plural.Other;\n            case 'ff':\n            case 'fr':\n            case 'hy':\n            case 'kab':\n                if (i === 0 || i === 1)\n                    return Plural.One;\n                return Plural.Other;\n            case 'fil':\n                if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n                    v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n                    !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n                    return Plural.One;\n                return Plural.Other;\n            case 'ga':\n                if (n === 1)\n                    return Plural.One;\n                if (n === 2)\n                    return Plural.Two;\n                if (n === Math.floor(n) && n >= 3 && n <= 6)\n                    return Plural.Few;\n                if (n === Math.floor(n) && n >= 7 && n <= 10)\n                    return Plural.Many;\n                return Plural.Other;\n            case 'gd':\n                if (n === 1 || n === 11)\n                    return Plural.One;\n                if (n === 2 || n === 12)\n                    return Plural.Two;\n                if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))\n                    return Plural.Few;\n                return Plural.Other;\n            case 'gv':\n                if (v === 0 && i % 10 === 1)\n                    return Plural.One;\n                if (v === 0 && i % 10 === 2)\n                    return Plural.Two;\n                if (v === 0 &&\n                    (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n                    return Plural.Few;\n                if (!(v === 0))\n                    return Plural.Many;\n                return Plural.Other;\n            case 'he':\n                if (i === 1 && v === 0)\n                    return Plural.One;\n                if (i === 2 && v === 0)\n                    return Plural.Two;\n                if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)\n                    return Plural.Many;\n                return Plural.Other;\n            case 'is':\n                if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))\n                    return Plural.One;\n                return Plural.Other;\n            case 'ksh':\n                if (n === 0)\n                    return Plural.Zero;\n                if (n === 1)\n                    return Plural.One;\n                return Plural.Other;\n            case 'kw':\n            case 'naq':\n            case 'se':\n            case 'smn':\n                if (n === 1)\n                    return Plural.One;\n                if (n === 2)\n                    return Plural.Two;\n                return Plural.Other;\n            case 'lag':\n                if (n === 0)\n                    return Plural.Zero;\n                if ((i === 0 || i === 1) && !(n === 0))\n                    return Plural.One;\n                return Plural.Other;\n            case 'lt':\n                if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))\n                    return Plural.One;\n                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n                    !(n % 100 >= 11 && n % 100 <= 19))\n                    return Plural.Few;\n                if (!(f === 0))\n                    return Plural.Many;\n                return Plural.Other;\n            case 'lv':\n            case 'prg':\n                if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n                    v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n                    return Plural.Zero;\n                if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n                    !(v === 2) && f % 10 === 1)\n                    return Plural.One;\n                return Plural.Other;\n            case 'mk':\n                if (v === 0 && i % 10 === 1 || f % 10 === 1)\n                    return Plural.One;\n                return Plural.Other;\n            case 'mt':\n                if (n === 1)\n                    return Plural.One;\n                if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n                    return Plural.Few;\n                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)\n                    return Plural.Many;\n                return Plural.Other;\n            case 'pl':\n                if (i === 1 && v === 0)\n                    return Plural.One;\n                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                    !(i % 100 >= 12 && i % 100 <= 14))\n                    return Plural.Few;\n                if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n                    return Plural.Many;\n                return Plural.Other;\n            case 'pt':\n                if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))\n                    return Plural.One;\n                return Plural.Other;\n            case 'ro':\n                if (i === 1 && v === 0)\n                    return Plural.One;\n                if (!(v === 0) || n === 0 ||\n                    !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n                    return Plural.Few;\n                return Plural.Other;\n            case 'ru':\n            case 'uk':\n                if (v === 0 && i % 10 === 1 && !(i % 100 === 11))\n                    return Plural.One;\n                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                    !(i % 100 >= 12 && i % 100 <= 14))\n                    return Plural.Few;\n                if (v === 0 && i % 10 === 0 ||\n                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n                    return Plural.Many;\n                return Plural.Other;\n            case 'shi':\n                if (i === 0 || n === 1)\n                    return Plural.One;\n                if (n === Math.floor(n) && n >= 2 && n <= 10)\n                    return Plural.Few;\n                return Plural.Other;\n            case 'si':\n                if (n === 0 || n === 1 || i === 0 && f === 1)\n                    return Plural.One;\n                return Plural.Other;\n            case 'sl':\n                if (v === 0 && i % 100 === 1)\n                    return Plural.One;\n                if (v === 0 && i % 100 === 2)\n                    return Plural.Two;\n                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n                    return Plural.Few;\n                return Plural.Other;\n            case 'tzm':\n                if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n                    return Plural.One;\n                return Plural.Other;\n            default:\n                return Plural.Other;\n        }\n    }\n\n    var _INTERPOLATION_REGEXP = /#/g;\n    /**\n     *  Maps a value to a string that pluralizes the value properly.\n     *\n     *  ## Usage\n     *\n     *  expression | i18nPlural:mapping\n     *\n     *  where `expression` is a number and `mapping` is an object that mimics the ICU format,\n     *  see http://userguide.icu-project.org/formatparse/messages\n     *\n     *  ## Example\n     *\n     *  ```\n     *  @Component({\n     *    selector: 'app',\n     *    template: `\n     *      <div>\n     *        {{ messages.length | i18nPlural: messageMapping }}\n     *      </div>\n     *    `,\n     *    // best practice is to define the locale at the application level\n     *    providers: [{provide: LOCALE_ID, useValue: 'en_US'}]\n     *  })\n     *\n     *  class MyApp {\n     *    messages: any[];\n     *    messageMapping: {[k:string]: string} = {\n     *      '=0': 'No messages.',\n     *      '=1': 'One message.',\n     *      'other': '# messages.'\n     *    }\n     *    ...\n     *  }\n     *  ```\n     *\n     * @experimental\n     */\n    var I18nPluralPipe = (function () {\n        function I18nPluralPipe(_localization) {\n            this._localization = _localization;\n        }\n        I18nPluralPipe.prototype.transform = function (value, pluralMap) {\n            if (isBlank(value))\n                return '';\n            if (!isStringMap(pluralMap)) {\n                throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);\n            }\n            var key = getPluralCategory(value, Object.keys(pluralMap), this._localization);\n            return StringWrapper.replaceAll(pluralMap[key], _INTERPOLATION_REGEXP, value.toString());\n        };\n        I18nPluralPipe.decorators = [\n            { type: _angular_core.Pipe, args: [{ name: 'i18nPlural', pure: true },] },\n        ];\n        /** @nocollapse */\n        I18nPluralPipe.ctorParameters = [\n            { type: NgLocalization, },\n        ];\n        return I18nPluralPipe;\n    }());\n\n    /**\n     *\n     *  Generic selector that displays the string that matches the current value.\n     *\n     *  ## Usage\n     *\n     *  expression | i18nSelect:mapping\n     *\n     *  where `mapping` is an object that indicates the text that should be displayed\n     *  for different values of the provided `expression`.\n     *\n     *  ## Example\n     *\n     *  ```\n     *  <div>\n     *    {{ gender | i18nSelect: inviteMap }}\n     *  </div>\n     *\n     *  class MyApp {\n     *    gender: string = 'male';\n     *    inviteMap: any = {\n     *      'male': 'Invite him.',\n     *      'female': 'Invite her.',\n     *      'other': 'Invite them.'\n     *    }\n     *    ...\n     *  }\n     *  ```\n     *\n     *  @experimental\n     */\n    var I18nSelectPipe = (function () {\n        function I18nSelectPipe() {\n        }\n        I18nSelectPipe.prototype.transform = function (value, mapping) {\n            if (isBlank(value))\n                return '';\n            if (!isStringMap(mapping)) {\n                throw new InvalidPipeArgumentError(I18nSelectPipe, mapping);\n            }\n            return mapping.hasOwnProperty(value) ? mapping[value] : '';\n        };\n        I18nSelectPipe.decorators = [\n            { type: _angular_core.Pipe, args: [{ name: 'i18nSelect', pure: true },] },\n        ];\n        /** @nocollapse */\n        I18nSelectPipe.ctorParameters = [];\n        return I18nSelectPipe;\n    }());\n\n    /**\n     * Transforms any input value using `JSON.stringify`. Useful for debugging.\n     *\n     * ### Example\n     * {@example core/pipes/ts/json_pipe/json_pipe_example.ts region='JsonPipe'}\n     *\n     * @stable\n     */\n    var JsonPipe = (function () {\n        function JsonPipe() {\n        }\n        JsonPipe.prototype.transform = function (value) { return Json.stringify(value); };\n        JsonPipe.decorators = [\n            { type: _angular_core.Pipe, args: [{ name: 'json', pure: false },] },\n        ];\n        /** @nocollapse */\n        JsonPipe.ctorParameters = [];\n        return JsonPipe;\n    }());\n\n    /**\n     * Transforms text to lowercase.\n     *\n     * ### Example\n     *\n     * {@example core/pipes/ts/lowerupper_pipe/lowerupper_pipe_example.ts region='LowerUpperPipe'}\n     *\n     * @stable\n     */\n    var LowerCasePipe = (function () {\n        function LowerCasePipe() {\n        }\n        LowerCasePipe.prototype.transform = function (value) {\n            if (isBlank(value))\n                return value;\n            if (!isString(value)) {\n                throw new InvalidPipeArgumentError(LowerCasePipe, value);\n            }\n            return value.toLowerCase();\n        };\n        LowerCasePipe.decorators = [\n            { type: _angular_core.Pipe, args: [{ name: 'lowercase' },] },\n        ];\n        /** @nocollapse */\n        LowerCasePipe.ctorParameters = [];\n        return LowerCasePipe;\n    }());\n\n    var _NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$/;\n    function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {\n        if (currency === void 0) { currency = null; }\n        if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }\n        if (isBlank(value))\n            return null;\n        // Convert strings to numbers\n        value = isString(value) && NumberWrapper.isNumeric(value) ? +value : value;\n        if (!isNumber(value)) {\n            throw new InvalidPipeArgumentError(pipe, value);\n        }\n        var minInt;\n        var minFraction;\n        var maxFraction;\n        if (style !== NumberFormatStyle.Currency) {\n            // rely on Intl default for currency\n            minInt = 1;\n            minFraction = 0;\n            maxFraction = 3;\n        }\n        if (isPresent(digits)) {\n            var parts = digits.match(_NUMBER_FORMAT_REGEXP);\n            if (parts === null) {\n                throw new Error(digits + \" is not a valid digit info for number pipes\");\n            }\n            if (isPresent(parts[1])) {\n                minInt = NumberWrapper.parseIntAutoRadix(parts[1]);\n            }\n            if (isPresent(parts[3])) {\n                minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);\n            }\n            if (isPresent(parts[5])) {\n                maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);\n            }\n        }\n        return NumberFormatter.format(value, locale, style, {\n            minimumIntegerDigits: minInt,\n            minimumFractionDigits: minFraction,\n            maximumFractionDigits: maxFraction,\n            currency: currency,\n            currencyAsSymbol: currencyAsSymbol\n        });\n    }\n    /**\n     * WARNING: this pipe uses the Internationalization API.\n     * Therefore it is only reliable in Chrome and Opera browsers. For other browsers please use an\n     * polyfill, for example: [https://github.com/andyearnshaw/Intl.js/].\n     *\n     * Formats a number as local text. i.e. group sizing and separator and other locale-specific\n     * configurations are based on the active locale.\n     *\n     * ### Usage\n     *\n     *     expression | number[:digitInfo]\n     *\n     * where `expression` is a number and `digitInfo` has the following format:\n     *\n     *     {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\n     *\n     * - minIntegerDigits is the minimum number of integer digits to use. Defaults to 1.\n     * - minFractionDigits is the minimum number of digits after fraction. Defaults to 0.\n     * - maxFractionDigits is the maximum number of digits after fraction. Defaults to 3.\n     *\n     * For more information on the acceptable range for each of these numbers and other\n     * details see your native internationalization library.\n     *\n     * ### Example\n     *\n     * {@example core/pipes/ts/number_pipe/number_pipe_example.ts region='NumberPipe'}\n     *\n     * @stable\n     */\n    var DecimalPipe = (function () {\n        function DecimalPipe(_locale) {\n            this._locale = _locale;\n        }\n        DecimalPipe.prototype.transform = function (value, digits) {\n            if (digits === void 0) { digits = null; }\n            return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n        };\n        DecimalPipe.decorators = [\n            { type: _angular_core.Pipe, args: [{ name: 'number' },] },\n        ];\n        /** @nocollapse */\n        DecimalPipe.ctorParameters = [\n            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },\n        ];\n        return DecimalPipe;\n    }());\n    /**\n     * WARNING: this pipe uses the Internationalization API.\n     * Therefore it is only reliable in Chrome and Opera browsers. For other browsers please use an\n     * polyfill, for example: [https://github.com/andyearnshaw/Intl.js/].\n     *\n     * Formats a number as local percent.\n     *\n     * ### Usage\n     *\n     *     expression | percent[:digitInfo]\n     *\n     * For more information about `digitInfo` see {@link DecimalPipe}\n     *\n     * ### Example\n     *\n     * {@example core/pipes/ts/number_pipe/number_pipe_example.ts region='PercentPipe'}\n     *\n     * @stable\n     */\n    var PercentPipe = (function () {\n        function PercentPipe(_locale) {\n            this._locale = _locale;\n        }\n        PercentPipe.prototype.transform = function (value, digits) {\n            if (digits === void 0) { digits = null; }\n            return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n        };\n        PercentPipe.decorators = [\n            { type: _angular_core.Pipe, args: [{ name: 'percent' },] },\n        ];\n        /** @nocollapse */\n        PercentPipe.ctorParameters = [\n            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },\n        ];\n        return PercentPipe;\n    }());\n    /**\n     * WARNING: this pipe uses the Internationalization API.\n     * Therefore it is only reliable in Chrome and Opera browsers. For other browsers please use an\n     * polyfill, for example: [https://github.com/andyearnshaw/Intl.js/].\n     *\n     *\n     * Formats a number as local currency.\n     *\n     * ### Usage\n     *\n     *     expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]\n     *\n     * where `currencyCode` is the ISO 4217 currency code, such as \"USD\" for the US dollar and\n     * \"EUR\" for the euro. `symbolDisplay` is a boolean indicating whether to use the currency\n     * symbol (e.g. $) or the currency code (e.g. USD) in the output. The default for this value\n     * is `false`.\n     * For more information about `digitInfo` see {@link DecimalPipe}\n     *\n     * ### Example\n     *\n     * {@example core/pipes/ts/number_pipe/number_pipe_example.ts region='CurrencyPipe'}\n     *\n     * @stable\n     */\n    var CurrencyPipe = (function () {\n        function CurrencyPipe(_locale) {\n            this._locale = _locale;\n        }\n        CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {\n            if (currencyCode === void 0) { currencyCode = 'USD'; }\n            if (symbolDisplay === void 0) { symbolDisplay = false; }\n            if (digits === void 0) { digits = null; }\n            return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);\n        };\n        CurrencyPipe.decorators = [\n            { type: _angular_core.Pipe, args: [{ name: 'currency' },] },\n        ];\n        /** @nocollapse */\n        CurrencyPipe.ctorParameters = [\n            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },\n        ];\n        return CurrencyPipe;\n    }());\n\n    /**\n     * Creates a new List or String containing only a subset (slice) of the\n     * elements.\n     *\n     * The starting index of the subset to return is specified by the `start` parameter.\n     *\n     * The ending index of the subset to return is specified by the optional `end` parameter.\n     *\n     * ### Usage\n     *\n     *     expression | slice:start[:end]\n     *\n     * All behavior is based on the expected behavior of the JavaScript API\n     * Array.prototype.slice() and String.prototype.slice()\n     *\n     * Where the input expression is a [List] or [String], and `start` is:\n     *\n     * - **a positive integer**: return the item at _start_ index and all items after\n     * in the list or string expression.\n     * - **a negative integer**: return the item at _start_ index from the end and all items after\n     * in the list or string expression.\n     * - **`|start|` greater than the size of the expression**: return an empty list or string.\n     * - **`|start|` negative greater than the size of the expression**: return entire list or\n     * string expression.\n     *\n     * and where `end` is:\n     *\n     * - **omitted**: return all items until the end of the input\n     * - **a positive integer**: return all items before _end_ index of the list or string\n     * expression.\n     * - **a negative integer**: return all items before _end_ index from the end of the list\n     * or string expression.\n     *\n     * When operating on a [List], the returned list is always a copy even when all\n     * the elements are being returned.\n     *\n     * When operating on a blank value, returns it.\n     *\n     * ## List Example\n     *\n     * This `ngFor` example:\n     *\n     * {@example core/pipes/ts/slice_pipe/slice_pipe_example.ts region='SlicePipe_list'}\n     *\n     * produces the following:\n     *\n     *     <li>b</li>\n     *     <li>c</li>\n     *\n     * ## String Examples\n     *\n     * {@example core/pipes/ts/slice_pipe/slice_pipe_example.ts region='SlicePipe_string'}\n     *\n     * @stable\n     */\n    var SlicePipe = (function () {\n        function SlicePipe() {\n        }\n        SlicePipe.prototype.transform = function (value, start, end) {\n            if (end === void 0) { end = null; }\n            if (isBlank(value))\n                return value;\n            if (!this.supports(value)) {\n                throw new InvalidPipeArgumentError(SlicePipe, value);\n            }\n            if (isString(value)) {\n                return StringWrapper.slice(value, start, end);\n            }\n            return ListWrapper.slice(value, start, end);\n        };\n        SlicePipe.prototype.supports = function (obj) { return isString(obj) || isArray(obj); };\n        SlicePipe.decorators = [\n            { type: _angular_core.Pipe, args: [{ name: 'slice', pure: false },] },\n        ];\n        /** @nocollapse */\n        SlicePipe.ctorParameters = [];\n        return SlicePipe;\n    }());\n\n    /**\n     * Implements uppercase transforms to text.\n     *\n     * ### Example\n     *\n     * {@example core/pipes/ts/lowerupper_pipe/lowerupper_pipe_example.ts region='LowerUpperPipe'}\n     *\n     * @stable\n     */\n    var UpperCasePipe = (function () {\n        function UpperCasePipe() {\n        }\n        UpperCasePipe.prototype.transform = function (value) {\n            if (isBlank(value))\n                return value;\n            if (!isString(value)) {\n                throw new InvalidPipeArgumentError(UpperCasePipe, value);\n            }\n            return value.toUpperCase();\n        };\n        UpperCasePipe.decorators = [\n            { type: _angular_core.Pipe, args: [{ name: 'uppercase' },] },\n        ];\n        /** @nocollapse */\n        UpperCasePipe.ctorParameters = [];\n        return UpperCasePipe;\n    }());\n\n    /**\n     * The `NgClass` directive conditionally adds and removes CSS classes on an HTML element based on\n     * an expression's evaluation result.\n     *\n     * The result of an expression evaluation is interpreted differently depending on type of\n     * the expression evaluation result:\n     * - `string` - all the CSS classes listed in a string (space delimited) are added\n     * - `Array` - all the CSS classes (Array elements) are added\n     * - `Object` - each key corresponds to a CSS class name while values are interpreted as expressions\n     * evaluating to `Boolean`. If a given expression evaluates to `true` a corresponding CSS class\n     * is added - otherwise it is removed.\n     *\n     * While the `NgClass` directive can interpret expressions evaluating to `string`, `Array`\n     * or `Object`, the `Object`-based version is the most often used and has an advantage of keeping\n     * all the CSS class names in a template.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/a4YdtmWywhJ33uqfpPPn?p=preview)):\n     *\n     * ```\n     * import {Component} from '@angular/core';\n     * import {NgClass} from '@angular/common';\n     *\n     * @Component({\n     *   selector: 'toggle-button',\n     *   inputs: ['isDisabled'],\n     *   template: `\n     *      <div class=\"button\" [ngClass]=\"{active: isOn, disabled: isDisabled}\"\n     *          (click)=\"toggle(!isOn)\">\n     *          Click me!\n     *      </div>`,\n     *   styles: [`\n     *     .button {\n     *       width: 120px;\n     *       border: medium solid black;\n     *     }\n     *\n     *     .active {\n     *       background-color: red;\n     *    }\n     *\n     *     .disabled {\n     *       color: gray;\n     *       border: medium solid gray;\n     *     }\n     *   `],\n     *   directives: [NgClass]\n     * })\n     * class ToggleButton {\n     *   isOn = false;\n     *   isDisabled = false;\n     *\n     *   toggle(newState) {\n     *     if (!this.isDisabled) {\n     *       this.isOn = newState;\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * @stable\n     */\n    var NgClass = (function () {\n        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {\n            this._iterableDiffers = _iterableDiffers;\n            this._keyValueDiffers = _keyValueDiffers;\n            this._ngEl = _ngEl;\n            this._renderer = _renderer;\n            this._initialClasses = [];\n        }\n        Object.defineProperty(NgClass.prototype, \"initialClasses\", {\n            set: function (v) {\n                this._applyInitialClasses(true);\n                this._initialClasses = isPresent(v) && isString(v) ? v.split(' ') : [];\n                this._applyInitialClasses(false);\n                this._applyClasses(this._rawClass, false);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgClass.prototype, \"ngClass\", {\n            set: function (v) {\n                this._cleanupClasses(this._rawClass);\n                if (isString(v)) {\n                    v = v.split(' ');\n                }\n                this._rawClass = v;\n                this._iterableDiffer = null;\n                this._keyValueDiffer = null;\n                if (isPresent(v)) {\n                    if (isListLikeIterable(v)) {\n                        this._iterableDiffer = this._iterableDiffers.find(v).create(null);\n                    }\n                    else {\n                        this._keyValueDiffer = this._keyValueDiffers.find(v).create(null);\n                    }\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NgClass.prototype.ngDoCheck = function () {\n            if (isPresent(this._iterableDiffer)) {\n                var changes = this._iterableDiffer.diff(this._rawClass);\n                if (isPresent(changes)) {\n                    this._applyIterableChanges(changes);\n                }\n            }\n            if (isPresent(this._keyValueDiffer)) {\n                var changes = this._keyValueDiffer.diff(this._rawClass);\n                if (isPresent(changes)) {\n                    this._applyKeyValueChanges(changes);\n                }\n            }\n        };\n        NgClass.prototype._cleanupClasses = function (rawClassVal) {\n            this._applyClasses(rawClassVal, true);\n            this._applyInitialClasses(false);\n        };\n        NgClass.prototype._applyKeyValueChanges = function (changes) {\n            var _this = this;\n            changes.forEachAddedItem(function (record) { _this._toggleClass(record.key, record.currentValue); });\n            changes.forEachChangedItem(function (record) { _this._toggleClass(record.key, record.currentValue); });\n            changes.forEachRemovedItem(function (record) {\n                if (record.previousValue) {\n                    _this._toggleClass(record.key, false);\n                }\n            });\n        };\n        NgClass.prototype._applyIterableChanges = function (changes) {\n            var _this = this;\n            changes.forEachAddedItem(function (record) { _this._toggleClass(record.item, true); });\n            changes.forEachRemovedItem(function (record) { _this._toggleClass(record.item, false); });\n        };\n        NgClass.prototype._applyInitialClasses = function (isCleanup) {\n            var _this = this;\n            this._initialClasses.forEach(function (className) { return _this._toggleClass(className, !isCleanup); });\n        };\n        NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {\n            var _this = this;\n            if (isPresent(rawClassVal)) {\n                if (isArray(rawClassVal)) {\n                    rawClassVal.forEach(function (className) { return _this._toggleClass(className, !isCleanup); });\n                }\n                else if (rawClassVal instanceof Set) {\n                    rawClassVal.forEach(function (className) { return _this._toggleClass(className, !isCleanup); });\n                }\n                else {\n                    StringMapWrapper.forEach(rawClassVal, function (expVal, className) {\n                        if (isPresent(expVal))\n                            _this._toggleClass(className, !isCleanup);\n                    });\n                }\n            }\n        };\n        NgClass.prototype._toggleClass = function (className, enabled) {\n            className = className.trim();\n            if (className.length > 0) {\n                if (className.indexOf(' ') > -1) {\n                    var classes = className.split(/\\s+/g);\n                    for (var i = 0, len = classes.length; i < len; i++) {\n                        this._renderer.setElementClass(this._ngEl.nativeElement, classes[i], enabled);\n                    }\n                }\n                else {\n                    this._renderer.setElementClass(this._ngEl.nativeElement, className, enabled);\n                }\n            }\n        };\n        NgClass.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngClass]' },] },\n        ];\n        /** @nocollapse */\n        NgClass.ctorParameters = [\n            { type: _angular_core.IterableDiffers, },\n            { type: _angular_core.KeyValueDiffers, },\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n        ];\n        NgClass.propDecorators = {\n            'initialClasses': [{ type: _angular_core.Input, args: ['class',] },],\n            'ngClass': [{ type: _angular_core.Input },],\n        };\n        return NgClass;\n    }());\n\n    var NgForRow = (function () {\n        function NgForRow($implicit, index, count) {\n            this.$implicit = $implicit;\n            this.index = index;\n            this.count = count;\n        }\n        Object.defineProperty(NgForRow.prototype, \"first\", {\n            get: function () { return this.index === 0; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForRow.prototype, \"last\", {\n            get: function () { return this.index === this.count - 1; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForRow.prototype, \"even\", {\n            get: function () { return this.index % 2 === 0; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForRow.prototype, \"odd\", {\n            get: function () { return !this.even; },\n            enumerable: true,\n            configurable: true\n        });\n        return NgForRow;\n    }());\n    /**\n     * The `NgFor` directive instantiates a template once per item from an iterable. The context for\n     * each instantiated template inherits from the outer context with the given loop variable set\n     * to the current item from the iterable.\n     *\n     * ### Local Variables\n     *\n     * `NgFor` provides several exported values that can be aliased to local variables:\n     *\n     * * `index` will be set to the current loop iteration for each template context.\n     * * `first` will be set to a boolean value indicating whether the item is the first one in the\n     *   iteration.\n     * * `last` will be set to a boolean value indicating whether the item is the last one in the\n     *   iteration.\n     * * `even` will be set to a boolean value indicating whether this item has an even index.\n     * * `odd` will be set to a boolean value indicating whether this item has an odd index.\n     *\n     * ### Change Propagation\n     *\n     * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:\n     *\n     * * When an item is added, a new instance of the template is added to the DOM.\n     * * When an item is removed, its template instance is removed from the DOM.\n     * * When items are reordered, their respective templates are reordered in the DOM.\n     * * Otherwise, the DOM element for that item will remain the same.\n     *\n     * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n     * those changes in the DOM. This has important implications for animations and any stateful\n     * controls\n     * (such as `<input>` elements which accept user input) that are present. Inserted rows can be\n     * animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such\n     * as user input.\n     *\n     * It is possible for the identities of elements in the iterator to change while the data does not.\n     * This can happen, for example, if the iterator produced from an RPC to the server, and that\n     * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\n     * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\n     * elements were deleted and all new elements inserted). This is an expensive operation and should\n     * be avoided if possible.\n     *\n     * To customize the default tracking algorithm, `NgFor` supports `trackBy` option.\n     * `trackBy` takes a function which has two arguments: `index` and `item`.\n     * If `trackBy` is given, Angular tracks changes by the return value of the function.\n     *\n     * ### Syntax\n     *\n     * - `<li *ngFor=\"let item of items; let i = index; trackBy: trackByFn\">...</li>`\n     * - `<li template=\"ngFor let item of items; let i = index; trackBy: trackByFn\">...</li>`\n     *\n     * With `<template>` element:\n     *\n     * ```\n     * <template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n     *   <li>...</li>\n     * </template>\n     * ```\n     *\n     * ### Example\n     *\n     * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\n     * example.\n     *\n     * @stable\n     */\n    var NgFor = (function () {\n        function NgFor(_viewContainer, _templateRef, _iterableDiffers, _cdr) {\n            this._viewContainer = _viewContainer;\n            this._templateRef = _templateRef;\n            this._iterableDiffers = _iterableDiffers;\n            this._cdr = _cdr;\n        }\n        Object.defineProperty(NgFor.prototype, \"ngForTemplate\", {\n            set: function (value) {\n                if (isPresent(value)) {\n                    this._templateRef = value;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NgFor.prototype.ngOnChanges = function (changes) {\n            if ('ngForOf' in changes) {\n                // React on ngForOf changes only once all inputs have been initialized\n                var value = changes['ngForOf'].currentValue;\n                if (isBlank(this._differ) && isPresent(value)) {\n                    try {\n                        this._differ = this._iterableDiffers.find(value).create(this._cdr, this.ngForTrackBy);\n                    }\n                    catch (e) {\n                        throw new Error(\"Cannot find a differ supporting object '\" + value + \"' of type '\" + getTypeNameForDebugging(value) + \"'. NgFor only supports binding to Iterables such as Arrays.\");\n                    }\n                }\n            }\n        };\n        NgFor.prototype.ngDoCheck = function () {\n            if (isPresent(this._differ)) {\n                var changes = this._differ.diff(this.ngForOf);\n                if (isPresent(changes))\n                    this._applyChanges(changes);\n            }\n        };\n        NgFor.prototype._applyChanges = function (changes) {\n            var _this = this;\n            var insertTuples = [];\n            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {\n                if (item.previousIndex == null) {\n                    var view = _this._viewContainer.createEmbeddedView(_this._templateRef, new NgForRow(null, null, null), currentIndex);\n                    var tuple = new RecordViewTuple(item, view);\n                    insertTuples.push(tuple);\n                }\n                else if (currentIndex == null) {\n                    _this._viewContainer.remove(adjustedPreviousIndex);\n                }\n                else {\n                    var view = _this._viewContainer.get(adjustedPreviousIndex);\n                    _this._viewContainer.move(view, currentIndex);\n                    var tuple = new RecordViewTuple(item, view);\n                    insertTuples.push(tuple);\n                }\n            });\n            for (var i = 0; i < insertTuples.length; i++) {\n                this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n            }\n            for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {\n                var viewRef = this._viewContainer.get(i);\n                viewRef.context.index = i;\n                viewRef.context.count = ilen;\n            }\n            changes.forEachIdentityChange(function (record) {\n                var viewRef = _this._viewContainer.get(record.currentIndex);\n                viewRef.context.$implicit = record.item;\n            });\n        };\n        NgFor.prototype._perViewChange = function (view, record) {\n            view.context.$implicit = record.item;\n        };\n        NgFor.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngFor][ngForOf]' },] },\n        ];\n        /** @nocollapse */\n        NgFor.ctorParameters = [\n            { type: _angular_core.ViewContainerRef, },\n            { type: _angular_core.TemplateRef, },\n            { type: _angular_core.IterableDiffers, },\n            { type: _angular_core.ChangeDetectorRef, },\n        ];\n        NgFor.propDecorators = {\n            'ngForOf': [{ type: _angular_core.Input },],\n            'ngForTrackBy': [{ type: _angular_core.Input },],\n            'ngForTemplate': [{ type: _angular_core.Input },],\n        };\n        return NgFor;\n    }());\n    var RecordViewTuple = (function () {\n        function RecordViewTuple(record, view) {\n            this.record = record;\n            this.view = view;\n        }\n        return RecordViewTuple;\n    }());\n\n    /**\n     * Removes or recreates a portion of the DOM tree based on an {expression}.\n     *\n     * If the expression assigned to `ngIf` evaluates to a false value then the element\n     * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview)):\n     *\n     * ```\n     * <div *ngIf=\"errorCount > 0\" class=\"error\">\n     *   <!-- Error message displayed when the errorCount property on the current context is greater\n     * than 0. -->\n     *   {{errorCount}} errors detected\n     * </div>\n     * ```\n     *\n     * ### Syntax\n     *\n     * - `<div *ngIf=\"condition\">...</div>`\n     * - `<div template=\"ngIf condition\">...</div>`\n     * - `<template [ngIf]=\"condition\"><div>...</div></template>`\n     *\n     * @stable\n     */\n    var NgIf = (function () {\n        function NgIf(_viewContainer, _templateRef) {\n            this._viewContainer = _viewContainer;\n            this._templateRef = _templateRef;\n            this._prevCondition = null;\n        }\n        Object.defineProperty(NgIf.prototype, \"ngIf\", {\n            set: function (newCondition) {\n                if (newCondition && (isBlank(this._prevCondition) || !this._prevCondition)) {\n                    this._prevCondition = true;\n                    this._viewContainer.createEmbeddedView(this._templateRef);\n                }\n                else if (!newCondition && (isBlank(this._prevCondition) || this._prevCondition)) {\n                    this._prevCondition = false;\n                    this._viewContainer.clear();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NgIf.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngIf]' },] },\n        ];\n        /** @nocollapse */\n        NgIf.ctorParameters = [\n            { type: _angular_core.ViewContainerRef, },\n            { type: _angular_core.TemplateRef, },\n        ];\n        NgIf.propDecorators = {\n            'ngIf': [{ type: _angular_core.Input },],\n        };\n        return NgIf;\n    }());\n\n    var _CASE_DEFAULT = new Object();\n    var SwitchView = (function () {\n        function SwitchView(_viewContainerRef, _templateRef) {\n            this._viewContainerRef = _viewContainerRef;\n            this._templateRef = _templateRef;\n        }\n        SwitchView.prototype.create = function () { this._viewContainerRef.createEmbeddedView(this._templateRef); };\n        SwitchView.prototype.destroy = function () { this._viewContainerRef.clear(); };\n        return SwitchView;\n    }());\n    /**\n     * Adds or removes DOM sub-trees when their match expressions match the switch expression.\n     *\n     * Elements within `NgSwitch` but without `NgSwitchCase` or `NgSwitchDefault` directives will be\n     * preserved at the location as specified in the template.\n     *\n     * `NgSwitch` simply inserts nested elements based on which match expression matches the value\n     * obtained from the evaluated switch expression. In other words, you define a container element\n     * (where you place the directive with a switch expression on the\n     * `[ngSwitch]=\"...\"` attribute), define any inner elements inside of the directive and\n     * place a `[ngSwitchCase]` attribute per element.\n     *\n     * The `ngSwitchCase` property is used to inform `NgSwitch` which element to display when the\n     * expression is evaluated. If a matching expression is not found via a `ngSwitchCase` property\n     * then an element with the `ngSwitchDefault` attribute is displayed.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/DQMTII95CbuqWrl3lYAs?p=preview))\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'app',\n     *   template: `\n     *     <p>Value = {{value}}</p>\n     *     <button (click)=\"inc()\">Increment</button>\n     *\n     *     <div [ngSwitch]=\"value\">\n     *       <p *ngSwitchCase=\"'init'\">increment to start</p>\n     *       <p *ngSwitchCase=\"0\">0, increment again</p>\n     *       <p *ngSwitchCase=\"1\">1, increment again</p>\n     *       <p *ngSwitchCase=\"2\">2, stop incrementing</p>\n     *       <p *ngSwitchDefault>&gt; 2, STOP!</p>\n     *     </div>\n     *\n     *     <!-- alternate syntax -->\n     *\n     *     <p [ngSwitch]=\"value\">\n     *       <template ngSwitchCase=\"init\">increment to start</template>\n     *       <template [ngSwitchCase]=\"0\">0, increment again</template>\n     *       <template [ngSwitchCase]=\"1\">1, increment again</template>\n     *       <template [ngSwitchCase]=\"2\">2, stop incrementing</template>\n     *       <template ngSwitchDefault>&gt; 2, STOP!</template>\n     *     </p>\n     *   `,\n     *   directives: [NgSwitch, NgSwitchCase, NgSwitchDefault]\n     * })\n     * export class App {\n     *   value = 'init';\n     *\n     *   inc() {\n     *     this.value = this.value === 'init' ? 0 : this.value + 1;\n     *   }\n     * }\n     * ```\n     *\n     * @stable\n     */\n    var NgSwitch = (function () {\n        function NgSwitch() {\n            this._useDefault = false;\n            this._valueViews = new Map();\n            this._activeViews = [];\n        }\n        Object.defineProperty(NgSwitch.prototype, \"ngSwitch\", {\n            set: function (value) {\n                // Empty the currently active ViewContainers\n                this._emptyAllActiveViews();\n                // Add the ViewContainers matching the value (with a fallback to default)\n                this._useDefault = false;\n                var views = this._valueViews.get(value);\n                if (isBlank(views)) {\n                    this._useDefault = true;\n                    views = normalizeBlank(this._valueViews.get(_CASE_DEFAULT));\n                }\n                this._activateViews(views);\n                this._switchValue = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        NgSwitch.prototype._onCaseValueChanged = function (oldCase, newCase, view) {\n            this._deregisterView(oldCase, view);\n            this._registerView(newCase, view);\n            if (oldCase === this._switchValue) {\n                view.destroy();\n                ListWrapper.remove(this._activeViews, view);\n            }\n            else if (newCase === this._switchValue) {\n                if (this._useDefault) {\n                    this._useDefault = false;\n                    this._emptyAllActiveViews();\n                }\n                view.create();\n                this._activeViews.push(view);\n            }\n            // Switch to default when there is no more active ViewContainers\n            if (this._activeViews.length === 0 && !this._useDefault) {\n                this._useDefault = true;\n                this._activateViews(this._valueViews.get(_CASE_DEFAULT));\n            }\n        };\n        /** @internal */\n        NgSwitch.prototype._emptyAllActiveViews = function () {\n            var activeContainers = this._activeViews;\n            for (var i = 0; i < activeContainers.length; i++) {\n                activeContainers[i].destroy();\n            }\n            this._activeViews = [];\n        };\n        /** @internal */\n        NgSwitch.prototype._activateViews = function (views) {\n            // TODO(vicb): assert(this._activeViews.length === 0);\n            if (isPresent(views)) {\n                for (var i = 0; i < views.length; i++) {\n                    views[i].create();\n                }\n                this._activeViews = views;\n            }\n        };\n        /** @internal */\n        NgSwitch.prototype._registerView = function (value, view) {\n            var views = this._valueViews.get(value);\n            if (isBlank(views)) {\n                views = [];\n                this._valueViews.set(value, views);\n            }\n            views.push(view);\n        };\n        /** @internal */\n        NgSwitch.prototype._deregisterView = function (value, view) {\n            // `_CASE_DEFAULT` is used a marker for non-registered cases\n            if (value === _CASE_DEFAULT)\n                return;\n            var views = this._valueViews.get(value);\n            if (views.length == 1) {\n                this._valueViews.delete(value);\n            }\n            else {\n                ListWrapper.remove(views, view);\n            }\n        };\n        NgSwitch.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngSwitch]' },] },\n        ];\n        /** @nocollapse */\n        NgSwitch.ctorParameters = [];\n        NgSwitch.propDecorators = {\n            'ngSwitch': [{ type: _angular_core.Input },],\n        };\n        return NgSwitch;\n    }());\n    /**\n     * Insert the sub-tree when the `ngSwitchCase` expression evaluates to the same value as the\n     * enclosing switch expression.\n     *\n     * If multiple match expression match the switch expression value, all of them are displayed.\n     *\n     * See {@link NgSwitch} for more details and example.\n     *\n     * @stable\n     */\n    var NgSwitchCase = (function () {\n        function NgSwitchCase(viewContainer, templateRef, ngSwitch) {\n            // `_CASE_DEFAULT` is used as a marker for a not yet initialized value\n            /** @internal */\n            this._value = _CASE_DEFAULT;\n            this._switch = ngSwitch;\n            this._view = new SwitchView(viewContainer, templateRef);\n        }\n        Object.defineProperty(NgSwitchCase.prototype, \"ngSwitchCase\", {\n            set: function (value) {\n                this._switch._onCaseValueChanged(this._value, value, this._view);\n                this._value = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NgSwitchCase.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngSwitchCase]' },] },\n        ];\n        /** @nocollapse */\n        NgSwitchCase.ctorParameters = [\n            { type: _angular_core.ViewContainerRef, },\n            { type: _angular_core.TemplateRef, },\n            { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },\n        ];\n        NgSwitchCase.propDecorators = {\n            'ngSwitchCase': [{ type: _angular_core.Input },],\n        };\n        return NgSwitchCase;\n    }());\n    /**\n     * Default case statements are displayed when no match expression matches the switch expression\n     * value.\n     *\n     * See {@link NgSwitch} for more details and example.\n     *\n     * @stable\n     */\n    var NgSwitchDefault = (function () {\n        function NgSwitchDefault(viewContainer, templateRef, sswitch) {\n            sswitch._registerView(_CASE_DEFAULT, new SwitchView(viewContainer, templateRef));\n        }\n        NgSwitchDefault.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngSwitchDefault]' },] },\n        ];\n        /** @nocollapse */\n        NgSwitchDefault.ctorParameters = [\n            { type: _angular_core.ViewContainerRef, },\n            { type: _angular_core.TemplateRef, },\n            { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },\n        ];\n        return NgSwitchDefault;\n    }());\n\n    /**\n     * `ngPlural` is an i18n directive that displays DOM sub-trees that match the switch expression\n     * value, or failing that, DOM sub-trees that match the switch expression's pluralization category.\n     *\n     * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n     * to a\n     * switch expression.\n     *    - Inner elements defined with an `[ngPluralCase]` attribute will display based on their\n     * expression.\n     *    - If `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n     * matches the switch expression exactly.\n     *    - Otherwise, the view will be treated as a \"category match\", and will only display if exact\n     * value matches aren't found and the value maps to its category for the defined locale.\n     *\n     * ```typescript\n     * @Component({\n     *    selector: 'app',\n     *    // best practice is to define the locale at the application level\n     *    providers: [{provide: LOCALE_ID, useValue: 'en_US'}]\n     * })\n     * @View({\n     *   template: `\n     *     <p>Value = {{value}}</p>\n     *     <button (click)=\"inc()\">Increment</button>\n     *\n     *     <div [ngPlural]=\"value\">\n     *       <template ngPluralCase=\"=0\">there is nothing</template>\n     *       <template ngPluralCase=\"=1\">there is one</template>\n     *       <template ngPluralCase=\"few\">there are a few</template>\n     *       <template ngPluralCase=\"other\">there is some number</template>\n     *     </div>\n     *   `,\n     *   directives: [NgPlural, NgPluralCase]\n     * })\n     * export class App {\n     *   value = 'init';\n     *\n     *   inc() {\n     *     this.value = this.value === 'init' ? 0 : this.value + 1;\n     *   }\n     * }\n     *\n     * ```\n     * @experimental\n     */\n    var NgPlural = (function () {\n        function NgPlural(_localization) {\n            this._localization = _localization;\n            this._caseViews = {};\n        }\n        Object.defineProperty(NgPlural.prototype, \"ngPlural\", {\n            set: function (value) {\n                this._switchValue = value;\n                this._updateView();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };\n        /** @internal */\n        NgPlural.prototype._updateView = function () {\n            this._clearViews();\n            var key = getPluralCategory(this._switchValue, Object.keys(this._caseViews), this._localization);\n            this._activateView(this._caseViews[key]);\n        };\n        /** @internal */\n        NgPlural.prototype._clearViews = function () {\n            if (isPresent(this._activeView))\n                this._activeView.destroy();\n        };\n        /** @internal */\n        NgPlural.prototype._activateView = function (view) {\n            if (!isPresent(view))\n                return;\n            this._activeView = view;\n            this._activeView.create();\n        };\n        NgPlural.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngPlural]' },] },\n        ];\n        /** @nocollapse */\n        NgPlural.ctorParameters = [\n            { type: NgLocalization, },\n        ];\n        NgPlural.propDecorators = {\n            'ngPlural': [{ type: _angular_core.Input },],\n        };\n        return NgPlural;\n    }());\n    /**\n     * @experimental\n     */\n    var NgPluralCase = (function () {\n        function NgPluralCase(value, template, viewContainer, ngPlural) {\n            this.value = value;\n            ngPlural.addCase(value, new SwitchView(viewContainer, template));\n        }\n        NgPluralCase.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngPluralCase]' },] },\n        ];\n        /** @nocollapse */\n        NgPluralCase.ctorParameters = [\n            { type: undefined, decorators: [{ type: _angular_core.Attribute, args: ['ngPluralCase',] },] },\n            { type: _angular_core.TemplateRef, },\n            { type: _angular_core.ViewContainerRef, },\n            { type: NgPlural, decorators: [{ type: _angular_core.Host },] },\n        ];\n        return NgPluralCase;\n    }());\n\n    /**\n     * The `NgStyle` directive changes styles based on a result of expression evaluation.\n     *\n     * An expression assigned to the `ngStyle` property must evaluate to an object and the\n     * corresponding element styles are updated based on changes to this object. Style names to update\n     * are taken from the object's keys, and values - from the corresponding object's values.\n     *\n     * ### Syntax\n     *\n     * - `<div [ngStyle]=\"{'font-style': styleExp}\"></div>`\n     * - `<div [ngStyle]=\"{'max-width.px': widthExp}\"></div>`\n     * - `<div [ngStyle]=\"styleExp\"></div>` - here the `styleExp` must evaluate to an object\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/YamGS6GkUh9GqWNQhCyM?p=preview)):\n     *\n     * ```\n     * import {Component} from '@angular/core';\n     * import {NgStyle} from '@angular/common';\n     *\n     * @Component({\n     *  selector: 'ngStyle-example',\n     *  template: `\n     *    <h1 [ngStyle]=\"{'font-style': style, 'font-size': size, 'font-weight': weight}\">\n     *      Change style of this text!\n     *    </h1>\n     *\n     *    <hr>\n     *\n     *    <label>Italic: <input type=\"checkbox\" (change)=\"changeStyle($event)\"></label>\n     *    <label>Bold: <input type=\"checkbox\" (change)=\"changeWeight($event)\"></label>\n     *    <label>Size: <input type=\"text\" [value]=\"size\" (change)=\"size = $event.target.value\"></label>\n     *  `,\n     *  directives: [NgStyle]\n     * })\n     * export class NgStyleExample {\n     *    style = 'normal';\n     *    weight = 'normal';\n     *    size = '20px';\n     *\n     *    changeStyle($event: any) {\n     *      this.style = $event.target.checked ? 'italic' : 'normal';\n     *    }\n     *\n     *    changeWeight($event: any) {\n     *      this.weight = $event.target.checked ? 'bold' : 'normal';\n     *    }\n     * }\n     * ```\n     *\n     * In this example the `font-style`, `font-size` and `font-weight` styles will be updated\n     * based on the `style` property's value changes.\n     *\n     * @stable\n     */\n    var NgStyle = (function () {\n        function NgStyle(_differs, _ngEl, _renderer) {\n            this._differs = _differs;\n            this._ngEl = _ngEl;\n            this._renderer = _renderer;\n        }\n        Object.defineProperty(NgStyle.prototype, \"ngStyle\", {\n            set: function (v) {\n                this._ngStyle = v;\n                if (isBlank(this._differ) && isPresent(v)) {\n                    this._differ = this._differs.find(this._ngStyle).create(null);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NgStyle.prototype.ngDoCheck = function () {\n            if (isPresent(this._differ)) {\n                var changes = this._differ.diff(this._ngStyle);\n                if (isPresent(changes)) {\n                    this._applyChanges(changes);\n                }\n            }\n        };\n        NgStyle.prototype._applyChanges = function (changes) {\n            var _this = this;\n            changes.forEachRemovedItem(function (record) { _this._setStyle(record.key, null); });\n            changes.forEachAddedItem(function (record) { _this._setStyle(record.key, record.currentValue); });\n            changes.forEachChangedItem(function (record) { _this._setStyle(record.key, record.currentValue); });\n        };\n        NgStyle.prototype._setStyle = function (name, val) {\n            var nameParts = name.split('.');\n            var nameToSet = nameParts[0];\n            var valToSet = isPresent(val) && nameParts.length === 2 ? \"\" + val + nameParts[1] : val;\n            this._renderer.setElementStyle(this._ngEl.nativeElement, nameToSet, valToSet);\n        };\n        NgStyle.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngStyle]' },] },\n        ];\n        /** @nocollapse */\n        NgStyle.ctorParameters = [\n            { type: _angular_core.KeyValueDiffers, },\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n        ];\n        NgStyle.propDecorators = {\n            'ngStyle': [{ type: _angular_core.Input },],\n        };\n        return NgStyle;\n    }());\n\n    /**\n     * Creates and inserts an embedded view based on a prepared `TemplateRef`.\n     * You can attach a context object to the `EmbeddedViewRef` by setting `[ngOutletContext]`.\n     * `[ngOutletContext]` should be an object, the object's keys will be the local template variables\n     * available within the `TemplateRef`.\n     *\n     * Note: using the key `$implicit` in the context object will set it's value as default.\n     *\n     * ### Syntax\n     *\n     * ```\n     * <template [ngTemplateOutlet]=\"templateRefExpression\"\n     *           [ngOutletContext]=\"objectExpression\">\n     * </template>\n     * ```\n     *\n     * @experimental\n     */\n    var NgTemplateOutlet = (function () {\n        function NgTemplateOutlet(_viewContainerRef) {\n            this._viewContainerRef = _viewContainerRef;\n        }\n        Object.defineProperty(NgTemplateOutlet.prototype, \"ngOutletContext\", {\n            set: function (context) { this._context = context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgTemplateOutlet.prototype, \"ngTemplateOutlet\", {\n            set: function (templateRef) { this._templateRef = templateRef; },\n            enumerable: true,\n            configurable: true\n        });\n        NgTemplateOutlet.prototype.ngOnChanges = function () {\n            if (this._viewRef) {\n                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            if (this._templateRef) {\n                this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);\n            }\n        };\n        NgTemplateOutlet.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngTemplateOutlet]' },] },\n        ];\n        /** @nocollapse */\n        NgTemplateOutlet.ctorParameters = [\n            { type: _angular_core.ViewContainerRef, },\n        ];\n        NgTemplateOutlet.propDecorators = {\n            'ngOutletContext': [{ type: _angular_core.Input },],\n            'ngTemplateOutlet': [{ type: _angular_core.Input },],\n        };\n        return NgTemplateOutlet;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This class should not be used directly by an application developer. Instead, use\n     * {@link Location}.\n     *\n     * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n     * agnostic.\n     * This means that we can have different implementation of `PlatformLocation` for the different\n     * platforms\n     * that angular supports. For example, the default `PlatformLocation` is {@link\n     * BrowserPlatformLocation},\n     * however when you run your app in a WebWorker you use {@link WebWorkerPlatformLocation}.\n     *\n     * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}\n     * when\n     * they need to interact with the DOM apis like pushState, popState, etc...\n     *\n     * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly\n     * by\n     * the {@link Router} in order to navigate between routes. Since all interactions between {@link\n     * Router} /\n     * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n     * class\n     * they are all platform independent.\n     *\n     * @stable\n     */\n    var PlatformLocation = (function () {\n        function PlatformLocation() {\n        }\n        Object.defineProperty(PlatformLocation.prototype, \"pathname\", {\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PlatformLocation.prototype, \"search\", {\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PlatformLocation.prototype, \"hash\", {\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        return PlatformLocation;\n    }());\n\n    /**\n     * `LocationStrategy` is responsible for representing and reading route state\n     * from the browser's URL. Angular provides two strategies:\n     * {@link HashLocationStrategy} and {@link PathLocationStrategy} (default).\n     *\n     * This is used under the hood of the {@link Location} service.\n     *\n     * Applications should use the {@link Router} or {@link Location} services to\n     * interact with application route state.\n     *\n     * For instance, {@link HashLocationStrategy} produces URLs like\n     * `http://example.com#/foo`, and {@link PathLocationStrategy} produces\n     * `http://example.com/foo` as an equivalent URL.\n     *\n     * See these two classes for more.\n     *\n     * @stable\n     */\n    var LocationStrategy = (function () {\n        function LocationStrategy() {\n        }\n        return LocationStrategy;\n    }());\n    /**\n     * The `APP_BASE_HREF` token represents the base href to be used with the\n     * {@link PathLocationStrategy}.\n     *\n     * If you're using {@link PathLocationStrategy}, you must provide a provider to a string\n     * representing the URL prefix that should be preserved when generating and recognizing\n     * URLs.\n     *\n     * ### Example\n     *\n     * import {Component, NgModule} from '@angular/core';\n     * import {APP_BASE_HREF} from '@angular/common';\n     *\n     * @NgModule({\n     *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n     * })\n     * class AppModule {}\n     * ```\n     *\n     * @stable\n     */\n    var APP_BASE_HREF = new _angular_core.OpaqueToken('appBaseHref');\n\n    /**\n     * `Location` is a service that applications can use to interact with a browser's URL.\n     * Depending on which {@link LocationStrategy} is used, `Location` will either persist\n     * to the URL's path or the URL's hash segment.\n     *\n     * Note: it's better to use {@link Router#navigate} service to trigger route changes. Use\n     * `Location` only if you need to interact with or create normalized URLs outside of\n     * routing.\n     *\n     * `Location` is responsible for normalizing the URL against the application's base href.\n     * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n     * trailing slash:\n     * - `/my/app/user/123` is normalized\n     * - `my/app/user/123` **is not** normalized\n     * - `/my/app/user/123/` **is not** normalized\n     *\n     * ### Example\n     *\n     * ```\n     * import {Component} from '@angular/core';\n     * import {Location} from '@angular/common';\n     *\n     * @Component({selector: 'app-component'})\n     * class AppCmp {\n     *   constructor(location: Location) {\n     *     location.go('/foo');\n     *   }\n     * }\n     * ```\n     *\n     * @stable\n     */\n    var Location = (function () {\n        function Location(platformStrategy) {\n            var _this = this;\n            /** @internal */\n            this._subject = new _angular_core.EventEmitter();\n            this._platformStrategy = platformStrategy;\n            var browserBaseHref = this._platformStrategy.getBaseHref();\n            this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));\n            this._platformStrategy.onPopState(function (ev) { _this._subject.emit({ 'url': _this.path(true), 'pop': true, 'type': ev.type }); });\n        }\n        /**\n         * Returns the normalized URL path.\n         */\n        // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is\n        // removed.\n        Location.prototype.path = function (includeHash) {\n            if (includeHash === void 0) { includeHash = false; }\n            return this.normalize(this._platformStrategy.path(includeHash));\n        };\n        /**\n         * Normalizes the given path and compares to the current normalized path.\n         */\n        Location.prototype.isCurrentPathEqualTo = function (path, query) {\n            if (query === void 0) { query = ''; }\n            return this.path() == this.normalize(path + Location.normalizeQueryParams(query));\n        };\n        /**\n         * Given a string representing a URL, returns the normalized URL path without leading or\n         * trailing slashes\n         */\n        Location.prototype.normalize = function (url) {\n            return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\n        };\n        /**\n         * Given a string representing a URL, returns the platform-specific external URL path.\n         * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one\n         * before normalizing. This method will also add a hash if `HashLocationStrategy` is\n         * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n         */\n        Location.prototype.prepareExternalUrl = function (url) {\n            if (url.length > 0 && !url.startsWith('/')) {\n                url = '/' + url;\n            }\n            return this._platformStrategy.prepareExternalUrl(url);\n        };\n        // TODO: rename this method to pushState\n        /**\n         * Changes the browsers URL to the normalized version of the given URL, and pushes a\n         * new item onto the platform's history.\n         */\n        Location.prototype.go = function (path, query) {\n            if (query === void 0) { query = ''; }\n            this._platformStrategy.pushState(null, '', path, query);\n        };\n        /**\n         * Changes the browsers URL to the normalized version of the given URL, and replaces\n         * the top item on the platform's history stack.\n         */\n        Location.prototype.replaceState = function (path, query) {\n            if (query === void 0) { query = ''; }\n            this._platformStrategy.replaceState(null, '', path, query);\n        };\n        /**\n         * Navigates forward in the platform's history.\n         */\n        Location.prototype.forward = function () { this._platformStrategy.forward(); };\n        /**\n         * Navigates back in the platform's history.\n         */\n        Location.prototype.back = function () { this._platformStrategy.back(); };\n        /**\n         * Subscribe to the platform's `popState` events.\n         */\n        Location.prototype.subscribe = function (onNext, onThrow, onReturn) {\n            if (onThrow === void 0) { onThrow = null; }\n            if (onReturn === void 0) { onReturn = null; }\n            return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\n        };\n        /**\n         * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as\n         * is.\n         */\n        Location.normalizeQueryParams = function (params) {\n            return (params.length > 0 && params.substring(0, 1) != '?') ? ('?' + params) : params;\n        };\n        /**\n         * Given 2 parts of a url, join them with a slash if needed.\n         */\n        Location.joinWithSlash = function (start, end) {\n            if (start.length == 0) {\n                return end;\n            }\n            if (end.length == 0) {\n                return start;\n            }\n            var slashes = 0;\n            if (start.endsWith('/')) {\n                slashes++;\n            }\n            if (end.startsWith('/')) {\n                slashes++;\n            }\n            if (slashes == 2) {\n                return start + end.substring(1);\n            }\n            if (slashes == 1) {\n                return start + end;\n            }\n            return start + '/' + end;\n        };\n        /**\n         * If url has a trailing slash, remove it, otherwise return url as is.\n         */\n        Location.stripTrailingSlash = function (url) {\n            if (/\\/$/g.test(url)) {\n                url = url.substring(0, url.length - 1);\n            }\n            return url;\n        };\n        Location.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        Location.ctorParameters = [\n            { type: LocationStrategy, },\n        ];\n        return Location;\n    }());\n    function _stripBaseHref(baseHref, url) {\n        if (baseHref.length > 0 && url.startsWith(baseHref)) {\n            return url.substring(baseHref.length);\n        }\n        return url;\n    }\n    function _stripIndexHtml(url) {\n        if (/\\/index.html$/g.test(url)) {\n            // '/index.html'.length == 11\n            return url.substring(0, url.length - 11);\n        }\n        return url;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * `HashLocationStrategy` is a {@link LocationStrategy} used to configure the\n     * {@link Location} service to represent its state in the\n     * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n     * of the browser's URL.\n     *\n     * For instance, if you call `location.go('/foo')`, the browser's URL will become\n     * `example.com#/foo`.\n     *\n     * ### Example\n     *\n     * ```\n     * import {Component, NgModule} from '@angular/core';\n     * import {\n     *   LocationStrategy,\n     *   HashLocationStrategy\n     * } from '@angular/common';\n     *\n     * @NgModule({\n     *   providers: [{provide: LocationStrategy, useClass: HashLocationStrategy}]\n     * })\n     * class AppModule {}\n     * ```\n     *\n     * @stable\n     */\n    var HashLocationStrategy = (function (_super) {\n        __extends$3(HashLocationStrategy, _super);\n        function HashLocationStrategy(_platformLocation, _baseHref) {\n            _super.call(this);\n            this._platformLocation = _platformLocation;\n            this._baseHref = '';\n            if (isPresent(_baseHref)) {\n                this._baseHref = _baseHref;\n            }\n        }\n        HashLocationStrategy.prototype.onPopState = function (fn) {\n            this._platformLocation.onPopState(fn);\n            this._platformLocation.onHashChange(fn);\n        };\n        HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };\n        HashLocationStrategy.prototype.path = function (includeHash) {\n            if (includeHash === void 0) { includeHash = false; }\n            // the hash value is always prefixed with a `#`\n            // and if it is empty then it will stay empty\n            var path = this._platformLocation.hash;\n            if (!isPresent(path))\n                path = '#';\n            return path.length > 0 ? path.substring(1) : path;\n        };\n        HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {\n            var url = Location.joinWithSlash(this._baseHref, internal);\n            return url.length > 0 ? ('#' + url) : url;\n        };\n        HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {\n            var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n            if (url.length == 0) {\n                url = this._platformLocation.pathname;\n            }\n            this._platformLocation.pushState(state, title, url);\n        };\n        HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {\n            var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n            if (url.length == 0) {\n                url = this._platformLocation.pathname;\n            }\n            this._platformLocation.replaceState(state, title, url);\n        };\n        HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };\n        HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };\n        HashLocationStrategy.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        HashLocationStrategy.ctorParameters = [\n            { type: PlatformLocation, },\n            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },\n        ];\n        return HashLocationStrategy;\n    }(LocationStrategy));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * `PathLocationStrategy` is a {@link LocationStrategy} used to configure the\n     * {@link Location} service to represent its state in the\n     * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n     * browser's URL.\n     *\n     * `PathLocationStrategy` is the default binding for {@link LocationStrategy}\n     * provided in {@link ROUTER_PROVIDERS}.\n     *\n     * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}\n     * or add a base element to the document. This URL prefix that will be preserved\n     * when generating and recognizing URLs.\n     *\n     * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\n     * `location.go('/foo')`, the browser's URL will become\n     * `example.com/my/app/foo`.\n     *\n     * Similarly, if you add `<base href='/my/app'/>` to the document and call\n     * `location.go('/foo')`, the browser's URL will become\n     * `example.com/my/app/foo`.\n     *\n     * @stable\n     */\n    var PathLocationStrategy = (function (_super) {\n        __extends$4(PathLocationStrategy, _super);\n        function PathLocationStrategy(_platformLocation, href) {\n            _super.call(this);\n            this._platformLocation = _platformLocation;\n            if (isBlank(href)) {\n                href = this._platformLocation.getBaseHrefFromDOM();\n            }\n            if (isBlank(href)) {\n                throw new Error(\"No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.\");\n            }\n            this._baseHref = href;\n        }\n        PathLocationStrategy.prototype.onPopState = function (fn) {\n            this._platformLocation.onPopState(fn);\n            this._platformLocation.onHashChange(fn);\n        };\n        PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };\n        PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {\n            return Location.joinWithSlash(this._baseHref, internal);\n        };\n        PathLocationStrategy.prototype.path = function (includeHash) {\n            if (includeHash === void 0) { includeHash = false; }\n            var pathname = this._platformLocation.pathname +\n                Location.normalizeQueryParams(this._platformLocation.search);\n            var hash = this._platformLocation.hash;\n            return hash && includeHash ? \"\" + pathname + hash : pathname;\n        };\n        PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {\n            var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n            this._platformLocation.pushState(state, title, externalUrl);\n        };\n        PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {\n            var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n            this._platformLocation.replaceState(state, title, externalUrl);\n        };\n        PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };\n        PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };\n        PathLocationStrategy.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        PathLocationStrategy.ctorParameters = [\n            { type: PlatformLocation, },\n            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },\n        ];\n        return PathLocationStrategy;\n    }(LocationStrategy));\n\n    /**\n     * A collection of Angular core directives that are likely to be used in each and every Angular\n     * application.\n     *\n     * This collection can be used to quickly enumerate all the built-in directives in the `directives`\n     * property of the `@Component` annotation.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/yakGwpCdUkg0qfzX5m8g?p=preview))\n     *\n     * Instead of writing:\n     *\n     * ```typescript\n     * import {NgClass, NgIf, NgFor, NgSwitch, NgSwitchCase, NgSwitchDefault} from '@angular/common';\n     * import {OtherDirective} from './myDirectives';\n     *\n     * @Component({\n     *   selector: 'my-component',\n     *   templateUrl: 'myComponent.html',\n     *   directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchCase, NgSwitchDefault, OtherDirective]\n     * })\n     * export class MyComponent {\n     *   ...\n     * }\n     * ```\n     * one could import all the core directives at once:\n     *\n     * ```typescript\n     * import {CORE_DIRECTIVES} from '@angular/common';\n     * import {OtherDirective} from './myDirectives';\n     *\n     * @Component({\n     *   selector: 'my-component',\n     *   templateUrl: 'myComponent.html',\n     *   directives: [CORE_DIRECTIVES, OtherDirective]\n     * })\n     * export class MyComponent {\n     *   ...\n     * }\n     * ```\n     *\n     * @stable\n     */\n    var CORE_DIRECTIVES = [\n        NgClass,\n        NgFor,\n        NgIf,\n        NgTemplateOutlet,\n        NgStyle,\n        NgSwitch,\n        NgSwitchCase,\n        NgSwitchDefault,\n        NgPlural,\n        NgPluralCase,\n    ];\n\n    /**\n     * A collection of Angular core directives that are likely to be used in each and every Angular\n     * application. This includes core directives (e.g., NgIf and NgFor), and forms directives (e.g.,\n     * NgModel).\n     *\n     * This collection can be used to quickly enumerate all the built-in directives in the `directives`\n     * property of the `@Component` decorator.\n     *\n     * ### Example\n     *\n     * Instead of writing:\n     *\n     * ```typescript\n     * import {NgClass, NgIf, NgFor, NgSwitch, NgSwitchCase, NgSwitchDefault, NgModel, NgForm} from\n     * '@angular/common';\n     * import {OtherDirective} from './myDirectives';\n     *\n     * @Component({\n     *   selector: 'my-component',\n     *   templateUrl: 'myComponent.html',\n     *   directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchCase, NgSwitchDefault, NgModel, NgForm,\n     * OtherDirective]\n     * })\n     * export class MyComponent {\n     *   ...\n     * }\n     * ```\n     * one could import all the common directives at once:\n     *\n     * ```typescript\n     * import {COMMON_DIRECTIVES} from '@angular/common';\n     * import {OtherDirective} from './myDirectives';\n     *\n     * @Component({\n     *   selector: 'my-component',\n     *   templateUrl: 'myComponent.html',\n     *   directives: [COMMON_DIRECTIVES, OtherDirective]\n     * })\n     * export class MyComponent {\n     *   ...\n     * }\n     * ```\n     *\n     * @experimental Contains forms which are experimental.\n     */\n    var COMMON_DIRECTIVES = CORE_DIRECTIVES;\n\n    /**\n     * A collection of Angular core pipes that are likely to be used in each and every\n     * application.\n     *\n     * This collection can be used to quickly enumerate all the built-in pipes in the `pipes`\n     * property of the `@Component` decorator.\n     *\n     * @experimental Contains i18n pipes which are experimental\n     */\n    var COMMON_PIPES = [\n        AsyncPipe,\n        UpperCasePipe,\n        LowerCasePipe,\n        JsonPipe,\n        SlicePipe,\n        DecimalPipe,\n        PercentPipe,\n        CurrencyPipe,\n        DatePipe,\n        I18nPluralPipe,\n        I18nSelectPipe,\n    ];\n\n    // Note: This does not contain the location providers,\n    // as they need some platform specific implementations to work.\n    /**\n     * The module that includes all the basic Angular directives like {@link NgIf}, ${link NgFor}, ...\n     *\n     * @stable\n     */\n    var CommonModule = (function () {\n        function CommonModule() {\n        }\n        CommonModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n                        exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n                        providers: [\n                            { provide: NgLocalization, useClass: NgLocaleLocalization },\n                        ],\n                    },] },\n        ];\n        /** @nocollapse */\n        CommonModule.ctorParameters = [];\n        return CommonModule;\n    }());\n\n    exports.NgLocalization = NgLocalization;\n    exports.CommonModule = CommonModule;\n    exports.AsyncPipe = AsyncPipe;\n    exports.DatePipe = DatePipe;\n    exports.I18nPluralPipe = I18nPluralPipe;\n    exports.I18nSelectPipe = I18nSelectPipe;\n    exports.JsonPipe = JsonPipe;\n    exports.LowerCasePipe = LowerCasePipe;\n    exports.CurrencyPipe = CurrencyPipe;\n    exports.DecimalPipe = DecimalPipe;\n    exports.PercentPipe = PercentPipe;\n    exports.SlicePipe = SlicePipe;\n    exports.UpperCasePipe = UpperCasePipe;\n    exports.NgClass = NgClass;\n    exports.NgFor = NgFor;\n    exports.NgIf = NgIf;\n    exports.NgPlural = NgPlural;\n    exports.NgPluralCase = NgPluralCase;\n    exports.NgStyle = NgStyle;\n    exports.NgSwitch = NgSwitch;\n    exports.NgSwitchCase = NgSwitchCase;\n    exports.NgSwitchDefault = NgSwitchDefault;\n    exports.NgTemplateOutlet = NgTemplateOutlet;\n    exports.PlatformLocation = PlatformLocation;\n    exports.LocationStrategy = LocationStrategy;\n    exports.APP_BASE_HREF = APP_BASE_HREF;\n    exports.HashLocationStrategy = HashLocationStrategy;\n    exports.PathLocationStrategy = PathLocationStrategy;\n    exports.Location = Location;\n\n}));\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar core_1 = __webpack_require__(3);\r\nvar platform_browser_1 = __webpack_require__(22);\r\nvar app_component_1 = __webpack_require__(25);\r\nvar AppModule = (function () {\r\n    function AppModule() {\r\n    }\r\n    AppModule = __decorate([\r\n        core_1.NgModule({\r\n            imports: [platform_browser_1.BrowserModule],\r\n            declarations: [app_component_1.AppComponent],\r\n            bootstrap: [app_component_1.AppComponent]\r\n        }), \r\n        __metadata('design:paramtypes', [])\r\n    ], AppModule);\r\n    return AppModule;\r\n}());\r\nexports.AppModule = AppModule;\r\n//# sourceMappingURL=app-module.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvYXBwLW1vZHVsZS5qcz8wN2JmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGNvcmVfMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKTtcclxudmFyIHBsYXRmb3JtX2Jyb3dzZXJfMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInKTtcclxudmFyIGFwcF9jb21wb25lbnRfMSA9IHJlcXVpcmUoJy4vYXBwLWNvbXBvbmVudCcpO1xyXG52YXIgQXBwTW9kdWxlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFwcE1vZHVsZSgpIHtcclxuICAgIH1cclxuICAgIEFwcE1vZHVsZSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGNvcmVfMS5OZ01vZHVsZSh7XHJcbiAgICAgICAgICAgIGltcG9ydHM6IFtwbGF0Zm9ybV9icm93c2VyXzEuQnJvd3Nlck1vZHVsZV0sXHJcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW2FwcF9jb21wb25lbnRfMS5BcHBDb21wb25lbnRdLFxyXG4gICAgICAgICAgICBib290c3RyYXA6IFthcHBfY29tcG9uZW50XzEuQXBwQ29tcG9uZW50XVxyXG4gICAgICAgIH0pLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgQXBwTW9kdWxlKTtcclxuICAgIHJldHVybiBBcHBNb2R1bGU7XHJcbn0oKSk7XHJcbmV4cG9ydHMuQXBwTW9kdWxlID0gQXBwTW9kdWxlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtbW9kdWxlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvYXBwLW1vZHVsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar app_component_html_1 = __webpack_require__(26);\r\nvar core_1 = __webpack_require__(3);\r\nvar AppComponent = (function () {\r\n    function AppComponent() {\r\n    }\r\n    AppComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'app-component',\r\n            template: app_component_html_1.APP_COMPONENT_TEMPLATE,\r\n            styleUrls: [\"app/app-component.css\"]\r\n        }), \r\n        __metadata('design:paramtypes', [])\r\n    ], AppComponent);\r\n    return AppComponent;\r\n}());\r\nexports.AppComponent = AppComponent;\r\n//# sourceMappingURL=app-component.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvYXBwLWNvbXBvbmVudC5qcz81NWFlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGFwcF9jb21wb25lbnRfaHRtbF8xID0gcmVxdWlyZSgnLi9hcHAtY29tcG9uZW50Lmh0bWwnKTtcclxudmFyIGNvcmVfMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKTtcclxudmFyIEFwcENvbXBvbmVudCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBcHBDb21wb25lbnQoKSB7XHJcbiAgICB9XHJcbiAgICBBcHBDb21wb25lbnQgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBjb3JlXzEuQ29tcG9uZW50KHtcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICdhcHAtY29tcG9uZW50JyxcclxuICAgICAgICAgICAgdGVtcGxhdGU6IGFwcF9jb21wb25lbnRfaHRtbF8xLkFQUF9DT01QT05FTlRfVEVNUExBVEUsXHJcbiAgICAgICAgICAgIHN0eWxlVXJsczogW1wiYXBwL2FwcC1jb21wb25lbnQuY3NzXCJdXHJcbiAgICAgICAgfSksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXHJcbiAgICBdLCBBcHBDb21wb25lbnQpO1xyXG4gICAgcmV0dXJuIEFwcENvbXBvbmVudDtcclxufSgpKTtcclxuZXhwb3J0cy5BcHBDb21wb25lbnQgPSBBcHBDb21wb25lbnQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1jb21wb25lbnQuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2FwcC9hcHAtY29tcG9uZW50LmpzXG4gKiogbW9kdWxlIGlkID0gMjVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 26 */
/***/ function(module, exports) {

	eval("\"use strict\";\r\nexports.APP_COMPONENT_TEMPLATE = '<h1>My First Angular ts App</h1>';\r\n//# sourceMappingURL=app-component.html.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvYXBwLWNvbXBvbmVudC5odG1sLmpzPzAyN2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbmV4cG9ydHMuQVBQX0NPTVBPTkVOVF9URU1QTEFURSA9ICc8aDE+TXkgRmlyc3QgQW5ndWxhciB0cyBBcHA8L2gxPic7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1jb21wb25lbnQuaHRtbC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL2FwcC1jb21wb25lbnQuaHRtbC5qc1xuICoqIG1vZHVsZSBpZCA9IDI2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }
]);